{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "ques_id": "62e60f43d76274f8a4026e28", "code": ["def hydrate_time(nanoseconds, tz=None):\n\tif nanoseconds is None:\n\t\treturn None\n\tif not isinstance(nanoseconds, int):\n\t\traise TypeError('nanoseconds must be an int')\n\tif nanoseconds < 0:\n\t\traise ValueError('nanoseconds must be positive')\n\tif nanoseconds % 1000000 != 0:\n\t\traise ValueError('nanoseconds must be a multiple of 1000000')\n\tif tz is None:\n\t\ttz = timezone.utc\n\treturn time(nanoseconds // 1000000, tzinfo=tz)\n\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def hydrate_time(nanoseconds, tz=None):\n\tif nanoseconds is None:\n\t\treturn None\n\tif not isinstance(nanoseconds, int):\n\t\traise TypeError('nanoseconds must be an int')\n\tif nanoseconds < 0:\n\t\traise ValueError('nanoseconds must be positive')\n\tif nanoseconds % 1000000 != 0:\n\t\traise ValueError('nanoseconds must be a multiple of 1000000')\n\tif tz is None:\n\t\ttz = timezone.utc\n\treturn time(nanoseconds // 1000000, tzinfo=tz)\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "ques_id": "62e60f3bd76274f8a4026e10", "code": ["def dehydrate_timedelta(value):\n\treturn Structure(value.days, value.seconds, value.microseconds)\n\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_timedelta(value):\n\treturn Structure(value.days, value.seconds, value.microseconds)\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "ques_id": "62e60f37d76274f8a4026dfd", "code": ["def dehydrate_time(value):\n\treturn Structure(value.ticks)\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_time(value):\n\treturn Structure(value.ticks)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "ques_id": "62e60f33d76274f8a4026de9", "code": ["def dehydrate_point(value):\n\tif len(value) == 2:\n\t\treturn Point(value[0], value[1])\n\telif len(value) == 3:\n\t\treturn Point(value[0], value[1], value[2])\n\telif len(value) == 4:\n\t\treturn Point(value[0], value[1], value[2], value[3])\n\telse:\n\t\traise ValueError(\"Invalid point value: %s\" % value)\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_point(value):\n\tif len(value) == 2:\n\t\treturn Point(value[0], value[1])\n\telif len(value) == 3:\n\t\treturn Point(value[0], value[1], value[2])\n\telif len(value) == 4:\n\t\treturn Point(value[0], value[1], value[2], value[3])\n\telse:\n\t\traise ValueError(\"Invalid point value: %s\" % value)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "ques_id": "62e60ed4d76274f8a4026da0", "code": ["def keys(self):\n\treturn self.__keys\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def keys(self):\n\treturn self.__keys\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60ecfd76274f8a4026d6a", "code": ["def protocol_handlers(cls, protocol_version=None):\n\tif protocol_version is None:\n\t\treturn cls.protocol_handlers\n\telif protocol_version in cls.protocol_handlers:\n\t\treturn cls.protocol_handlers[protocol_version]\n\telse:\n\t\traise ValueError(\"Unsupported protocol version: %s\" % protocol_version)\n\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n\tif protocol_version is None:\n\t\treturn cls.protocol_handlers\n\telif protocol_version in cls.protocol_handlers:\n\t\treturn cls.protocol_handlers[protocol_version]\n\telse:\n\t\traise ValueError(\"Unsupported protocol version: %s\" % protocol_version)\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "ques_id": "62e60e49d76274f8a4026d25", "code": ["def unit_of_work(metadata=None, timeout=None):\n\tdef decorator(func):\n\t\t@wraps(func)\n\t\tdef wrapper(*args, **kwargs):\n\t\t\treturn func(*args, **kwargs)\n\t\twrapper.metadata = metadata\n\t\twrapper.timeout = timeout\n\t\treturn wrapper\n\treturn decorator\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def unit_of_work(metadata=None, timeout=None):\n\tdef decorator(func):\n\t\t@wraps(func)\n\t\tdef wrapper(*args, **kwargs):\n\t\t\treturn func(*args, **kwargs)\n\t\twrapper.metadata = metadata\n\t\twrapper.timeout = timeout\n\t\treturn wrapper\n\treturn decorator\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "ques_id": "62e60e05d76274f8a4026cfd", "code": ["def index(self, key):\n\treturn self.__hash(key) % self.size\n\n\tdef __getitem__(self, key):\n\t\t\"\"\"\n\t\tReturns the value of the key.\n\t\t\"\"\"\n\t\treturn self.buckets[self.index(key)].get(key)\n\n\tdef __setitem__(self, key, value):\n\t\t\"\"\"\n\t\tSets the key value pair in the hash table.\n\t\t\"\"\"\n\t\tbucket = self.buckets[self.index(key)]\n\t\tif bucket.get(key) is None:\n\t\t\tbucket.append((key, value))\n\t\telse:\n\t\t\tbucket.replace((key, value))\n\n\tdef __delitem__(self, key):\n\t\t\"\"\"\n\t\tDeletes the key value pair from the hash table.\n\t\t\"\"\"\n\t\tbucket = self.buckets[self.index(key)]\n\t\tbucket.remove(key)\n\n\tdef __len__(self):\n\t\t\"\"\"\n\t\tReturns the number of key value pairs in the hash table.\n\t\t\"\"\"\n\t\tcount =\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def index(self, key):\n\treturn self.__hash(key) % self.size\n\n\tdef __getitem__(self, key):\n\t\t\"\"\"\n\t\tReturns the value of the key.\n\t\t\"\"\"\n\t\treturn self.buckets[self.index(key)].get(key)\n\n\tdef __setitem__(self, key, value):\n\t\t\"\"\"\n\t\tSets the key value pair in the hash table.\n\t\t\"\"\"\n\t\tbucket = self.buckets[self.index(key)]\n\t\tif bucket.get(key) is None:\n\t\t\tbucket.append((key, value))\n\t\telse:\n\t\t\tbucket.replace((key, value))\n\n\tdef __delitem__(self, key):\n\t\t\"\"\"\n\t\tDeletes the key value pair from the hash table.\n\t\t\"\"\"\n\t\tbucket = self.buckets[self.index(key)]\n\t\tbucket.remove(key)\n\n\tdef __len__(self):\n\t\t\"\"\"\n\t\tReturns the number of key value pairs in the hash table.\n\t\t\"\"\"\n\t\tcount =\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "ques_id": "62e60da4d76274f8a4026cf1", "code": ["def values(self, *keys):\n\treturn [self[key] for key in keys]\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def values(self, *keys):\n\treturn [self[key] for key in keys]\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "ques_id": "62e60b10d76274f8a4026ccd", "code": ["def data(self, *keys):\n\treturn self.__data.get(keys)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def data(self, *keys):\n\treturn self.__data.get(keys)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "ques_id": "62e6087bd76274f8a4026bfa", "code": ["def pop_u16(self):\n\treturn (self.data.pop() << 8) | self.data.pop()\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop_u16(self):\n\treturn (self.data.pop() << 8) | self.data.pop()\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "ques_id": "62e6087ad76274f8a4026bf2", "code": ["def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n\tself._send_message(MessageType.DISCARD,\n\t\t\t\t\t   n=n,\n\t\t\t\t\t   qid=qid,\n\t\t\t\t\t   dehydration_hooks=dehydration_hooks,\n\t\t\t\t\t   hydration_hooks=hydration_hooks,\n\t\t\t\t\t   **handlers)\n\n\treturn self._response\n\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n\tself._send_message(MessageType.DISCARD,\n\t\t\t\t\t   n=n,\n\t\t\t\t\t   qid=qid,\n\t\t\t\t\t   dehydration_hooks=dehydration_hooks,\n\t\t\t\t\t   hydration_hooks=hydration_hooks,\n\t\t\t\t\t   **handlers)\n\n\treturn self._response\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "ques_id": "62e60879d76274f8a4026bec", "code": ["def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n\tif self.closed:\n\t\traise RuntimeError(\"Connection is closed\")\n\tif self.in_tx:\n\t\traise RuntimeError(\"Connection is already in a transaction\")\n\tif self.in_rq:\n\t\traise RuntimeError(\"Connection is already in a request\")\n\tif self.in_sr:\n\t\traise RuntimeError(\"Connection is already in a summary request\")\n\tif self.in_cr:\n\t\traise RuntimeError(\"Connection is already in a commit request\")\n\tself.in_tx = True\n\tself.in_rq = True\n\tself.tx_metadata = metadata\n\tself.tx_timeout = timeout\n\tself.tx_db = db\n\tself.tx_imp_user = imp_user\n\tself.tx_dehydration_hooks = dehydration_hooks\n\tself.tx_hydration_hooks = hydration_hooks\n\tself.tx_handlers = handlers\n\tself.tx_bookmarks = bookmarks\n\tself.tx_mode = mode\n\treturn self.send_begin(mode, bookmarks, metadata, timeout, db, imp_\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n\tif self.closed:\n\t\traise RuntimeError(\"Connection is closed\")\n\tif self.in_tx:\n\t\traise RuntimeError(\"Connection is already in a transaction\")\n\tif self.in_rq:\n\t\traise RuntimeError(\"Connection is already in a request\")\n\tif self.in_sr:\n\t\traise RuntimeError(\"Connection is already in a summary request\")\n\tif self.in_cr:\n\t\traise RuntimeError(\"Connection is already in a commit request\")\n\tself.in_tx = True\n\tself.in_rq = True\n\tself.tx_metadata = metadata\n\tself.tx_timeout = timeout\n\tself.tx_db = db\n\tself.tx_imp_user = imp_user\n\tself.tx_dehydration_hooks = dehydration_hooks\n\tself.tx_hydration_hooks = hydration_hooks\n\tself.tx_handlers = handlers\n\tself.tx_bookmarks = bookmarks\n\tself.tx_mode = mode\n\treturn self.send_begin(mode, bookmarks, metadata, timeout, db, imp_\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "ques_id": "62e60723d76274f8a4026b75", "code": ["def round_half_to_even(n):\n\treturn round(n * 2) / 2\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def round_half_to_even(n):\n\treturn round(n * 2) / 2\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "ques_id": "62e60707d76274f8a4026b69", "code": ["def point_type(name, fields, srid_map):\n\tclass Point(object):\n\t\tdef __init__(self, *args, **kwargs):\n\t\t\tfor i, field in enumerate(fields):\n\t\t\t\tsetattr(self, field, args[i])\n\t\t\tself.srid = kwargs.get('srid', 4326)\n\t\t\tself.srid_map = srid_map\n\t\t\tself.name = name\n\t\t\tself.fields = fields\n\n\t\tdef __repr__(self):\n\t\t\treturn '<%s: %s>' % (self.name, ', '.join(['%s=%s' % (field, getattr(self, field)) for field in self.fields]))\n\n\t\tdef __str__(self):\n\t\t\treturn 'POINT(%s)' % ' '.join([str(getattr(self, field)) for field in self.fields])\n\n\t\tdef __eq__(self, other):\n\t\t\treturn all([getattr(self, field) == getattr(other, field) for field in self.fields])\n\n\t\tdef __\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def point_type(name, fields, srid_map):\n\tclass Point(object):\n\t\tdef __init__(self, *args, **kwargs):\n\t\t\tfor i, field in enumerate(fields):\n\t\t\t\tsetattr(self, field, args[i])\n\t\t\tself.srid = kwargs.get('srid', 4326)\n\t\t\tself.srid_map = srid_map\n\t\t\tself.name = name\n\t\t\tself.fields = fields\n\n\t\tdef __repr__(self):\n\t\t\treturn '<%s: %s>' % (self.name, ', '.join(['%s=%s' % (field, getattr(self, field)) for field in self.fields]))\n\n\t\tdef __str__(self):\n\t\t\treturn 'POINT(%s)' % ' '.join([str(getattr(self, field)) for field in self.fields])\n\n\t\tdef __eq__(self, other):\n\t\t\treturn all([getattr(self, field) == getattr(other, field) for field in self.fields])\n\n\t\tdef __\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "ques_id": "62e5dc9ed76274f8a4026b5b", "code": ["def deprecated(message):\n\tdef decorator(func):\n\t\t@functools.wraps(func)\n\t\tdef wrapper(*args, **kwargs):\n\t\t\twarnings.warn(message, category=DeprecationWarning, stacklevel=2)\n\t\t\treturn func(*args, **kwargs)\n\t\treturn wrapper\n\treturn decorator\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deprecated(message):\n\tdef decorator(func):\n\t\t@functools.wraps(func)\n\t\tdef wrapper(*args, **kwargs):\n\t\t\twarnings.warn(message, category=DeprecationWarning, stacklevel=2)\n\t\t\treturn func(*args, **kwargs)\n\t\treturn wrapper\n\treturn decorator\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "ques_id": "62e4fc3c85ea98643089041e", "code": ["def _inline_r_setup(code:\n\treturn f\"\"\"\n\t\toptions(warn=1)\n\t\toptions(warnPartialMatchArgs=FALSE)\n\t\toptions(warnPartialMatchAttr=FALSE)\n\t\toptions(warnPartialMatchDollar=FALSE)\n\t\toptions(warnPartialMatchDollar=FALSE)\n\t\toptions(warnPartialMatch=FALSE)\n\t\toptions(warnPartialMatchCall=FALSE)\n\t\toptions(warnPartialMatchArgs=FALSE)\n\t\toptions(warnPartialMatchAttr=FALSE)\n\t\toptions(warnPartialMatchDollar=FALSE)\n\t\toptions(warnPartialMatchDollar=FALSE)\n\t\toptions(warnPartialMatch=FALSE)\n\t\toptions(warnPartialMatchCall=FALSE)\n\t\toptions(warn=1)\n\t\toptions(warnPartialMatchArgs=FALSE)\n\t\toptions(warnPartialMatchAttr=FALSE)\n\t\toptions(warnPartialMatchDollar=FALSE)\n\t\toptions(warnPartialMatchDollar=FALSE)\n\t\toptions\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _inline_r_setup(code:\n\treturn f\"\"\"\n\t\toptions(warn=1)\n\t\toptions(warnPartialMatchArgs=FALSE)\n\t\toptions(warnPartialMatchAttr=FALSE)\n\t\toptions(warnPartialMatchDollar=FALSE)\n\t\toptions(warnPartialMatchDollar=FALSE)\n\t\toptions(warnPartialMatch=FALSE)\n\t\toptions(warnPartialMatchCall=FALSE)\n\t\toptions(warnPartialMatchArgs=FALSE)\n\t\toptions(warnPartialMatchAttr=FALSE)\n\t\toptions(warnPartialMatchDollar=FALSE)\n\t\toptions(warnPartialMatchDollar=FALSE)\n\t\toptions(warnPartialMatch=FALSE)\n\t\toptions(warnPartialMatchCall=FALSE)\n\t\toptions(warn=1)\n\t\toptions(warnPartialMatchArgs=FALSE)\n\t\toptions(warnPartialMatchAttr=FALSE)\n\t\toptions(warnPartialMatchDollar=FALSE)\n\t\toptions(warnPartialMatchDollar=FALSE)\n\t\toptions\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "ques_id": "62e4fbda85ea986430890405", "code": ["def xargs(\n        cmd:\n\tif not varargs:\n\t\treturn\n\tif target_concurrency < 1:\n\t\traise ValueError(\"target_concurrency must be >= 1\")\n\n\t# TODO: Add support for -n and -P\n\t# TODO: Add support for -I\n\t# TODO: Add support for -r\n\t# TODO: Add support for -E\n\t# TODO: Add support for -t\n\t# TODO: Add support for -x\n\t# TODO: Add support for -o\n\t# TODO: Add support for -a\n\t# TODO: Add support for -d\n\t# TODO: Add support for -e\n\t# TODO: Add support for -L\n\t# TODO: Add support for -s\n\t# TODO: Add support for -u\n\t# TODO: Add support for -p\n\t# TODO: Add support for -l\n\t# TODO: Add support for -i\n\t# TODO: Add support for -J\n\t# TODO: Add support for -z\n\t# TODO: Add support for -0\n\t# TODO: Add support for\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def xargs(\n        cmd:\n\tif not varargs:\n\t\treturn\n\tif target_concurrency < 1:\n\t\traise ValueError(\"target_concurrency must be >= 1\")\n\n\t# TODO: Add support for -n and -P\n\t# TODO: Add support for -I\n\t# TODO: Add support for -r\n\t# TODO: Add support for -E\n\t# TODO: Add support for -t\n\t# TODO: Add support for -x\n\t# TODO: Add support for -o\n\t# TODO: Add support for -a\n\t# TODO: Add support for -d\n\t# TODO: Add support for -e\n\t# TODO: Add support for -L\n\t# TODO: Add support for -s\n\t# TODO: Add support for -u\n\t# TODO: Add support for -p\n\t# TODO: Add support for -l\n\t# TODO: Add support for -i\n\t# TODO: Add support for -J\n\t# TODO: Add support for -z\n\t# TODO: Add support for -0\n\t# TODO: Add support for\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "ques_id": "62e4fbda85ea986430890403", "code": ["def _shuffled(seq:\n\trandom.seed(FIXED_RANDOM_SEED)\n\treturn random.sample(seq, len(seq))\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _shuffled(seq:\n\trandom.seed(FIXED_RANDOM_SEED)\n\treturn random.sample(seq, len(seq))\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "ques_id": "62e4fb6585ea98643089032b", "code": ["def parse_version(s:\n\treturn tuple(map(int, s.split('.')))\n\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def parse_version(s:\n\treturn tuple(map(int, s.split('.')))\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "ques_id": "62e4fb4d85ea9864308902e7", "code": ["def normalize_cmd(cmd:\n\tif len(cmd) == 0:\n\t\treturn cmd\n\tif cmd[0].endswith(\".exe\"):\n\t\tcmd[0] = os.path.join(os.getcwd(), cmd[0])\n\treturn cmd\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def normalize_cmd(cmd:\n\tif len(cmd) == 0:\n\t\treturn cmd\n\tif cmd[0].endswith(\".exe\"):\n\t\tcmd[0] = os.path.join(os.getcwd(), cmd[0])\n\treturn cmd\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "ques_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["def cached(cache, key=hashkey, lock=None):\n\tdef decorator(func):\n\t\t@wraps(func)\n\t\tdef wrapper(*args, **kwargs):\n\t\t\tif lock:\n\t\t\t\twith lock:\n\t\t\t\t\treturn _cached(cache, key, func, *args, **kwargs)\n\t\t\telse:\n\t\t\t\treturn _cached(cache, key, func, *args, **kwargs)\n\t\treturn wrapper\n\treturn decorator\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def cached(cache, key=hashkey, lock=None):\n\tdef decorator(func):\n\t\t@wraps(func)\n\t\tdef wrapper(*args, **kwargs):\n\t\t\tif lock:\n\t\t\t\twith lock:\n\t\t\t\t\treturn _cached(cache, key, func, *args, **kwargs)\n\t\t\telse:\n\t\t\t\treturn _cached(cache, key, func, *args, **kwargs)\n\t\treturn wrapper\n\treturn decorator\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "ques_id": "62b8d24048ba5a41d1c3f49f", "code": ["def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n\tdef decorating_function(user_function):\n\t\tcache = LRUCache(maxsize, ttl, timer, typed)\n\t\t@functools.wraps(user_function)\n\t\tdef wrapper(*args, **kwds):\n\t\t\tkey = args\n\t\t\tif kwds:\n\t\t\t\tkey += tuple(sorted(kwds.items()))\n\t\t\ttry:\n\t\t\t\tresult = cache[key]\n\t\t\t\twrapper.hits += 1\n\t\t\texcept KeyError:\n\t\t\t\tresult = user_function(*args, **kwds)\n\t\t\t\tcache[key] = result\n\t\t\t\twrapper.misses += 1\n\t\t\treturn result\n\t\tdef cache_info():\n\t\t\t\"\"\"Report cache statistics\"\"\"\n\t\t\treturn _CacheInfo(wrapper.hits, wrapper.misses, maxsize, len(cache), cache.currsize)\n\t\tdef cache_clear():\n\t\t\t\"\"\"Clear the cache and cache statistics\"\"\"\n\t\t\tcache.clear()\n\t\t\twrapper.hits\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n\tdef decorating_function(user_function):\n\t\tcache = LRUCache(maxsize, ttl, timer, typed)\n\t\t@functools.wraps(user_function)\n\t\tdef wrapper(*args, **kwds):\n\t\t\tkey = args\n\t\t\tif kwds:\n\t\t\t\tkey += tuple(sorted(kwds.items()))\n\t\t\ttry:\n\t\t\t\tresult = cache[key]\n\t\t\t\twrapper.hits += 1\n\t\t\texcept KeyError:\n\t\t\t\tresult = user_function(*args, **kwds)\n\t\t\t\tcache[key] = result\n\t\t\t\twrapper.misses += 1\n\t\t\treturn result\n\t\tdef cache_info():\n\t\t\t\"\"\"Report cache statistics\"\"\"\n\t\t\treturn _CacheInfo(wrapper.hits, wrapper.misses, maxsize, len(cache), cache.currsize)\n\t\tdef cache_clear():\n\t\t\t\"\"\"Clear the cache and cache statistics\"\"\"\n\t\t\tcache.clear()\n\t\t\twrapper.hits\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "ques_id": "62b8d23b48ba5a41d1c3f49a", "code": ["def mru_cache(maxsize=128, typed=False):\n\tdef decorating_function(user_function):\n\t\tcache = OrderedDict()\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def mru_cache(maxsize=128, typed=False):\n\tdef decorating_function(user_function):\n\t\tcache = OrderedDict()\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "ques_id": "62b8d23948ba5a41d1c3f498", "code": ["def lru_cache(maxsize=128, typed=False):\n\tdef decorating_function(user_function):\n\t\tcache = LRUCache(maxsize, typed)\n\t\t@wraps(user_function)\n\t\tdef wrapper(*args, **kwds):\n\t\t\tkey = args\n\t\t\tif kwds:\n\t\t\t\tkey += tuple(sorted(kwds.items()))\n\t\t\tresult = cache[key]\n\t\t\tif result is NO_RESULT:\n\t\t\t\tresult = user_function(*args, **kwds)\n\t\t\t\tcache[key] = result\n\t\t\treturn result\n\t\tdef clear():\n\t\t\tcache.clear()\n\t\twrapper.clear = clear\n\t\treturn wrapper\n\treturn decorating_function\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lru_cache(maxsize=128, typed=False):\n\tdef decorating_function(user_function):\n\t\tcache = LRUCache(maxsize, typed)\n\t\t@wraps(user_function)\n\t\tdef wrapper(*args, **kwds):\n\t\t\tkey = args\n\t\t\tif kwds:\n\t\t\t\tkey += tuple(sorted(kwds.items()))\n\t\t\tresult = cache[key]\n\t\t\tif result is NO_RESULT:\n\t\t\t\tresult = user_function(*args, **kwds)\n\t\t\t\tcache[key] = result\n\t\t\treturn result\n\t\tdef clear():\n\t\t\tcache.clear()\n\t\twrapper.clear = clear\n\t\treturn wrapper\n\treturn decorating_function\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "ques_id": "62b8d23748ba5a41d1c3f496", "code": ["def lfu_cache(maxsize=128, typed=False):\n\tdef decorating_function(user_function):\n\t\tcache = LFUCache(maxsize, typed)\n\t\t@wraps(user_function)\n\t\tdef wrapper(*args, **kwds):\n\t\t\tkey = args\n\t\t\tif kwds:\n\t\t\t\tkey += tuple(sorted(kwds.items()))\n\t\t\tresult = cache[key]\n\t\t\tif result is _NONE:\n\t\t\t\tresult = user_function(*args, **kwds)\n\t\t\t\tcache[key] = result\n\t\t\treturn result\n\t\tdef clear():\n\t\t\t\"\"\"Clear the cache and cache statistics.\"\"\"\n\t\t\tcache.clear()\n\t\tdef cache_info():\n\t\t\t\"\"\"Report cache statistics\"\"\"\n\t\t\treturn cache.info()\n\t\tdef cache_print():\n\t\t\t\"\"\"Print cache statistics\"\"\"\n\t\t\tcache.print()\n\t\twrapper.cache_info = cache_info\n\t\twrapper.cache_clear = clear\n\t\twrapper.cache_print = cache_print\n\t\treturn wrapper\n\treturn\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lfu_cache(maxsize=128, typed=False):\n\tdef decorating_function(user_function):\n\t\tcache = LFUCache(maxsize, typed)\n\t\t@wraps(user_function)\n\t\tdef wrapper(*args, **kwds):\n\t\t\tkey = args\n\t\t\tif kwds:\n\t\t\t\tkey += tuple(sorted(kwds.items()))\n\t\t\tresult = cache[key]\n\t\t\tif result is _NONE:\n\t\t\t\tresult = user_function(*args, **kwds)\n\t\t\t\tcache[key] = result\n\t\t\treturn result\n\t\tdef clear():\n\t\t\t\"\"\"Clear the cache and cache statistics.\"\"\"\n\t\t\tcache.clear()\n\t\tdef cache_info():\n\t\t\t\"\"\"Report cache statistics\"\"\"\n\t\t\treturn cache.info()\n\t\tdef cache_print():\n\t\t\t\"\"\"Print cache statistics\"\"\"\n\t\t\tcache.print()\n\t\twrapper.cache_info = cache_info\n\t\twrapper.cache_clear = clear\n\t\twrapper.cache_print = cache_print\n\t\treturn wrapper\n\treturn\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "ques_id": "62b8d22f48ba5a41d1c3f488", "code": ["def popitem(self):\n\tif self.head is None:\n\t\traise KeyError('Dictionary is empty')\n\telse:\n\t\tkey = self.head.key\n\t\tvalue = self.head.value\n\t\tself.head = self.head.next\n\t\tself.size -= 1\n\t\treturn (key, value)\n\n\tdef setdefault(self, key, default=None):\n\t\t\"\"\"\n\t\tIf key is in the dictionary, return its value. If not, insert key with a value of default and return default. default defaults to None.\n\t\t\"\"\"\n\t\tif key in self:\n\t\t\treturn self[key]\n\t\telse:\n\t\t\tself[key] = default\n\t\t\treturn default\n\n\tdef update(self, *args, **kwargs):\n\t\t\"\"\"\n\t\tUpdate the dictionary with the key/value pairs from other, overwriting existing keys. Return None.\n\t\t\"\"\"\n\t\tif len(args) > 1:\n\t\t\traise TypeError('update expected at most 1 arguments, got %d' % len(args))\n\t\tother = dict(*args, **\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n\tif self.head is None:\n\t\traise KeyError('Dictionary is empty')\n\telse:\n\t\tkey = self.head.key\n\t\tvalue = self.head.value\n\t\tself.head = self.head.next\n\t\tself.size -= 1\n\t\treturn (key, value)\n\n\tdef setdefault(self, key, default=None):\n\t\t\"\"\"\n\t\tIf key is in the dictionary, return its value. If not, insert key with a value of default and return default. default defaults to None.\n\t\t\"\"\"\n\t\tif key in self:\n\t\t\treturn self[key]\n\t\telse:\n\t\t\tself[key] = default\n\t\t\treturn default\n\n\tdef update(self, *args, **kwargs):\n\t\t\"\"\"\n\t\tUpdate the dictionary with the key/value pairs from other, overwriting existing keys. Return None.\n\t\t\"\"\"\n\t\tif len(args) > 1:\n\t\t\traise TypeError('update expected at most 1 arguments, got %d' % len(args))\n\t\tother = dict(*args, **\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "ques_id": "62b8d22a48ba5a41d1c3f47e", "code": ["def setdefault(self, key, default=None):\n\tif key in self:\n\t\treturn self[key]\n\telse:\n\t\tself[key] = default\n\t\treturn default\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def setdefault(self, key, default=None):\n\tif key in self:\n\t\treturn self[key]\n\telse:\n\t\tself[key] = default\n\t\treturn default\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "ques_id": "62b8d22948ba5a41d1c3f47c", "code": ["def get(self, key, default=None):\n\treturn self.__dict__.get(key, default)\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get(self, key, default=None):\n\treturn self.__dict__.get(key, default)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "ques_id": "62b8d22548ba5a41d1c3f472", "code": ["def cachedmethod(cache, key=hashkey, lock=None):\n\tdef decorator(func):\n\t\tdef wrapper(*args, **kwargs):\n\t\t\tif lock is not None:\n\t\t\t\tlock.acquire()\n\t\t\ttry:\n\t\t\t\tk = key(*args, **kwargs)\n\t\t\t\tif k not in cache:\n\t\t\t\t\tcache[k] = func(*args, **kwargs)\n\t\t\t\treturn cache[k]\n\t\t\tfinally:\n\t\t\t\tif lock is not None:\n\t\t\t\t\tlock.release()\n\t\treturn wrapper\n\treturn decorator\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n\tdef decorator(func):\n\t\tdef wrapper(*args, **kwargs):\n\t\t\tif lock is not None:\n\t\t\t\tlock.acquire()\n\t\t\ttry:\n\t\t\t\tk = key(*args, **kwargs)\n\t\t\t\tif k not in cache:\n\t\t\t\t\tcache[k] = func(*args, **kwargs)\n\t\t\t\treturn cache[k]\n\t\t\tfinally:\n\t\t\t\tif lock is not None:\n\t\t\t\t\tlock.release()\n\t\treturn wrapper\n\treturn decorator\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "ques_id": "62b8c517e0d34b282c18122e", "code": ["def extostr(cls, e, max_level=30, max_path_level=5):\n\tif max_level <= 0:\n\t\treturn '<Maximum recursion level reached>'\n\tformatted = '%s: %s' % (cls.__name__, e)\n\tif e.__context__ is not None:\n\t\tformatted = '%s\\n  during handling of the above exception, another ' \\\n\t\t\t'exception occurred:\\n\\n%s' % (\n\t\t\t\tformatted,\n\t\t\t\textostr(type(e.__context__), e.__context__, max_level - 1))\n\tif e.__cause__ is not None:\n\t\tformatted = '%s\\n  the above exception was the direct cause of the ' \\\n\t\t\t'following exception:\\n\\n%s' % (\n\t\t\t\tformatted,\n\t\t\t\textostr(type(e.__cause__), e.__cause__, max_level - 1))\n\tif e.__traceback__ is not None:\n\t\tformatted = '%s\\n  during handling of the above exception, the ' \\\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n\tif max_level <= 0:\n\t\treturn '<Maximum recursion level reached>'\n\tformatted = '%s: %s' % (cls.__name__, e)\n\tif e.__context__ is not None:\n\t\tformatted = '%s\\n  during handling of the above exception, another ' \\\n\t\t\t'exception occurred:\\n\\n%s' % (\n\t\t\t\tformatted,\n\t\t\t\textostr(type(e.__context__), e.__context__, max_level - 1))\n\tif e.__cause__ is not None:\n\t\tformatted = '%s\\n  the above exception was the direct cause of the ' \\\n\t\t\t'following exception:\\n\\n%s' % (\n\t\t\t\tformatted,\n\t\t\t\textostr(type(e.__cause__), e.__cause__, max_level - 1))\n\tif e.__traceback__ is not None:\n\t\tformatted = '%s\\n  during handling of the above exception, the ' \\\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "ques_id": "62b8bbbfe0d34b282c181210", "code": ["def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n\tif overwrite:\n\t\tmode = 'w'\n\telse:\n\t\tmode = 'a'\n\twith open(file_name, mode, encoding=encoding) as f:\n\t\tf.write(text_buffer)\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n\tif overwrite:\n\t\tmode = 'w'\n\telse:\n\t\tmode = 'a'\n\twith open(file_name, mode, encoding=encoding) as f:\n\t\tf.write(text_buffer)\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "ques_id": "62b8bbbfe0d34b282c18120f", "code": ["def file_to_textbuffer(file_name, encoding):\n\tif os.path.isfile(file_name):\n\t\ttry:\n\t\t\tfile_content = open(file_name, 'r').read()\n\t\t\ttextbuffer = gtk.TextBuffer()\n\t\t\ttextbuffer.set_text(file_content)\n\t\t\treturn textbuffer\n\t\texcept:\n\t\t\tprint \"Error loading file %s\" % file_name\n\t\t\treturn None\n\telse:\n\t\tprint \"File %s does not exist\" % file_name\n\t\treturn None\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def file_to_textbuffer(file_name, encoding):\n\tif os.path.isfile(file_name):\n\t\ttry:\n\t\t\tfile_content = open(file_name, 'r').read()\n\t\t\ttextbuffer = gtk.TextBuffer()\n\t\t\ttextbuffer.set_text(file_content)\n\t\t\treturn textbuffer\n\t\texcept:\n\t\t\tprint \"Error loading file %s\" % file_name\n\t\t\treturn None\n\telse:\n\t\tprint \"File %s does not exist\" % file_name\n\t\treturn None\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "ques_id": "62b8bbbce0d34b282c18120d", "code": ["def is_file_exist(file_name):\n\treturn os.path.isfile(file_name)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_file_exist(file_name):\n\treturn os.path.isfile(file_name)\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "ques_id": "62b8b99de0d34b282c1811f8", "code": ["def _reset_logging(cls):\n\t# Remove all handlers\n\tfor handler in logging.root.handlers[:]:\n\t\tlogging.root.removeHandler(handler)\n\n\t# Set the default logging level\n\tlogging.root.setLevel(logging.DEBUG)\n\n\t# Create a new handler\n\thandler = logging.StreamHandler(sys.stdout)\n\n\t# Set the default logging format\n\thandler.setFormatter(logging.Formatter(\n\t\t'%(asctime)s %(levelname)s %(name)s: %(message)s'\n\t))\n\n\t# Add the handler to the root logger\n\tlogging.root.addHandler(handler)\n\n\t# Set the default logging level for the root logger\n\tlogging.root.setLevel(logging.DEBUG)\n\n\t# Set the default logging level for the module\n\tlogging.getLogger(cls.__name__).setLevel(logging.DEBUG)\n\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _reset_logging(cls):\n\t# Remove all handlers\n\tfor handler in logging.root.handlers[:]:\n\t\tlogging.root.removeHandler(handler)\n\n\t# Set the default logging level\n\tlogging.root.setLevel(logging.DEBUG)\n\n\t# Create a new handler\n\thandler = logging.StreamHandler(sys.stdout)\n\n\t# Set the default logging format\n\thandler.setFormatter(logging.Formatter(\n\t\t'%(asctime)s %(levelname)s %(name)s: %(message)s'\n\t))\n\n\t# Add the handler to the root logger\n\tlogging.root.addHandler(handler)\n\n\t# Set the default logging level for the root logger\n\tlogging.root.setLevel(logging.DEBUG)\n\n\t# Set the default logging level for the module\n\tlogging.getLogger(cls.__name__).setLevel(logging.DEBUG)\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "ques_id": "62b8b59feb7e40a82d2d1291", "code": ["def _getTargetClass(self):\n\traise NotImplementedError()\n\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _getTargetClass(self):\n\traise NotImplementedError()\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "ques_id": "62b8b590eb7e40a82d2d1275", "code": ["def _legacy_mergeOrderings(orderings):\n\tresult = []\n\tfor ordering in orderings:\n\t\tfor element in ordering:\n\t\t\tif element not in result:\n\t\t\t\tresult.append(element)\n\treturn result\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _legacy_mergeOrderings(orderings):\n\tresult = []\n\tfor ordering in orderings:\n\t\tfor element in ordering:\n\t\t\tif element not in result:\n\t\t\t\tresult.append(element)\n\treturn result\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "ques_id": "62b8b58deb7e40a82d2d1269", "code": ["def directlyProvidedBy(object):\n\treturn object.__provides__\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def directlyProvidedBy(object):\n\treturn object.__provides__\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "ques_id": "62b8b559eb7e40a82d2d11f8", "code": ["def minimalBases(classes):\n\tminimal = []\n\tfor c in classes:\n\t\tif not c.subclasses:\n\t\t\tminimal.append(c)\n\treturn minimal\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def minimalBases(classes):\n\tminimal = []\n\tfor c in classes:\n\t\tif not c.subclasses:\n\t\t\tminimal.append(c)\n\treturn minimal\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "ques_id": "62b8b4b9eb7e40a82d2d1134", "code": ["def namesAndDescriptions(self, all=False):\n\tif all:\n\t\treturn self.__namesAndDescriptions\n\telse:\n\t\treturn self.__namesAndDescriptions[self.__current]\n\n\tdef name(self, all=False):\n\t\t\"\"\"\n\t\tReturns the name of the current class attribute.\n\t\t\"\"\"\n\t\tif all:\n\t\t\treturn self.__names\n\t\telse:\n\t\t\treturn self.__names[self.__current]\n\n\tdef description(self, all=False):\n\t\t\"\"\"\n\t\tReturns the description of the current class attribute.\n\t\t\"\"\"\n\t\tif all:\n\t\t\treturn self.__descriptions\n\t\telse:\n\t\t\treturn self.__descriptions[self.__current]\n\n\tdef setCurrent(self, index):\n\t\t\"\"\"\n\t\tSets the current class attribute.\n\t\t\"\"\"\n\t\tself.__current = index\n\n\tdef current(self):\n\t\t\"\"\"\n\t\tReturns the current class attribute.\n\t\t\"\"\"\n\t\treturn self.__current\n\n\tdef __len__(self):\n\t\t\"\"\"\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def namesAndDescriptions(self, all=False):\n\tif all:\n\t\treturn self.__namesAndDescriptions\n\telse:\n\t\treturn self.__namesAndDescriptions[self.__current]\n\n\tdef name(self, all=False):\n\t\t\"\"\"\n\t\tReturns the name of the current class attribute.\n\t\t\"\"\"\n\t\tif all:\n\t\t\treturn self.__names\n\t\telse:\n\t\t\treturn self.__names[self.__current]\n\n\tdef description(self, all=False):\n\t\t\"\"\"\n\t\tReturns the description of the current class attribute.\n\t\t\"\"\"\n\t\tif all:\n\t\t\treturn self.__descriptions\n\t\telse:\n\t\t\treturn self.__descriptions[self.__current]\n\n\tdef setCurrent(self, index):\n\t\t\"\"\"\n\t\tSets the current class attribute.\n\t\t\"\"\"\n\t\tself.__current = index\n\n\tdef current(self):\n\t\t\"\"\"\n\t\tReturns the current class attribute.\n\t\t\"\"\"\n\t\treturn self.__current\n\n\tdef __len__(self):\n\t\t\"\"\"\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "ques_id": "62b8b416eb7e40a82d2d1129", "code": ["def names(self, all=False):\n\tif all:\n\t\treturn self._names\n\telse:\n\t\treturn self._names[1:]\n\t\n\t\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def names(self, all=False):\n\tif all:\n\t\treturn self._names\n\telse:\n\t\treturn self._names[1:]\n\t\n\t\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "ques_id": "62b8b3d6eb7e40a82d2d111c", "code": ["def _normalizeargs(sequence, output=None):\n\tif isinstance(sequence, Declaration):\n\t\treturn sequence.implements\n\tif isinstance(sequence, tuple):\n\t\treturn sequence\n\tif isinstance(sequence, Interface):\n\t\treturn (sequence,)\n\tif isinstance(sequence, list):\n\t\tif output is None:\n\t\t\toutput = []\n\t\tfor item in sequence:\n\t\t\t_normalizeargs(item, output)\n\t\treturn tuple(output)\n\traise TypeError(\"Invalid argument type: %s\" % type(sequence))\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _normalizeargs(sequence, output=None):\n\tif isinstance(sequence, Declaration):\n\t\treturn sequence.implements\n\tif isinstance(sequence, tuple):\n\t\treturn sequence\n\tif isinstance(sequence, Interface):\n\t\treturn (sequence,)\n\tif isinstance(sequence, list):\n\t\tif output is None:\n\t\t\toutput = []\n\t\tfor item in sequence:\n\t\t\t_normalizeargs(item, output)\n\t\treturn tuple(output)\n\traise TypeError(\"Invalid argument type: %s\" % type(sequence))\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "ques_id": "62b8b3d5eb7e40a82d2d1110", "code": ["def _c_optimizations_available():\n\ttry:\n\t\timport c_optimizations\n\t\treturn c_optimizations\n\texcept ImportError:\n\t\treturn False\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _c_optimizations_available():\n\ttry:\n\t\timport c_optimizations\n\t\treturn c_optimizations\n\texcept ImportError:\n\t\treturn False\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110f", "code": ["def _should_attempt_c_optimizations():\n\treturn _c_optimizations_available and _c_optimizations_enabled\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _should_attempt_c_optimizations():\n\treturn _c_optimizations_available and _c_optimizations_enabled\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "ques_id": "62b8b3d4eb7e40a82d2d110e", "code": ["def _c_optimizations_ignored():\n\treturn os.environ.get(\"PURE_PYTHON\") is not None and int(os.environ.get(\"PURE_PYTHON\")) != 0\n\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_ignored():\n\treturn os.environ.get(\"PURE_PYTHON\") is not None and int(os.environ.get(\"PURE_PYTHON\")) != 0\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110d", "code": ["def _c_optimizations_required():\n\treturn True\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_required():\n\treturn True\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "ques_id": "62b87b989a0c4fa8b80b35ee", "code": ["def reset(self):\n\tself.context = {}\n\tself.bins = self.make_bins()\n\tself.bins_count = 0\n\tself.bins_count_total = 0\n\tself.bins_count_total_last = 0\n\tself.bins_count_total_last_last = 0\n\tself.bins_count_total_last_last_last = 0\n\tself.bins_count_total_last_last_last_last = 0\n\tself.bins_count_total_last_last_last_last_last = 0\n\tself.bins_count_total_last_last_last_last_last_last = 0\n\tself.bins_count_total_last_last_last_last_last_last_last = 0\n\tself.bins_count_total_last_last_last_last_last_last_last_last = 0\n\tself.bins_count_total_last_last_last_last_last_last_last_last_last = 0\n\tself.bins_count_total_last_last_last_\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def reset(self):\n\tself.context = {}\n\tself.bins = self.make_bins()\n\tself.bins_count = 0\n\tself.bins_count_total = 0\n\tself.bins_count_total_last = 0\n\tself.bins_count_total_last_last = 0\n\tself.bins_count_total_last_last_last = 0\n\tself.bins_count_total_last_last_last_last = 0\n\tself.bins_count_total_last_last_last_last_last = 0\n\tself.bins_count_total_last_last_last_last_last_last = 0\n\tself.bins_count_total_last_last_last_last_last_last_last = 0\n\tself.bins_count_total_last_last_last_last_last_last_last_last = 0\n\tself.bins_count_total_last_last_last_last_last_last_last_last_last = 0\n\tself.bins_count_total_last_last_last_\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "ques_id": "62b87b859a0c4fa8b80b35d7", "code": ["def to_csv(self, separator=\",\", header=None):\n\tif header is not None:\n\t\tyield header + \"\\n\"\n\tfor point in self.points:\n\t\tyield separator.join(map(str, point[0])) + separator\n\t\tyield separator.join(map(str, point[1])) + \"\\n\"\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def to_csv(self, separator=\",\", header=None):\n\tif header is not None:\n\t\tyield header + \"\\n\"\n\tfor point in self.points:\n\t\tyield separator.join(map(str, point[0])) + separator\n\t\tyield separator.join(map(str, point[1])) + \"\\n\"\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "ques_id": "62b87b839a0c4fa8b80b35cb", "code": ["def _get_err_indices(self, coord_name):\n\terr_indices = []\n\tfor i, err_name in enumerate(self.err_names):\n\t\tif err_name == coord_name:\n\t\t\terr_indices.append(i)\n\treturn err_indices\n\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _get_err_indices(self, coord_name):\n\terr_indices = []\n\tfor i, err_name in enumerate(self.err_names):\n\t\tif err_name == coord_name:\n\t\t\terr_indices.append(i)\n\treturn err_indices\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "ques_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["def _update_context(self, context):\n\tif self.error is not None:\n\t\tcontext.error = {}\n\t\tfor i, name in enumerate(self.error_names):\n\t\t\tcontext.error[name] = {\"index\": i}\n\t\t\tcontext.error[name].update(self.error[i])\n\t\t\tcontext.error[name][\"value\"] = self.error[i][\"value\"]\n\t\t\tcontext.error[name][\"error_low\"] = self.error[i][\"error_low\"]\n\t\t\tcontext.error[name][\"error_high\"] = self.error[i][\"error_high\"]\n\t\t\tcontext.error[name][\"error_low_positive\"] = self.error[i][\"error_low_positive\"]\n\t\t\tcontext.error[name][\"error_high_positive\"] = self.error[i][\"error_high_positive\"]\n\t\t\tcontext.error[name][\"error_low_negative\"] = self.error[i][\"error_low_negative\"]\n\t\t\tcontext.error[name][\"error_high_negative\"] = self\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _update_context(self, context):\n\tif self.error is not None:\n\t\tcontext.error = {}\n\t\tfor i, name in enumerate(self.error_names):\n\t\t\tcontext.error[name] = {\"index\": i}\n\t\t\tcontext.error[name].update(self.error[i])\n\t\t\tcontext.error[name][\"value\"] = self.error[i][\"value\"]\n\t\t\tcontext.error[name][\"error_low\"] = self.error[i][\"error_low\"]\n\t\t\tcontext.error[name][\"error_high\"] = self.error[i][\"error_high\"]\n\t\t\tcontext.error[name][\"error_low_positive\"] = self.error[i][\"error_low_positive\"]\n\t\t\tcontext.error[name][\"error_high_positive\"] = self.error[i][\"error_high_positive\"]\n\t\t\tcontext.error[name][\"error_low_negative\"] = self.error[i][\"error_low_negative\"]\n\t\t\tcontext.error[name][\"error_high_negative\"] = self\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "ques_id": "62b87b4f9a0c4fa8b80b3580", "code": ["def integral(bins, edges):\n\tarea = 0\n\tfor i in range(len(bins)):\n\t\tarea += bins[i] * (edges[i+1] - edges[i])\n\treturn area\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def integral(bins, edges):\n\tarea = 0\n\tfor i in range(len(bins)):\n\t\tarea += bins[i] * (edges[i+1] - edges[i])\n\treturn area\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "ques_id": "62b87b199a0c4fa8b80b354e", "code": ["def is_fill_request_seq(seq):\n\ttry:\n\t\tFillRequestSeq(seq)\n\t\treturn True\n\texcept:\n\t\treturn False\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_fill_request_seq(seq):\n\ttry:\n\t\tFillRequestSeq(seq)\n\t\treturn True\n\texcept:\n\t\treturn False\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "ques_id": "62b87b099a0c4fa8b80b3538", "code": ["def is_fill_request_el(obj):\n\treturn hasattr(obj, 'fill') and hasattr(obj, 'request')\n\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_request_el(obj):\n\treturn hasattr(obj, 'fill') and hasattr(obj, 'request')\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "ques_id": "62b87af99a0c4fa8b80b3524", "code": ["def is_run_el(obj):\n\treturn hasattr(obj, 'run') and callable(obj.run)\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_run_el(obj):\n\treturn hasattr(obj, 'run') and callable(obj.run)\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "ques_id": "62b87af69a0c4fa8b80b351a", "code": ["def is_fill_compute_el(obj):\n\treturn hasattr(obj, 'fill') and hasattr(obj, 'compute')\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_compute_el(obj):\n\treturn hasattr(obj, 'fill') and hasattr(obj, 'compute')\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "ques_id": "62b87af19a0c4fa8b80b34f7", "code": ["def difference(d1, d2, level=-1):\n\td = {}\n\tfor k, v in d1.items():\n\t\tif k not in d2:\n\t\t\td[k] = v\n\t\telif isinstance(v, dict) and isinstance(d2[k], dict):\n\t\t\td[k] = difference(v, d2[k], level=level-1)\n\t\telif v != d2[k]:\n\t\t\td[k] = v\n\treturn d\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def difference(d1, d2, level=-1):\n\td = {}\n\tfor k, v in d1.items():\n\t\tif k not in d2:\n\t\t\td[k] = v\n\t\telif isinstance(v, dict) and isinstance(d2[k], dict):\n\t\t\td[k] = difference(v, d2[k], level=level-1)\n\t\telif v != d2[k]:\n\t\t\td[k] = v\n\treturn d\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "ques_id": "62b87af09a0c4fa8b80b34f1", "code": ["def fill(self, coord, weight=1):\n\tself.fill_n(1, coord, weight)\n\treturn self\n\t\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fill(self, coord, weight=1):\n\tself.fill_n(1, coord, weight)\n\treturn self\n\t\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "ques_id": "62b86aa3b4d922cb0e688d36", "code": ["def _validate_labels(labels):\n\tfor key, value in labels.items():\n\t\tvalidate_key(key)\n\t\tvalidate_value(value)\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _validate_labels(labels):\n\tfor key, value in labels.items():\n\t\tvalidate_key(key)\n\t\tvalidate_value(value)\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "ques_id": "62b86a9eb4d922cb0e688d25", "code": ["def _get_resource_name_regex():\n\treturn {\n\t\t\"namespace\": r\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\",\n\t\t\"service\": r\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\",\n\t\t\"task\": r\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\",\n\t\t\"config\": r\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\",\n\t\t\"secret\": r\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\",\n\t\t\"network\": r\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\",\n\t\t\"volume\": r\"^[a-z0-9]([-a-z0-9\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _get_resource_name_regex():\n\treturn {\n\t\t\"namespace\": r\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\",\n\t\t\"service\": r\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\",\n\t\t\"task\": r\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\",\n\t\t\"config\": r\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\",\n\t\t\"secret\": r\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\",\n\t\t\"network\": r\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\",\n\t\t\"volume\": r\"^[a-z0-9]([-a-z0-9\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf8", "code": ["def validate_value(value):\n\tif value == '':\n\t\treturn True\n\tif value == 'None':\n\t\treturn True\n\tif value == 'NA':\n\t\treturn True\n\tif value == 'N/A':\n\t\treturn True\n\tif value == 'NONE':\n\t\treturn True\n\tif value == 'NONE/NA':\n\t\treturn True\n\tif value == 'NONE/N/A':\n\t\treturn True\n\tif value == 'NONE/NONE':\n\t\treturn True\n\tif value == 'NONE/NONE/NA':\n\t\treturn True\n\tif value == 'NONE/NONE/N/A':\n\t\treturn True\n\tif value == 'NONE/NONE/NONE':\n\t\treturn True\n\tif value == 'NONE/NONE/NONE/NA':\n\t\treturn True\n\tif value == 'NONE/NONE/NONE/N/A':\n\t\treturn True\n\tif value == 'NONE/NONE/NONE/NONE':\n\t\treturn True\n\tif value == 'NONE/NONE\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_value(value):\n\tif value == '':\n\t\treturn True\n\tif value == 'None':\n\t\treturn True\n\tif value == 'NA':\n\t\treturn True\n\tif value == 'N/A':\n\t\treturn True\n\tif value == 'NONE':\n\t\treturn True\n\tif value == 'NONE/NA':\n\t\treturn True\n\tif value == 'NONE/N/A':\n\t\treturn True\n\tif value == 'NONE/NONE':\n\t\treturn True\n\tif value == 'NONE/NONE/NA':\n\t\treturn True\n\tif value == 'NONE/NONE/N/A':\n\t\treturn True\n\tif value == 'NONE/NONE/NONE':\n\t\treturn True\n\tif value == 'NONE/NONE/NONE/NA':\n\t\treturn True\n\tif value == 'NONE/NONE/NONE/N/A':\n\t\treturn True\n\tif value == 'NONE/NONE/NONE/NONE':\n\t\treturn True\n\tif value == 'NONE/NONE\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf7", "code": ["def validate_key(key):\n\tif key in _regexes:\n\t\treturn _regexes[key].match(key) is not None\n\telse:\n\t\treturn True\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_key(key):\n\tif key in _regexes:\n\t\treturn _regexes[key].match(key) is not None\n\telse:\n\t\treturn True\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "ques_id": "62b86a01b4d922cb0e688ccc", "code": ["def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n\tnew_dict = {}\n\tfor key, value in manifest_dict.items():\n\t\tif isinstance(value, dict):\n\t\t\tnew_dict[key] = generate_default_observer_schema_dict(value)\n\t\telif isinstance(value, list):\n\t\t\tnew_dict[key] = generate_default_observer_schema_list(value)\n\t\telse:\n\t\t\tnew_dict[key] = value\n\treturn new_dict\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n\tnew_dict = {}\n\tfor key, value in manifest_dict.items():\n\t\tif isinstance(value, dict):\n\t\t\tnew_dict[key] = generate_default_observer_schema_dict(value)\n\t\telif isinstance(value, list):\n\t\t\tnew_dict[key] = generate_default_observer_schema_list(value)\n\t\telse:\n\t\t\tnew_dict[key] = value\n\treturn new_dict\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869ebb4d922cb0e688cc6", "code": ["def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n\tfor field in observer_schema:\n\t\tif field[\"type\"] == \"list\":\n\t\t\tif field[\"name\"] not in last_applied_manifest:\n\t\t\t\tlast_applied_manifest[field[\"name\"]] = []\n\t\t\tupdate_last_applied_manifest_list_from_resp(\n\t\t\t\tlast_applied_manifest[field[\"name\"]],\n\t\t\t\tfield[\"schema\"],\n\t\t\t\tresponse[field[\"name\"]],\n\t\t\t)\n\t\telif field[\"type\"] == \"dict\":\n\t\t\tif field[\"name\"] not in last_applied_manifest:\n\t\t\t\tlast_applied_manifest[field[\"name\"]] = {}\n\t\t\tupdate_last_applied_manifest_dict_from_resp(\n\t\t\t\tlast_applied_manifest[field[\"name\"]],\n\t\t\t\tfield[\"schema\"],\n\t\t\t\tresponse[field[\"name\"]],\n\t\t\t)\n\t\telse:\n\t\t\tif field[\"name\"] not\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n\tfor field in observer_schema:\n\t\tif field[\"type\"] == \"list\":\n\t\t\tif field[\"name\"] not in last_applied_manifest:\n\t\t\t\tlast_applied_manifest[field[\"name\"]] = []\n\t\t\tupdate_last_applied_manifest_list_from_resp(\n\t\t\t\tlast_applied_manifest[field[\"name\"]],\n\t\t\t\tfield[\"schema\"],\n\t\t\t\tresponse[field[\"name\"]],\n\t\t\t)\n\t\telif field[\"type\"] == \"dict\":\n\t\t\tif field[\"name\"] not in last_applied_manifest:\n\t\t\t\tlast_applied_manifest[field[\"name\"]] = {}\n\t\t\tupdate_last_applied_manifest_dict_from_resp(\n\t\t\t\tlast_applied_manifest[field[\"name\"]],\n\t\t\t\tfield[\"schema\"],\n\t\t\t\tresponse[field[\"name\"]],\n\t\t\t)\n\t\telse:\n\t\t\tif field[\"name\"] not\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869eab4d922cb0e688cc5", "code": ["def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n\tfor field in observer_schema[\"fields\"]:\n\t\tif field not in last_applied_manifest:\n\t\t\tlast_applied_manifest[field] = {}\n\t\tif field in response:\n\t\t\tupdate_last_applied_manifest_dict_from_resp(\n\t\t\t\tlast_applied_manifest[field], observer_schema[\"fields\"][field], response[field]\n\t\t\t)\n\t\telse:\n\t\t\traise KeyError(\n\t\t\t\t\"Field {} is not present in the response\".format(field)\n\t\t\t)\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n\tfor field in observer_schema[\"fields\"]:\n\t\tif field not in last_applied_manifest:\n\t\t\tlast_applied_manifest[field] = {}\n\t\tif field in response:\n\t\t\tupdate_last_applied_manifest_dict_from_resp(\n\t\t\t\tlast_applied_manifest[field], observer_schema[\"fields\"][field], response[field]\n\t\t\t)\n\t\telse:\n\t\t\traise KeyError(\n\t\t\t\t\"Field {} is not present in the response\".format(field)\n\t\t\t)\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "ques_id": "62b869eab4d922cb0e688cbf", "code": ["def generate_default_observer_schema(app):\n\tfor resource in app.spec.manifest:\n\t\tif resource.kind not in app.spec.observer_schema:\n\t\t\tapp.spec.observer_schema[resource.kind] = generate_default_observer_schema_for_resource(resource)\n\treturn app\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema(app):\n\tfor resource in app.spec.manifest:\n\t\tif resource.kind not in app.spec.observer_schema:\n\t\t\tapp.spec.observer_schema[resource.kind] = generate_default_observer_schema_for_resource(resource)\n\treturn app\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "ques_id": "62b43427903eeb48555d3ea5", "code": ["def format(\n\t\tself,\n\t\tsql:\n\treturn self._converter.convert(sql, params)\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def format(\n\t\tself,\n\t\tsql:\n\treturn self._converter.convert(sql, params)\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "ques_id": "62b43428903eeb48555d3eaa", "code": ["def formatmany(\n\t\tself,\n\t\tsql:\n\treturn self._converter.convert_many(sql, many_params)\n\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def formatmany(\n\t\tself,\n\t\tsql:\n\treturn self._converter.convert_many(sql, many_params)\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "ques_id": "62b45df05108cfac7f2109ce", "code": ["def validate(self, path):\n\tif not path:\n\t\tpath = self.root\n\treturn self.validate_path(path)\n\n\tdef validate_path(self, path):\n\t\t\"\"\"\n\t\tReturns True if OCFL object at path, False otherwise.\n\t\t\"\"\"\n\t\ttry:\n\t\t\tself.get_inventory(path)\n\t\t\treturn True\n\t\texcept Exception:\n\t\t\treturn False\n\n\tdef get_inventory(self, path):\n\t\t\"\"\"\n\t\tReturns the inventory for the OCFL object at path.\n\t\t\"\"\"\n\t\tif not path:\n\t\t\tpath = self.root\n\t\tif not self.validate_path(path):\n\t\t\traise Exception(\"Not an OCFL object: {}\".format(path))\n\t\treturn self.get_inventory_path(path)\n\n\tdef get_inventory_path(self, path):\n\t\t\"\"\"\n\t\tReturns the inventory for the OCFL object at path.\n\t\t\"\"\"\n\t\tif not path:\n\t\t\tpath = self.root\n\t\tif not self.validate_path(path):\n\t\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, path):\n\tif not path:\n\t\tpath = self.root\n\treturn self.validate_path(path)\n\n\tdef validate_path(self, path):\n\t\t\"\"\"\n\t\tReturns True if OCFL object at path, False otherwise.\n\t\t\"\"\"\n\t\ttry:\n\t\t\tself.get_inventory(path)\n\t\t\treturn True\n\t\texcept Exception:\n\t\t\treturn False\n\n\tdef get_inventory(self, path):\n\t\t\"\"\"\n\t\tReturns the inventory for the OCFL object at path.\n\t\t\"\"\"\n\t\tif not path:\n\t\t\tpath = self.root\n\t\tif not self.validate_path(path):\n\t\t\traise Exception(\"Not an OCFL object: {}\".format(path))\n\t\treturn self.get_inventory_path(path)\n\n\tdef get_inventory_path(self, path):\n\t\t\"\"\"\n\t\tReturns the inventory for the OCFL object at path.\n\t\t\"\"\"\n\t\tif not path:\n\t\t\tpath = self.root\n\t\tif not self.validate_path(path):\n\t\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dc", "code": ["def status_str(self, prefix=''):\n\treturn '\\n'.join([prefix + str(m) for m in sorted(self.messages)])\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n\treturn '\\n'.join([prefix + str(m) for m in sorted(self.messages)])\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dd", "code": ["def status_str(self, prefix=''):\n\treturn self.log.status_str(prefix)\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n\treturn self.log.status_str(prefix)\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "ques_id": "62b45e135108cfac7f2109f4", "code": ["def is_valid(self, identifier):\n\treturn True\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_valid(self, identifier):\n\treturn True\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "ques_id": "62b45e145108cfac7f210a07", "code": ["def validate(self, inventory, extract_spec_version=False):\n\tif extract_spec_version:\n\t\tif 'type' in inventory:\n\t\t\tif inventory['type'] == 'http://www.w3.org/ns/odrl/2/Inventory':\n\t\t\t\tself.spec_version = '2.0'\n\t\t\telif inventory['type'] == 'http://www.w3.org/ns/odrl/2/Set':\n\t\t\t\tself.spec_version = '2.0'\n\t\t\telif inventory['type'] == 'http://www.w3.org/ns/odrl/2/List':\n\t\t\t\tself.spec_version = '2.0'\n\t\t\telif inventory['type'] == 'http://www.w3.org/ns/odrl/2/Dictionary':\n\t\t\t\tself.spec_version = '2.0'\n\t\t\telif inventory['type'] == 'http://www.w3.org/ns/odrl/2/Vector':\n\t\t\t\tself.spec_version = '2.0'\n\t\t\telif inventory['\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, inventory, extract_spec_version=False):\n\tif extract_spec_version:\n\t\tif 'type' in inventory:\n\t\t\tif inventory['type'] == 'http://www.w3.org/ns/odrl/2/Inventory':\n\t\t\t\tself.spec_version = '2.0'\n\t\t\telif inventory['type'] == 'http://www.w3.org/ns/odrl/2/Set':\n\t\t\t\tself.spec_version = '2.0'\n\t\t\telif inventory['type'] == 'http://www.w3.org/ns/odrl/2/List':\n\t\t\t\tself.spec_version = '2.0'\n\t\t\telif inventory['type'] == 'http://www.w3.org/ns/odrl/2/Dictionary':\n\t\t\t\tself.spec_version = '2.0'\n\t\t\telif inventory['type'] == 'http://www.w3.org/ns/odrl/2/Vector':\n\t\t\t\tself.spec_version = '2.0'\n\t\t\telif inventory['\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "ques_id": "62b45e145108cfac7f210a09", "code": ["def check_digests_present_and_used(self, manifest_files, digests_used):\n\tfor manifest_file in manifest_files:\n\t\tif not manifest_file.digests:\n\t\t\tself.error(\"Manifest file '%s' does not have any digests.\" % manifest_file.filename)\n\t\t\tcontinue\n\n\t\tfor digest in manifest_file.digests:\n\t\t\tif digest not in digests_used:\n\t\t\t\tself.error(\"Manifest file '%s' has digest '%s' which is not used.\" % (manifest_file.filename, digest))\n\n\t\tif not manifest_file.digests_used:\n\t\t\tself.error(\"Manifest file '%s' does not use any digests.\" % manifest_file.filename)\n\n\t\tfor digest in manifest_file.digests_used:\n\t\t\tif digest not in manifest_file.digests:\n\t\t\t\tself.error(\"Manifest file '%s' uses digest '%s' which is not present.\" % (manifest_file.filename, digest))\n\n\t\tfor digest in manifest_file.digests_used:\n\t\t\tif digest not in digests_\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n\tfor manifest_file in manifest_files:\n\t\tif not manifest_file.digests:\n\t\t\tself.error(\"Manifest file '%s' does not have any digests.\" % manifest_file.filename)\n\t\t\tcontinue\n\n\t\tfor digest in manifest_file.digests:\n\t\t\tif digest not in digests_used:\n\t\t\t\tself.error(\"Manifest file '%s' has digest '%s' which is not used.\" % (manifest_file.filename, digest))\n\n\t\tif not manifest_file.digests_used:\n\t\t\tself.error(\"Manifest file '%s' does not use any digests.\" % manifest_file.filename)\n\n\t\tfor digest in manifest_file.digests_used:\n\t\t\tif digest not in manifest_file.digests:\n\t\t\t\tself.error(\"Manifest file '%s' uses digest '%s' which is not present.\" % (manifest_file.filename, digest))\n\n\t\tfor digest in manifest_file.digests_used:\n\t\t\tif digest not in digests_\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "ques_id": "62b45e165108cfac7f210a16", "code": ["def validate_as_prior_version(self, prior):\n\t\n\t# Check that the prior version is actually a prior version\n\tif not self.is_prior_version(prior):\n\t\tself.error = \"The prior version is not a prior version of the current version.\"\n\t\treturn False\n\t\n\t# Check that the prior version is valid\n\tif not prior.is_valid():\n\t\tself.error = \"The prior version is not valid.\"\n\t\treturn False\n\t\n\t# Check that the prior version is consistent\n\tif not prior.is_consistent():\n\t\tself.error = \"The prior version is not consistent.\"\n\t\treturn False\n\t\n\t# Check that the prior version is complete\n\tif not prior.is_complete():\n\t\tself.error = \"The prior version is not complete.\"\n\t\treturn False\n\t\n\t# Check that the prior version is correct\n\tif not prior.is_correct():\n\t\tself.error = \"The prior version is not correct.\"\n\t\treturn False\n\t\n\t# Check that the prior version is consistent with the current version\n\tif not self.is_consistent_with_prior_\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_as_prior_version(self, prior):\n\t\n\t# Check that the prior version is actually a prior version\n\tif not self.is_prior_version(prior):\n\t\tself.error = \"The prior version is not a prior version of the current version.\"\n\t\treturn False\n\t\n\t# Check that the prior version is valid\n\tif not prior.is_valid():\n\t\tself.error = \"The prior version is not valid.\"\n\t\treturn False\n\t\n\t# Check that the prior version is consistent\n\tif not prior.is_consistent():\n\t\tself.error = \"The prior version is not consistent.\"\n\t\treturn False\n\t\n\t# Check that the prior version is complete\n\tif not prior.is_complete():\n\t\tself.error = \"The prior version is not complete.\"\n\t\treturn False\n\t\n\t# Check that the prior version is correct\n\tif not prior.is_correct():\n\t\tself.error = \"The prior version is not correct.\"\n\t\treturn False\n\t\n\t# Check that the prior version is consistent with the current version\n\tif not self.is_consistent_with_prior_\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "ques_id": "62b45e165108cfac7f210a17", "code": ["def get_logical_path_map(inventory, version):\n\tlogical_path_map = {}\n\tfor state in inventory.states:\n\t\tlogical_path_map[state.name] = state.get_logical_path(version)\n\treturn logical_path_map\n\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get_logical_path_map(inventory, version):\n\tlogical_path_map = {}\n\tfor state in inventory.states:\n\t\tlogical_path_map[state.name] = state.get_logical_path(version)\n\treturn logical_path_map\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "ques_id": "62b45e175108cfac7f210a19", "code": ["def validate_fixity(self, fixity, manifest_files):\n\t\t\n\t\t# Check that fixity is a dictionary\n\t\tif not isinstance(fixity, dict):\n\t\t\tself.error = \"Fixity block is not a dictionary.\"\n\t\t\treturn False\n\t\t\n\t\t# Check that fixity has a 'files' key\n\t\tif not 'files' in fixity:\n\t\t\tself.error = \"Fixity block does not have a 'files' key.\"\n\t\t\treturn False\n\t\t\n\t\t# Check that fixity['files'] is a dictionary\n\t\tif not isinstance(fixity['files'], dict):\n\t\t\tself.error = \"Fixity['files'] is not a dictionary.\"\n\t\t\treturn False\n\t\t\n\t\t# Check that fixity['files'] has at least one key\n\t\tif len(fixity['files'].keys()) == 0:\n\t\t\tself.error = \"Fixity['files'] has no keys.\"\n\t\t\treturn False\n\t\t\n\t\t# Check that fixity['files'] has only keys that are in manifest_files\n\t\tfor key in fixity['files'\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_fixity(self, fixity, manifest_files):\n\t\t\n\t\t# Check that fixity is a dictionary\n\t\tif not isinstance(fixity, dict):\n\t\t\tself.error = \"Fixity block is not a dictionary.\"\n\t\t\treturn False\n\t\t\n\t\t# Check that fixity has a 'files' key\n\t\tif not 'files' in fixity:\n\t\t\tself.error = \"Fixity block does not have a 'files' key.\"\n\t\t\treturn False\n\t\t\n\t\t# Check that fixity['files'] is a dictionary\n\t\tif not isinstance(fixity['files'], dict):\n\t\t\tself.error = \"Fixity['files'] is not a dictionary.\"\n\t\t\treturn False\n\t\t\n\t\t# Check that fixity['files'] has at least one key\n\t\tif len(fixity['files'].keys()) == 0:\n\t\t\tself.error = \"Fixity['files'] has no keys.\"\n\t\t\treturn False\n\t\t\n\t\t# Check that fixity['files'] has only keys that are in manifest_files\n\t\tfor key in fixity['files'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "ques_id": "62b463153879012d19481498", "code": ["def files_list(path):\n\treturn [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list(path):\n\treturn [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "ques_id": "62b463153879012d1948149a", "code": ["def _group_files_by_xml_filename(source, xmls, files):\n\tdata = {}\n\tfor xml in xmls:\n\t\tdata[xml] = []\n\t\tfor file in files:\n\t\t\tif xml in file:\n\t\t\t\tdata[xml].append(file)\n\treturn data\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n\tdata = {}\n\tfor xml in xmls:\n\t\tdata[xml] = []\n\t\tfor file in files:\n\t\t\tif xml in file:\n\t\t\t\tdata[xml].append(file)\n\treturn data\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "ques_id": "62b463153879012d1948149b", "code": ["def match_file_by_prefix(prefix, file_path):\n\treturn os.path.basename(file_path).startswith(prefix + \"-\") or os.path.basename(file_path).startswith(prefix + \".\")\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match_file_by_prefix(prefix, file_path):\n\treturn os.path.basename(file_path).startswith(prefix + \"-\") or os.path.basename(file_path).startswith(prefix + \".\")\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "ques_id": "62b463153879012d1948149c", "code": ["def select_filenames_by_prefix(prefix, files):\n\treturn [f for f in files if f.startswith(prefix)]\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def select_filenames_by_prefix(prefix, files):\n\treturn [f for f in files if f.startswith(prefix)]\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149d", "code": ["def _explore_folder(folder):\n\tfiles = os.listdir(folder)\n\tfiles = [os.path.join(folder, f) for f in files]\n\tfiles = [f for f in files if os.path.isfile(f)]\n\tfiles = [f for f in files if f.endswith('.xml')]\n\tfiles = _group_files_by_xml_filename(files)\n\treturn files\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_folder(folder):\n\tfiles = os.listdir(folder)\n\tfiles = [os.path.join(folder, f) for f in files]\n\tfiles = [f for f in files if os.path.isfile(f)]\n\tfiles = [f for f in files if f.endswith('.xml')]\n\tfiles = _group_files_by_xml_filename(files)\n\treturn files\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149f", "code": ["def _eval_file(prefix, file_path):\n\tif file_path.startswith(prefix):\n\t\tif file_path.endswith(\".xml\"):\n\t\t\treturn None\n\t\telse:\n\t\t\tcomponent_id = file_path.split(\"/\")[-1].split(\".\")[0]\n\t\t\tif file_path.endswith(\".pdf\"):\n\t\t\t\treturn {\"component_id\": component_id, \"file_path\": file_path}\n\t\t\telse:\n\t\t\t\tftype = file_path.split(\".\")[-1]\n\t\t\t\treturn {\"component_id\": component_id, \"file_path\": file_path, \"ftype\": ftype}\n\telse:\n\t\treturn None\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _eval_file(prefix, file_path):\n\tif file_path.startswith(prefix):\n\t\tif file_path.endswith(\".xml\"):\n\t\t\treturn None\n\t\telse:\n\t\t\tcomponent_id = file_path.split(\"/\")[-1].split(\".\")[0]\n\t\t\tif file_path.endswith(\".pdf\"):\n\t\t\t\treturn {\"component_id\": component_id, \"file_path\": file_path}\n\t\t\telse:\n\t\t\t\tftype = file_path.split(\".\")[-1]\n\t\t\t\treturn {\"component_id\": component_id, \"file_path\": file_path, \"ftype\": ftype}\n\telse:\n\t\treturn None\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "ques_id": "62b463153879012d194814a1", "code": ["def add_rendition(self, lang, file_path):\n\tself._renditions[lang] = file_path\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_rendition(self, lang, file_path):\n\tself._renditions[lang] = file_path\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "ques_id": "62b463163879012d194814a2", "code": ["def add_asset(self, basename, file_path):\n\tself._assets[basename] = file_path\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_asset(self, basename, file_path):\n\tself._assets[basename] = file_path\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "ques_id": "62b463163879012d194814a4", "code": ["def _explore_zipfile(zip_path):\n\twith zipfile.ZipFile(zip_path) as zip_file:\n\t\treturn _group_files_by_xml_filename(zip_file.namelist())\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_zipfile(zip_path):\n\twith zipfile.ZipFile(zip_path) as zip_file:\n\t\treturn _group_files_by_xml_filename(zip_file.namelist())\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "ques_id": "62b463163879012d194814a6", "code": ["def files_list_from_zipfile(zip_path):\n\twith zipfile.ZipFile(zip_path) as zip_file:\n\t\treturn zip_file.namelist()\n\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list_from_zipfile(zip_path):\n\twith zipfile.ZipFile(zip_path) as zip_file:\n\t\treturn zip_file.namelist()\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "ques_id": "62b4631b3879012d194814dd", "code": ["def fix_namespace_prefix_w(content):\n\treturn content.replace('w:st=', 'w-st=')\n\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def fix_namespace_prefix_w(content):\n\treturn content.replace('w:st=', 'w-st=')\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "ques_id": "62b463283879012d1948153d", "code": ["def match_pubdate(node, pubdate_xpaths):\n\tfor pubdate_xpath in pubdate_xpaths:\n\t\tpubdate = node.xpath(pubdate_xpath)\n\t\tif pubdate:\n\t\t\treturn pubdate[0]\n\treturn None\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def match_pubdate(node, pubdate_xpaths):\n\tfor pubdate_xpath in pubdate_xpaths:\n\t\tpubdate = node.xpath(pubdate_xpath)\n\t\tif pubdate:\n\t\t\treturn pubdate[0]\n\treturn None\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "ques_id": "62b463303879012d19481579", "code": ["def _extract_number_and_supplment_from_issue_element(issue):\n\tnumber = None\n\tsupplement = None\n\n\tif issue.text:\n\t\tnumber = issue.text\n\t\tif issue.tail:\n\t\t\tsupplement = issue.tail\n\n\treturn number, supplement\n\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n\tnumber = None\n\tsupplement = None\n\n\tif issue.text:\n\t\tnumber = issue.text\n\t\tif issue.tail:\n\t\t\tsupplement = issue.tail\n\n\treturn number, supplement\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "ques_id": "62b46740d2f69a53b466171a", "code": ["def pretty(self, indent=0, debug=False):\n\tpass\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pretty(self, indent=0, debug=False):\n\tpass\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "ques_id": "62b46746d2f69a53b4661722", "code": ["def absorb(self, args):\n\t# TODO: implement absorption\n\treturn args\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def absorb(self, args):\n\t# TODO: implement absorption\n\treturn args\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "ques_id": "62b86707b4d922cb0e688c2a", "code": ["def on(self, hook):\n\tdef decorator(handler):\n\t\tself.registry[hook].append(handler)\n\t\treturn handler\n\treturn decorator\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def on(self, hook):\n\tdef decorator(handler):\n\t\tself.registry[hook].append(handler)\n\t\treturn handler\n\treturn decorator\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "ques_id": "62b86729b4d922cb0e688c2f", "code": ["def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n\tconfig = {\n\t\t\"tls\": {\n\t\t\t\"enabled\": False,\n\t\t\t\"cert\": \"\",\n\t\t\t\"key\": \"\",\n\t\t\t\"ca\": \"\",\n\t\t\t\"verify\": False\n\t\t},\n\t\t\"authentication\": {\n\t\t\t\"enabled\": False,\n\t\t\t\"type\": \"basic\",\n\t\t\t\"realm\": \"\",\n\t\t\t\"users\": {\n\t\t\t\t\"admin\": \"admin\"\n\t\t\t}\n\t\t},\n\t\t\"authorization\": {\n\t\t\t\"enabled\": False,\n\t\t\t\"type\": \"basic\",\n\t\t\t\"users\": {\n\t\t\t\t\"admin\": {\n\t\t\t\t\t\"permissions\": [\n\t\t\t\t\t\t\"*\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"etcd\": {\n\t\t\t\"host\": etcd_host,\n\t\t\t\"port\": etcd_port,\n\t\t\t\"user\": user,\n\t\t\n"], "level": "self_contained", "generate_results": [{"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n\tconfig = {\n\t\t\"tls\": {\n\t\t\t\"enabled\": False,\n\t\t\t\"cert\": \"\",\n\t\t\t\"key\": \"\",\n\t\t\t\"ca\": \"\",\n\t\t\t\"verify\": False\n\t\t},\n\t\t\"authentication\": {\n\t\t\t\"enabled\": False,\n\t\t\t\"type\": \"basic\",\n\t\t\t\"realm\": \"\",\n\t\t\t\"users\": {\n\t\t\t\t\"admin\": \"admin\"\n\t\t\t}\n\t\t},\n\t\t\"authorization\": {\n\t\t\t\"enabled\": False,\n\t\t\t\"type\": \"basic\",\n\t\t\t\"users\": {\n\t\t\t\t\"admin\": {\n\t\t\t\t\t\"permissions\": [\n\t\t\t\t\t\t\"*\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"etcd\": {\n\t\t\t\"host\": etcd_host,\n\t\t\t\"port\": etcd_port,\n\t\t\t\"user\": user,\n\t\t\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d2", "code": ["def _fromutc(self, dt):\n\tif dt.tzinfo is None:\n\t\traise ValueError(\"dt must be a timezone datetime\")\n\treturn dt.astimezone(self)\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _fromutc(self, dt):\n\tif dt.tzinfo is None:\n\t\traise ValueError(\"dt must be a timezone datetime\")\n\treturn dt.astimezone(self)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "ques_id": "62b8982f755ee91dce50a241", "code": ["def normalized(self):\n\treturn self.__class__(\n\t\tself.years,\n\t\tself.months,\n\t\tself.days,\n\t\tself.hours,\n\t\tself.minutes,\n\t\tself.seconds,\n\t\tself.microseconds,\n\t\tself.milliseconds,\n\t\tself.nanoseconds,\n\t\tself.picoseconds,\n\t\tself.femtoseconds,\n\t\tself.attoseconds,\n\t\tself.zeptoseconds,\n\t\tself.yoctoseconds,\n\t)\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def normalized(self):\n\treturn self.__class__(\n\t\tself.years,\n\t\tself.months,\n\t\tself.days,\n\t\tself.hours,\n\t\tself.minutes,\n\t\tself.seconds,\n\t\tself.microseconds,\n\t\tself.milliseconds,\n\t\tself.nanoseconds,\n\t\tself.picoseconds,\n\t\tself.femtoseconds,\n\t\tself.attoseconds,\n\t\tself.zeptoseconds,\n\t\tself.yoctoseconds,\n\t)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "ques_id": "62b89640755ee91dce50a114", "code": ["def tzname_in_python2(namefunc):\n\tif sys.version_info[0] == 2:\n\t\tdef wrapper(self, dt):\n\t\t\tname = namefunc(self, dt)\n\t\t\tif isinstance(name, unicode):\n\t\t\t\tname = name.encode('utf-8')\n\t\t\treturn name\n\t\treturn wrapper\n\telse:\n\t\treturn namefunc\n\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def tzname_in_python2(namefunc):\n\tif sys.version_info[0] == 2:\n\t\tdef wrapper(self, dt):\n\t\t\tname = namefunc(self, dt)\n\t\t\tif isinstance(name, unicode):\n\t\t\t\tname = name.encode('utf-8')\n\t\t\treturn name\n\t\treturn wrapper\n\telse:\n\t\treturn namefunc\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "ques_id": "62b87d24d292efb640a55670", "code": ["def get_versions():\n\ttry:\n\t\treturn _get_versions()\n\texcept:\n\t\treturn {\n\t\t\t'python': 'unknown',\n\t\t\t'pip': 'unknown',\n\t\t\t'virtualenv': 'unknown',\n\t\t\t'virtualenvwrapper': 'unknown',\n\t\t\t'virtualenvwrapper.project': 'unknown',\n\t\t\t'virtualenvwrapper.hook.preactivate': 'unknown',\n\t\t\t'virtualenvwrapper.hook.postactivate': 'unknown',\n\t\t\t'virtualenvwrapper.hook.predeactivate': 'unknown',\n\t\t\t'virtualenvwrapper.hook.postdeactivate': 'unknown',\n\t\t\t'virtualenvwrapper.hook.premkvirtualenv': 'unknown',\n\t\t\t'virtualenvwrapper.hook.postmkvirtualenv': 'unknown',\n\t\t\t'virtualenvwrapper.hook.prermvirtualenv': 'unknown',\n\t\t\t'virtualenvwrapper.hook.postrmvirtualenv': 'unknown',\n\t\t\t'virtualenvwrapper.hook.preactivate_source': 'unknown',\n\t\t\t'virtualenvwrapper.hook.postactivate\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_versions():\n\ttry:\n\t\treturn _get_versions()\n\texcept:\n\t\treturn {\n\t\t\t'python': 'unknown',\n\t\t\t'pip': 'unknown',\n\t\t\t'virtualenv': 'unknown',\n\t\t\t'virtualenvwrapper': 'unknown',\n\t\t\t'virtualenvwrapper.project': 'unknown',\n\t\t\t'virtualenvwrapper.hook.preactivate': 'unknown',\n\t\t\t'virtualenvwrapper.hook.postactivate': 'unknown',\n\t\t\t'virtualenvwrapper.hook.predeactivate': 'unknown',\n\t\t\t'virtualenvwrapper.hook.postdeactivate': 'unknown',\n\t\t\t'virtualenvwrapper.hook.premkvirtualenv': 'unknown',\n\t\t\t'virtualenvwrapper.hook.postmkvirtualenv': 'unknown',\n\t\t\t'virtualenvwrapper.hook.prermvirtualenv': 'unknown',\n\t\t\t'virtualenvwrapper.hook.postrmvirtualenv': 'unknown',\n\t\t\t'virtualenvwrapper.hook.preactivate_source': 'unknown',\n\t\t\t'virtualenvwrapper.hook.postactivate\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "ques_id": "62b87d24d292efb640a5566f", "code": ["def render(pieces, style):\n\tif style == 'html':\n\t\treturn render_html(pieces)\n\telif style == 'latex':\n\t\treturn render_latex(pieces)\n\telif style == 'markdown':\n\t\treturn render_markdown(pieces)\n\telif style == 'text':\n\t\treturn render_text(pieces)\n\telse:\n\t\traise ValueError('Unknown style: %s' % style)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def render(pieces, style):\n\tif style == 'html':\n\t\treturn render_html(pieces)\n\telif style == 'latex':\n\t\treturn render_latex(pieces)\n\telif style == 'markdown':\n\t\treturn render_markdown(pieces)\n\telif style == 'text':\n\t\treturn render_text(pieces)\n\telse:\n\t\traise ValueError('Unknown style: %s' % style)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "ques_id": "62b87d24d292efb640a5566d", "code": ["def plus_or_dot(pieces):\n\tif \"+\" in pieces[-1]:\n\t\treturn \".\"\n\telse:\n\t\treturn \"+\"\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def plus_or_dot(pieces):\n\tif \"+\" in pieces[-1]:\n\t\treturn \".\"\n\telse:\n\t\treturn \"+\"\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62b87d23d292efb640a5566b", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n\tif not isinstance(commands, list):\n\t\tcommands = [commands]\n\tfor command in commands:\n\t\tif verbose:\n\t\t\tprint(\" \".join(command))\n\t\tif hide_stderr:\n\t\t\twith open(os.devnull, \"w\") as fnull:\n\t\t\t\tsubprocess.check_call(command, cwd=cwd, stdout=fnull, env=env)\n\t\telse:\n\t\t\tsubprocess.check_call(command, cwd=cwd, env=env)\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n\tif not isinstance(commands, list):\n\t\tcommands = [commands]\n\tfor command in commands:\n\t\tif verbose:\n\t\t\tprint(\" \".join(command))\n\t\tif hide_stderr:\n\t\t\twith open(os.devnull, \"w\") as fnull:\n\t\t\t\tsubprocess.check_call(command, cwd=cwd, stdout=fnull, env=env)\n\t\telse:\n\t\t\tsubprocess.check_call(command, cwd=cwd, env=env)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "ques_id": "62b87d23d292efb640a55668", "code": ["def get_config():\n\tconfig = VersioneerConfig()\n\tconfig.VCS = \"git\"\n\tconfig.style = \"pep440\"\n\tconfig.versionfile_source = \"src/{}/_version.py\".format(config.root)\n\tconfig.versionfile_build = \"src/{}/_version.py\".format(config.root)\n\tconfig.tag_prefix = \"\"\n\tconfig.parentdir_prefix = \"src/\"\n\treturn config\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_config():\n\tconfig = VersioneerConfig()\n\tconfig.VCS = \"git\"\n\tconfig.style = \"pep440\"\n\tconfig.versionfile_source = \"src/{}/_version.py\".format(config.root)\n\tconfig.versionfile_build = \"src/{}/_version.py\".format(config.root)\n\tconfig.tag_prefix = \"\"\n\tconfig.parentdir_prefix = \"src/\"\n\treturn config\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "ques_id": "62b87d23d292efb640a55667", "code": ["def register_vcs_handler(vcs, method):\n\tdef decorator(func):\n\t\tfunc.vcs_handler = vcs\n\t\tfunc.vcs_method = method\n\t\treturn func\n\treturn decorator\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def register_vcs_handler(vcs, method):\n\tdef decorator(func):\n\t\tfunc.vcs_handler = vcs\n\t\tfunc.vcs_method = method\n\t\treturn func\n\treturn decorator\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "ques_id": "62b45e945108cfac7f210a4a", "code": ["def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n\t\tnum_objects = 0\n\t\tgood_objects = 0\n\t\tfor root, dirs, files in os.walk(self.root):\n\t\t\tfor name in files:\n\t\t\t\tnum_objects += 1\n\t\t\t\tif validate_objects:\n\t\t\t\t\ttry:\n\t\t\t\t\t\tobj = self.get_object(os.path.join(root, name))\n\t\t\t\t\t\tif check_digests:\n\t\t\t\t\t\t\tif obj.digest == obj.compute_digest():\n\t\t\t\t\t\t\t\tgood_objects += 1\n\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tif show_warnings:\n\t\t\t\t\t\t\t\t\tprint(\"WARNING: object %s has invalid digest\" % obj.path)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tgood_objects += 1\n\t\t\t\t\texcept:\n\t\t\t\t\t\tif show_warnings:\n\t\t\t\t\t\t\tprint(\"WARNING: object %s is invalid\"\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n\t\tnum_objects = 0\n\t\tgood_objects = 0\n\t\tfor root, dirs, files in os.walk(self.root):\n\t\t\tfor name in files:\n\t\t\t\tnum_objects += 1\n\t\t\t\tif validate_objects:\n\t\t\t\t\ttry:\n\t\t\t\t\t\tobj = self.get_object(os.path.join(root, name))\n\t\t\t\t\t\tif check_digests:\n\t\t\t\t\t\t\tif obj.digest == obj.compute_digest():\n\t\t\t\t\t\t\t\tgood_objects += 1\n\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tif show_warnings:\n\t\t\t\t\t\t\t\t\tprint(\"WARNING: object %s has invalid digest\" % obj.path)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tgood_objects += 1\n\t\t\t\t\texcept:\n\t\t\t\t\t\tif show_warnings:\n\t\t\t\t\t\t\tprint(\"WARNING: object %s is invalid\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "ques_id": "62b45e515108cfac7f210a3c", "code": ["def initialize(self):\n\tself.create_storage_root()\n\tself.create_inventory()\n\tself.create_inventory_object()\n\tself.create_inventory_version()\n\tself.create_inventory_version_files()\n\tself.create_inventory_version_fixity()\n\tself.create_inventory_version_fixity_sha1()\n\tself.create_inventory_version_fixity_sha256()\n\tself.create_inventory_version_fixity_sha512()\n\tself.create_inventory_version_fixity_md5()\n\tself.create_inventory_version_fixity_sha3_256()\n\tself.create_inventory_version_fixity_sha3_512()\n\tself.create_inventory_version_fixity_blake2b_256()\n\tself.create_inventory_version_fixity_blake2b_512()\n\tself.create_inventory_version_fixity_blake2s_256()\n\tself.create_inventory_version_fixity_blake2s_512()\n\tself.create_inventory_version_fixity_sha3\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def initialize(self):\n\tself.create_storage_root()\n\tself.create_inventory()\n\tself.create_inventory_object()\n\tself.create_inventory_version()\n\tself.create_inventory_version_files()\n\tself.create_inventory_version_fixity()\n\tself.create_inventory_version_fixity_sha1()\n\tself.create_inventory_version_fixity_sha256()\n\tself.create_inventory_version_fixity_sha512()\n\tself.create_inventory_version_fixity_md5()\n\tself.create_inventory_version_fixity_sha3_256()\n\tself.create_inventory_version_fixity_sha3_512()\n\tself.create_inventory_version_fixity_blake2b_256()\n\tself.create_inventory_version_fixity_blake2b_512()\n\tself.create_inventory_version_fixity_blake2s_256()\n\tself.create_inventory_version_fixity_blake2s_512()\n\tself.create_inventory_version_fixity_sha3\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "ques_id": "62b45e2eb89c9fd354170232", "code": ["def next_version(version):\n\tversion_list = [int(x) for x in version.split('.')]\n\tversion_list[-1] += 1\n\treturn '.'.join([str(x) for x in version_list])\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def next_version(version):\n\tversion_list = [int(x) for x in version.split('.')]\n\tversion_list[-1] += 1\n\treturn '.'.join([str(x) for x in version_list])\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "ques_id": "62b45e23e0d4551b0392c90a", "code": ["def validate_version_inventories(self, version_dirs):\n\t# TODO: check that the inventory is in the correct format\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t#\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_version_inventories(self, version_dirs):\n\t# TODO: check that the inventory is in the correct format\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t# TODO: check that the inventory is signed by the correct key\n\t#\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "ques_id": "62b45e21e0d4551b0392c8ed", "code": ["def find_path_type(path):\n\tif os.path.isfile(path):\n\t\treturn \"file\"\n\telif os.path.isdir(path):\n\t\treturn \"directory\"\n\telse:\n\t\treturn \"unknown\"\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_path_type(path):\n\tif os.path.isfile(path):\n\t\treturn \"file\"\n\telif os.path.isdir(path):\n\t\treturn \"directory\"\n\telse:\n\t\treturn \"unknown\"\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "ques_id": "62b45b396decaeff903e1001", "code": ["def amend_bzparams(self, params, bug_ids):\n\tparams['bug_id'] = bug_ids\n\tparams['include_fields'] = ['id', 'summary', 'status', 'resolution', 'assigned_to', 'last_change_time']\n\tparams['permissive'] = 1\n\treturn params\n\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def amend_bzparams(self, params, bug_ids):\n\tparams['bug_id'] = bug_ids\n\tparams['include_fields'] = ['id', 'summary', 'status', 'resolution', 'assigned_to', 'last_change_time']\n\tparams['permissive'] = 1\n\treturn params\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b4567ed7d32e5b55cc83d9", "code": ["def deep_merge_nodes(nodes):\n\tresult = {}\n\tfor node in nodes:\n\t\tfor key, value in node.items():\n\t\t\tif key in result:\n\t\t\t\tif isinstance(result[key], MappingNode):\n\t\t\t\t\tresult[key] = deep_merge_nodes([result[key], value])\n\t\t\t\telse:\n\t\t\t\t\tresult[key] = value\n\t\t\telse:\n\t\t\t\tresult[key] = value\n\treturn MappingNode(result)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n\tresult = {}\n\tfor node in nodes:\n\t\tfor key, value in node.items():\n\t\t\tif key in result:\n\t\t\t\tif isinstance(result[key], MappingNode):\n\t\t\t\t\tresult[key] = deep_merge_nodes([result[key], value])\n\t\t\t\telse:\n\t\t\t\t\tresult[key] = value\n\t\t\telse:\n\t\t\t\tresult[key] = value\n\treturn MappingNode(result)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b4567ad7d32e5b55cc83af", "code": ["def parse_arguments(*arguments):\n\tparser = argparse.ArgumentParser(description='Generate a list of all the files in a directory and its subdirectories')\n\tparser.add_argument('-d', '--directory', help='The directory to scan', required=True)\n\tparser.add_argument('-o', '--output', help='The file to which the output should be written', required=True)\n\tparser.add_argument('-r', '--recursive', help='Scan subdirectories recursively', action='store_true')\n\tparser.add_argument('-v', '--verbose', help='Print verbose output', action='store_true')\n\treturn parser.parse_args(arguments)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n\tparser = argparse.ArgumentParser(description='Generate a list of all the files in a directory and its subdirectories')\n\tparser.add_argument('-d', '--directory', help='The directory to scan', required=True)\n\tparser.add_argument('-o', '--output', help='The file to which the output should be written', required=True)\n\tparser.add_argument('-r', '--recursive', help='Scan subdirectories recursively', action='store_true')\n\tparser.add_argument('-v', '--verbose', help='Print verbose output', action='store_true')\n\treturn parser.parse_args(arguments)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b45679d7d32e5b55cc83a9", "code": ["def parser_flags(parser):\n\treturn \" \".join(parser._get_optional_actions() + parser._get_positional_actions())\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n\treturn \" \".join(parser._get_optional_actions() + parser._get_positional_actions())\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b45665d7d32e5b55cc8365", "code": ["def parse_arguments(*unparsed_arguments):\n\tparser = argparse.ArgumentParser(description='Process some integers.')\n\tparser.add_argument('--input', type=str, default='', help='Input file')\n\tparser.add_argument('--output', type=str, default='', help='Output file')\n\tparser.add_argument('--verbose', type=bool, default=False, help='Verbose output')\n\tparser.add_argument('--debug', type=bool, default=False, help='Debug output')\n\tparser.add_argument('--test', type=bool, default=False, help='Test mode')\n\tparser.add_argument('--test_input', type=str, default='', help='Test input')\n\tparser.add_argument('--test_output', type=str, default='', help='Test output')\n\tparser.add_argument('--test_iterations', type=int, default=1, help='Test iterations')\n\tparser.add_argument('--test_iteration', type=int, default=0, help='Test iteration')\n\tparser.add_argument('--test_case', type=\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n\tparser = argparse.ArgumentParser(description='Process some integers.')\n\tparser.add_argument('--input', type=str, default='', help='Input file')\n\tparser.add_argument('--output', type=str, default='', help='Output file')\n\tparser.add_argument('--verbose', type=bool, default=False, help='Verbose output')\n\tparser.add_argument('--debug', type=bool, default=False, help='Debug output')\n\tparser.add_argument('--test', type=bool, default=False, help='Test mode')\n\tparser.add_argument('--test_input', type=str, default='', help='Test input')\n\tparser.add_argument('--test_output', type=str, default='', help='Test output')\n\tparser.add_argument('--test_iterations', type=int, default=1, help='Test iterations')\n\tparser.add_argument('--test_iteration', type=int, default=0, help='Test iteration')\n\tparser.add_argument('--test_case', type=\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b45665d7d32e5b55cc8364", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n\t# Parse the arguments into a namespace.\n\tnamespace, remaining_arguments = parse_arguments(unparsed_arguments, subparsers)\n\n\t# If the user didn't specify a subparser, we can't do anything.\n\tif namespace.subparser is None:\n\t\treturn None, None\n\n\t# Get the subparser for the requested action.\n\tsubparser = subparsers[namespace.subparser]\n\n\t# Parse the arguments again, this time with the subparser.\n\tnamespace, remaining_arguments = parse_arguments(remaining_arguments, subparser)\n\n\t# Return the parsed arguments.\n\treturn namespace, remaining_arguments\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n\t# Parse the arguments into a namespace.\n\tnamespace, remaining_arguments = parse_arguments(unparsed_arguments, subparsers)\n\n\t# If the user didn't specify a subparser, we can't do anything.\n\tif namespace.subparser is None:\n\t\treturn None, None\n\n\t# Get the subparser for the requested action.\n\tsubparser = subparsers[namespace.subparser]\n\n\t# Parse the arguments again, this time with the subparser.\n\tnamespace, remaining_arguments = parse_arguments(remaining_arguments, subparser)\n\n\t# Return the parsed arguments.\n\treturn namespace, remaining_arguments\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b45665d7d32e5b55cc8363", "code": ["def make_parsers():\n\tparser = argparse.ArgumentParser(description=\"A tool for managing the \"\n\t\t\"configuration of the OpenVPN server.\")\n\tsubparsers = parser.add_subparsers(title=\"commands\", dest=\"command\")\n\n\t# Add the \"list\" command.\n\tlist_parser = subparsers.add_parser(\"list\", help=\"list all clients\")\n\tlist_parser.add_argument(\"--format\", choices=[\"json\", \"yaml\"],\n\t\tdefault=\"yaml\", help=\"the output format\")\n\n\t# Add the \"add\" command.\n\tadd_parser = subparsers.add_parser(\"add\", help=\"add a client\")\n\tadd_parser.add_argument(\"--name\", required=True, help=\"the name of the \"\n\t\t\"client\")\n\tadd_parser.add_argument(\"--cert\", required=True, help=\"the path to the \"\n\t\t\"client certificate\")\n\tadd_parser.add_argument(\"--key\", required=True, help=\"the path to the \"\n\t\t\"client key\")\n\tadd_parser.add_argument(\"\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n\tparser = argparse.ArgumentParser(description=\"A tool for managing the \"\n\t\t\"configuration of the OpenVPN server.\")\n\tsubparsers = parser.add_subparsers(title=\"commands\", dest=\"command\")\n\n\t# Add the \"list\" command.\n\tlist_parser = subparsers.add_parser(\"list\", help=\"list all clients\")\n\tlist_parser.add_argument(\"--format\", choices=[\"json\", \"yaml\"],\n\t\tdefault=\"yaml\", help=\"the output format\")\n\n\t# Add the \"add\" command.\n\tadd_parser = subparsers.add_parser(\"add\", help=\"add a client\")\n\tadd_parser.add_argument(\"--name\", required=True, help=\"the name of the \"\n\t\t\"client\")\n\tadd_parser.add_argument(\"--cert\", required=True, help=\"the path to the \"\n\t\t\"client certificate\")\n\tadd_parser.add_argument(\"--key\", required=True, help=\"the path to the \"\n\t\t\"client key\")\n\tadd_parser.add_argument(\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b438ba66fea644fe22cca2", "code": ["def deep_merge_nodes(nodes):\n\tresult = {}\n\tfor node in nodes:\n\t\tfor key, value in node.items():\n\t\t\tif key in result:\n\t\t\t\tif isinstance(result[key], MappingNode):\n\t\t\t\t\tif isinstance(value, MappingNode):\n\t\t\t\t\t\tresult[key] = deep_merge_nodes([result[key], value])\n\t\t\t\t\telse:\n\t\t\t\t\t\tresult[key] = value\n\t\t\t\telse:\n\t\t\t\t\tresult[key] = value\n\t\t\telse:\n\t\t\t\tresult[key] = value\n\treturn MappingNode(result)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n\tresult = {}\n\tfor node in nodes:\n\t\tfor key, value in node.items():\n\t\t\tif key in result:\n\t\t\t\tif isinstance(result[key], MappingNode):\n\t\t\t\t\tif isinstance(value, MappingNode):\n\t\t\t\t\t\tresult[key] = deep_merge_nodes([result[key], value])\n\t\t\t\t\telse:\n\t\t\t\t\t\tresult[key] = value\n\t\t\t\telse:\n\t\t\t\t\tresult[key] = value\n\t\t\telse:\n\t\t\t\tresult[key] = value\n\treturn MappingNode(result)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b438b666fea644fe22cc78", "code": ["def parse_arguments(*arguments):\n\tparser = argparse.ArgumentParser(description=\"This script is used to create a new user in the database\")\n\tparser.add_argument(\"-u\", \"--username\", help=\"The username of the user to be created\")\n\tparser.add_argument(\"-p\", \"--password\", help=\"The password of the user to be created\")\n\tparser.add_argument(\"-e\", \"--email\", help=\"The email of the user to be created\")\n\tparser.add_argument(\"-f\", \"--firstname\", help=\"The first name of the user to be created\")\n\tparser.add_argument(\"-l\", \"--lastname\", help=\"The last name of the user to be created\")\n\tparser.add_argument(\"-d\", \"--description\", help=\"The description of the user to be created\")\n\tparser.add_argument(\"-c\", \"--country\", help=\"The country of the user to be created\")\n\tparser.add_argument(\"-g\", \"--gender\", help=\"The gender of the user to be created\")\n\tparser.add_argument(\"-a\", \"--age\", help=\"The age of\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n\tparser = argparse.ArgumentParser(description=\"This script is used to create a new user in the database\")\n\tparser.add_argument(\"-u\", \"--username\", help=\"The username of the user to be created\")\n\tparser.add_argument(\"-p\", \"--password\", help=\"The password of the user to be created\")\n\tparser.add_argument(\"-e\", \"--email\", help=\"The email of the user to be created\")\n\tparser.add_argument(\"-f\", \"--firstname\", help=\"The first name of the user to be created\")\n\tparser.add_argument(\"-l\", \"--lastname\", help=\"The last name of the user to be created\")\n\tparser.add_argument(\"-d\", \"--description\", help=\"The description of the user to be created\")\n\tparser.add_argument(\"-c\", \"--country\", help=\"The country of the user to be created\")\n\tparser.add_argument(\"-g\", \"--gender\", help=\"The gender of the user to be created\")\n\tparser.add_argument(\"-a\", \"--age\", help=\"The age of\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b438b666fea644fe22cc72", "code": ["def parser_flags(parser):\n\treturn ' '.join(\n\t\t[\n\t\t\t'--{}'.format(flag)\n\t\t\tfor flag in parser._option_string_actions.keys()\n\t\t]\n\t)\n\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n\treturn ' '.join(\n\t\t[\n\t\t\t'--{}'.format(flag)\n\t\t\tfor flag in parser._option_string_actions.keys()\n\t\t]\n\t)\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "ques_id": "62b438b566fea644fe22cc70", "code": ["def bash_completion():\n\tparser = argparse.ArgumentParser(add_help=False)\n\tsubparsers = parser.add_subparsers(dest='command')\n\tborgmatic.cli.add_subparsers(subparsers)\n\treturn parser.format_help()\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def bash_completion():\n\tparser = argparse.ArgumentParser(add_help=False)\n\tsubparsers = parser.add_subparsers(dest='command')\n\tborgmatic.cli.add_subparsers(subparsers)\n\treturn parser.format_help()\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b438a266fea644fe22cc2e", "code": ["def parse_arguments(*unparsed_arguments):\n\tparser = argparse.ArgumentParser(description=\"\"\"\n\t\tThis script is a wrapper around the rsync command. It is intended to be used for\n\t\tsynchronizing files between a local directory and a remote directory.\n\t\t\"\"\")\n\tparser.add_argument(\"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n\tparser.add_argument(\"--verbose\", \"-v\", action=\"store_true\", help=\"\"\"\n\t\tPrint more information about what is happening.\n\t\t\"\"\")\n\tparser.add_argument(\"--quiet\", \"-q\", action=\"store_true\", help=\"\"\"\n\t\tPrint less information about what is happening.\n\t\t\"\"\")\n\tparser.add_argument(\"--dry-run\", \"-n\", action=\"store_true\", help=\"\"\"\n\t\tDo not actually perform any actions, but instead print what actions would be performed.\n\t\t\"\"\")\n\tparser.add_argument(\"--no-progress\", action=\"store_true\", help=\"\"\"\n\t\tDo not print a progress bar.\n\t\t\"\"\")\n\tparser.add_argument(\"\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n\tparser = argparse.ArgumentParser(description=\"\"\"\n\t\tThis script is a wrapper around the rsync command. It is intended to be used for\n\t\tsynchronizing files between a local directory and a remote directory.\n\t\t\"\"\")\n\tparser.add_argument(\"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n\tparser.add_argument(\"--verbose\", \"-v\", action=\"store_true\", help=\"\"\"\n\t\tPrint more information about what is happening.\n\t\t\"\"\")\n\tparser.add_argument(\"--quiet\", \"-q\", action=\"store_true\", help=\"\"\"\n\t\tPrint less information about what is happening.\n\t\t\"\"\")\n\tparser.add_argument(\"--dry-run\", \"-n\", action=\"store_true\", help=\"\"\"\n\t\tDo not actually perform any actions, but instead print what actions would be performed.\n\t\t\"\"\")\n\tparser.add_argument(\"--no-progress\", action=\"store_true\", help=\"\"\"\n\t\tDo not print a progress bar.\n\t\t\"\"\")\n\tparser.add_argument(\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b438a266fea644fe22cc2d", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n\tsubparser_names = subparsers.keys()\n\tsubparser_name_to_arguments = {}\n\tremaining_arguments = []\n\tfor argument in unparsed_arguments:\n\t\tif argument in subparser_names:\n\t\t\tsubparser_name = argument\n\t\t\tsubparser_name_to_arguments[subparser_name] = []\n\t\telse:\n\t\t\tif subparser_name is None:\n\t\t\t\tremaining_arguments.append(argument)\n\t\t\telse:\n\t\t\t\tsubparser_name_to_arguments[subparser_name].append(argument)\n\tsubparser_name_to_namespace = {}\n\tfor subparser_name, subparser_arguments in subparser_name_to_arguments.iteritems():\n\t\tsubparser = subparsers[subparser_name]\n\t\tsubparser_name_to_namespace[subparser_name] = subparser.parse_args(subparser_arguments)\n\treturn subparser_name_to_namespace, remaining_arguments\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n\tsubparser_names = subparsers.keys()\n\tsubparser_name_to_arguments = {}\n\tremaining_arguments = []\n\tfor argument in unparsed_arguments:\n\t\tif argument in subparser_names:\n\t\t\tsubparser_name = argument\n\t\t\tsubparser_name_to_arguments[subparser_name] = []\n\t\telse:\n\t\t\tif subparser_name is None:\n\t\t\t\tremaining_arguments.append(argument)\n\t\t\telse:\n\t\t\t\tsubparser_name_to_arguments[subparser_name].append(argument)\n\tsubparser_name_to_namespace = {}\n\tfor subparser_name, subparser_arguments in subparser_name_to_arguments.iteritems():\n\t\tsubparser = subparsers[subparser_name]\n\t\tsubparser_name_to_namespace[subparser_name] = subparser.parse_args(subparser_arguments)\n\treturn subparser_name_to_namespace, remaining_arguments\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b438a266fea644fe22cc2c", "code": ["def make_parsers():\n\ttop_parser = argparse.ArgumentParser(\n\t\tdescription=\"A tool for managing the configuration of a \"\n\t\t\"Docker-based development environment.\",\n\t\tformatter_class=argparse.RawDescriptionHelpFormatter,\n\t\tepilog=textwrap.dedent(\"\"\"\n\t\t\tExamples:\n\t\t\t  # Build the development environment.\n\t\t\t  $ %(prog)s build\n\n\t\t\t  # Start the development environment.\n\t\t\t  $ %(prog)s start\n\n\t\t\t  # Stop the development environment.\n\t\t\t  $ %(prog)s stop\n\n\t\t\t  # Restart the development environment.\n\t\t\t  $ %(prog)s restart\n\n\t\t\t  # Destroy the development environment.\n\t\t\t  $ %(prog)s destroy\n\n\t\t\t  # Run a command in the development environment.\n\t\t\t  $ %(prog)s run -- ls -l\n\n\t\t\t  # Run a command in the development environment and\n\t\t\t  # attach to its standard input, output, and error.\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n\ttop_parser = argparse.ArgumentParser(\n\t\tdescription=\"A tool for managing the configuration of a \"\n\t\t\"Docker-based development environment.\",\n\t\tformatter_class=argparse.RawDescriptionHelpFormatter,\n\t\tepilog=textwrap.dedent(\"\"\"\n\t\t\tExamples:\n\t\t\t  # Build the development environment.\n\t\t\t  $ %(prog)s build\n\n\t\t\t  # Start the development environment.\n\t\t\t  $ %(prog)s start\n\n\t\t\t  # Stop the development environment.\n\t\t\t  $ %(prog)s stop\n\n\t\t\t  # Restart the development environment.\n\t\t\t  $ %(prog)s restart\n\n\t\t\t  # Destroy the development environment.\n\t\t\t  $ %(prog)s destroy\n\n\t\t\t  # Run a command in the development environment.\n\t\t\t  $ %(prog)s run -- ls -l\n\n\t\t\t  # Run a command in the development environment and\n\t\t\t  # attach to its standard input, output, and error.\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_10.py", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "ques_id": "62ece4982e6aefcf4aabbd5f", "code": ["def paging(response, max_results):\n\tif max_results == 0:\n\t\treturn response\n\telse:\n\t\tpages = math.ceil(len(response)/max_results)\n\t\tfor page in range(pages):\n\t\t\tyield response[page*max_results:(page+1)*max_results]\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def paging(response, max_results):\n\tif max_results == 0:\n\t\treturn response\n\telse:\n\t\tpages = math.ceil(len(response)/max_results)\n\t\tfor page in range(pages):\n\t\t\tyield response[page*max_results:(page+1)*max_results]\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_20.py", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "ques_id": "62ece4982e6aefcf4aabbd60", "code": ["def size_to_bytes(size:\n\tsize = size.upper()\n\tif not re.match(r' ', size):\n\t\tsize = re.sub(r'([KMGT]?)', r' \\1', size)\n\tnumber, suffix = [string.strip() for string in size.split()]\n\tsuffixes = {'': 1, 'K': 1 << 10, 'M': 1 << 20, 'G': 1 << 30, 'T': 1 << 40}\n\treturn int(float(number) * suffixes[suffix])\n\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def size_to_bytes(size:\n\tsize = size.upper()\n\tif not re.match(r' ', size):\n\t\tsize = re.sub(r'([KMGT]?)', r' \\1', size)\n\tnumber, suffix = [string.strip() for string in size.split()]\n\tsuffixes = {'': 1, 'K': 1 << 10, 'M': 1 << 20, 'G': 1 << 30, 'T': 1 << 40}\n\treturn int(float(number) * suffixes[suffix])\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_14.py", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "ques_id": "62ece4982e6aefcf4aabbd61", "code": ["def _dictsum(dicts):\n\tdic = {}\n\tfor d in dicts:\n\t\tfor k, v in d.items():\n\t\t\tif k in dic:\n\t\t\t\tdic[k] += v\n\t\t\telse:\n\t\t\t\tdic[k] = v\n\treturn dic\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _dictsum(dicts):\n\tdic = {}\n\tfor d in dicts:\n\t\tfor k, v in d.items():\n\t\t\tif k in dic:\n\t\t\t\tdic[k] += v\n\t\t\telse:\n\t\t\t\tdic[k] = v\n\treturn dic\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_15.py", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "ques_id": "62ece4982e6aefcf4aabbd62", "code": ["def _replace_url_args(url, url_args):\n\tif url_args:\n\t\tfor key, value in url_args.items():\n\t\t\turl = url.replace(key, value)\n\treturn url\n\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_url_args(url, url_args):\n\tif url_args:\n\t\tfor key, value in url_args.items():\n\t\t\turl = url.replace(key, value)\n\treturn url\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_5.py", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "ques_id": "62ece4982e6aefcf4aabbd63", "code": ["def is_none_string(val:\n\treturn isinstance(val, str) and val.lower() == 'none'\n\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_none_string(val:\n\treturn isinstance(val, str) and val.lower() == 'none'\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_1.py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "ques_id": "62ece4982e6aefcf4aabbd64", "code": ["def strip_root(path, root):\n\tif not path.startswith(root):\n\t\traise Exception(\"Path '%s' does not start with root '%s'\" % (path, root))\n\treturn path[len(root):]\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def strip_root(path, root):\n\tif not path.startswith(root):\n\t\traise Exception(\"Path '%s' does not start with root '%s'\" % (path, root))\n\treturn path[len(root):]\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_8.py", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62ece4982e6aefcf4aabbd65", "code": ["def parser_flags(parser):\n\treturn ' '.join(['--{}'.format(arg) for arg in vars(parser.parse_args())])\n\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n\treturn ' '.join(['--{}'.format(arg) for arg in vars(parser.parse_args())])\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_19.py", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "ques_id": "62ece4982e6aefcf4aabbd66", "code": ["def was_processed(processed, path_name, verbose):\n\tpath_name = os.path.abspath(path_name)\n\tif path_name in processed:\n\t\tif verbose:\n\t\t\tprint(\"{0} already processed\".format(path_name))\n\t\treturn True\n\telse:\n\t\tprocessed.add(path_name)\n\t\treturn False\n\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def was_processed(processed, path_name, verbose):\n\tpath_name = os.path.abspath(path_name)\n\tif path_name in processed:\n\t\tif verbose:\n\t\t\tprint(\"{0} already processed\".format(path_name))\n\t\treturn True\n\telse:\n\t\tprocessed.add(path_name)\n\t\treturn False\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_9.py", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "ques_id": "62ece4982e6aefcf4aabbd67", "code": ["def vertex3tuple(vertices):\n\tvertices_tuple = []\n\tfor i in range(len(vertices)):\n\t\tvertices_tuple.append((vertices[i-2], vertices[i-1], vertices[i]))\n\treturn vertices_tuple\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def vertex3tuple(vertices):\n\tvertices_tuple = []\n\tfor i in range(len(vertices)):\n\t\tvertices_tuple.append((vertices[i-2], vertices[i-1], vertices[i]))\n\treturn vertices_tuple\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_6.py", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd68", "code": ["def int_to_string(number:\n\tif number == 0:\n\t\treturn alphabet[0]\n\tarr = []\n\tbase = len(alphabet)\n\twhile number:\n\t\trem = number % base\n\t\tnumber = number // base\n\t\tarr.append(alphabet[rem])\n\tarr.reverse()\n\treturn ''.join(arr)\n\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def int_to_string(number:\n\tif number == 0:\n\t\treturn alphabet[0]\n\tarr = []\n\tbase = len(alphabet)\n\twhile number:\n\t\trem = number % base\n\t\tnumber = number // base\n\t\tarr.append(alphabet[rem])\n\tarr.reverse()\n\treturn ''.join(arr)\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_12.py", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "ques_id": "62ece4982e6aefcf4aabbd69", "code": ["def _replace_register(flow_params, register_number, register_value):\n\tflow_params[register_number] = flow_params[register_value]\n\tdel flow_params[register_value]\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_register(flow_params, register_number, register_value):\n\tflow_params[register_number] = flow_params[register_value]\n\tdel flow_params[register_value]\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_2.py", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "ques_id": "62ece4982e6aefcf4aabbd6a", "code": ["def replace_dots(value, arg):\n\treturn value.replace('.', arg)\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def replace_dots(value, arg):\n\treturn value.replace('.', arg)\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_3.py", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "ques_id": "62ece4982e6aefcf4aabbd6b", "code": ["def subclasses(cls):\n\tsubclasses = cls.__subclasses__()\n\tfor subclass in subclasses:\n\t\tsubclasses.extend(subclasses(subclass))\n\treturn subclasses\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def subclasses(cls):\n\tsubclasses = cls.__subclasses__()\n\tfor subclass in subclasses:\n\t\tsubclasses.extend(subclasses(subclass))\n\treturn subclasses\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_7.py", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd6d", "code": ["def string_to_int(string:\n\tif len(string) == 0:\n\t\treturn 0\n\telse:\n\t\treturn alphabet.index(string[0]) + len(alphabet) * string_to_int(string[1:], alphabet)\n\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def string_to_int(string:\n\tif len(string) == 0:\n\t\treturn 0\n\telse:\n\t\treturn alphabet.index(string[0]) + len(alphabet) * string_to_int(string[1:], alphabet)\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_24.py", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "ques_id": "62ece4982e6aefcf4aabbd6f", "code": ["def get_repo_archive(url:\n\tarchive_path = destination_path / url.split('/')[-1]\n\tif not archive_path.exists():\n\t\tlogger.info(f\"Downloading {url} to {archive_path}\")\n\t\twith requests.get(url, stream=True) as r:\n\t\t\tr.raise_for_status()\n\t\t\twith open(archive_path, 'wb') as f:\n\t\t\t\tfor chunk in r.iter_content(chunk_size=8192):\n\t\t\t\t\tif chunk:\n\t\t\t\t\t\tf.write(chunk)\n\telse:\n\t\tlogger.info(f\"{archive_path} already exists, skipping download\")\n\n\tlogger.info(f\"Extracting {archive_path} to {destination_path}\")\n\twith tarfile.open(archive_path) as tar:\n\t\ttar.extractall(destination_path)\n\n\treturn destination_path\n\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_repo_archive(url:\n\tarchive_path = destination_path / url.split('/')[-1]\n\tif not archive_path.exists():\n\t\tlogger.info(f\"Downloading {url} to {archive_path}\")\n\t\twith requests.get(url, stream=True) as r:\n\t\t\tr.raise_for_status()\n\t\t\twith open(archive_path, 'wb') as f:\n\t\t\t\tfor chunk in r.iter_content(chunk_size=8192):\n\t\t\t\t\tif chunk:\n\t\t\t\t\t\tf.write(chunk)\n\telse:\n\t\tlogger.info(f\"{archive_path} already exists, skipping download\")\n\n\tlogger.info(f\"Extracting {archive_path} to {destination_path}\")\n\twith tarfile.open(archive_path) as tar:\n\t\ttar.extractall(destination_path)\n\n\treturn destination_path\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_20.py", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "ques_id": "62ece4982e6aefcf4aabbd70", "code": ["def os_is_mac():\n\treturn platform.system() == 'Darwin'\n\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def os_is_mac():\n\treturn platform.system() == 'Darwin'\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_14.py", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "ques_id": "62ece4982e6aefcf4aabbd71", "code": ["def regex_dict(item):\n\treturn {re.compile(fnmatch.translate(k)): v for k, v in item.items()}\n\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def regex_dict(item):\n\treturn {re.compile(fnmatch.translate(k)): v for k, v in item.items()}\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_4.py", "name": "unquote", "docstring": "Remove quote from the given name.", "ques_id": "62ece4982e6aefcf4aabbd72", "code": ["def unquote(name):\n\treturn re.sub(r'^\"|\"$', '', name)\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def unquote(name):\n\treturn re.sub(r'^\"|\"$', '', name)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_21.py", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "ques_id": "62ece4982e6aefcf4aabbd73", "code": ["def split(s, platform='this'):\n\tif platform == 'this':\n\t\tplatform = this_platform\n\tif platform == 1:\n\t\treturn s.split('/')\n\telif platform == 0:\n\t\treturn s.split('\\\\')\n\telse:\n\t\traise ValueError('Unknown platform: ' + platform)\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def split(s, platform='this'):\n\tif platform == 'this':\n\t\tplatform = this_platform\n\tif platform == 1:\n\t\treturn s.split('/')\n\telif platform == 0:\n\t\treturn s.split('\\\\')\n\telse:\n\t\traise ValueError('Unknown platform: ' + platform)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_15.py", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "ques_id": "62ece4982e6aefcf4aabbd74", "code": ["def prepare_repository_from_archive(\n    archive_path:\n\tif not filename:\n\t\tfilename = os.path.basename(archive_path)\n\ttmp_path = Path(tmp_path)\n\ttmp_path.mkdir(parents=True, exist_ok=True)\n\ttmp_path = tmp_path / filename\n\ttmp_path.unlink(missing_ok=True)\n\tshutil.copyfile(archive_path, tmp_path)\n\treturn prepare_repository_from_archive_file(tmp_path)\n\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def prepare_repository_from_archive(\n    archive_path:\n\tif not filename:\n\t\tfilename = os.path.basename(archive_path)\n\ttmp_path = Path(tmp_path)\n\ttmp_path.mkdir(parents=True, exist_ok=True)\n\ttmp_path = tmp_path / filename\n\ttmp_path.unlink(missing_ok=True)\n\tshutil.copyfile(archive_path, tmp_path)\n\treturn prepare_repository_from_archive_file(tmp_path)\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_5.py", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "ques_id": "62ece4982e6aefcf4aabbd75", "code": ["def addignored(ignored):\n\tignored = subprocess.check_output(['git', 'ls-files', '--others', '--exclude-standard']).decode('utf-8').split('\\n')\n\tignored.sort()\n\tignored = ', '.join(ignored)\n\treturn ignored\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def addignored(ignored):\n\tignored = subprocess.check_output(['git', 'ls-files', '--others', '--exclude-standard']).decode('utf-8').split('\\n')\n\tignored.sort()\n\tignored = ', '.join(ignored)\n\treturn ignored\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_11.py", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "ques_id": "62ece4982e6aefcf4aabbd76", "code": ["def match(filename):\n\treturn filename.lower().endswith('.doxyfile')\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match(filename):\n\treturn filename.lower().endswith('.doxyfile')\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_1.py", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "ques_id": "62ece4982e6aefcf4aabbd77", "code": ["def parse_frequency(frequency):\n\tif frequency is None or frequency == \"always\":\n\t\treturn None\n\ttry:\n\t\tnumber, timeunit = frequency.split()\n\texcept ValueError:\n\t\traise ValueError(\"Frequency should be in the form 'number timeunit'\")\n\tnumber = int(number)\n\tif timeunit == \"days\":\n\t\treturn datetime.timedelta(days=number)\n\telif timeunit == \"hours\":\n\t\treturn datetime.timedelta(hours=number)\n\telif timeunit == \"minutes\":\n\t\treturn datetime.timedelta(minutes=number)\n\telif timeunit == \"seconds\":\n\t\treturn datetime.timedelta(seconds=number)\n\telse:\n\t\traise ValueError(\"Time unit should be one of 'days', 'hours', 'minutes' or 'seconds'\")\n\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def parse_frequency(frequency):\n\tif frequency is None or frequency == \"always\":\n\t\treturn None\n\ttry:\n\t\tnumber, timeunit = frequency.split()\n\texcept ValueError:\n\t\traise ValueError(\"Frequency should be in the form 'number timeunit'\")\n\tnumber = int(number)\n\tif timeunit == \"days\":\n\t\treturn datetime.timedelta(days=number)\n\telif timeunit == \"hours\":\n\t\treturn datetime.timedelta(hours=number)\n\telif timeunit == \"minutes\":\n\t\treturn datetime.timedelta(minutes=number)\n\telif timeunit == \"seconds\":\n\t\treturn datetime.timedelta(seconds=number)\n\telse:\n\t\traise ValueError(\"Time unit should be one of 'days', 'hours', 'minutes' or 'seconds'\")\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_18.py", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "ques_id": "62ece4992e6aefcf4aabbd78", "code": ["def is_local(host):\n\treturn host in ['localhost', '127.0.0.1', socket.gethostname(), socket.gethostbyname(socket.gethostname())]\n\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_local(host):\n\treturn host in ['localhost', '127.0.0.1', socket.gethostname(), socket.gethostbyname(socket.gethostname())]\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_8.py", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "ques_id": "62ece4992e6aefcf4aabbd79", "code": ["def make_find_paths(find_paths):\n\treturn tuple(\n\t\tpath if isinstance(path, glob.Glob) else glob.Glob(path)\n\t\tfor path in find_paths\n\t)\n\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def make_find_paths(find_paths):\n\treturn tuple(\n\t\tpath if isinstance(path, glob.Glob) else glob.Glob(path)\n\t\tfor path in find_paths\n\t)\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_19.py", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "ques_id": "62ece4992e6aefcf4aabbd7a", "code": ["def is_gitbash():\n\treturn os.environ.get('MSYSTEM') == 'MINGW64'\n\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_gitbash():\n\treturn os.environ.get('MSYSTEM') == 'MINGW64'\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_9.py", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "ques_id": "62ece4992e6aefcf4aabbd7b", "code": ["def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n\tif not overwrite and os.path.exists(config_filename):\n\t\traise FileExistsError(config_filename)\n\twith open(config_filename, 'w') as f:\n\t\tf.write(rendered_config)\n\tos.chmod(config_filename, mode)\n\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n\tif not overwrite and os.path.exists(config_filename):\n\t\traise FileExistsError(config_filename)\n\twith open(config_filename, 'w') as f:\n\t\tf.write(rendered_config)\n\tos.chmod(config_filename, mode)\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_22.py", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "ques_id": "62ece4992e6aefcf4aabbd7c", "code": ["def oneline(script, seperator=\" && \"):\n\treturn seperator.join(script)\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def oneline(script, seperator=\" && \"):\n\treturn seperator.join(script)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_16.py", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "ques_id": "62ece4992e6aefcf4aabbd7d", "code": ["def subprocess_run_helper(func, *args, timeout, extra_env=None):\n\t# Create a temporary file to store the output\n\twith tempfile.NamedTemporaryFile(mode='w+') as f:\n\t\t# Create a temporary file to store the error\n\t\twith tempfile.NamedTemporaryFile(mode='w+') as f_err:\n\t\t\t# Create a temporary file to store the return code\n\t\t\twith tempfile.NamedTemporaryFile(mode='w+') as f_ret:\n\t\t\t\t# Create a temporary file to store the exception\n\t\t\t\twith tempfile.NamedTemporaryFile(mode='w+') as f_exc:\n\t\t\t\t\t# Create a temporary file to store the exception traceback\n\t\t\t\t\twith tempfile.NamedTemporaryFile(mode='w+') as f_exc_tb:\n\t\t\t\t\t\t# Create a temporary file to store the exception type\n\t\t\t\t\t\twith tempfile.NamedTemporaryFile(mode='w+') as f_exc_type:\n\t\t\t\t\t\t\t# Create a temporary file to store the exception value\n\t\t\t\t\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n\t# Create a temporary file to store the output\n\twith tempfile.NamedTemporaryFile(mode='w+') as f:\n\t\t# Create a temporary file to store the error\n\t\twith tempfile.NamedTemporaryFile(mode='w+') as f_err:\n\t\t\t# Create a temporary file to store the return code\n\t\t\twith tempfile.NamedTemporaryFile(mode='w+') as f_ret:\n\t\t\t\t# Create a temporary file to store the exception\n\t\t\t\twith tempfile.NamedTemporaryFile(mode='w+') as f_exc:\n\t\t\t\t\t# Create a temporary file to store the exception traceback\n\t\t\t\t\twith tempfile.NamedTemporaryFile(mode='w+') as f_exc_tb:\n\t\t\t\t\t\t# Create a temporary file to store the exception type\n\t\t\t\t\t\twith tempfile.NamedTemporaryFile(mode='w+') as f_exc_type:\n\t\t\t\t\t\t\t# Create a temporary file to store the exception value\n\t\t\t\t\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_6.py", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "ques_id": "62ece4992e6aefcf4aabbd7e", "code": ["def _resolve_string(matcher):\n\tname = matcher.group('name')\n\tdefault = matcher.group('default')\n\tif name in os.environ:\n\t\treturn os.environ[name]\n\telif default is not None:\n\t\treturn default\n\telse:\n\t\traise Error(\"Variable '{}' is not defined in environment\".format(name))\n\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _resolve_string(matcher):\n\tname = matcher.group('name')\n\tdefault = matcher.group('default')\n\tif name in os.environ:\n\t\treturn os.environ[name]\n\telif default is not None:\n\t\treturn default\n\telse:\n\t\traise Error(\"Variable '{}' is not defined in environment\".format(name))\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_2.py", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "ques_id": "62ece4992e6aefcf4aabbd7f", "code": ["def _parse_image_ref(image_href:\n\turl = urlparse(image_href)\n\n\t# if url.scheme not in ('http', 'https'):\n\t#     msg = \"Invalid scheme '%s' for image href\" % url.scheme\n\t#     raise ValueError(msg)\n\n\timage_id = url.path.split('/')[-1]\n\n\tif url.scheme == 'https':\n\t\tuse_ssl = True\n\telse:\n\t\tuse_ssl = False\n\n\treturn image_id, url.netloc, use_ssl\n\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _parse_image_ref(image_href:\n\turl = urlparse(image_href)\n\n\t# if url.scheme not in ('http', 'https'):\n\t#     msg = \"Invalid scheme '%s' for image href\" % url.scheme\n\t#     raise ValueError(msg)\n\n\timage_id = url.path.split('/')[-1]\n\n\tif url.scheme == 'https':\n\t\tuse_ssl = True\n\telse:\n\t\tuse_ssl = False\n\n\treturn image_id, url.netloc, use_ssl\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_13.py", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "ques_id": "62ece4992e6aefcf4aabbd80", "code": ["def remove_ending_os_sep(input_list):\n\tif input_list is None:\n\t\treturn []\n\treturn [x.rstrip(os.sep) for x in input_list if len(x) > 1 and x.endswith(os.sep)]\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def remove_ending_os_sep(input_list):\n\tif input_list is None:\n\t\treturn []\n\treturn [x.rstrip(os.sep) for x in input_list if len(x) > 1 and x.endswith(os.sep)]\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_17.py", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "ques_id": "62ece4992e6aefcf4aabbd82", "code": ["def get_pattern(pattern, strip=True):\n\tif isinstance(pattern, str):\n\t\tif strip:\n\t\t\tpattern = pattern.strip()\n\t\tpattern = re.compile(pattern)\n\treturn pattern\n\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_pattern(pattern, strip=True):\n\tif isinstance(pattern, str):\n\t\tif strip:\n\t\t\tpattern = pattern.strip()\n\t\tpattern = re.compile(pattern)\n\treturn pattern\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_7.py", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62ece4992e6aefcf4aabbd83", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n\ttry:\n\t\tif not isinstance(commands, list):\n\t\t\tcommands = [commands]\n\t\tfor cmd in commands:\n\t\t\tif verbose:\n\t\t\t\tprint(\"Running command: %s %s\" % (cmd, args))\n\t\t\tif hide_stderr:\n\t\t\t\twith open(os.devnull, \"w\") as fnull:\n\t\t\t\t\tresult = subprocess.call([cmd] + args, cwd=cwd, stdout=fnull, env=env)\n\t\t\telse:\n\t\t\t\tresult = subprocess.call([cmd] + args, cwd=cwd, env=env)\n\t\t\tif result != 0:\n\t\t\t\tif verbose:\n\t\t\t\t\tprint(\"Command failed with error code %d\" % result)\n\t\t\t\treturn result\n\t\treturn 0\n\texcept OSError as e:\n\t\tif e.errno == os.errno.ENOENT:\n\t\t\t# Handle file not found error.\n\t\t\tif verbose\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n\ttry:\n\t\tif not isinstance(commands, list):\n\t\t\tcommands = [commands]\n\t\tfor cmd in commands:\n\t\t\tif verbose:\n\t\t\t\tprint(\"Running command: %s %s\" % (cmd, args))\n\t\t\tif hide_stderr:\n\t\t\t\twith open(os.devnull, \"w\") as fnull:\n\t\t\t\t\tresult = subprocess.call([cmd] + args, cwd=cwd, stdout=fnull, env=env)\n\t\t\telse:\n\t\t\t\tresult = subprocess.call([cmd] + args, cwd=cwd, env=env)\n\t\t\tif result != 0:\n\t\t\t\tif verbose:\n\t\t\t\t\tprint(\"Command failed with error code %d\" % result)\n\t\t\t\treturn result\n\t\treturn 0\n\texcept OSError as e:\n\t\tif e.errno == os.errno.ENOENT:\n\t\t\t# Handle file not found error.\n\t\t\tif verbose\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_4.py", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "ques_id": "62ece4992e6aefcf4aabbd84", "code": ["def is_ipv4(target):\n\ttry:\n\t\tsocket.inet_aton(target)\n\t\treturn True\n\texcept socket.error:\n\t\treturn False\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def is_ipv4(target):\n\ttry:\n\t\tsocket.inet_aton(target)\n\t\treturn True\n\texcept socket.error:\n\t\treturn False\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_11.py", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "ques_id": "62ece4992e6aefcf4aabbd85", "code": ["def find_roots(\n    graph:\n\tif roots is None:\n\t\troots = set()\n\tfor s, p, o in graph.triples((None, prop, None)):\n\t\tif o not in roots:\n\t\t\troots.add(o)\n\t\t\tfind_roots(graph, prop, roots)\n\treturn roots\n\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_roots(\n    graph:\n\tif roots is None:\n\t\troots = set()\n\tfor s, p, o in graph.triples((None, prop, None)):\n\t\tif o not in roots:\n\t\t\troots.add(o)\n\t\t\tfind_roots(graph, prop, roots)\n\treturn roots\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_1.py", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "ques_id": "62ece4992e6aefcf4aabbd86", "code": ["def _dump_string(obj, dumper=None):\n\tif dumper is None:\n\t\tdumper = yaml.Dumper\n\treturn yaml.dump(obj, Dumper=dumper)\n\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _dump_string(obj, dumper=None):\n\tif dumper is None:\n\t\tdumper = yaml.Dumper\n\treturn yaml.dump(obj, Dumper=dumper)\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "plib_runnable/test_8.py", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "ques_id": "62ece4992e6aefcf4aabbd87", "code": ["def build_app_logger(name='app', logfile='app.log', debug=True):\n\tlogger = logging.getLogger(name)\n\tlogger.setLevel(logging.DEBUG)\n\tformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\tif debug:\n\t\tch = logging.StreamHandler()\n\t\tch.setLevel(logging.DEBUG)\n\t\tch.setFormatter(formatter)\n\t\tlogger.addHandler(ch)\n\tfh = logging.FileHandler(logfile)\n\tfh.setLevel(logging.DEBUG)\n\tfh.setFormatter(formatter)\n\tlogger.addHandler(fh)\n\treturn logger\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n\tlogger = logging.getLogger(name)\n\tlogger.setLevel(logging.DEBUG)\n\tformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\tif debug:\n\t\tch = logging.StreamHandler()\n\t\tch.setLevel(logging.DEBUG)\n\t\tch.setFormatter(formatter)\n\t\tlogger.addHandler(ch)\n\tfh = logging.FileHandler(logfile)\n\tfh.setLevel(logging.DEBUG)\n\tfh.setFormatter(formatter)\n\tlogger.addHandler(fh)\n\treturn logger\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_6.py", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "ques_id": "62ece4992e6aefcf4aabbd88", "code": ["def make_array(shape, dtype=np.dtype(\"float32\")):\n\treturn np.zeros(shape, dtype=dtype)\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n\treturn np.zeros(shape, dtype=dtype)\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "plib_runnable/test_2.py", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "ques_id": "62ece4992e6aefcf4aabbd89", "code": ["def gaussian(x):\n\tu = 0.2\n\tsigma = 0.1\n\treturn np.exp(-(x-u)**2/(2*sigma**2))/(np.sqrt(2*np.pi)*sigma)\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def gaussian(x):\n\tu = 0.2\n\tsigma = 0.1\n\treturn np.exp(-(x-u)**2/(2*sigma**2))/(np.sqrt(2*np.pi)*sigma)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_13.py", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "ques_id": "62ece4992e6aefcf4aabbd8a", "code": ["def load_configurations(config_filenames, overrides=None, resolve_env=True):\n\tconfigs = {}\n\terrors = []\n\tfor config_filename in config_filenames:\n\t\ttry:\n\t\t\twith open(config_filename) as f:\n\t\t\t\tconfig = json.load(f)\n\t\t\t\tif resolve_env:\n\t\t\t\t\tconfig = resolve_environment_variables(config)\n\t\t\t\tif overrides:\n\t\t\t\t\tconfig = merge_configurations(config, overrides)\n\t\t\t\tconfigs[config_filename] = config\n\t\texcept IOError as e:\n\t\t\terrors.append(logging.LogRecord(\n\t\t\t\tname=__name__,\n\t\t\t\tlevel=logging.ERROR,\n\t\t\t\tpathname=config_filename,\n\t\t\t\tlineno=0,\n\t\t\t\tmsg=\"Unable to read configuration file: %s\" % e,\n\t\t\t\targs=(),\n\t\t\t\texc_info=None\n\t\t\t))\n\t\texcept ValueError as e:\n\t\t\terrors.append(logging.LogRecord(\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n\tconfigs = {}\n\terrors = []\n\tfor config_filename in config_filenames:\n\t\ttry:\n\t\t\twith open(config_filename) as f:\n\t\t\t\tconfig = json.load(f)\n\t\t\t\tif resolve_env:\n\t\t\t\t\tconfig = resolve_environment_variables(config)\n\t\t\t\tif overrides:\n\t\t\t\t\tconfig = merge_configurations(config, overrides)\n\t\t\t\tconfigs[config_filename] = config\n\t\texcept IOError as e:\n\t\t\terrors.append(logging.LogRecord(\n\t\t\t\tname=__name__,\n\t\t\t\tlevel=logging.ERROR,\n\t\t\t\tpathname=config_filename,\n\t\t\t\tlineno=0,\n\t\t\t\tmsg=\"Unable to read configuration file: %s\" % e,\n\t\t\t\targs=(),\n\t\t\t\texc_info=None\n\t\t\t))\n\t\texcept ValueError as e:\n\t\t\terrors.append(logging.LogRecord(\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_3.py", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "ques_id": "62ece4992e6aefcf4aabbd8b", "code": ["def force_string(obj):\n\tif isinstance(obj, np.bytes_) or isinstance(obj, bytes):\n\t\treturn obj.decode('utf-8')\n\telse:\n\t\treturn obj\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def force_string(obj):\n\tif isinstance(obj, np.bytes_) or isinstance(obj, bytes):\n\t\treturn obj.decode('utf-8')\n\telse:\n\t\treturn obj\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "ques_id": "62e60723d76274f8a4026b76", "code": ["def from_ticks(cls, ticks, tz=None):\n\tif ticks < 0 or ticks >= 86400000000000:\n\t\traise ValueError('ticks out of bounds')\n\treturn cls(ticks, tz)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def from_ticks(cls, ticks, tz=None):\n\tif ticks < 0 or ticks >= 86400000000000:\n\t\traise ValueError('ticks out of bounds')\n\treturn cls(ticks, tz)\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60873d76274f8a4026bd8", "code": ["def protocol_handlers(cls, protocol_version=None):\n\tif protocol_version is not None:\n\t\tif not isinstance(protocol_version, tuple):\n\t\t\traise TypeError(\"Protocol version must be a tuple\")\n\t\tif protocol_version in cls._protocol_handlers:\n\t\t\treturn {protocol_version: cls._protocol_handlers[protocol_version]}\n\t\telse:\n\t\t\treturn {}\n\telse:\n\t\treturn cls._protocol_handlers\n\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n\tif protocol_version is not None:\n\t\tif not isinstance(protocol_version, tuple):\n\t\t\traise TypeError(\"Protocol version must be a tuple\")\n\t\tif protocol_version in cls._protocol_handlers:\n\t\t\treturn {protocol_version: cls._protocol_handlers[protocol_version]}\n\t\telse:\n\t\t\treturn {}\n\telse:\n\t\treturn cls._protocol_handlers\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "ques_id": "62e60e3bd76274f8a4026d1a", "code": ["def from_raw_values(cls, values):\n\tbookmarks = cls()\n\tfor value in values:\n\t\tbookmark = Bookmark.from_raw_value(value)\n\t\tbookmarks.append(bookmark)\n\treturn bookmarks\n\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def from_raw_values(cls, values):\n\tbookmarks = cls()\n\tfor value in values:\n\t\tbookmark = Bookmark.from_raw_value(value)\n\t\tbookmarks.append(bookmark)\n\treturn bookmarks\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "ques_id": "62b87b199a0c4fa8b80b354c", "code": ["def _get_seq_with_type(seq, bufsize=None):\n\tif isinstance(seq, (list, tuple)):\n\t\treturn seq, type(seq)\n\tif isinstance(seq, str):\n\t\treturn seq, str\n\tif isinstance(seq, bytes):\n\t\treturn seq, bytes\n\tif isinstance(seq, memoryview):\n\t\treturn seq, memoryview\n\tif isinstance(seq, bytearray):\n\t\treturn seq, bytearray\n\tif isinstance(seq, array.array):\n\t\treturn seq, array.array\n\tif isinstance(seq, collections.abc.Mapping):\n\t\treturn seq, collections.abc.Mapping\n\tif isinstance(seq, collections.abc.Set):\n\t\treturn seq, collections.abc.Set\n\tif isinstance(seq, collections.abc.Sequence):\n\t\treturn seq, collections.abc.Sequence\n\tif isinstance(seq, collections.abc.Iterator):\n\t\treturn seq, collections.abc.Iterator\n\tif isinstance(seq, collections.abc.Generator):\n\t\treturn seq, collections.abc.Generator\n\tif isinstance(\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n\tif isinstance(seq, (list, tuple)):\n\t\treturn seq, type(seq)\n\tif isinstance(seq, str):\n\t\treturn seq, str\n\tif isinstance(seq, bytes):\n\t\treturn seq, bytes\n\tif isinstance(seq, memoryview):\n\t\treturn seq, memoryview\n\tif isinstance(seq, bytearray):\n\t\treturn seq, bytearray\n\tif isinstance(seq, array.array):\n\t\treturn seq, array.array\n\tif isinstance(seq, collections.abc.Mapping):\n\t\treturn seq, collections.abc.Mapping\n\tif isinstance(seq, collections.abc.Set):\n\t\treturn seq, collections.abc.Set\n\tif isinstance(seq, collections.abc.Sequence):\n\t\treturn seq, collections.abc.Sequence\n\tif isinstance(seq, collections.abc.Iterator):\n\t\treturn seq, collections.abc.Iterator\n\tif isinstance(seq, collections.abc.Generator):\n\t\treturn seq, collections.abc.Generator\n\tif isinstance(\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "ques_id": "62b87b4f9a0c4fa8b80b3581", "code": ["def scale(self, other=None, recompute=False):\n\tif other is None:\n\t\tif self.scale_computed and not recompute:\n\t\t\treturn self.scale\n\t\telse:\n\t\t\tself.scale = self.compute_scale()\n\t\t\tself.scale_computed = True\n\t\t\treturn self.scale\n\telse:\n\t\tif self.scale == 0:\n\t\t\traise LenaValueError(\"can't rescale histogram with scale equal to zero\")\n\t\telse:\n\t\t\tself.scale *= other / self.scale\n\t\t\treturn self.scale\n\n\tdef compute_scale(self):\n\t\t\"\"\"\n\t\tCompute scale (integral of the histogram).\n\t\t\"\"\"\n\t\treturn self.hist.sum()\n\n\tdef __len__(self):\n\t\t\"\"\"\n\t\tReturn number of bins.\n\t\t\"\"\"\n\t\treturn len(self.hist)\n\n\tdef __getitem__(self, index):\n\t\t\"\"\"\n\t\tReturn histogram value for the given *index*.\n\t\t\"\"\"\n\t\treturn self.hist[index]\n\n\tdef __setitem__\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None, recompute=False):\n\tif other is None:\n\t\tif self.scale_computed and not recompute:\n\t\t\treturn self.scale\n\t\telse:\n\t\t\tself.scale = self.compute_scale()\n\t\t\tself.scale_computed = True\n\t\t\treturn self.scale\n\telse:\n\t\tif self.scale == 0:\n\t\t\traise LenaValueError(\"can't rescale histogram with scale equal to zero\")\n\t\telse:\n\t\t\tself.scale *= other / self.scale\n\t\t\treturn self.scale\n\n\tdef compute_scale(self):\n\t\t\"\"\"\n\t\tCompute scale (integral of the histogram).\n\t\t\"\"\"\n\t\treturn self.hist.sum()\n\n\tdef __len__(self):\n\t\t\"\"\"\n\t\tReturn number of bins.\n\t\t\"\"\"\n\t\treturn len(self.hist)\n\n\tdef __getitem__(self, index):\n\t\t\"\"\"\n\t\tReturn histogram value for the given *index*.\n\t\t\"\"\"\n\t\treturn self.hist[index]\n\n\tdef __setitem__\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "ques_id": "62b87b519a0c4fa8b80b3583", "code": ["def scale(self, other=None):\n\tif other is None:\n\t\treturn self._scale\n\tif not isinstance(other, numbers.Real):\n\t\traise LenaTypeError(\"scale must be a real number\")\n\tif self._scale == 0:\n\t\traise LenaValueError(\"scale is unknown\")\n\t# get the last coordinate\n\tcoord = self.coordinates[-1]\n\t# get the last coordinate's scale\n\tscale = self.coordinates[-1].scale\n\t# get the last coordinate's errors\n\terrors = [err for err in self.errors if err.coordinate == coord]\n\t# rescale the coordinate\n\tcoord.scale = other\n\t# rescale the errors\n\tfor err in errors:\n\t\terr.scale = other\n\t# rescale the graph\n\tself._scale = other\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None):\n\tif other is None:\n\t\treturn self._scale\n\tif not isinstance(other, numbers.Real):\n\t\traise LenaTypeError(\"scale must be a real number\")\n\tif self._scale == 0:\n\t\traise LenaValueError(\"scale is unknown\")\n\t# get the last coordinate\n\tcoord = self.coordinates[-1]\n\t# get the last coordinate's scale\n\tscale = self.coordinates[-1].scale\n\t# get the last coordinate's errors\n\terrors = [err for err in self.errors if err.coordinate == coord]\n\t# rescale the coordinate\n\tcoord.scale = other\n\t# rescale the errors\n\tfor err in errors:\n\t\terr.scale = other\n\t# rescale the graph\n\tself._scale = other\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "ques_id": "62b87b869a0c4fa8b80b35e1", "code": ["def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n\tif make_value is None:\n\t\tmake_value = lambda bin_: bin_\n\tif get_coordinate == \"left\":\n\t\tget_coordinate = lambda bin_: bin_.left\n\telif get_coordinate == \"right\":\n\t\tget_coordinate = lambda bin_: bin_.right\n\telif get_coordinate == \"middle\":\n\t\tget_coordinate = lambda bin_: (bin_.left + bin_.right) / 2\n\telse:\n\t\traise ValueError(\"get_coordinate must be 'left', 'right' or 'middle'\")\n\tif scale is True:\n\t\tscale = hist.scale\n\tgraph = graph_module.graph(field_names, scale=scale)\n\tfor bin_ in hist:\n\t\tgraph.append(get_coordinate(bin_), make_value(bin_))\n\treturn graph\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n\tif make_value is None:\n\t\tmake_value = lambda bin_: bin_\n\tif get_coordinate == \"left\":\n\t\tget_coordinate = lambda bin_: bin_.left\n\telif get_coordinate == \"right\":\n\t\tget_coordinate = lambda bin_: bin_.right\n\telif get_coordinate == \"middle\":\n\t\tget_coordinate = lambda bin_: (bin_.left + bin_.right) / 2\n\telse:\n\t\traise ValueError(\"get_coordinate must be 'left', 'right' or 'middle'\")\n\tif scale is True:\n\t\tscale = hist.scale\n\tgraph = graph_module.graph(field_names, scale=scale)\n\tfor bin_ in hist:\n\t\tgraph.append(get_coordinate(bin_), make_value(bin_))\n\treturn graph\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1136", "code": ["def _verify(iface, candidate, tentative=False, vtype=None):\n\tif not tentative:\n\t\tif not iface.providedBy(candidate):\n\t\t\traise Invalid(\n\t\t\t\t\"%r does not provide %s\" % (candidate, iface.__identifier__)\n\t\t\t)\n\n\tif vtype is None:\n\t\tvtype = _verify_class\n\treturn vtype(iface, candidate)\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n\tif not tentative:\n\t\tif not iface.providedBy(candidate):\n\t\t\traise Invalid(\n\t\t\t\t\"%r does not provide %s\" % (candidate, iface.__identifier__)\n\t\t\t)\n\n\tif vtype is None:\n\t\tvtype = _verify_class\n\treturn vtype(iface, candidate)\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1137", "code": ["def verifyObject(iface, candidate, tentative=False):\n\tif not tentative:\n\t\tif not iface.providedBy(candidate):\n\t\t\traise Invalid(\n\t\t\t\t\"%r does not provide %s\" % (candidate, iface.__identifier__)\n\t\t\t)\n\n\terrors = []\n\tfor name, spec in iface.namesAndDescriptions(1):\n\t\tif spec.getName() == \"__conform__\":\n\t\t\tcontinue\n\t\tif spec.getName() == \"__provides__\":\n\t\t\tcontinue\n\t\tif spec.getName() == \"__module__\":\n\t\t\tcontinue\n\t\tif spec.getName() == \"__doc__\":\n\t\t\tcontinue\n\t\tif spec.getName() == \"__name__\":\n\t\t\tcontinue\n\t\tif spec.getName() == \"__qualname__\":\n\t\t\tcontinue\n\t\tif spec.getName() == \"__annotations__\":\n\t\t\tcontinue\n\t\tif spec.getName() == \"__slots__\":\n\t\t\tcontinue\n\t\tif spec.getName() == \"\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyObject(iface, candidate, tentative=False):\n\tif not tentative:\n\t\tif not iface.providedBy(candidate):\n\t\t\traise Invalid(\n\t\t\t\t\"%r does not provide %s\" % (candidate, iface.__identifier__)\n\t\t\t)\n\n\terrors = []\n\tfor name, spec in iface.namesAndDescriptions(1):\n\t\tif spec.getName() == \"__conform__\":\n\t\t\tcontinue\n\t\tif spec.getName() == \"__provides__\":\n\t\t\tcontinue\n\t\tif spec.getName() == \"__module__\":\n\t\t\tcontinue\n\t\tif spec.getName() == \"__doc__\":\n\t\t\tcontinue\n\t\tif spec.getName() == \"__name__\":\n\t\t\tcontinue\n\t\tif spec.getName() == \"__qualname__\":\n\t\t\tcontinue\n\t\tif spec.getName() == \"__annotations__\":\n\t\t\tcontinue\n\t\tif spec.getName() == \"__slots__\":\n\t\t\tcontinue\n\t\tif spec.getName() == \"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "ques_id": "62b8b4c1eb7e40a82d2d1139", "code": ["def verifyClass(iface, candidate, tentative=False):\n\tif not isinstance(iface, InterfaceClass):\n\t\traise TypeError(\"iface must be an InterfaceClass\")\n\tif not isinstance(candidate, type):\n\t\traise TypeError(\"candidate must be a class\")\n\tif not issubclass(candidate, iface):\n\t\traise TypeError(\"candidate must be a subclass of iface\")\n\tif not tentative:\n\t\tiface.verifyImplementation(candidate)\n\treturn candidate\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyClass(iface, candidate, tentative=False):\n\tif not isinstance(iface, InterfaceClass):\n\t\traise TypeError(\"iface must be an InterfaceClass\")\n\tif not isinstance(candidate, type):\n\t\traise TypeError(\"candidate must be a class\")\n\tif not issubclass(candidate, iface):\n\t\traise TypeError(\"candidate must be a subclass of iface\")\n\tif not tentative:\n\t\tiface.verifyImplementation(candidate)\n\treturn candidate\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "ques_id": "62b8b559eb7e40a82d2d11f6", "code": ["def determineMetaclass(bases, explicit_mc=None):\n\tif explicit_mc is not None:\n\t\treturn explicit_mc\n\tif len(bases) == 0:\n\t\treturn type\n\telif len(bases) == 1:\n\t\treturn bases[0].__class__\n\telse:\n\t\t# multiple bases with different metaclasses\n\t\tmetaclasses = set(b.__class__ for b in bases)\n\t\tmetaclasses.discard(type)\n\t\tif len(metaclasses) == 1:\n\t\t\treturn metaclasses.pop()\n\t\telse:\n\t\t\treturn type\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n\tif explicit_mc is not None:\n\t\treturn explicit_mc\n\tif len(bases) == 0:\n\t\treturn type\n\telif len(bases) == 1:\n\t\treturn bases[0].__class__\n\telse:\n\t\t# multiple bases with different metaclasses\n\t\tmetaclasses = set(b.__class__ for b in bases)\n\t\tmetaclasses.discard(type)\n\t\tif len(metaclasses) == 1:\n\t\t\treturn metaclasses.pop()\n\t\telse:\n\t\t\treturn type\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "ques_id": "62b8d22a48ba5a41d1c3f47d", "code": ["def pop(self, key, default=__marker):\n\tpass\n\t\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop(self, key, default=__marker):\n\tpass\n\t\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "ques_id": "62b8d23748ba5a41d1c3f497", "code": ["def popitem(self):\n\tif self.root:\n\t\tkey, value = self.root.popitem()\n\t\tself.__len__ -= 1\n\t\treturn key, value\n\traise KeyError('%s is empty' % self.__class__.__name__)\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n\tif self.root:\n\t\tkey, value = self.root.popitem()\n\t\tself.__len__ -= 1\n\t\treturn key, value\n\traise KeyError('%s is empty' % self.__class__.__name__)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "ques_id": "62b8d23a48ba5a41d1c3f499", "code": ["def popitem(self):\n\tif self:\n\t\tkey = next(reversed(self))\n\t\treturn (key, self.pop(key))\n\traise KeyError('dictionary is empty')\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n\tif self:\n\t\tkey = next(reversed(self))\n\t\treturn (key, self.pop(key))\n\traise KeyError('dictionary is empty')\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "ques_id": "62b8d23c48ba5a41d1c3f49b", "code": ["def popitem(self):\n\tif self.__root is None:\n\t\traise KeyError('dictionary is empty')\n\tkey = next(reversed(self))\n\tvalue = self.pop(key)\n\treturn key, value\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n\tif self.__root is None:\n\t\traise KeyError('dictionary is empty')\n\tkey = next(reversed(self))\n\tvalue = self.pop(key)\n\treturn key, value\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "ques_id": "62b8d23e48ba5a41d1c3f49e", "code": ["def popitem(self):\n\treturn self.__choice(self.__items)\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n\treturn self.__choice(self.__items)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "ques_id": "62b43425903eeb48555d3ea1", "code": ["def _create_in_regex(self) -> Pattern:\n\t\treturn re.compile(r'\\s*(?P<name>\\w+)\\s*(?P<op>in)\\s*(?P<value>\\[.*\\])\\s*')\n\n\tdef _create_out_regex(self) -> Pattern:\n\t\"\"\"\n\tCreate the out-style parameter regular expression.\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_in_regex(self) -> Pattern:\n\t\treturn re.compile(r'\\s*(?P<name>\\w+)\\s*(?P<op>in)\\s*(?P<value>\\[.*\\])\\s*')\n\n\tdef _create_out_regex(self) -> Pattern:\n\t\"\"\"\n\tCreate the out-style parameter regular expression.\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "ques_id": "62b43426903eeb48555d3ea2", "code": ["def _create_converter(self) -> _converting._Converter:\n\treturn _converting._Converter(self._parameter_style)\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_converter(self) -> _converting._Converter:\n\treturn _converting._Converter(self._parameter_style)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "ques_id": "62b8966c755ee91dce50a154", "code": ["def isoparse(self, dt_str):\n\tpass\n\t\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def isoparse(self, dt_str):\n\tpass\n\t\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "ques_id": "62b896de755ee91dce50a183", "code": ["def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n\tif not isinstance(timestr, basestring):\n\t\traise TypeError(\"Parser must be a string or character stream, not \"\n\t\t\t\t\t\t\"type '%s'\" % type(timestr))\n\n\tif default is None:\n\t\tdefault = datetime.datetime.now()\n\telif isinstance(default, datetime.datetime):\n\t\tif default.tzinfo is None:\n\t\t\tdefault = default.replace(tzinfo=tz.tzlocal())\n\telse:\n\t\traise TypeError(\"Default must be a datetime instance\")\n\n\tres, skipped_tokens = self._parse(timestr, **kwargs)\n\n\tif res is None:\n\t\traise ParserError(\"Unable to parse date string (%s)\" % timestr)\n\n\tif isinstance(res, datetime.datetime):\n\t\tif res.tzinfo is None:\n\t\t\tres = res.replace(tzinfo=tz.tzlocal())\n\t\treturn res, skipped_tokens\n\n\tif res[0] is None:\n\t\tres[0]\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n\tif not isinstance(timestr, basestring):\n\t\traise TypeError(\"Parser must be a string or character stream, not \"\n\t\t\t\t\t\t\"type '%s'\" % type(timestr))\n\n\tif default is None:\n\t\tdefault = datetime.datetime.now()\n\telif isinstance(default, datetime.datetime):\n\t\tif default.tzinfo is None:\n\t\t\tdefault = default.replace(tzinfo=tz.tzlocal())\n\telse:\n\t\traise TypeError(\"Default must be a datetime instance\")\n\n\tres, skipped_tokens = self._parse(timestr, **kwargs)\n\n\tif res is None:\n\t\traise ParserError(\"Unable to parse date string (%s)\" % timestr)\n\n\tif isinstance(res, datetime.datetime):\n\t\tif res.tzinfo is None:\n\t\t\tres = res.replace(tzinfo=tz.tzlocal())\n\t\treturn res, skipped_tokens\n\n\tif res[0] is None:\n\t\tres[0]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d3", "code": ["def fromutc(self, dt):\n\t\tif dt.tzinfo is None:\n\t\t\traise ValueError('fromutc() requires a timezone-aware datetime')\n\t\tif dt.tzinfo is self:\n\t\t\treturn dt\n\t\tdt = dt.astimezone(self)\n\t\tif dt.tzinfo is self:\n\t\t\treturn dt\n\t\traise ValueError('fromutc() cannot determine the correct timezone '\n\t\t\t\t\t\t 'for %s' % dt)\n\n\tdef utcoffset(self, dt):\n\t\t\"\"\"\n\t\tGiven a timezone-aware datetime, returns the offset from UTC.\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fromutc(self, dt):\n\t\tif dt.tzinfo is None:\n\t\t\traise ValueError('fromutc() requires a timezone-aware datetime')\n\t\tif dt.tzinfo is self:\n\t\t\treturn dt\n\t\tdt = dt.astimezone(self)\n\t\tif dt.tzinfo is self:\n\t\t\treturn dt\n\t\traise ValueError('fromutc() cannot determine the correct timezone '\n\t\t\t\t\t\t 'for %s' % dt)\n\n\tdef utcoffset(self, dt):\n\t\t\"\"\"\n\t\tGiven a timezone-aware datetime, returns the offset from UTC.\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "ques_id": "62b8a7b2755ee91dce50a4a7", "code": ["def default_tzinfo(dt, tzinfo):\n\tif dt.tzinfo is None:\n\t\treturn dt.replace(tzinfo=tzinfo)\n\telse:\n\t\treturn dt\n\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def default_tzinfo(dt, tzinfo):\n\tif dt.tzinfo is None:\n\t\treturn dt.replace(tzinfo=tzinfo)\n\telse:\n\t\treturn dt\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "ques_id": "6305f9991d275c6667163c50", "code": ["def set_cut_chars(self, before:\n\t\tself.before = before\n\t\tself.after = after\n\n\tdef set_cut_bytes(self, before: int, after: int) -> None:\n\t\"\"\"\n\tSet the number of bytes to split file before and after.\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def set_cut_chars(self, before:\n\t\tself.before = before\n\t\tself.after = after\n\n\tdef set_cut_bytes(self, before: int, after: int) -> None:\n\t\"\"\"\n\tSet the number of bytes to split file before and after.\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "ques_id": "6306292052e177c0ba469f09", "code": ["def identify_request(request:\n\tif request.json is not None:\n\t\treturn True\n\telif request.xml is not None:\n\t\treturn request.xml.tag == Magic_ENV_TAG\n\telse:\n\t\treturn False\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def identify_request(request:\n\tif request.json is not None:\n\t\treturn True\n\telif request.xml is not None:\n\t\treturn request.xml.tag == Magic_ENV_TAG\n\telse:\n\t\treturn False\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "ques_id": "6306292152e177c0ba469f0d", "code": ["def identify_request(request:\n\tif \"events\" in request.json:\n\t\treturn True\n\treturn False\n\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def identify_request(request:\n\tif \"events\" in request.json:\n\t\treturn True\n\treturn False\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "ques_id": "6306292252e177c0ba469f11", "code": ["def format_dt(dt):\n\treturn ensure_timezone(dt).strftime(\"%Y-%m-%d %H:%M:%S\")\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def format_dt(dt):\n\treturn ensure_timezone(dt).strftime(\"%Y-%m-%d %H:%M:%S\")\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "ques_id": "6306292352e177c0ba469f1d", "code": ["def find_tags(text:\n\ttags = set()\n\tif replacer is None:\n\t\treplacer = lambda x: x\n\ttext = re.sub(r\"```[^`]*```\", \"\", text)\n\ttext = re.sub(r\"`[^`]*`\", \"\", text)\n\ttext = re.sub(r\"\\[.*?\\]\\(.*?\\)\", \"\", text)\n\tfor tag in TAG_REGEX.findall(text):\n\t\ttags.add(replacer(tag))\n\treturn tags, text\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def find_tags(text:\n\ttags = set()\n\tif replacer is None:\n\t\treplacer = lambda x: x\n\ttext = re.sub(r\"```[^`]*```\", \"\", text)\n\ttext = re.sub(r\"`[^`]*`\", \"\", text)\n\ttext = re.sub(r\"\\[.*?\\]\\(.*?\\)\", \"\", text)\n\tfor tag in TAG_REGEX.findall(text):\n\t\ttags.add(replacer(tag))\n\treturn tags, text\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "ques_id": "6306292352e177c0ba469f1e", "code": ["def process_text_links(text):\n\t# Add some attributes to links\n\ttext = re.sub(r'<a href=\"(.*?)\"', r'<a href=\"\\1\" target=\"_blank\" rel=\"nofollow\"', text)\n\t# Linkify textual links\n\ttext = re.sub(r'(https?://[^\\s]+)', r'<a href=\"\\1\" target=\"_blank\" rel=\"nofollow\">\\1</a>', text)\n\treturn text\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def process_text_links(text):\n\t# Add some attributes to links\n\ttext = re.sub(r'<a href=\"(.*?)\"', r'<a href=\"\\1\" target=\"_blank\" rel=\"nofollow\"', text)\n\t# Linkify textual links\n\ttext = re.sub(r'(https?://[^\\s]+)', r'<a href=\"\\1\" target=\"_blank\" rel=\"nofollow\">\\1</a>', text)\n\treturn text\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "ques_id": "6306292652e177c0ba469f34", "code": ["def fetch_content_type(url:\n\ttry:\n\t\treq = urllib.request.Request(url, headers={'User-Agent': USER_AGENT})\n\t\twith urllib.request.urlopen(req) as response:\n\t\t\treturn response.headers.get('Content-Type')\n\texcept urllib.error.HTTPError as e:\n\t\tprint(f'HTTPError: {e.code}')\n\texcept urllib.error.URLError as e:\n\t\tprint(f'URLError: {e.reason}')\n\texcept Exception as e:\n\t\tprint(f'Exception: {e}')\n\treturn None\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def fetch_content_type(url:\n\ttry:\n\t\treq = urllib.request.Request(url, headers={'User-Agent': USER_AGENT})\n\t\twith urllib.request.urlopen(req) as response:\n\t\t\treturn response.headers.get('Content-Type')\n\texcept urllib.error.HTTPError as e:\n\t\tprint(f'HTTPError: {e.code}')\n\texcept urllib.error.URLError as e:\n\t\tprint(f'URLError: {e.reason}')\n\texcept Exception as e:\n\t\tprint(f'Exception: {e}')\n\treturn None\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "ques_id": "6306292a52e177c0ba469f41", "code": ["def test_tag(tag:\n\tfor char in tag:\n\t\tif char in LEEGAL_TAG_CHARS:\n\t\t\treturn False\n\treturn True\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def test_tag(tag:\n\tfor char in tag:\n\t\tif char in LEEGAL_TAG_CHARS:\n\t\t\treturn False\n\treturn True\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "ques_id": "6306298b52e177c0ba469fdc", "code": ["def xml_children_as_dict(node):\n\td = {}\n\tfor child in node.getchildren():\n\t\td[child.tag] = child.text\n\treturn d\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def xml_children_as_dict(node):\n\td = {}\n\tfor child in node.getchildren():\n\t\td[child.tag] = child.text\n\treturn d\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "ques_id": "6306299052e177c0ba469fe8", "code": ["def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\tif sender_handle == entity_handle:\n\t\treturn True\n\telse:\n\t\treturn False\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\tif sender_handle == entity_handle:\n\t\treturn True\n\telse:\n\t\treturn False\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "ques_id": "630629b952e177c0ba46a043", "code": ["def get_nodeinfo_well_known_document(url, document_path=None):\n\tif not document_path:\n\t\tdocument_path = url + '/.well-known/nodeinfo'\n\ttry:\n\t\tresponse = requests.get(document_path, timeout=5)\n\t\tif response.status_code == 200:\n\t\t\treturn {\n\t\t\t\t'url': url,\n\t\t\t\t'document_path': document_path,\n\t\t\t\t'content': response.text\n\t\t\t}\n\texcept requests.exceptions.RequestException:\n\t\tpass\n\treturn None\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n\tif not document_path:\n\t\tdocument_path = url + '/.well-known/nodeinfo'\n\ttry:\n\t\tresponse = requests.get(document_path, timeout=5)\n\t\tif response.status_code == 200:\n\t\t\treturn {\n\t\t\t\t'url': url,\n\t\t\t\t'document_path': document_path,\n\t\t\t\t'content': response.text\n\t\t\t}\n\texcept requests.exceptions.RequestException:\n\t\tpass\n\treturn None\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "ques_id": "630629d052e177c0ba46a0a1", "code": ["def verify_relayable_signature(public_key, doc, signature):\n\ttry:\n\t\tdoc.xpath('//*[@ID=\"' + signature.attrib['ID'] + '\"]')[0]\n\texcept IndexError:\n\t\traise Exception(\"Signature ID not found in document\")\n\n\tsigned_info = signature.find('{http://www.w3.org/2000/09/xmldsig#}SignedInfo')\n\tcanonicalized_signed_info = canonicalize(signed_info)\n\tdigest_value = signature.find('{http://www.w3.org/2000/09/xmldsig#}SignatureValue')\n\tdigest_value = base64.b64decode(digest_value.text)\n\tsignature_value = signature.find('{http://www.w3.org/2000/09/xmldsig#}SignatureValue')\n\tsignature_value = base64.b64decode(signature_value.text)\n\n\tdigest_method = signature.find('{http://www.w3.org/2000/09/xmldsig#}SignedInfo/\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n\ttry:\n\t\tdoc.xpath('//*[@ID=\"' + signature.attrib['ID'] + '\"]')[0]\n\texcept IndexError:\n\t\traise Exception(\"Signature ID not found in document\")\n\n\tsigned_info = signature.find('{http://www.w3.org/2000/09/xmldsig#}SignedInfo')\n\tcanonicalized_signed_info = canonicalize(signed_info)\n\tdigest_value = signature.find('{http://www.w3.org/2000/09/xmldsig#}SignatureValue')\n\tdigest_value = base64.b64decode(digest_value.text)\n\tsignature_value = signature.find('{http://www.w3.org/2000/09/xmldsig#}SignatureValue')\n\tsignature_value = base64.b64decode(signature_value.text)\n\n\tdigest_method = signature.find('{http://www.w3.org/2000/09/xmldsig#}SignedInfo/\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "ques_id": "630629e052e177c0ba46a0c4", "code": ["def parse_diaspora_webfinger(document:\n\ttry:\n\t\twebfinger = json.loads(document)\n\texcept json.JSONDecodeError:\n\t\traise WebfingerError(\"Webfinger document is not valid JSON.\")\n\tif \"links\" not in webfinger:\n\t\traise WebfingerError(\"Webfinger document does not contain links.\")\n\tfor link in webfinger[\"links\"]:\n\t\tif link[\"rel\"] == \"http://microformats.org/profile/hcard\":\n\t\t\treturn link[\"href\"]\n\traise WebfingerError(\"Webfinger document does not contain hcard.\")\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_diaspora_webfinger(document:\n\ttry:\n\t\twebfinger = json.loads(document)\n\texcept json.JSONDecodeError:\n\t\traise WebfingerError(\"Webfinger document is not valid JSON.\")\n\tif \"links\" not in webfinger:\n\t\traise WebfingerError(\"Webfinger document does not contain links.\")\n\tfor link in webfinger[\"links\"]:\n\t\tif link[\"rel\"] == \"http://microformats.org/profile/hcard\":\n\t\t\treturn link[\"href\"]\n\traise WebfingerError(\"Webfinger document does not contain hcard.\")\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "ques_id": "630629e152e177c0ba46a0d1", "code": ["def try_retrieve_webfinger_document(handle:\n\ttry:\n\t\treturn retrieve_webfinger_document(handle)\n\texcept Exception:\n\t\treturn None\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def try_retrieve_webfinger_document(handle:\n\ttry:\n\t\treturn retrieve_webfinger_document(handle)\n\texcept Exception:\n\t\treturn None\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "ques_id": "630629e152e177c0ba46a0d2", "code": ["def retrieve_and_parse_diaspora_webfinger(handle):\n\t# Retrieve the webfinger document\n\twebfinger_url = \"https://%s/.well-known/webfinger?resource=acct:%s\" % (handle.split(\"@\")[1], handle)\n\twebfinger_response = requests.get(webfinger_url)\n\twebfinger_response.raise_for_status()\n\n\t# Parse the webfinger document\n\twebfinger_document = json.loads(webfinger_response.text)\n\n\t# Return the parsed webfinger document\n\treturn webfinger_document\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n\t# Retrieve the webfinger document\n\twebfinger_url = \"https://%s/.well-known/webfinger?resource=acct:%s\" % (handle.split(\"@\")[1], handle)\n\twebfinger_response = requests.get(webfinger_url)\n\twebfinger_response.raise_for_status()\n\n\t# Parse the webfinger document\n\twebfinger_document = json.loads(webfinger_response.text)\n\n\t# Return the parsed webfinger document\n\treturn webfinger_document\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "ques_id": "630629e252e177c0ba46a0d6", "code": ["def retrieve_diaspora_host_meta(host):\n\treturn retrieve_host_meta(host, \"diaspora\")\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def retrieve_diaspora_host_meta(host):\n\treturn retrieve_host_meta(host, \"diaspora\")\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "ques_id": "630629e752e177c0ba46a0fb", "code": ["def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n\treturn send_response(url, data, timeout, method, \"application/json\", *args, **kwargs)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n\treturn send_response(url, data, timeout, method, \"application/json\", *args, **kwargs)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "ques_id": "6306091073426c38ae68acac", "code": ["def dict_insert(dic, val, key, *keys):\n\tif len(keys) > 0:\n\t\tif key not in dic:\n\t\t\tdic[key] = {}\n\t\tdict_insert(dic[key], val, *keys)\n\telse:\n\t\tdic[key] = val\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def dict_insert(dic, val, key, *keys):\n\tif len(keys) > 0:\n\t\tif key not in dic:\n\t\t\tdic[key] = {}\n\t\tdict_insert(dic[key], val, *keys)\n\telse:\n\t\tdic[key] = val\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "ques_id": "6306091a73426c38ae68acc8", "code": ["def list_of_file_names(settings_dirs, spec_option):\n\treturn cli.ListOfFileNames(settings_dirs, spec_option)\n\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n\treturn cli.ListOfFileNames(settings_dirs, spec_option)\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "ques_id": "6306091b73426c38ae68acd7", "code": ["def ansible_config_manager(cls):\n\treturn cls._get_service(ServiceName.ANSIBLE_CONFIG_MANAGER)\n\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def ansible_config_manager(cls):\n\treturn cls._get_service(ServiceName.ANSIBLE_CONFIG_MANAGER)\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "ques_id": "6306091b73426c38ae68acd9", "code": ["def workspace_manager(cls):\n\treturn cls._get_service(ServiceName.WORKSPACE_MANAGER)\n\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def workspace_manager(cls):\n\treturn cls._get_service(ServiceName.WORKSPACE_MANAGER)\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "ques_id": "6306091b73426c38ae68acda", "code": ["def plugins_manager(cls):\n\treturn cls._get_service(ServiceName.PLUGINS_MANAGER)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def plugins_manager(cls):\n\treturn cls._get_service(ServiceName.PLUGINS_MANAGER)\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "ques_id": "6306091c73426c38ae68acdc", "code": ["def validate_from_content(cls, spec_content=None):\n\tif spec_content is None:\n\t\traise IRValidatorException(\"Spec content is empty\")\n\ttry:\n\t\tspec_data = yaml.load(spec_content)\n\texcept yaml.YAMLError as e:\n\t\traise IRValidatorException(\"Spec content is not valid YAML: %s\" % e)\n\treturn cls.validate(spec_data)\n\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_content(cls, spec_content=None):\n\tif spec_content is None:\n\t\traise IRValidatorException(\"Spec content is empty\")\n\ttry:\n\t\tspec_data = yaml.load(spec_content)\n\texcept yaml.YAMLError as e:\n\t\traise IRValidatorException(\"Spec content is not valid YAML: %s\" % e)\n\treturn cls.validate(spec_data)\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "ques_id": "6306091c73426c38ae68acdd", "code": ["def validate_from_file(cls, yaml_file=None):\n\tif not yaml_file:\n\t\traise IRValidatorException('No YAML file provided')\n\n\tif not os.path.isfile(yaml_file):\n\t\traise IRValidatorException('YAML file does not exist')\n\n\twith open(yaml_file, 'r') as f:\n\t\tdata = yaml.load(f)\n\n\treturn cls.validate(data)\n\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_file(cls, yaml_file=None):\n\tif not yaml_file:\n\t\traise IRValidatorException('No YAML file provided')\n\n\tif not os.path.isfile(yaml_file):\n\t\traise IRValidatorException('YAML file does not exist')\n\n\twith open(yaml_file, 'r') as f:\n\t\tdata = yaml.load(f)\n\n\treturn cls.validate(data)\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "ques_id": "6306091d73426c38ae68ace5", "code": ["def _include_groups(self, parser_dict):\n\tif 'include' in parser_dict:\n\t\tfor include_dict in parser_dict['include']:\n\t\t\tif 'group' in include_dict:\n\t\t\t\tgroup = include_dict['group']\n\t\t\t\tif group in self.groups:\n\t\t\t\t\tself._include_groups(self.groups[group])\n\t\t\t\t\tself._include_groups(include_dict)\n\t\t\t\t\tself._merge_dicts(parser_dict, self.groups[group])\n\t\t\t\t\tself._merge_dicts(parser_dict, include_dict)\n\t\t\t\telse:\n\t\t\t\t\traise Exception(\"Unknown group '%s' referenced in spec file\" % group)\n\t\t\telse:\n\t\t\t\traise Exception(\"Include directive must specify a group\")\n\t\tdel parser_dict['include']\n\n\tif 'groups' in parser_dict:\n\t\tfor group_dict in parser_dict['groups']:\n\t\t\tself._include_groups(group_dict)\n\t\t\tself.groups[group_dict['\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _include_groups(self, parser_dict):\n\tif 'include' in parser_dict:\n\t\tfor include_dict in parser_dict['include']:\n\t\t\tif 'group' in include_dict:\n\t\t\t\tgroup = include_dict['group']\n\t\t\t\tif group in self.groups:\n\t\t\t\t\tself._include_groups(self.groups[group])\n\t\t\t\t\tself._include_groups(include_dict)\n\t\t\t\t\tself._merge_dicts(parser_dict, self.groups[group])\n\t\t\t\t\tself._merge_dicts(parser_dict, include_dict)\n\t\t\t\telse:\n\t\t\t\t\traise Exception(\"Unknown group '%s' referenced in spec file\" % group)\n\t\t\telse:\n\t\t\t\traise Exception(\"Include directive must specify a group\")\n\t\tdel parser_dict['include']\n\n\tif 'groups' in parser_dict:\n\t\tfor group_dict in parser_dict['groups']:\n\t\t\tself._include_groups(group_dict)\n\t\t\tself.groups[group_dict['\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "ques_id": "6306092373426c38ae68acfa", "code": ["def get_spec_defaults(self):\n\t# get defaults from spec\n\tdefaults = self._get_defaults()\n\t# get defaults from other sources\n\tfor source in self.defaults_sources:\n\t\tdefaults.update(source.get_defaults())\n\treturn defaults\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_spec_defaults(self):\n\t# get defaults from spec\n\tdefaults = self._get_defaults()\n\t# get defaults from other sources\n\tfor source in self.defaults_sources:\n\t\tdefaults.update(source.get_defaults())\n\treturn defaults\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "ques_id": "6306092973426c38ae68ad01", "code": ["def get_deprecated_args(self):\n\tdeprecated_args = {}\n\tfor option_spec in self.spec_helper.iterate_option_specs():\n\t\tif option_spec.deprecated_by:\n\t\t\tdeprecated_args[option_spec.name] = option_spec.deprecated_by\n\treturn deprecated_args\n\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_deprecated_args(self):\n\tdeprecated_args = {}\n\tfor option_spec in self.spec_helper.iterate_option_specs():\n\t\tif option_spec.deprecated_by:\n\t\t\tdeprecated_args[option_spec.name] = option_spec.deprecated_by\n\treturn deprecated_args\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "ques_id": "6306092c73426c38ae68ad02", "code": ["def validate_arg_deprecation(self, cli_args, answer_file_args):\n\tdeprecated_args = {\n\t\t'--no-ssl-verify': '--no-check-certificate',\n\t\t'--no-ssl-verify-host': '--no-check-hostname',\n\t\t'--ssl-verify': '--check-certificate',\n\t\t'--ssl-verify-host': '--check-hostname',\n\t\t'--ssl-verify-hostname': '--check-hostname',\n\t\t'--ssl-verify-host-name': '--check-hostname',\n\t\t'--ssl-verify-hostname': '--check-hostname',\n\t\t'--ssl-verify-host-name': '--check-hostname',\n\t\t'--ssl-verify-hostname': '--check-hostname',\n\t\t'--ssl-verify-host-name': '--check-hostname',\n\t\t'--ssl-verify-hostname': '--check-hostname',\n\t\t'--ssl-verify-host-name': '--check-hostname',\n\t\t'--ssl\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n\tdeprecated_args = {\n\t\t'--no-ssl-verify': '--no-check-certificate',\n\t\t'--no-ssl-verify-host': '--no-check-hostname',\n\t\t'--ssl-verify': '--check-certificate',\n\t\t'--ssl-verify-host': '--check-hostname',\n\t\t'--ssl-verify-hostname': '--check-hostname',\n\t\t'--ssl-verify-host-name': '--check-hostname',\n\t\t'--ssl-verify-hostname': '--check-hostname',\n\t\t'--ssl-verify-host-name': '--check-hostname',\n\t\t'--ssl-verify-hostname': '--check-hostname',\n\t\t'--ssl-verify-host-name': '--check-hostname',\n\t\t'--ssl-verify-hostname': '--check-hostname',\n\t\t'--ssl-verify-host-name': '--check-hostname',\n\t\t'--ssl\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "ques_id": "6306092d73426c38ae68ad04", "code": ["def get_parser_option_specs(self, command_name):\n\tparser = self.get_parser(command_name)\n\treturn parser.option_list\n\n\tdef get_parser_option_spec(self, command_name, option_name):\n\t\t\"\"\"\n\t\tGets the option for the specified command\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_parser_option_specs(self, command_name):\n\tparser = self.get_parser(command_name)\n\treturn parser.option_list\n\n\tdef get_parser_option_spec(self, command_name, option_name):\n\t\t\"\"\"\n\t\tGets the option for the specified command\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "ques_id": "6306092d73426c38ae68ad05", "code": ["def get_option_spec(self, command_name, argument_name):\n\tif command_name in self.command_specs:\n\t\tif argument_name in self.command_specs[command_name]['options']:\n\t\t\treturn self.command_specs[command_name]['options'][argument_name]\n\t\telse:\n\t\t\treturn None\n\telse:\n\t\treturn None\n\n\tdef get_parser_option_specs(self, command_name):\n\t\t\"\"\"\n\t\tGets the specification for the specified option name. Get options of the given command_name with self.get_parser_option_specs()\n\t\t\"\"\"\n\t\tif command_name in self.command_specs:\n\t\t\treturn self.command_specs[command_name]['options']\n\t\telse:\n\t\t\treturn None\n\n\tdef get_parser_argument_specs(self, command_name):\n\t\t\"\"\"\n\t\tGets the specification for the specified option name. Get options of the given command_name with self.get_parser_option_specs()\n\t\t\"\"\"\n\t\tif command_name in self.command_specs\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_option_spec(self, command_name, argument_name):\n\tif command_name in self.command_specs:\n\t\tif argument_name in self.command_specs[command_name]['options']:\n\t\t\treturn self.command_specs[command_name]['options'][argument_name]\n\t\telse:\n\t\t\treturn None\n\telse:\n\t\treturn None\n\n\tdef get_parser_option_specs(self, command_name):\n\t\t\"\"\"\n\t\tGets the specification for the specified option name. Get options of the given command_name with self.get_parser_option_specs()\n\t\t\"\"\"\n\t\tif command_name in self.command_specs:\n\t\t\treturn self.command_specs[command_name]['options']\n\t\telse:\n\t\t\treturn None\n\n\tdef get_parser_argument_specs(self, command_name):\n\t\t\"\"\"\n\t\tGets the specification for the specified option name. Get options of the given command_name with self.get_parser_option_specs()\n\t\t\"\"\"\n\t\tif command_name in self.command_specs\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "ques_id": "6306092d73426c38ae68ad06", "code": ["def get_silent_args(self, args):\n\tsilent_args = []\n\tfor arg in args:\n\t\tif arg.startswith('--silent-'):\n\t\t\tsilent_args.append(arg[9:])\n\treturn silent_args\n\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_silent_args(self, args):\n\tsilent_args = []\n\tfor arg in args:\n\t\tif arg.startswith('--silent-'):\n\t\t\tsilent_args.append(arg[9:])\n\treturn silent_args\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "ques_id": "6306092d73426c38ae68ad07", "code": ["def validate_requires_args(self, args):\n\tif not args.get('name'):\n\t\traise Exception(\"Missing required argument: name\")\n\tif not args.get('description'):\n\t\traise Exception(\"Missing required argument: description\")\n\tif not args.get('type'):\n\t\traise Exception(\"Missing required argument: type\")\n\tif not args.get('value'):\n\t\traise Exception(\"Missing required argument: value\")\n\treturn args\n\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_requires_args(self, args):\n\tif not args.get('name'):\n\t\traise Exception(\"Missing required argument: name\")\n\tif not args.get('description'):\n\t\traise Exception(\"Missing required argument: description\")\n\tif not args.get('type'):\n\t\traise Exception(\"Missing required argument: type\")\n\tif not args.get('value'):\n\t\traise Exception(\"Missing required argument: value\")\n\treturn args\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "ques_id": "6306092d73426c38ae68ad08", "code": ["def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n\tconditionally_required_args = []\n\tfor option in options_spec:\n\t\tif option.get('required_when'):\n\t\t\tif self._is_required_when_condition_matched(\n\t\t\t\t\tcommand_name, option, args):\n\t\t\t\tconditionally_required_args.append(option['name'])\n\treturn conditionally_required_args\n\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n\tconditionally_required_args = []\n\tfor option in options_spec:\n\t\tif option.get('required_when'):\n\t\t\tif self._is_required_when_condition_matched(\n\t\t\t\t\tcommand_name, option, args):\n\t\t\t\tconditionally_required_args.append(option['name'])\n\treturn conditionally_required_args\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad09", "code": ["def validate_length_args(self, args):\n\tfor arg in args:\n\t\tif len(args[arg]) > self.lengths[arg]:\n\t\t\traise ValueError(f\"{arg} is longer than {self.lengths[arg]}\")\n\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_length_args(self, args):\n\tfor arg in args:\n\t\tif len(args[arg]) > self.lengths[arg]:\n\t\t\traise ValueError(f\"{arg} is longer than {self.lengths[arg]}\")\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0a", "code": ["def validate_choices_args(self, args):\n\tfor key, value in args.items():\n\t\tif key in self.choices:\n\t\t\tif value not in self.choices[key]:\n\t\t\t\traise ValueError(f\"{value} is not a valid choice for {key}\")\n\n\tdef validate_args(self, args):\n\t\t\"\"\"\n\t\tCheck if the given args are valid. \\n:param args: The received arguments.\n\t\t\"\"\"\n\t\tself.validate_required_args(args)\n\t\tself.validate_choices_args(args)\n\n\tdef get_args(self):\n\t\t\"\"\"\n\t\tGet the arguments from the command line.\n\t\t\"\"\"\n\t\targs = self.parser.parse_args()\n\t\tself.validate_args(vars(args))\n\t\treturn args\n\n\tdef get_args_dict(self):\n\t\t\"\"\"\n\t\tGet the arguments from the command line as a dictionary.\n\t\t\"\"\"\n\t\treturn vars(self.get_args())\n\n\tdef get_args_list(self):\n\t\t\"\"\"\n\t\tGet the arguments\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_choices_args(self, args):\n\tfor key, value in args.items():\n\t\tif key in self.choices:\n\t\t\tif value not in self.choices[key]:\n\t\t\t\traise ValueError(f\"{value} is not a valid choice for {key}\")\n\n\tdef validate_args(self, args):\n\t\t\"\"\"\n\t\tCheck if the given args are valid. \\n:param args: The received arguments.\n\t\t\"\"\"\n\t\tself.validate_required_args(args)\n\t\tself.validate_choices_args(args)\n\n\tdef get_args(self):\n\t\t\"\"\"\n\t\tGet the arguments from the command line.\n\t\t\"\"\"\n\t\targs = self.parser.parse_args()\n\t\tself.validate_args(vars(args))\n\t\treturn args\n\n\tdef get_args_dict(self):\n\t\t\"\"\"\n\t\tGet the arguments from the command line as a dictionary.\n\t\t\"\"\"\n\t\treturn vars(self.get_args())\n\n\tdef get_args_list(self):\n\t\t\"\"\"\n\t\tGet the arguments\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0b", "code": ["def validate_min_max_args(self, args):\n\tfor arg in args:\n\t\tif arg.value < arg.min_value or arg.value > arg.max_value:\n\t\t\traise ValueError(\"Value of {} is not between {} and {}\".format(arg.name, arg.min_value, arg.max_value))\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_min_max_args(self, args):\n\tfor arg in args:\n\t\tif arg.value < arg.min_value or arg.value > arg.max_value:\n\t\t\traise ValueError(\"Value of {} is not between {} and {}\".format(arg.name, arg.min_value, arg.max_value))\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "ques_id": "6306092e73426c38ae68ad0d", "code": ["def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n\tcomplex_action = COMPLEX_TYPES[type_name]\n\treturn complex_action(option_name, (self.vars, self.defaults, self.plugin_path), subcommand, spec_option)\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n\tcomplex_action = COMPLEX_TYPES[type_name]\n\treturn complex_action(option_name, (self.vars, self.defaults, self.plugin_path), subcommand, spec_option)\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "ques_id": "6306092e73426c38ae68ad0f", "code": ["def get_nested_custom_and_control_args(self, args):\n\tcontrol_args = {}\n\tnested_args = {}\n\tcustom_args = {}\n\tfor arg in args:\n\t\tif arg.startswith('--'):\n\t\t\tif arg.startswith('--custom-'):\n\t\t\t\tcustom_args[arg[9:]] = args[arg]\n\t\t\telse:\n\t\t\t\tcontrol_args[arg[2:]] = args[arg]\n\t\telse:\n\t\t\tnested_args[arg] = args[arg]\n\treturn control_args, nested_args, custom_args\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nested_custom_and_control_args(self, args):\n\tcontrol_args = {}\n\tnested_args = {}\n\tcustom_args = {}\n\tfor arg in args:\n\t\tif arg.startswith('--'):\n\t\t\tif arg.startswith('--custom-'):\n\t\t\t\tcustom_args[arg[9:]] = args[arg]\n\t\t\telse:\n\t\t\t\tcontrol_args[arg[2:]] = args[arg]\n\t\telse:\n\t\t\tnested_args[arg] = args[arg]\n\treturn control_args, nested_args, custom_args\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "ques_id": "6306092e73426c38ae68ad11", "code": ["def merge_extra_vars(vars_dict, extra_vars=None):\n\tif extra_vars:\n\t\tfor extra_var in extra_vars:\n\t\t\tif '=' not in extra_var:\n\t\t\t\traise AnsibleError(\"Invalid variable assignment: %s\" % extra_var)\n\t\t\t(key, value) = extra_var.split(\"=\", 1)\n\t\t\tvars_dict[key] = value\n\treturn vars_dict\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n\tif extra_vars:\n\t\tfor extra_var in extra_vars:\n\t\t\tif '=' not in extra_var:\n\t\t\t\traise AnsibleError(\"Invalid variable assignment: %s\" % extra_var)\n\t\t\t(key, value) = extra_var.split(\"=\", 1)\n\t\t\tvars_dict[key] = value\n\treturn vars_dict\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "ques_id": "6306092f73426c38ae68ad13", "code": ["def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n\tif not extra_vars:\n\t\textra_vars = {}\n\n\tif not ansible_args:\n\t\tansible_args = {}\n\n\tif not verbose:\n\t\tverbose = ir_workspace.get_setting('verbosity')\n\n\tif verbose:\n\t\tansible_args['verbose'] = verbose\n\n\tif extra_vars:\n\t\tansible_args['extra_vars'] = extra_vars\n\n\tif ir_workspace.get_setting('ansible_debug'):\n\t\tansible_args['debug'] = True\n\n\tif ir_workspace.get_setting('ansible_diff'):\n\t\tansible_args['diff'] = True\n\n\tif ir_workspace.get_setting('ansible_force_handlers'):\n\t\tansible_args['force_handlers'] = True\n\n\tif ir_workspace.get_setting('ansible_flush_cache'):\n\t\tansible_args['flush_cache'] = True\n\n\tif ir_workspace.get_setting('ansible_inventory'):\n\t\t\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n\tif not extra_vars:\n\t\textra_vars = {}\n\n\tif not ansible_args:\n\t\tansible_args = {}\n\n\tif not verbose:\n\t\tverbose = ir_workspace.get_setting('verbosity')\n\n\tif verbose:\n\t\tansible_args['verbose'] = verbose\n\n\tif extra_vars:\n\t\tansible_args['extra_vars'] = extra_vars\n\n\tif ir_workspace.get_setting('ansible_debug'):\n\t\tansible_args['debug'] = True\n\n\tif ir_workspace.get_setting('ansible_diff'):\n\t\tansible_args['diff'] = True\n\n\tif ir_workspace.get_setting('ansible_force_handlers'):\n\t\tansible_args['force_handlers'] = True\n\n\tif ir_workspace.get_setting('ansible_flush_cache'):\n\t\tansible_args['flush_cache'] = True\n\n\tif ir_workspace.get_setting('ansible_inventory'):\n\t\t\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "ques_id": "6306093273426c38ae68ad15", "code": ["def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n\tif not vars_dict:\n\t\tvars_dict = {}\n\n\tif not cli_args:\n\t\tcli_args = []\n\n\tif not ir_workspace:\n\t\tir_workspace = Workspace()\n\n\tif not ir_plugin:\n\t\tir_plugin = InfraredPlugin()\n\n\t# add the inventory file to the cli args\n\tcli_args.append(ir_workspace.inventory_file)\n\n\t# add the playbook file to the cli args\n\tcli_args.append(ir_plugin.playbook_file)\n\n\t# add the extra vars to the cli args\n\tcli_args.append(\"--extra-vars\")\n\tcli_args.append(json.dumps(vars_dict))\n\n\t# add the verbose flag\n\tcli_args.append(\"-v\")\n\n\t# add the debug flag\n\tcli_args.append(\"-vvvv\")\n\n\t# add the check flag\n\tcli_args.append(\"--check\")\n\n\t# add the diff flag\n\tcli_args.append(\"--diff\")\n\n\t# add the diff flag\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n\tif not vars_dict:\n\t\tvars_dict = {}\n\n\tif not cli_args:\n\t\tcli_args = []\n\n\tif not ir_workspace:\n\t\tir_workspace = Workspace()\n\n\tif not ir_plugin:\n\t\tir_plugin = InfraredPlugin()\n\n\t# add the inventory file to the cli args\n\tcli_args.append(ir_workspace.inventory_file)\n\n\t# add the playbook file to the cli args\n\tcli_args.append(ir_plugin.playbook_file)\n\n\t# add the extra vars to the cli args\n\tcli_args.append(\"--extra-vars\")\n\tcli_args.append(json.dumps(vars_dict))\n\n\t# add the verbose flag\n\tcli_args.append(\"-v\")\n\n\t# add the debug flag\n\tcli_args.append(\"-vvvv\")\n\n\t# add the check flag\n\tcli_args.append(\"--check\")\n\n\t# add the diff flag\n\tcli_args.append(\"--diff\")\n\n\t# add the diff flag\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "ques_id": "63060ada73426c38ae68ad31", "code": ["def _convert_non_cli_args(self, parser_name, values_dict):\n\tfor key, value in values_dict.items():\n\t\tif key in self.cli_args[parser_name]:\n\t\t\t# This is a CLI argument, skip it\n\t\t\tcontinue\n\t\tif key in self.bool_args[parser_name]:\n\t\t\tvalues_dict[key] = self._convert_bool(value)\n\t\telif key in self.int_args[parser_name]:\n\t\t\tvalues_dict[key] = self._convert_int(value)\n\t\telif key in self.float_args[parser_name]:\n\t\t\tvalues_dict[key] = self._convert_float(value)\n\t\telif key in self.list_args[parser_name]:\n\t\t\tvalues_dict[key] = self._convert_list(value)\n\t\telif key in self.dict_args[parser_name]:\n\t\t\tvalues_dict[key] = self._convert_dict(value)\n\t\telif key in self.path_args[parser_name]:\n\t\t\tvalues_dict[key]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n\tfor key, value in values_dict.items():\n\t\tif key in self.cli_args[parser_name]:\n\t\t\t# This is a CLI argument, skip it\n\t\t\tcontinue\n\t\tif key in self.bool_args[parser_name]:\n\t\t\tvalues_dict[key] = self._convert_bool(value)\n\t\telif key in self.int_args[parser_name]:\n\t\t\tvalues_dict[key] = self._convert_int(value)\n\t\telif key in self.float_args[parser_name]:\n\t\t\tvalues_dict[key] = self._convert_float(value)\n\t\telif key in self.list_args[parser_name]:\n\t\t\tvalues_dict[key] = self._convert_list(value)\n\t\telif key in self.dict_args[parser_name]:\n\t\t\tvalues_dict[key] = self._convert_dict(value)\n\t\telif key in self.path_args[parser_name]:\n\t\t\tvalues_dict[key]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "ques_id": "63060b1a73426c38ae68ad3e", "code": ["def get_plugin_spec_flatten_dict(plugin_dir):\n\tplugin_spec_file = os.path.join(plugin_dir, \"plugin.yaml\")\n\tif not os.path.exists(plugin_spec_file):\n\t\treturn None\n\twith open(plugin_spec_file, \"r\") as f:\n\t\tplugin_spec = yaml.load(f)\n\treturn plugin_spec\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n\tplugin_spec_file = os.path.join(plugin_dir, \"plugin.yaml\")\n\tif not os.path.exists(plugin_spec_file):\n\t\treturn None\n\twith open(plugin_spec_file, \"r\") as f:\n\t\tplugin_spec = yaml.load(f)\n\treturn plugin_spec\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "ques_id": "63060b1b73426c38ae68ad42", "code": ["def inject_config(self):\n\tif not 'ANSIBLE_CONFIG' in os.environ:\n\t\tos.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def inject_config(self):\n\tif not 'ANSIBLE_CONFIG' in os.environ:\n\t\tos.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "ques_id": "63060b1b73426c38ae68ad43", "code": ["def extend_cli(self, root_subparsers):\n\tparser = root_subparsers.add_parser('spec', help='spec related commands')\n\tsubparsers = parser.add_subparsers(help='spec related commands')\n\n\t# spec list\n\tparser_list = subparsers.add_parser('list', help='list specs')\n\tparser_list.add_argument('--all', action='store_true', help='list all specs')\n\tparser_list.set_defaults(func=self.list_specs)\n\n\t# spec show\n\tparser_show = subparsers.add_parser('show', help='show spec')\n\tparser_show.add_argument('spec_name', help='spec name')\n\tparser_show.set_defaults(func=self.show_spec)\n\n\t# spec create\n\tparser_create = subparsers.add_parser('create', help='create spec')\n\tparser_create.add_argument('spec_name', help='spec name')\n\tparser_create.add_argument('--description', help='spec description')\n\tparser_create.add_argument('--spec-file',\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def extend_cli(self, root_subparsers):\n\tparser = root_subparsers.add_parser('spec', help='spec related commands')\n\tsubparsers = parser.add_subparsers(help='spec related commands')\n\n\t# spec list\n\tparser_list = subparsers.add_parser('list', help='list specs')\n\tparser_list.add_argument('--all', action='store_true', help='list all specs')\n\tparser_list.set_defaults(func=self.list_specs)\n\n\t# spec show\n\tparser_show = subparsers.add_parser('show', help='show spec')\n\tparser_show.add_argument('spec_name', help='spec name')\n\tparser_show.set_defaults(func=self.show_spec)\n\n\t# spec create\n\tparser_create = subparsers.add_parser('create', help='create spec')\n\tparser_create.add_argument('spec_name', help='spec name')\n\tparser_create.add_argument('--description', help='spec description')\n\tparser_create.add_argument('--spec-file',\n", "is_pass": false, "return_code": 1}]}
