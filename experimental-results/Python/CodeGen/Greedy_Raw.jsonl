{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "ques_id": "62e60f43d76274f8a4026e28", "code": ["def hydrate_time(nanoseconds, tz=None):\n\t\"\"\"\n\tHydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time\n\t\"\"\"\n\tif tz is None:\n\t\ttz = get_localzone()\n\treturn Time(nanoseconds, tz)\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def hydrate_time(nanoseconds, tz=None):\n\t\"\"\"\n\tHydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time\n\t\"\"\"\n\tif tz is None:\n\t\ttz = get_localzone()\n\treturn Time(nanoseconds, tz)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "ques_id": "62e60f3bd76274f8a4026e10", "code": ["def dehydrate_timedelta(value):\n\t\"\"\"\n\tDehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:\n\t\"\"\"\n\treturn value.total_seconds()\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_timedelta(value):\n\t\"\"\"\n\tDehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:\n\t\"\"\"\n\treturn value.total_seconds()\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "ques_id": "62e60f37d76274f8a4026dfd", "code": ["def dehydrate_time(value):\n\t\"\"\"\n\tDehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:\n\t\"\"\"\n\treturn value.isoformat()\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_time(value):\n\t\"\"\"\n\tDehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:\n\t\"\"\"\n\treturn value.isoformat()\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "ques_id": "62e60f33d76274f8a4026de9", "code": ["def dehydrate_point(value):\n\t\"\"\"\n\tDehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:\n\t\"\"\"\n\treturn value.x, value.y, value.z\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_point(value):\n\t\"\"\"\n\tDehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:\n\t\"\"\"\n\treturn value.x, value.y, value.z\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "ques_id": "62e60ed4d76274f8a4026da0", "code": ["def keys(self):\n\t\"\"\"\n\tReturn the keys of the record.\n\n:return: list of key names\n\t\"\"\"\n\treturn self.keys()\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"], "level": "class_runnable", "generate_results": [{"generate_code": "def keys(self):\n\t\"\"\"\n\tReturn the keys of the record.\n\n:return: list of key names\n\t\"\"\"\n\treturn self.keys()\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60ecfd76274f8a4026d6a", "code": ["def protocol_handlers(cls, protocol_version=None):\n\t\"\"\"\n\tReturn a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple\n\t\"\"\"\n\tif protocol_version is None:\n\t\treturn cls.protocol_handlers()\n\telif isinstance(protocol_version, tuple):\n\t\tif len(protocol_version) == 1:\n\t\t\treturn cls.protocol_handlers(protocol_version[0])\n\t\telse:\n\t\t\treturn {version: cls.protocol_handlers(version)\n\t\t\t\t\tfor version in protocol_version}\n\telse:\n\t\traise TypeError(\"protocol_version must be a tuple of length 1 or None\")\n\nclass BoltProtocol(object):\n\t\"\"\"\n\tA Bolt protocol is a set of commands that can be sent to a\n\tserver. It is a subclass of a class that implements the\n\tprotocol protocol.\n\t\"\"\"\n\tdef __init__(self, protocol_version=None):\n\t\t\"\"\"\n\t\t:param protocol_version: tuple identifying a specific protocol\n\t\t\tversion (e.g. (3, 5)) or None\n\t\t:raise TypeError: if protocol version is not passed in a tuple\n\t\t\"\"\"\n\t\tself.protocol_version = protocol_version\n\t\tself.protocol_handlers = protocol_handlers(protocol_version)\n\n\tdef __call__(self, command, *args, **kwargs):\n\t\t\"\"\"\n\t\t:param command: command to be sent to the server\n\t\t:param args: arguments to be passed to the command\n\t\t:param kwargs: keyword arguments to be passed to the command\n\t\t:return: the result of the command\n\t\t:raise TypeError: if command is not a string\n\t\t\"\"\"\n\t\tif not isinstance(command, str):\n\t\t\traise TypeError(\"command must be a string\")\n\t\treturn self.protocol_handlers[self.protocol_version](command, *args, **kwargs)\n\nclass BoltProtocolHandler(object):\n\t\"\"\"\n\tA Bolt protocol handler is a set of commands that can be sent to a\n\tserver. It is a subclass of a class that implements the\n\tprotocol protocol.\n\t\"\"\"\n\tdef __init__(self, protocol_version=None):\n\t\t\"\"\"\n\t\t:param protocol_version: tuple identifying a specific protocol\n\t\t\tversion (e.g. (3, 5)) or None\n\t\t:raise TypeError: if protocol version is not passed in a tuple\n\t\t\"\"\"\n\t\tself.protocol_version = protocol_version\n\t\tself.protocol_handlers = protocol_handlers(protocol_version)\n\n\tdef __call__(self, command, *args, **kwargs):\n\t\t\"\"\"\n\t\t:param command: command to be sent to the server\n\t\t:param args: arguments to be passed to the command\n\t\t:param kwargs: keyword arguments to be passed to the command\n\t\t:return: the result of the command\n\t\t:raise TypeError: if command is not a string\n\t\t\"\"\"\n\t\tif not isinstance(command, str):\n\t\t\traise TypeError(\"command must be a string\")\n\t\treturn self.protocol_handlers[self.protocol_version](command, *args, **kwargs)\n\nclass BoltProtocolHandlerFactory(object):\n\t\"\"\"\n\tA factory for Bolt protocol handlers.\n\t\"\"\"\n\tdef __init__(self, protocol_version=None):\n\t\t\"\"\"\n\t\t:param protocol_version: tuple identifying a specific protocol\n\t\t\tversion (e.g. (3, 5)) or None\n\t\t:raise TypeError: if protocol version is not passed in a tuple\n\t\t\"\"\"\n\t\tself.protocol_version = protocol_version\n\t\tself.protocol_handlers = protocol_handlers(protocol_version)\n\n\tdef create_protocol_handler(self, protocol_version=None):\n\t\t\"\"\"\n\t\t:param protocol_version: tuple identifying a specific protocol\n\t\t\tversion (e.g. (3, 5)) or None\n\t\t:return: a Bolt protocol handler\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n\t\"\"\"\n\tReturn a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple\n\t\"\"\"\n\tif protocol_version is None:\n\t\treturn cls.protocol_handlers()\n\telif isinstance(protocol_version, tuple):\n\t\tif len(protocol_version) == 1:\n\t\t\treturn cls.protocol_handlers(protocol_version[0])\n\t\telse:\n\t\t\treturn {version: cls.protocol_handlers(version)\n\t\t\t\t\tfor version in protocol_version}\n\telse:\n\t\traise TypeError(\"protocol_version must be a tuple of length 1 or None\")\n\nclass BoltProtocol(object):\n\t\"\"\"\n\tA Bolt protocol is a set of commands that can be sent to a\n\tserver. It is a subclass of a class that implements the\n\tprotocol protocol.\n\t\"\"\"\n\tdef __init__(self, protocol_version=None):\n\t\t\"\"\"\n\t\t:param protocol_version: tuple identifying a specific protocol\n\t\t\tversion (e.g. (3, 5)) or None\n\t\t:raise TypeError: if protocol version is not passed in a tuple\n\t\t\"\"\"\n\t\tself.protocol_version = protocol_version\n\t\tself.protocol_handlers = protocol_handlers(protocol_version)\n\n\tdef __call__(self, command, *args, **kwargs):\n\t\t\"\"\"\n\t\t:param command: command to be sent to the server\n\t\t:param args: arguments to be passed to the command\n\t\t:param kwargs: keyword arguments to be passed to the command\n\t\t:return: the result of the command\n\t\t:raise TypeError: if command is not a string\n\t\t\"\"\"\n\t\tif not isinstance(command, str):\n\t\t\traise TypeError(\"command must be a string\")\n\t\treturn self.protocol_handlers[self.protocol_version](command, *args, **kwargs)\n\nclass BoltProtocolHandler(object):\n\t\"\"\"\n\tA Bolt protocol handler is a set of commands that can be sent to a\n\tserver. It is a subclass of a class that implements the\n\tprotocol protocol.\n\t\"\"\"\n\tdef __init__(self, protocol_version=None):\n\t\t\"\"\"\n\t\t:param protocol_version: tuple identifying a specific protocol\n\t\t\tversion (e.g. (3, 5)) or None\n\t\t:raise TypeError: if protocol version is not passed in a tuple\n\t\t\"\"\"\n\t\tself.protocol_version = protocol_version\n\t\tself.protocol_handlers = protocol_handlers(protocol_version)\n\n\tdef __call__(self, command, *args, **kwargs):\n\t\t\"\"\"\n\t\t:param command: command to be sent to the server\n\t\t:param args: arguments to be passed to the command\n\t\t:param kwargs: keyword arguments to be passed to the command\n\t\t:return: the result of the command\n\t\t:raise TypeError: if command is not a string\n\t\t\"\"\"\n\t\tif not isinstance(command, str):\n\t\t\traise TypeError(\"command must be a string\")\n\t\treturn self.protocol_handlers[self.protocol_version](command, *args, **kwargs)\n\nclass BoltProtocolHandlerFactory(object):\n\t\"\"\"\n\tA factory for Bolt protocol handlers.\n\t\"\"\"\n\tdef __init__(self, protocol_version=None):\n\t\t\"\"\"\n\t\t:param protocol_version: tuple identifying a specific protocol\n\t\t\tversion (e.g. (3, 5)) or None\n\t\t:raise TypeError: if protocol version is not passed in a tuple\n\t\t\"\"\"\n\t\tself.protocol_version = protocol_version\n\t\tself.protocol_handlers = protocol_handlers(protocol_version)\n\n\tdef create_protocol_handler(self, protocol_version=None):\n\t\t\"\"\"\n\t\t:param protocol_version: tuple identifying a specific protocol\n\t\t\tversion (e.g. (3, 5)) or None\n\t\t:return: a Bolt protocol handler\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "ques_id": "62e60e49d76274f8a4026d25", "code": ["def unit_of_work(metadata=None, timeout=None):\n\t\"\"\"\n\tThis function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`\n\t\"\"\"\n\tdef decorator(func):\n\t\t@wraps(func)\n\t\tdef wrapper(*args, **kwargs):\n\t\t\ttx = Transaction(metadata=metadata, timeout=timeout)\n\t\t\ttry:\n\t\t\t\treturn func(*args, **kwargs)\n\t\t\tfinally:\n\t\t\t\ttx.close()\n\t\treturn wrapper\n\treturn decorator\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def unit_of_work(metadata=None, timeout=None):\n\t\"\"\"\n\tThis function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`\n\t\"\"\"\n\tdef decorator(func):\n\t\t@wraps(func)\n\t\tdef wrapper(*args, **kwargs):\n\t\t\ttx = Transaction(metadata=metadata, timeout=timeout)\n\t\t\ttry:\n\t\t\t\treturn func(*args, **kwargs)\n\t\t\tfinally:\n\t\t\t\ttx.close()\n\t\treturn wrapper\n\treturn decorator\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "ques_id": "62e60e05d76274f8a4026cfd", "code": ["def index(self, key):\n\t\"\"\"\n\tReturn the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int\n\t\"\"\"\n\treturn self.index(key)\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def index(self, key):\n\t\"\"\"\n\tReturn the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int\n\t\"\"\"\n\treturn self.index(key)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "ques_id": "62e60da4d76274f8a4026cf1", "code": ["def values(self, *keys):\n\t\"\"\"\n\tReturn the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list\n\t\"\"\"\n\treturn self.get(self.index, *keys)\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def values(self, *keys):\n\t\"\"\"\n\tReturn the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list\n\t\"\"\"\n\treturn self.get(self.index, *keys)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "ques_id": "62e60b10d76274f8a4026ccd", "code": ["def data(self, *keys):\n\t\"\"\"\n\tReturn the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified\n\t\"\"\"\n\tif keys:\n\t\treturn dict(self.items(keys))\n\telse:\n\t\treturn dict(self.items())\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def data(self, *keys):\n\t\"\"\"\n\tReturn the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified\n\t\"\"\"\n\tif keys:\n\t\treturn dict(self.items(keys))\n\telse:\n\t\treturn dict(self.items())\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "ques_id": "62e6087bd76274f8a4026bfa", "code": ["def pop_u16(self):\n\t\"\"\"\n\tRemove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.\n\t\"\"\"\n\treturn struct.unpack('>H', self.data[-2:])[0]\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop_u16(self):\n\t\"\"\"\n\tRemove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.\n\t\"\"\"\n\treturn struct.unpack('>H', self.data[-2:])[0]\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "ques_id": "62e6087ad76274f8a4026bf2", "code": ["def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n\t\"\"\"\n\tAppends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n\t\"\"\"\n\tif n == -1:\n\t\tn = len(self.output)\n\tif qid == -1:\n\t\tqid = self.last_query_id\n\tif n == 0:\n\t\treturn\n\tif qid == -1:\n\t\tqid = self.last_query_id\n\tif n < qid:\n\t\traise ValueError(\"Cannot discard %d records, only %d records\" % (n, qid))\n\tif n > self.max_records:\n\t\traise ValueError(\"Cannot discard %d records, maximum %d records\" % (n, self.max_records))\n\tif n < self.min_records:\n\t\traise ValueError(\"Cannot discard %d records, minimum %d records\" % (n, self.min_records))\n\tif n > self.max_records_per_query:\n\t\traise ValueError(\"Cannot discard %d records, maximum %d records per query\" % (n, self.max_records_per_query))\n\tif n < self.min_records_per_query:\n\t\traise ValueError(\"Cannot discard %d records, minimum %d records per query\" % (n, self.min_records_per_query))\n\tif n > self.max_records_per_query_per_query:\n\t\traise ValueError(\"Cannot discard %d records, maximum %d records per query per query\" % (n, self.max_records_per_query_per_query))\n\tif n < self.min_records_per_query_per_query:\n\t\traise ValueError(\"Cannot discard %d records, minimum %d records per query per query\" % (n, self.min_records_per_query_per_query))\n\tif n > self.max_records_per_query_per_query_per_query:\n\t\traise ValueError(\"Cannot discard %d records, maximum %d records per query per query per query\" % (n, self.max_records_per_query_per_query_per_query))\n\tif n < self.min_records_per_query_per_query_per_query:\n\t\traise ValueError(\"Cannot discard %d records, minimum %d records per query per query per query\" % (n, self.min_records_per_query_per_query_per_query))\n\tif n > self.max_records_per_query_per_query_per_query_per_query:\n\t\traise ValueError(\"Cannot discard %d records, maximum %d records per query per query per query per query\" % (n, self.max_records_per_query_per_query_per_query))\n\tif n < self.min_records_per_query_per_query_per_query_per_query:\n\t\traise ValueError(\"Cannot discard %d records, minimum %d records per query per query per query per query\" % (n, self.min_records_per_query_per_query_per_query))\n\tif n > self.max_records_per_query_per_query_per_query_per_query:\n\t\traise ValueError(\"Cannot discard %d records, maximum %d records per query per query per query per query\" % (n, self.max_records_per_query_per_query_per_query))\n\tif n < self.min_records_per_query_per_query_per_query_per_query:\n\t\traise"], "level": "project_runnable", "generate_results": [{"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n\t\"\"\"\n\tAppends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n\t\"\"\"\n\tif n == -1:\n\t\tn = len(self.output)\n\tif qid == -1:\n\t\tqid = self.last_query_id\n\tif n == 0:\n\t\treturn\n\tif qid == -1:\n\t\tqid = self.last_query_id\n\tif n < qid:\n\t\traise ValueError(\"Cannot discard %d records, only %d records\" % (n, qid))\n\tif n > self.max_records:\n\t\traise ValueError(\"Cannot discard %d records, maximum %d records\" % (n, self.max_records))\n\tif n < self.min_records:\n\t\traise ValueError(\"Cannot discard %d records, minimum %d records\" % (n, self.min_records))\n\tif n > self.max_records_per_query:\n\t\traise ValueError(\"Cannot discard %d records, maximum %d records per query\" % (n, self.max_records_per_query))\n\tif n < self.min_records_per_query:\n\t\traise ValueError(\"Cannot discard %d records, minimum %d records per query\" % (n, self.min_records_per_query))\n\tif n > self.max_records_per_query_per_query:\n\t\traise ValueError(\"Cannot discard %d records, maximum %d records per query per query\" % (n, self.max_records_per_query_per_query))\n\tif n < self.min_records_per_query_per_query:\n\t\traise ValueError(\"Cannot discard %d records, minimum %d records per query per query\" % (n, self.min_records_per_query_per_query))\n\tif n > self.max_records_per_query_per_query_per_query:\n\t\traise ValueError(\"Cannot discard %d records, maximum %d records per query per query per query\" % (n, self.max_records_per_query_per_query_per_query))\n\tif n < self.min_records_per_query_per_query_per_query:\n\t\traise ValueError(\"Cannot discard %d records, minimum %d records per query per query per query\" % (n, self.min_records_per_query_per_query_per_query))\n\tif n > self.max_records_per_query_per_query_per_query_per_query:\n\t\traise ValueError(\"Cannot discard %d records, maximum %d records per query per query per query per query\" % (n, self.max_records_per_query_per_query_per_query))\n\tif n < self.min_records_per_query_per_query_per_query_per_query:\n\t\traise ValueError(\"Cannot discard %d records, minimum %d records per query per query per query per query\" % (n, self.min_records_per_query_per_query_per_query))\n\tif n > self.max_records_per_query_per_query_per_query_per_query:\n\t\traise ValueError(\"Cannot discard %d records, maximum %d records per query per query per query per query\" % (n, self.max_records_per_query_per_query_per_query))\n\tif n < self.min_records_per_query_per_query_per_query_per_query:\n\t\traise", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "ques_id": "62e60879d76274f8a4026bec", "code": ["def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n\t\"\"\"\n\tAppends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object\n\t\"\"\"\n\tif not isinstance(bookmarks, (list, tuple)):\n\t\tbookmarks = [bookmarks]\n\tif not isinstance(metadata, (dict, list, tuple)):\n\t\tmetadata = [metadata]\n\tif not isinstance(timeout, (int, float)):\n\t\ttimeout = 0\n\tif not isinstance(db, str):\n\t\tdb = None\n\tif not isinstance(imp_user, str):\n\t\timp_user = None\n\tif not isinstance(dehydration_hooks, dict):\n\t\tdehydration_hooks = {}\n\tif not isinstance(hydration_hooks, dict):\n\t\thydration_hooks = {}\n\tif not isinstance(handlers, dict):\n\t\thandlers = {}\n\tif not isinstance(dehydration_hooks, dict):\n\t\tdehydration_hooks = {}\n\tif not isinstance(hydration_hooks, dict):\n\t\thydration_hooks = {}\n\tif not isinstance(handlers, dict):\n\t\thandlers = {}\n\tif not isinstance(dehydration_hooks, dict):\n\t\tdehydration_hooks = {}\n\tif not isinstance(hydration_hooks, dict):\n\t\thydration_hooks = {}\n\tif not isinstance(handlers, dict):\n\t\thandlers = {}\n\tif not isinstance(dehydration_hooks, dict):\n\t\tdehydration_hooks = {}\n\tif not isinstance(hydration_hooks, dict):\n\t\thydration_hooks = {}\n\tif not isinstance(handlers, dict):\n\t\thandlers = {}\n\tif not isinstance(dehydration_hooks, dict):\n\t\tdehydration_hooks = {}\n\tif not isinstance(hydration_hooks, dict):\n\t\thydration_hooks = {}\n\tif not isinstance(handlers, dict):\n\t\thandlers = {}\n\tif not isinstance(dehydration_hooks, dict):\n\t\tdehydration_hooks = {}\n\tif not isinstance(hydration_hooks, dict):\n\t\thydration_hooks = {}\n\tif not isinstance(handlers, dict):\n\t\thandlers = {}\n\tif not isinstance(dehydration_hooks, dict):\n\t\tdehydration_hooks = {}\n\tif not isinstance(hydration_hooks, dict):\n\t\thydration_hooks = {}\n\tif not isinstance(handlers, dict):\n\t\thandlers = {}\n\tif not isinstance(dehydration_hooks, dict):\n\t\tdehydration_hooks = {}\n\tif not isinstance(hydration_hooks, dict):\n\t\thydration_hooks = {}\n\tif not isinstance(handlers, dict):\n\t\thandlers = {}\n\tif not isinstance(dehydration_hooks, dict):\n\t\tdehydration_hooks = {}\n\tif not isinstance(hydration_hooks, dict):\n\t\thydration_hooks = {}\n\tif not isinstance(handlers, dict):\n\t\thandlers = {}\n\tif"], "level": "project_runnable", "generate_results": [{"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n\t\"\"\"\n\tAppends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object\n\t\"\"\"\n\tif not isinstance(bookmarks, (list, tuple)):\n\t\tbookmarks = [bookmarks]\n\tif not isinstance(metadata, (dict, list, tuple)):\n\t\tmetadata = [metadata]\n\tif not isinstance(timeout, (int, float)):\n\t\ttimeout = 0\n\tif not isinstance(db, str):\n\t\tdb = None\n\tif not isinstance(imp_user, str):\n\t\timp_user = None\n\tif not isinstance(dehydration_hooks, dict):\n\t\tdehydration_hooks = {}\n\tif not isinstance(hydration_hooks, dict):\n\t\thydration_hooks = {}\n\tif not isinstance(handlers, dict):\n\t\thandlers = {}\n\tif not isinstance(dehydration_hooks, dict):\n\t\tdehydration_hooks = {}\n\tif not isinstance(hydration_hooks, dict):\n\t\thydration_hooks = {}\n\tif not isinstance(handlers, dict):\n\t\thandlers = {}\n\tif not isinstance(dehydration_hooks, dict):\n\t\tdehydration_hooks = {}\n\tif not isinstance(hydration_hooks, dict):\n\t\thydration_hooks = {}\n\tif not isinstance(handlers, dict):\n\t\thandlers = {}\n\tif not isinstance(dehydration_hooks, dict):\n\t\tdehydration_hooks = {}\n\tif not isinstance(hydration_hooks, dict):\n\t\thydration_hooks = {}\n\tif not isinstance(handlers, dict):\n\t\thandlers = {}\n\tif not isinstance(dehydration_hooks, dict):\n\t\tdehydration_hooks = {}\n\tif not isinstance(hydration_hooks, dict):\n\t\thydration_hooks = {}\n\tif not isinstance(handlers, dict):\n\t\thandlers = {}\n\tif not isinstance(dehydration_hooks, dict):\n\t\tdehydration_hooks = {}\n\tif not isinstance(hydration_hooks, dict):\n\t\thydration_hooks = {}\n\tif not isinstance(handlers, dict):\n\t\thandlers = {}\n\tif not isinstance(dehydration_hooks, dict):\n\t\tdehydration_hooks = {}\n\tif not isinstance(hydration_hooks, dict):\n\t\thydration_hooks = {}\n\tif not isinstance(handlers, dict):\n\t\thandlers = {}\n\tif not isinstance(dehydration_hooks, dict):\n\t\tdehydration_hooks = {}\n\tif not isinstance(hydration_hooks, dict):\n\t\thydration_hooks = {}\n\tif not isinstance(handlers, dict):\n\t\thandlers = {}\n\tif not isinstance(dehydration_hooks, dict):\n\t\tdehydration_hooks = {}\n\tif not isinstance(hydration_hooks, dict):\n\t\thydration_hooks = {}\n\tif not isinstance(handlers, dict):\n\t\thandlers = {}\n\tif", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "ques_id": "62e60723d76274f8a4026b75", "code": ["def round_half_to_even(n):\n\t\"\"\"\n\t>>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:\n\t\"\"\"\n\treturn round(n/2)\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def round_half_to_even(n):\n\t\"\"\"\n\t>>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:\n\t\"\"\"\n\treturn round(n/2)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "ques_id": "62e60707d76274f8a4026b69", "code": ["def point_type(name, fields, srid_map):\n\t\"\"\"\n\tDynamically create a Point subclass.\n\t\"\"\"\n\tif name in fields:\n\t\treturn Point\n\telif name in srid_map:\n\t\treturn Point(srid_map[name])\n\telse:\n\t\traise Exception(\"Unknown field name: %s\" % name)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def point_type(name, fields, srid_map):\n\t\"\"\"\n\tDynamically create a Point subclass.\n\t\"\"\"\n\tif name in fields:\n\t\treturn Point\n\telif name in srid_map:\n\t\treturn Point(srid_map[name])\n\telse:\n\t\traise Exception(\"Unknown field name: %s\" % name)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "ques_id": "62e5dc9ed76274f8a4026b5b", "code": ["def deprecated(message):\n\t\"\"\"\n\tDecorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass\n\t\"\"\"\n\tdef decorator(func):\n\t\t@functools.wraps(func)\n\t\tdef wrapper(*args, **kwargs):\n\t\t\twarnings.warn(message, DeprecationWarning, stacklevel=2)\n\t\t\treturn func(*args, **kwargs)\n\t\treturn wrapper\n\treturn decorator\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deprecated(message):\n\t\"\"\"\n\tDecorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass\n\t\"\"\"\n\tdef decorator(func):\n\t\t@functools.wraps(func)\n\t\tdef wrapper(*args, **kwargs):\n\t\t\twarnings.warn(message, DeprecationWarning, stacklevel=2)\n\t\t\treturn func(*args, **kwargs)\n\t\treturn wrapper\n\treturn decorator\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "ques_id": "62e4fc3c85ea98643089041e", "code": ["def _inline_r_setup(code:\n\t\"\"\"\n\tSome behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.\n\t\"\"\"\n\t#"], "level": "self_contained", "generate_results": [{"generate_code": "def _inline_r_setup(code:\n\t\"\"\"\n\tSome behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.\n\t\"\"\"\n\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "ques_id": "62e4fbda85ea986430890405", "code": ["def xargs(\n        cmd:\n\t\"\"\"\n\tA simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently\n\t\"\"\"\n\tif not os.name == 'nt':\n\t\treturn cmd\n\telse:\n\t\treturn cmd +'-c'\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def xargs(\n        cmd:\n\t\"\"\"\n\tA simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently\n\t\"\"\"\n\tif not os.name == 'nt':\n\t\treturn cmd\n\telse:\n\t\treturn cmd +'-c'\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "ques_id": "62e4fbda85ea986430890403", "code": ["def _shuffled(seq:\n\t\"\"\"\n\tDeterministically shuffle\n\t\"\"\"\n\treturn np.random.permutation(seq)"], "level": "file_runnable", "generate_results": [{"generate_code": "def _shuffled(seq:\n\t\"\"\"\n\tDeterministically shuffle\n\t\"\"\"\n\treturn np.random.permutation(seq)", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "ques_id": "62e4fb6585ea98643089032b", "code": ["def parse_version(s:\n\t\"\"\"\n\tpoor man's version comparison\n\t\"\"\"\n\tif s.startswith('v'):\n\t\treturn tuple(map(int, s[1:].split('.')))\n\telse:\n\t\treturn tuple(map(int, s.split('.')))\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def parse_version(s:\n\t\"\"\"\n\tpoor man's version comparison\n\t\"\"\"\n\tif s.startswith('v'):\n\t\treturn tuple(map(int, s[1:].split('.')))\n\telse:\n\t\treturn tuple(map(int, s.split('.')))\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "ques_id": "62e4fb4d85ea9864308902e7", "code": ["def normalize_cmd(cmd:\n\t\"\"\"\n\tFixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine\n\t\"\"\"\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif"], "level": "file_runnable", "generate_results": [{"generate_code": "def normalize_cmd(cmd:\n\t\"\"\"\n\tFixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine\n\t\"\"\"\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif cmd.startswith('/'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('\\\\'):\n\t\tcmd = cmd[1:]\n\tif cmd.startswith('//'):\n\t\tcmd = cmd[2:]\n\tif", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "ques_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["def cached(cache, key=hashkey, lock=None):\n\t\"\"\"\n\tDecorator to wrap a function with a memoizing callable that saves\nresults in a cache.\n\t\"\"\"\n\tdef wrapper(func):\n\t\tif cache is None:\n\t\t\tcache = {}\n\t\tif lock is None:\n\t\t\tlock = threading.Lock()\n\t\tdef memoized_func(*args, **kwargs):\n\t\t\tkey = key(args, kwargs)\n\t\t\tif key in cache:\n\t\t\t\treturn cache[key]\n\t\t\telse:\n\t\t\t\tresult = func(*args, **kwargs)\n\t\t\t\tcache[key] = result\n\t\t\t\treturn result\n\t\treturn wraps(func)(memoized_func)\n\treturn wrapper\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def cached(cache, key=hashkey, lock=None):\n\t\"\"\"\n\tDecorator to wrap a function with a memoizing callable that saves\nresults in a cache.\n\t\"\"\"\n\tdef wrapper(func):\n\t\tif cache is None:\n\t\t\tcache = {}\n\t\tif lock is None:\n\t\t\tlock = threading.Lock()\n\t\tdef memoized_func(*args, **kwargs):\n\t\t\tkey = key(args, kwargs)\n\t\t\tif key in cache:\n\t\t\t\treturn cache[key]\n\t\t\telse:\n\t\t\t\tresult = func(*args, **kwargs)\n\t\t\t\tcache[key] = result\n\t\t\t\treturn result\n\t\treturn wraps(func)(memoized_func)\n\treturn wrapper\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "ques_id": "62b8d24048ba5a41d1c3f49f", "code": ["def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n\t\"\"\"\n\tDecorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.\n\t\"\"\"\n\tdef decorator(func):\n\t\tdef wrapper(*args, **kwargs):\n\t\t\tif not typed:\n\t\t\t\treturn func(*args, **kwargs)\n\t\t\telse:\n\t\t\t\treturn func(*args, **kwargs)\n\t\twrapper.ttl = ttl\n\t\twrapper.ttl_cache = maxsize\n\t\twrapper.timer = timer\n\t\treturn wrapper\n\treturn decorator\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n\t\"\"\"\n\tDecorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.\n\t\"\"\"\n\tdef decorator(func):\n\t\tdef wrapper(*args, **kwargs):\n\t\t\tif not typed:\n\t\t\t\treturn func(*args, **kwargs)\n\t\t\telse:\n\t\t\t\treturn func(*args, **kwargs)\n\t\twrapper.ttl = ttl\n\t\twrapper.ttl_cache = maxsize\n\t\twrapper.timer = timer\n\t\treturn wrapper\n\treturn decorator\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "ques_id": "62b8d23b48ba5a41d1c3f49a", "code": ["def mru_cache(maxsize=128, typed=False):\n\t\"\"\"\n\tDecorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.\n\t\"\"\"\n\tdef decorator(func):\n\t\t@functools.wraps(func)\n\t\tdef wrapper(*args, **kwargs):\n\t\t\tif not hasattr(wrapper, 'cache'):\n\t\t\t\twrapper.cache = {}\n\t\t\tif not hasattr(wrapper, 'cache_key'):\n\t\t\t\twrapper.cache_key = func.__name__\n\t\t\tif not hasattr(wrapper, 'cache_value'):\n\t\t\t\twrapper.cache_value = {}\n\t\t\tif not hasattr(wrapper, 'cache_value_key'):\n\t\t\t\twrapper.cache_value_key = wrapper.cache_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value'):\n\t\t\t\twrapper.cache_value_value = {}\n\t\t\tif not hasattr(wrapper, 'cache_value_value_key'):\n\t\t\t\twrapper.cache_value_value_key = wrapper.cache_value_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value'):\n\t\t\t\twrapper.cache_value_value_value = {}\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_key'):\n\t\t\t\twrapper.cache_value_value_value_key = wrapper.cache_value_value_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value'):\n\t\t\t\twrapper.cache_value_value_value_value = {}\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_key'):\n\t\t\t\twrapper.cache_value_value_value_value_key = wrapper.cache_value_value_value_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_value'):\n\t\t\t\twrapper.cache_value_value_value_value_value = {}\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_value_key'):\n\t\t\t\twrapper.cache_value_value_value_value_value_key = wrapper.cache_value_value_value_value_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_value_value'):\n\t\t\t\twrapper.cache_value_value_value_value_value_value = {}\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_value_value_key'):\n\t\t\t\twrapper.cache_value_value_value_value_value_value_key = wrapper.cache_value_value_value_value_value_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_value_value_key'):\n\t\t\t\twrapper.cache_value_value_value_value_value_value_key = wrapper.cache_value_value_value_value_value_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_value_value_value'):\n\t\t\t\twrapper.cache_value_value_value_value_value_value_value = {}\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_value_value_value_key'):\n\t\t\t\twrapper.cache_value_value_value_value_value_value_value_key = wrapper.cache_value_value_value_value_value_value_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_value_value_value_key'):\n\t\t\t\twrapper.cache_value_value_value_value_value_value_value_key = wrapper.cache_value_value_value_value_value_value_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_value_value_value_key'):\n\t\t\t\twrapper.cache_value_value_value_value_value_value_value_key = wrapper.cache_value_value_value_value_value_value_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_value_value_value_key'):\n\t\t\t\twrapper.cache_value_value_value_value_value_value_value_key = wrapper.cache_value_value_value_value_value_value_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value"], "level": "project_runnable", "generate_results": [{"generate_code": "def mru_cache(maxsize=128, typed=False):\n\t\"\"\"\n\tDecorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.\n\t\"\"\"\n\tdef decorator(func):\n\t\t@functools.wraps(func)\n\t\tdef wrapper(*args, **kwargs):\n\t\t\tif not hasattr(wrapper, 'cache'):\n\t\t\t\twrapper.cache = {}\n\t\t\tif not hasattr(wrapper, 'cache_key'):\n\t\t\t\twrapper.cache_key = func.__name__\n\t\t\tif not hasattr(wrapper, 'cache_value'):\n\t\t\t\twrapper.cache_value = {}\n\t\t\tif not hasattr(wrapper, 'cache_value_key'):\n\t\t\t\twrapper.cache_value_key = wrapper.cache_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value'):\n\t\t\t\twrapper.cache_value_value = {}\n\t\t\tif not hasattr(wrapper, 'cache_value_value_key'):\n\t\t\t\twrapper.cache_value_value_key = wrapper.cache_value_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value'):\n\t\t\t\twrapper.cache_value_value_value = {}\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_key'):\n\t\t\t\twrapper.cache_value_value_value_key = wrapper.cache_value_value_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value'):\n\t\t\t\twrapper.cache_value_value_value_value = {}\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_key'):\n\t\t\t\twrapper.cache_value_value_value_value_key = wrapper.cache_value_value_value_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_value'):\n\t\t\t\twrapper.cache_value_value_value_value_value = {}\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_value_key'):\n\t\t\t\twrapper.cache_value_value_value_value_value_key = wrapper.cache_value_value_value_value_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_value_value'):\n\t\t\t\twrapper.cache_value_value_value_value_value_value = {}\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_value_value_key'):\n\t\t\t\twrapper.cache_value_value_value_value_value_value_key = wrapper.cache_value_value_value_value_value_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_value_value_key'):\n\t\t\t\twrapper.cache_value_value_value_value_value_value_key = wrapper.cache_value_value_value_value_value_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_value_value_value'):\n\t\t\t\twrapper.cache_value_value_value_value_value_value_value = {}\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_value_value_value_key'):\n\t\t\t\twrapper.cache_value_value_value_value_value_value_value_key = wrapper.cache_value_value_value_value_value_value_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_value_value_value_key'):\n\t\t\t\twrapper.cache_value_value_value_value_value_value_value_key = wrapper.cache_value_value_value_value_value_value_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_value_value_value_key'):\n\t\t\t\twrapper.cache_value_value_value_value_value_value_value_key = wrapper.cache_value_value_value_value_value_value_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value_value_value_value_value_key'):\n\t\t\t\twrapper.cache_value_value_value_value_value_value_value_key = wrapper.cache_value_value_value_value_value_value_key\n\t\t\tif not hasattr(wrapper, 'cache_value_value_value", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "ques_id": "62b8d23948ba5a41d1c3f498", "code": ["def lru_cache(maxsize=128, typed=False):\n\t\"\"\"\n\tDecorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.\n\t\"\"\"\n\tdef decorator(func):\n\t\t@functools.wraps(func)\n\t\tdef wrapper(*args, **kwargs):\n\t\t\tif not typed:\n\t\t\t\treturn func(*args, **kwargs)\n\t\t\telse:\n\t\t\t\tcache = LRUCache(maxsize)\n\t\t\t\ttry:\n\t\t\t\t\treturn cache[args]\n\t\t\t\texcept KeyError:\n\t\t\t\t\tcache[args] = result = func(*args, **kwargs)\n\t\t\t\t\treturn result\n\t\treturn wrapper\n\treturn decorator\n\n@lru_cache(maxsize=128, typed=True)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lru_cache(maxsize=128, typed=False):\n\t\"\"\"\n\tDecorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.\n\t\"\"\"\n\tdef decorator(func):\n\t\t@functools.wraps(func)\n\t\tdef wrapper(*args, **kwargs):\n\t\t\tif not typed:\n\t\t\t\treturn func(*args, **kwargs)\n\t\t\telse:\n\t\t\t\tcache = LRUCache(maxsize)\n\t\t\t\ttry:\n\t\t\t\t\treturn cache[args]\n\t\t\t\texcept KeyError:\n\t\t\t\t\tcache[args] = result = func(*args, **kwargs)\n\t\t\t\t\treturn result\n\t\treturn wrapper\n\treturn decorator\n\n@lru_cache(maxsize=128, typed=True)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "ques_id": "62b8d23748ba5a41d1c3f496", "code": ["def lfu_cache(maxsize=128, typed=False):\n\t\"\"\"\n\tDecorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.\n\t\"\"\"\n\tdef decorator(func):\n\t\t@functools.wraps(func)\n\t\tdef wrapper(*args, **kwargs):\n\t\t\tif not hasattr(wrapper, 'lfu_cache'):\n\t\t\t\twrapper.lfu_cache = {}\n\t\t\tif not wrapper.lfu_cache:\n\t\t\t\twrapper.lfu_cache = {}\n\t\t\tif len(wrapper.lfu_cache) >= maxsize:\n\t\t\t\twrapper.lfu_cache.popitem(last=False)\n\t\t\twrapper.lfu_cache[args] = func(*args, **kwargs)\n\t\t\treturn wrapper.lfu_cache[args]\n\t\treturn wrapper\n\treturn decorator\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lfu_cache(maxsize=128, typed=False):\n\t\"\"\"\n\tDecorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.\n\t\"\"\"\n\tdef decorator(func):\n\t\t@functools.wraps(func)\n\t\tdef wrapper(*args, **kwargs):\n\t\t\tif not hasattr(wrapper, 'lfu_cache'):\n\t\t\t\twrapper.lfu_cache = {}\n\t\t\tif not wrapper.lfu_cache:\n\t\t\t\twrapper.lfu_cache = {}\n\t\t\tif len(wrapper.lfu_cache) >= maxsize:\n\t\t\t\twrapper.lfu_cache.popitem(last=False)\n\t\t\twrapper.lfu_cache[args] = func(*args, **kwargs)\n\t\t\treturn wrapper.lfu_cache[args]\n\t\treturn wrapper\n\treturn decorator\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "ques_id": "62b8d22f48ba5a41d1c3f488", "code": ["def popitem(self):\n\t\"\"\"\n\tRemove and return the `(key, value)` pair first inserted.\n\t\"\"\"\n\treturn self.__dict.popitem()"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n\t\"\"\"\n\tRemove and return the `(key, value)` pair first inserted.\n\t\"\"\"\n\treturn self.__dict.popitem()", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "ques_id": "62b8d22a48ba5a41d1c3f47e", "code": ["def setdefault(self, key, default=None):\n\t\"\"\"\n\tD.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D\n\t\"\"\"\n\tif key in self:\n\t\treturn self[key]\n\telse:\n\t\tself[key] = default\n\t\treturn default\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def setdefault(self, key, default=None):\n\t\"\"\"\n\tD.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D\n\t\"\"\"\n\tif key in self:\n\t\treturn self[key]\n\telse:\n\t\tself[key] = default\n\t\treturn default\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "ques_id": "62b8d22948ba5a41d1c3f47c", "code": ["def get(self, key, default=None):\n\t\"\"\"\n\tD.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.\n\t\"\"\"\n\ttry:\n\t\treturn self[key]\n\texcept KeyError:\n\t\treturn default\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get(self, key, default=None):\n\t\"\"\"\n\tD.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.\n\t\"\"\"\n\ttry:\n\t\treturn self[key]\n\texcept KeyError:\n\t\treturn default\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "ques_id": "62b8d22548ba5a41d1c3f472", "code": ["def cachedmethod(cache, key=hashkey, lock=None):\n\t\"\"\"\n\tDecorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.\n\t\"\"\"\n\tdef cachedmethod(self, *args, **kwargs):\n\t\tif lock is None:\n\t\t\tlock = threading.Lock()\n\t\twith lock:\n\t\t\ttry:\n\t\t\t\treturn cache[key]\n\t\t\texcept KeyError:\n\t\t\t\tcache[key] = value = self.__class__(self, *args, **kwargs)\n\t\t\t\treturn cache[key]\n\tcachedmethod.__name__ = 'cachedmethod'\n\treturn cachedmethod\n\nclass Cache(object):\n\t\"\"\"\n\tA cache of objects that can be retrieved by name or by a hash.\n\t\"\"\"\n\tdef __init__(self, name=None, hash=None):\n\t\tself.name = name\n\t\tself.hash = hash\n\t\tself.cache = {}\n\t\tself.lock = threading.Lock()\n\n\tdef __getitem__(self, key):\n\t\twith self.lock:\n\t\t\treturn self.cache[key]\n\n\tdef __setitem__(self, key, value):\n\t\twith self.lock:\n\t\t\tself.cache[key] = value\n\n\tdef __delitem__(self, key):\n\t\twith self.lock:\n\t\t\tdel self.cache[key]\n\n\tdef __contains__(self, key):\n\t\twith self.lock:\n\t\t\treturn key in self.cache\n\n\tdef __len__(self):\n\t\twith self.lock:\n\t\t\treturn len(self.cache)\n\n\tdef __iter__(self):\n\t\twith self.lock:\n\t\t\treturn iter(self.cache)\n\n\tdef __repr__(self):\n\t\twith self.lock:\n\t\t\treturn repr(self.cache)\n\n\tdef __str__(self):\n\t\twith self.lock:\n\t\t\treturn str(self.cache)\n\n\tdef __repr__(self):\n\t\twith self.lock:\n\t\t\treturn repr(self.cache)\n\n\tdef __eq__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache == other.cache\n\n\tdef __ne__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache!= other.cache\n\n\tdef __hash__(self):\n\t\twith self.lock:\n\t\t\treturn hash(self.cache)\n\n\tdef __lt__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache < other.cache\n\n\tdef __le__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache <= other.cache\n\n\tdef __gt__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache > other.cache\n\n\tdef __ge__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache >= other.cache\n\n\tdef __cmp__(self, other):\n\t\twith self.lock:\n\t\t\treturn cmp(self.cache, other.cache)\n\n\tdef __contains__(self, key):\n\t\twith self.lock:\n\t\t\treturn key in self.cache\n\n\tdef __len__(self):\n\t\twith self.lock:\n\t\t\treturn len(self.cache)\n\n\tdef __iter__(self):\n\t\twith self.lock:\n\t\t\treturn iter(self.cache)\n\n\tdef __repr__(self):\n\t\twith self.lock:\n\t\t\treturn repr(self.cache)\n\n\tdef __str__(self):\n\t\twith self.lock:\n\t\t\treturn str(self.cache)\n\n\tdef __repr__(self):\n\t\twith self.lock:\n\t\t\treturn repr(self.cache)\n\n\tdef __eq__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache == other.cache\n\n\tdef __ne__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache!= other.cache\n\n\tdef __hash__(self):\n\t\twith self.lock:\n\t\t\treturn hash(self.cache)\n\n\tdef __lt__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache < other.cache\n\n\tdef __le__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache <= other.cache\n\n\tdef __gt__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache > other.cache\n\n\tdef __ge__(self,"], "level": "project_runnable", "generate_results": [{"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n\t\"\"\"\n\tDecorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.\n\t\"\"\"\n\tdef cachedmethod(self, *args, **kwargs):\n\t\tif lock is None:\n\t\t\tlock = threading.Lock()\n\t\twith lock:\n\t\t\ttry:\n\t\t\t\treturn cache[key]\n\t\t\texcept KeyError:\n\t\t\t\tcache[key] = value = self.__class__(self, *args, **kwargs)\n\t\t\t\treturn cache[key]\n\tcachedmethod.__name__ = 'cachedmethod'\n\treturn cachedmethod\n\nclass Cache(object):\n\t\"\"\"\n\tA cache of objects that can be retrieved by name or by a hash.\n\t\"\"\"\n\tdef __init__(self, name=None, hash=None):\n\t\tself.name = name\n\t\tself.hash = hash\n\t\tself.cache = {}\n\t\tself.lock = threading.Lock()\n\n\tdef __getitem__(self, key):\n\t\twith self.lock:\n\t\t\treturn self.cache[key]\n\n\tdef __setitem__(self, key, value):\n\t\twith self.lock:\n\t\t\tself.cache[key] = value\n\n\tdef __delitem__(self, key):\n\t\twith self.lock:\n\t\t\tdel self.cache[key]\n\n\tdef __contains__(self, key):\n\t\twith self.lock:\n\t\t\treturn key in self.cache\n\n\tdef __len__(self):\n\t\twith self.lock:\n\t\t\treturn len(self.cache)\n\n\tdef __iter__(self):\n\t\twith self.lock:\n\t\t\treturn iter(self.cache)\n\n\tdef __repr__(self):\n\t\twith self.lock:\n\t\t\treturn repr(self.cache)\n\n\tdef __str__(self):\n\t\twith self.lock:\n\t\t\treturn str(self.cache)\n\n\tdef __repr__(self):\n\t\twith self.lock:\n\t\t\treturn repr(self.cache)\n\n\tdef __eq__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache == other.cache\n\n\tdef __ne__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache!= other.cache\n\n\tdef __hash__(self):\n\t\twith self.lock:\n\t\t\treturn hash(self.cache)\n\n\tdef __lt__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache < other.cache\n\n\tdef __le__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache <= other.cache\n\n\tdef __gt__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache > other.cache\n\n\tdef __ge__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache >= other.cache\n\n\tdef __cmp__(self, other):\n\t\twith self.lock:\n\t\t\treturn cmp(self.cache, other.cache)\n\n\tdef __contains__(self, key):\n\t\twith self.lock:\n\t\t\treturn key in self.cache\n\n\tdef __len__(self):\n\t\twith self.lock:\n\t\t\treturn len(self.cache)\n\n\tdef __iter__(self):\n\t\twith self.lock:\n\t\t\treturn iter(self.cache)\n\n\tdef __repr__(self):\n\t\twith self.lock:\n\t\t\treturn repr(self.cache)\n\n\tdef __str__(self):\n\t\twith self.lock:\n\t\t\treturn str(self.cache)\n\n\tdef __repr__(self):\n\t\twith self.lock:\n\t\t\treturn repr(self.cache)\n\n\tdef __eq__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache == other.cache\n\n\tdef __ne__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache!= other.cache\n\n\tdef __hash__(self):\n\t\twith self.lock:\n\t\t\treturn hash(self.cache)\n\n\tdef __lt__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache < other.cache\n\n\tdef __le__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache <= other.cache\n\n\tdef __gt__(self, other):\n\t\twith self.lock:\n\t\t\treturn self.cache > other.cache\n\n\tdef __ge__(self,", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "ques_id": "62b8c517e0d34b282c18122e", "code": ["def extostr(cls, e, max_level=30, max_path_level=5):\n\t\"\"\"\n\tFormat an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str\n\t\"\"\"\n\treturn e.__str__()\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n\t\"\"\"\n\tFormat an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str\n\t\"\"\"\n\treturn e.__str__()\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "ques_id": "62b8bbbfe0d34b282c181210", "code": ["def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n\t\"\"\"\n\tWrite to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int\n\t\"\"\"\n\tif not overwrite and os.path.exists(file_name):\n\t\traise ValueError(\"File already exists: %s\" % file_name)\n\twith open(file_name, 'wb') as f:\n\t\tf.write(text_buffer)\n\treturn len(text_buffer)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n\t\"\"\"\n\tWrite to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int\n\t\"\"\"\n\tif not overwrite and os.path.exists(file_name):\n\t\traise ValueError(\"File already exists: %s\" % file_name)\n\twith open(file_name, 'wb') as f:\n\t\tf.write(text_buffer)\n\treturn len(text_buffer)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "ques_id": "62b8bbbfe0d34b282c18120f", "code": ["def file_to_textbuffer(file_name, encoding):\n\t\"\"\"\n\tLoad a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str\n\t\"\"\"\n\ttry:\n\t\twith open(file_name, 'r', encoding=encoding) as f:\n\t\t\treturn f.read()\n\texcept FileNotFoundError:\n\t\treturn None\n\texcept UnicodeDecodeError:\n\t\treturn None\n\texcept UnicodeEncodeError:\n\t\treturn None\n\texcept Exception as e:\n\t\treturn None\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def file_to_textbuffer(file_name, encoding):\n\t\"\"\"\n\tLoad a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str\n\t\"\"\"\n\ttry:\n\t\twith open(file_name, 'r', encoding=encoding) as f:\n\t\t\treturn f.read()\n\texcept FileNotFoundError:\n\t\treturn None\n\texcept UnicodeDecodeError:\n\t\treturn None\n\texcept UnicodeEncodeError:\n\t\treturn None\n\texcept Exception as e:\n\t\treturn None\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "ques_id": "62b8bbbce0d34b282c18120d", "code": ["def is_file_exist(file_name):\n\t\"\"\"\n\tCheck if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool\n\t\"\"\"\n\tif os.path.isfile(file_name):\n\t\treturn True\n\telse:\n\t\treturn False\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_file_exist(file_name):\n\t\"\"\"\n\tCheck if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool\n\t\"\"\"\n\tif os.path.isfile(file_name):\n\t\treturn True\n\telse:\n\t\treturn False\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "ques_id": "62b8b99de0d34b282c1811f8", "code": ["def _reset_logging(cls):\n\t\"\"\"\n\tReset\n\t\"\"\"\n\tcls.logger = logging.getLogger(cls.__name__)\n\tcls.logger.setLevel(logging.DEBUG)\n\tformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\tfile_handler = logging.FileHandler('logs/{}.log'.format(cls.__name__))\n\tfile_handler.setFormatter(formatter)\n\tcls.logger.addHandler(file_handler)\n\tstream_handler = logging.StreamHandler()\n\tstream_handler.setFormatter(formatter)\n\tcls.logger.addHandler(stream_handler)\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _reset_logging(cls):\n\t\"\"\"\n\tReset\n\t\"\"\"\n\tcls.logger = logging.getLogger(cls.__name__)\n\tcls.logger.setLevel(logging.DEBUG)\n\tformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\tfile_handler = logging.FileHandler('logs/{}.log'.format(cls.__name__))\n\tfile_handler.setFormatter(formatter)\n\tcls.logger.addHandler(file_handler)\n\tstream_handler = logging.StreamHandler()\n\tstream_handler.setFormatter(formatter)\n\tcls.logger.addHandler(stream_handler)\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "ques_id": "62b8b59feb7e40a82d2d1291", "code": ["def _getTargetClass(self):\n\t\"\"\"\n\tDefine this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.\n\t\"\"\"\n\treturn _PySpin._Spin\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _getTargetClass(self):\n\t\"\"\"\n\tDefine this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.\n\t\"\"\"\n\treturn _PySpin._Spin\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "ques_id": "62b8b590eb7e40a82d2d1275", "code": ["def _legacy_mergeOrderings(orderings):\n\t\"\"\"\n\tMerge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']\n\t\"\"\"\n\t#"], "level": "self_contained", "generate_results": [{"generate_code": "def _legacy_mergeOrderings(orderings):\n\t\"\"\"\n\tMerge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']\n\t\"\"\"\n\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "ques_id": "62b8b58deb7e40a82d2d1269", "code": ["def directlyProvidedBy(object):\n\t\"\"\"\n\tReturn the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.\n\t\"\"\"\n\treturn object.__directlyProvidedBy__()\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def directlyProvidedBy(object):\n\t\"\"\"\n\tReturn the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.\n\t\"\"\"\n\treturn object.__directlyProvidedBy__()\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "ques_id": "62b8b559eb7e40a82d2d11f8", "code": ["def minimalBases(classes):\n\t\"\"\"\n\tReduce a list of base classes to its ordered minimum equivalent\n\t\"\"\"\n\treturn sorted(classes, key=lambda x: len(x.bases))\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def minimalBases(classes):\n\t\"\"\"\n\tReduce a list of base classes to its ordered minimum equivalent\n\t\"\"\"\n\treturn sorted(classes, key=lambda x: len(x.bases))\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "ques_id": "62b8b4b9eb7e40a82d2d1134", "code": ["def namesAndDescriptions(self, all=False):\n\t\"\"\"\n\tReturn attribute names and descriptions defined by interface.\n\t\"\"\"\n\tif all:\n\t\treturn self.__dict__\n\telse:\n\t\treturn self.__dict__.keys()\n\nclass Interface(object):\n\t\"\"\"\n\tInterface class.\n\t\"\"\"\n\tdef __init__(self, name, description, interfaceType):\n\t\t\"\"\"\n\t\tConstructor.\n\t\t\"\"\"\n\t\tself.name = name\n\t\tself.description = description\n\t\tself.interfaceType = interfaceType\n\t\tself.__dict__ = {}\n\t\tself.__initAttributes()\n\n\tdef __initAttributes(self):\n\t\t\"\"\"\n\t\tConstructor.\n\t\t\"\"\"\n\t\tself.__dict__['name'] = None\n\t\tself.__dict__['description'] = None\n\t\tself.__dict__['interfaceType'] = None\n\n\tdef __str__(self):\n\t\t\"\"\"\n\t\tReturn string representation of interface.\n\t\t\"\"\"\n\t\treturn self.name\n\n\tdef __repr__(self):\n\t\t\"\"\"\n\t\tReturn string representation of interface.\n\t\t\"\"\"\n\t\treturn self.name\n\n\tdef __eq__(self, other):\n\t\t\"\"\"\n\t\tReturn True if other is equal to this interface.\n\t\t\"\"\"\n\t\treturn self.name == other.name\n\n\tdef __ne__(self, other):\n\t\t\"\"\"\n\t\tReturn True if other is not equal to this interface.\n\t\t\"\"\"\n\t\treturn self.name!= other.name\n\n\tdef __hash__(self):\n\t\t\"\"\"\n\t\tReturn hash value of this interface.\n\t\t\"\"\"\n\t\treturn hash(self.name)\n\n\tdef getName(self):\n\t\t\"\"\"\n\t\tReturn name of this interface.\n\t\t\"\"\"\n\t\treturn self.name\n\n\tdef getDescription(self):\n\t\t\"\"\"\n\t\tReturn description of this interface.\n\t\t\"\"\"\n\t\treturn self.description\n\n\tdef getInterfaceType(self):\n\t\t\"\"\"\n\t\tReturn interface type of this interface.\n\t\t\"\"\"\n\t\treturn self.interfaceType\n\n\tdef setName(self, name):\n\t\t\"\"\"\n\t\tSet name of this interface.\n\t\t\"\"\"\n\t\tself.__dict__['name'] = name\n\n\tdef setDescription(self, description):\n\t\t\"\"\"\n\t\tSet description of this interface.\n\t\t\"\"\"\n\t\tself.__dict__['description'] = description\n\n\tdef setInterfaceType(self, interfaceType):\n\t\t\"\"\"\n\t\tSet interface type of this interface.\n\t\t\"\"\"\n\t\tself.__dict__['interfaceType'] = interfaceType\n\n\tdef getInterfaceType(self):\n\t\t\"\"\"\n\t\tReturn interface type of this interface.\n\t\t\"\"\"\n\t\treturn self.interfaceType\n\n\tdef getInterface(self):\n\t\t\"\"\"\n\t\tReturn interface of this interface.\n\t\t\"\"\"\n\t\treturn self.__dict__['interfaceType']\n\n\tdef setInterface(self, interface):\n\t\t\"\"\"\n\t\tSet interface of this interface.\n\t\t\"\"\"\n\t\tself.__dict__['interfaceType'] = interface\n\n\tdef getInterface(self):\n\t\t\"\"\"\n\t\tReturn interface of this interface.\n\t\t\"\"\"\n\t\treturn self.__dict__['interfaceType']\n\n\tdef getAllAttributes(self):\n\t\t\"\"\"\n\t\tReturn all attributes of this interface.\n\t\t\"\"\"\n\t\treturn self.__dict__['__dict__'].keys()\n\n\tdef getAllDescriptions(self):\n\t\t\"\"\"\n\t\tReturn all descriptions of this interface.\n\t\t\"\"\"\n\t\treturn self.__dict__['__dict__'].values()\n\n\tdef getAllInterfaceTypes(self):\n\t\t\"\"\"\n\t\tReturn all interface types of this interface.\n\t\t\"\"\"\n\t\treturn self.__dict__['__dict__'].keys()\n\n\tdef getAllInterface(self):\n\t\t\"\"\"\n\t\tReturn all interface of this interface.\n\t\t\"\"\"\n\t\treturn self.__dict__['__dict__'].values()\n\n\tdef getAllInterfaceNames(self):\n\t\t\"\"\"\n\t\tReturn all interface names of this interface.\n\t\t\"\"\"\n\t\treturn self.__dict__['__dict__'].keys()\n\n\tdef getAllInterfaceDescriptions(self):\n\t\t\"\"\"\n\t\tReturn all descriptions of all interfaces of this interface.\n\t\t\"\"\"\n\t\treturn self.__dict__['__dict__'].values()\n\n\tdef getAllInterfaceTypes(self):\n\t\t\"\"\"\n\t\tReturn all interface types of all interfaces of this interface.\n\t\t\"\"\"\n\t\treturn self.__dict__['__dict__'].keys()\n\n\tdef getAllInterfaceNames(self):\n\t\t\"\"\"\n\t\tReturn all interface names of"], "level": "class_runnable", "generate_results": [{"generate_code": "def namesAndDescriptions(self, all=False):\n\t\"\"\"\n\tReturn attribute names and descriptions defined by interface.\n\t\"\"\"\n\tif all:\n\t\treturn self.__dict__\n\telse:\n\t\treturn self.__dict__.keys()\n\nclass Interface(object):\n\t\"\"\"\n\tInterface class.\n\t\"\"\"\n\tdef __init__(self, name, description, interfaceType):\n\t\t\"\"\"\n\t\tConstructor.\n\t\t\"\"\"\n\t\tself.name = name\n\t\tself.description = description\n\t\tself.interfaceType = interfaceType\n\t\tself.__dict__ = {}\n\t\tself.__initAttributes()\n\n\tdef __initAttributes(self):\n\t\t\"\"\"\n\t\tConstructor.\n\t\t\"\"\"\n\t\tself.__dict__['name'] = None\n\t\tself.__dict__['description'] = None\n\t\tself.__dict__['interfaceType'] = None\n\n\tdef __str__(self):\n\t\t\"\"\"\n\t\tReturn string representation of interface.\n\t\t\"\"\"\n\t\treturn self.name\n\n\tdef __repr__(self):\n\t\t\"\"\"\n\t\tReturn string representation of interface.\n\t\t\"\"\"\n\t\treturn self.name\n\n\tdef __eq__(self, other):\n\t\t\"\"\"\n\t\tReturn True if other is equal to this interface.\n\t\t\"\"\"\n\t\treturn self.name == other.name\n\n\tdef __ne__(self, other):\n\t\t\"\"\"\n\t\tReturn True if other is not equal to this interface.\n\t\t\"\"\"\n\t\treturn self.name!= other.name\n\n\tdef __hash__(self):\n\t\t\"\"\"\n\t\tReturn hash value of this interface.\n\t\t\"\"\"\n\t\treturn hash(self.name)\n\n\tdef getName(self):\n\t\t\"\"\"\n\t\tReturn name of this interface.\n\t\t\"\"\"\n\t\treturn self.name\n\n\tdef getDescription(self):\n\t\t\"\"\"\n\t\tReturn description of this interface.\n\t\t\"\"\"\n\t\treturn self.description\n\n\tdef getInterfaceType(self):\n\t\t\"\"\"\n\t\tReturn interface type of this interface.\n\t\t\"\"\"\n\t\treturn self.interfaceType\n\n\tdef setName(self, name):\n\t\t\"\"\"\n\t\tSet name of this interface.\n\t\t\"\"\"\n\t\tself.__dict__['name'] = name\n\n\tdef setDescription(self, description):\n\t\t\"\"\"\n\t\tSet description of this interface.\n\t\t\"\"\"\n\t\tself.__dict__['description'] = description\n\n\tdef setInterfaceType(self, interfaceType):\n\t\t\"\"\"\n\t\tSet interface type of this interface.\n\t\t\"\"\"\n\t\tself.__dict__['interfaceType'] = interfaceType\n\n\tdef getInterfaceType(self):\n\t\t\"\"\"\n\t\tReturn interface type of this interface.\n\t\t\"\"\"\n\t\treturn self.interfaceType\n\n\tdef getInterface(self):\n\t\t\"\"\"\n\t\tReturn interface of this interface.\n\t\t\"\"\"\n\t\treturn self.__dict__['interfaceType']\n\n\tdef setInterface(self, interface):\n\t\t\"\"\"\n\t\tSet interface of this interface.\n\t\t\"\"\"\n\t\tself.__dict__['interfaceType'] = interface\n\n\tdef getInterface(self):\n\t\t\"\"\"\n\t\tReturn interface of this interface.\n\t\t\"\"\"\n\t\treturn self.__dict__['interfaceType']\n\n\tdef getAllAttributes(self):\n\t\t\"\"\"\n\t\tReturn all attributes of this interface.\n\t\t\"\"\"\n\t\treturn self.__dict__['__dict__'].keys()\n\n\tdef getAllDescriptions(self):\n\t\t\"\"\"\n\t\tReturn all descriptions of this interface.\n\t\t\"\"\"\n\t\treturn self.__dict__['__dict__'].values()\n\n\tdef getAllInterfaceTypes(self):\n\t\t\"\"\"\n\t\tReturn all interface types of this interface.\n\t\t\"\"\"\n\t\treturn self.__dict__['__dict__'].keys()\n\n\tdef getAllInterface(self):\n\t\t\"\"\"\n\t\tReturn all interface of this interface.\n\t\t\"\"\"\n\t\treturn self.__dict__['__dict__'].values()\n\n\tdef getAllInterfaceNames(self):\n\t\t\"\"\"\n\t\tReturn all interface names of this interface.\n\t\t\"\"\"\n\t\treturn self.__dict__['__dict__'].keys()\n\n\tdef getAllInterfaceDescriptions(self):\n\t\t\"\"\"\n\t\tReturn all descriptions of all interfaces of this interface.\n\t\t\"\"\"\n\t\treturn self.__dict__['__dict__'].values()\n\n\tdef getAllInterfaceTypes(self):\n\t\t\"\"\"\n\t\tReturn all interface types of all interfaces of this interface.\n\t\t\"\"\"\n\t\treturn self.__dict__['__dict__'].keys()\n\n\tdef getAllInterfaceNames(self):\n\t\t\"\"\"\n\t\tReturn all interface names of", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "ques_id": "62b8b416eb7e40a82d2d1129", "code": ["def names(self, all=False):\n\t\"\"\"\n\tReturn the attribute names defined by the interface.\n\t\"\"\"\n\treturn self.__dict__.keys()\n\nclass Attribute(object):\n\t\"\"\"\n\tA class that represents an attribute.\n\t\"\"\"\n\tdef __init__(self, name, value):\n\t\t\"\"\"\n\t\tConstructor.\n\t\t\"\"\"\n\t\tself.name = name\n\t\tself.value = value\n\tdef __str__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the attribute.\n\t\t\"\"\"\n\t\treturn '%s=%s' % (self.name, self.value)\n\tdef __repr__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the attribute.\n\t\t\"\"\"\n\t\treturn '%s(%s)' % (self.__class__.__name__, str(self))\n\tdef __eq__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the attribute is equal to the other attribute.\n\t\t\"\"\"\n\t\treturn self.name == other.name and self.value == other.value\n\tdef __ne__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the attribute is not equal to the other attribute.\n\t\t\"\"\"\n\t\treturn not self.__eq__(other)\n\tdef __hash__(self):\n\t\t\"\"\"\n\t\tReturn a hash value for the attribute.\n\t\t\"\"\"\n\t\treturn hash((self.name, self.value))\n\nclass AttributeSet(object):\n\t\"\"\"\n\tA class that represents a set of attributes.\n\t\"\"\"\n\tdef __init__(self):\n\t\t\"\"\"\n\t\tConstructor.\n\t\t\"\"\"\n\t\tself.attributes = {}\n\tdef __str__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the set.\n\t\t\"\"\"\n\t\treturn '{%s}' % ', '.join(['%s=%s' % (a.name, a.value) for a in self.attributes.values()])\n\tdef __repr__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the set.\n\t\t\"\"\"\n\t\treturn '{%s}' % ', '.join(['%s=%s' % (a.name, a.value) for a in self.attributes.values()])\n\tdef __eq__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the set is equal to the other set.\n\t\t\"\"\"\n\t\treturn self.attributes == other.attributes\n\tdef __ne__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the set is not equal to the other set.\n\t\t\"\"\"\n\t\treturn not self.__eq__(other)\n\tdef __hash__(self):\n\t\t\"\"\"\n\t\tReturn a hash value for the set.\n\t\t\"\"\"\n\t\treturn hash(self.attributes)\n\nclass AttributeSetImpl(object):\n\t\"\"\"\n\tA class that represents an attribute set.\n\t\"\"\"\n\tdef __init__(self, attributes):\n\t\t\"\"\"\n\t\tConstructor.\n\t\t\"\"\"\n\t\tself.attributes = attributes\n\tdef __str__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the set.\n\t\t\"\"\"\n\t\treturn '{%s}' % ', '.join(['%s=%s' % (a.name, a.value) for a in self.attributes.values()])\n\tdef __repr__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the set.\n\t\t\"\"\"\n\t\treturn '{%s}' % ', '.join(['%s=%s' % (a.name, a.value) for a in self.attributes.values()])\n\tdef __eq__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the set is equal to the other set.\n\t\t\"\"\"\n\t\treturn self.attributes == other.attributes\n\tdef __ne__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the set is not equal to the other set.\n\t\t\"\"\"\n\t\treturn not self.__eq__(other)\n\tdef __hash__(self):\n\t\t\"\"\"\n\t\tReturn a hash value for the set.\n\t\t\"\"\"\n\t\treturn hash(self.attributes)\n\nclass AttributeImpl(object):\n\t\"\"\"\n\tA class that represents an attribute.\n\t\"\"\"\n\tdef __init__(self, attribute):\n\t\t\"\"\"\n\t\tConstructor.\n\t\t\"\"\"\n\t\tself.attribute = attribute\n\tdef __str__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the attribute"], "level": "class_runnable", "generate_results": [{"generate_code": "def names(self, all=False):\n\t\"\"\"\n\tReturn the attribute names defined by the interface.\n\t\"\"\"\n\treturn self.__dict__.keys()\n\nclass Attribute(object):\n\t\"\"\"\n\tA class that represents an attribute.\n\t\"\"\"\n\tdef __init__(self, name, value):\n\t\t\"\"\"\n\t\tConstructor.\n\t\t\"\"\"\n\t\tself.name = name\n\t\tself.value = value\n\tdef __str__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the attribute.\n\t\t\"\"\"\n\t\treturn '%s=%s' % (self.name, self.value)\n\tdef __repr__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the attribute.\n\t\t\"\"\"\n\t\treturn '%s(%s)' % (self.__class__.__name__, str(self))\n\tdef __eq__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the attribute is equal to the other attribute.\n\t\t\"\"\"\n\t\treturn self.name == other.name and self.value == other.value\n\tdef __ne__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the attribute is not equal to the other attribute.\n\t\t\"\"\"\n\t\treturn not self.__eq__(other)\n\tdef __hash__(self):\n\t\t\"\"\"\n\t\tReturn a hash value for the attribute.\n\t\t\"\"\"\n\t\treturn hash((self.name, self.value))\n\nclass AttributeSet(object):\n\t\"\"\"\n\tA class that represents a set of attributes.\n\t\"\"\"\n\tdef __init__(self):\n\t\t\"\"\"\n\t\tConstructor.\n\t\t\"\"\"\n\t\tself.attributes = {}\n\tdef __str__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the set.\n\t\t\"\"\"\n\t\treturn '{%s}' % ', '.join(['%s=%s' % (a.name, a.value) for a in self.attributes.values()])\n\tdef __repr__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the set.\n\t\t\"\"\"\n\t\treturn '{%s}' % ', '.join(['%s=%s' % (a.name, a.value) for a in self.attributes.values()])\n\tdef __eq__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the set is equal to the other set.\n\t\t\"\"\"\n\t\treturn self.attributes == other.attributes\n\tdef __ne__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the set is not equal to the other set.\n\t\t\"\"\"\n\t\treturn not self.__eq__(other)\n\tdef __hash__(self):\n\t\t\"\"\"\n\t\tReturn a hash value for the set.\n\t\t\"\"\"\n\t\treturn hash(self.attributes)\n\nclass AttributeSetImpl(object):\n\t\"\"\"\n\tA class that represents an attribute set.\n\t\"\"\"\n\tdef __init__(self, attributes):\n\t\t\"\"\"\n\t\tConstructor.\n\t\t\"\"\"\n\t\tself.attributes = attributes\n\tdef __str__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the set.\n\t\t\"\"\"\n\t\treturn '{%s}' % ', '.join(['%s=%s' % (a.name, a.value) for a in self.attributes.values()])\n\tdef __repr__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the set.\n\t\t\"\"\"\n\t\treturn '{%s}' % ', '.join(['%s=%s' % (a.name, a.value) for a in self.attributes.values()])\n\tdef __eq__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the set is equal to the other set.\n\t\t\"\"\"\n\t\treturn self.attributes == other.attributes\n\tdef __ne__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the set is not equal to the other set.\n\t\t\"\"\"\n\t\treturn not self.__eq__(other)\n\tdef __hash__(self):\n\t\t\"\"\"\n\t\tReturn a hash value for the set.\n\t\t\"\"\"\n\t\treturn hash(self.attributes)\n\nclass AttributeImpl(object):\n\t\"\"\"\n\tA class that represents an attribute.\n\t\"\"\"\n\tdef __init__(self, attribute):\n\t\t\"\"\"\n\t\tConstructor.\n\t\t\"\"\"\n\t\tself.attribute = attribute\n\tdef __str__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the attribute", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "ques_id": "62b8b3d6eb7e40a82d2d111c", "code": ["def _normalizeargs(sequence, output=None):\n\t\"\"\"\n\tNormalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.\n\t\"\"\"\n\tif output is None:\n\t\toutput = []\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, list):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, Interface):\n\t\tsequence = sequence.get_interface()\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, Interface):\n\t\tsequence = sequence.get_interface()\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\t"], "level": "file_runnable", "generate_results": [{"generate_code": "def _normalizeargs(sequence, output=None):\n\t\"\"\"\n\tNormalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.\n\t\"\"\"\n\tif output is None:\n\t\toutput = []\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, list):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, Interface):\n\t\tsequence = sequence.get_interface()\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, Interface):\n\t\tsequence = sequence.get_interface()\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\tsequence = sequence[0]\n\tif isinstance(sequence, tuple):\n\t\t", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "ques_id": "62b8b3d5eb7e40a82d2d1110", "code": ["def _c_optimizations_available():\n\t\"\"\"\n\tReturn the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.\n\t\"\"\"\n\ttry:\n\t\timport ctypes\n\texcept ImportError:\n\t\treturn False\n\telse:\n\t\treturn True\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _c_optimizations_available():\n\t\"\"\"\n\tReturn the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.\n\t\"\"\"\n\ttry:\n\t\timport ctypes\n\texcept ImportError:\n\t\treturn False\n\telse:\n\t\treturn True\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110f", "code": ["def _should_attempt_c_optimizations():\n\t\"\"\"\n\tReturn a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.\n\t\"\"\"\n\tif 'PYTHON' in os.environ:\n\t\treturn True\n\telif 'PY_CFLAGS' in os.environ:\n\t\treturn True\n\telif 'PY_CFLAGS_NODIST' in os.environ:\n\t\treturn False\n\telse:\n\t\treturn False\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _should_attempt_c_optimizations():\n\t\"\"\"\n\tReturn a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.\n\t\"\"\"\n\tif 'PYTHON' in os.environ:\n\t\treturn True\n\telif 'PY_CFLAGS' in os.environ:\n\t\treturn True\n\telif 'PY_CFLAGS_NODIST' in os.environ:\n\t\treturn False\n\telse:\n\t\treturn False\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "ques_id": "62b8b3d4eb7e40a82d2d110e", "code": ["def _c_optimizations_ignored():\n\t\"\"\"\n\tThe opposite of `_c_optimizations_required`.\n\t\"\"\"\n\treturn [\n\t\t\"_c_optimizations_required\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optim"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_ignored():\n\t\"\"\"\n\tThe opposite of `_c_optimizations_required`.\n\t\"\"\"\n\treturn [\n\t\t\"_c_optimizations_required\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optimizations_required_\",\n\t\t\"_c_optim", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110d", "code": ["def _c_optimizations_required():\n\t\"\"\"\n\tReturn a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.\n\t\"\"\"\n\treturn (\n\t\t#"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_required():\n\t\"\"\"\n\tReturn a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.\n\t\"\"\"\n\treturn (\n\t\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "ques_id": "62b87b989a0c4fa8b80b35ee", "code": ["def reset(self):\n\t\"\"\"\n\tReset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).\n\t\"\"\"\n\tself.hist = {}\n\tself.bins = {}\n\tself.bins_count = 0\n\tself.bins_sum = 0\n\tself.bins_sum_sq = 0\n\tself.bins_sum_sq_sq = 0\n\tself.bins_sum_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq"], "level": "class_runnable", "generate_results": [{"generate_code": "def reset(self):\n\t\"\"\"\n\tReset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).\n\t\"\"\"\n\tself.hist = {}\n\tself.bins = {}\n\tself.bins_count = 0\n\tself.bins_sum = 0\n\tself.bins_sum_sq = 0\n\tself.bins_sum_sq_sq = 0\n\tself.bins_sum_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n\tself.bins_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "ques_id": "62b87b859a0c4fa8b80b35d7", "code": ["def to_csv(self, separator=\",\", header=None):\n\t\"\"\"\n\t.. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.\n\t\"\"\"\n\timport csv\n\timport numpy as np\n\timport os\n\timport sys\n\timport warnings\n\tfrom. import _lena_version\n\tfrom. import _lena_version_info\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warn"], "level": "class_runnable", "generate_results": [{"generate_code": "def to_csv(self, separator=\",\", header=None):\n\t\"\"\"\n\t.. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.\n\t\"\"\"\n\timport csv\n\timport numpy as np\n\timport os\n\timport sys\n\timport warnings\n\tfrom. import _lena_version\n\tfrom. import _lena_version_info\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warnings\n\tfrom. import _lena_version_warn", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "ques_id": "62b87b839a0c4fa8b80b35cb", "code": ["def _get_err_indices(self, coord_name):\n\t\"\"\"\n\tGet error indices corresponding to a coordinate.\n\t\"\"\"\n\tif coord_name in self.coord_names:\n\t\treturn self.coord_names.index(coord_name)\n\telse:\n\t\treturn None\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _get_err_indices(self, coord_name):\n\t\"\"\"\n\tGet error indices corresponding to a coordinate.\n\t\"\"\"\n\tif coord_name in self.coord_names:\n\t\treturn self.coord_names.index(coord_name)\n\telse:\n\t\treturn None\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "ques_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["def _update_context(self, context):\n\t\"\"\"\n\tUpdate *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.\n\t\"\"\"\n\tcontext.value = context.value.copy()\n\tcontext.value.update(context.value)\n\tcontext.error = context.error.copy()\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext"], "level": "class_runnable", "generate_results": [{"generate_code": "def _update_context(self, context):\n\t\"\"\"\n\tUpdate *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.\n\t\"\"\"\n\tcontext.value = context.value.copy()\n\tcontext.value.update(context.value)\n\tcontext.error = context.error.copy()\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext.error.update(context.error)\n\tcontext.value.update(context.value)\n\tcontext", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "ques_id": "62b87b4f9a0c4fa8b80b3580", "code": ["def integral(bins, edges):\n\t\"\"\"\n\tCompute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.\n\t\"\"\"\n\treturn np.trapz(bins, edges)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def integral(bins, edges):\n\t\"\"\"\n\tCompute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.\n\t\"\"\"\n\treturn np.trapz(bins, edges)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "ques_id": "62b87b199a0c4fa8b80b354e", "code": ["def is_fill_request_seq(seq):\n\t\"\"\"\n\tTest whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.\n\t\"\"\"\n\treturn isinstance(seq, FillRequest) and not isinstance(seq, Source)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_fill_request_seq(seq):\n\t\"\"\"\n\tTest whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.\n\t\"\"\"\n\treturn isinstance(seq, FillRequest) and not isinstance(seq, Source)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "ques_id": "62b87b099a0c4fa8b80b3538", "code": ["def is_fill_request_el(obj):\n\t\"\"\"\n\tObject contains executable methods 'fill' and'request'.\n\t\"\"\"\n\treturn obj.__class__.__name__ == 'FillRequest'\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_request_el(obj):\n\t\"\"\"\n\tObject contains executable methods 'fill' and'request'.\n\t\"\"\"\n\treturn obj.__class__.__name__ == 'FillRequest'\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "ques_id": "62b87af99a0c4fa8b80b3524", "code": ["def is_run_el(obj):\n\t\"\"\"\n\tObject contains executable method 'run'.\n\t\"\"\"\n\treturn obj.__class__.__name__ == 'run'\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_run_el(obj):\n\t\"\"\"\n\tObject contains executable method 'run'.\n\t\"\"\"\n\treturn obj.__class__.__name__ == 'run'\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "ques_id": "62b87af69a0c4fa8b80b351a", "code": ["def is_fill_compute_el(obj):\n\t\"\"\"\n\tObject contains executable methods 'fill' and 'compute'.\n\t\"\"\"\n\treturn obj.__class__.__name__ in ['Fill', 'Compute']\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_compute_el(obj):\n\t\"\"\"\n\tObject contains executable methods 'fill' and 'compute'.\n\t\"\"\"\n\treturn obj.__class__.__name__ in ['Fill', 'Compute']\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "ques_id": "62b87af19a0c4fa8b80b34f7", "code": ["def difference(d1, d2, level=-1):\n\t\"\"\"\n\tReturn a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.\n\t\"\"\"\n\td = {}\n\tif not d1:\n\t\treturn d\n\tif not d2:\n\t\treturn d1\n\tif level == -1:\n\t\treturn d1 - d2\n\tif level <= 0:\n\t\traise ValueError('level must be > 0')\n\tfor k, v in d1.items():\n\t\tif k not in d2:\n\t\t\tcontinue\n\t\tif not isinstance(v, dict):\n\t\t\td[k] = difference(v, d2, level - 1)\n\t\telse:\n\t\t\td[k] = difference(v, d2, level - 1)\n\t\t\td[k].update(d1[k])\n\treturn d\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def difference(d1, d2, level=-1):\n\t\"\"\"\n\tReturn a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.\n\t\"\"\"\n\td = {}\n\tif not d1:\n\t\treturn d\n\tif not d2:\n\t\treturn d1\n\tif level == -1:\n\t\treturn d1 - d2\n\tif level <= 0:\n\t\traise ValueError('level must be > 0')\n\tfor k, v in d1.items():\n\t\tif k not in d2:\n\t\t\tcontinue\n\t\tif not isinstance(v, dict):\n\t\t\td[k] = difference(v, d2, level - 1)\n\t\telse:\n\t\t\td[k] = difference(v, d2, level - 1)\n\t\t\td[k].update(d1[k])\n\treturn d\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "ques_id": "62b87af09a0c4fa8b80b34f1", "code": ["def fill(self, coord, weight=1):\n\t\"\"\"\n\tFill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.\n\t\"\"\"\n\tif coord < 0 or coord >= self.hist.shape[0]:\n\t\treturn\n\tif coord < self.hist.shape[0] and coord >= 0:\n\t\tself.hist[coord, :] = weight\n\telif coord < self.hist.shape[0] and coord < self.hist.shape[0]:\n\t\tself.hist[coord, :] = weight\n\telse:\n\t\tself.hist[coord, :] = weight\n\tself.update_edges()\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fill(self, coord, weight=1):\n\t\"\"\"\n\tFill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.\n\t\"\"\"\n\tif coord < 0 or coord >= self.hist.shape[0]:\n\t\treturn\n\tif coord < self.hist.shape[0] and coord >= 0:\n\t\tself.hist[coord, :] = weight\n\telif coord < self.hist.shape[0] and coord < self.hist.shape[0]:\n\t\tself.hist[coord, :] = weight\n\telse:\n\t\tself.hist[coord, :] = weight\n\tself.update_edges()\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "ques_id": "62b86aa3b4d922cb0e688d36", "code": ["def _validate_labels(labels):\n\t\"\"\"\n\tCheck that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n       .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]\n\t\"\"\"\n\tfor key, value in labels.items():\n\t\tif not isinstance(value, str):\n\t\t\traise ValidationError(\n\t\t\t\t\"Label key '{}' does not match the regex '{}'\".format(\n\t\t\t\t\tkey, value\n\t\t\t\t)\n\t\t\t)\n\treturn labels"], "level": "file_runnable", "generate_results": [{"generate_code": "def _validate_labels(labels):\n\t\"\"\"\n\tCheck that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n       .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]\n\t\"\"\"\n\tfor key, value in labels.items():\n\t\tif not isinstance(value, str):\n\t\t\traise ValidationError(\n\t\t\t\t\"Label key '{}' does not match the regex '{}'\".format(\n\t\t\t\t\tkey, value\n\t\t\t\t)\n\t\t\t)\n\treturn labels", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "ques_id": "62b86a9eb4d922cb0e688d25", "code": ["def _get_resource_name_regex():\n\t\"\"\"\n\tBuild or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.\n\t\"\"\"\n\treturn re.compile(r'^[a-zA-Z0-9_]+$')\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _get_resource_name_regex():\n\t\"\"\"\n\tBuild or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.\n\t\"\"\"\n\treturn re.compile(r'^[a-zA-Z0-9_]+$')\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf8", "code": ["def validate_value(value):\n\t\"\"\"\n\tValidate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.\n\t\"\"\"\n\tif not re.match(r'^[a-zA-Z0-9_]+$', value):\n\t\traise ValidationError('Invalid value: %s' % value)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_value(value):\n\t\"\"\"\n\tValidate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.\n\t\"\"\"\n\tif not re.match(r'^[a-zA-Z0-9_]+$', value):\n\t\traise ValidationError('Invalid value: %s' % value)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf7", "code": ["def validate_key(key):\n\t\"\"\"\n\tValidate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.\n\t\"\"\"\n\tif not re.match(r'^[a-zA-Z0-9_]+$', key):\n\t\traise ValidationError('Key must be a valid string')\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_key(key):\n\t\"\"\"\n\tValidate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.\n\t\"\"\"\n\tif not re.match(r'^[a-zA-Z0-9_]+$', key):\n\t\traise ValidationError('Key must be a valid string')\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "ques_id": "62b86a01b4d922cb0e688ccc", "code": ["def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n\t\"\"\"\n\tTogether with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.\n\t\"\"\"\n\tobserver_schema = {}\n\tif first_level:\n\t\tobserver_schema = manifest_dict\n\telse:\n\t\tobserver_schema = {k: v for k, v in manifest_dict.items() if k in observer_schema}\n\treturn observer_schema\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n\t\"\"\"\n\tTogether with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.\n\t\"\"\"\n\tobserver_schema = {}\n\tif first_level:\n\t\tobserver_schema = manifest_dict\n\telse:\n\t\tobserver_schema = {k: v for k, v in manifest_dict.items() if k in observer_schema}\n\treturn observer_schema\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869ebb4d922cb0e688cc6", "code": ["def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n\t\"\"\"\n\tTogether with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present\n\t\"\"\"\n\tfor field in observer_schema:\n\t\tif field not in last_applied_manifest:\n\t\t\tlast_applied_manifest[field] = None\n\t\telif last_applied_manifest[field] is None:\n\t\t\tlast_applied_manifest[field] = response[field]\n\t\telse:\n\t\t\tlast_applied_manifest[field] = last_applied_manifest[field] + response[field]\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n\t\"\"\"\n\tTogether with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present\n\t\"\"\"\n\tfor field in observer_schema:\n\t\tif field not in last_applied_manifest:\n\t\t\tlast_applied_manifest[field] = None\n\t\telif last_applied_manifest[field] is None:\n\t\t\tlast_applied_manifest[field] = response[field]\n\t\telse:\n\t\t\tlast_applied_manifest[field] = last_applied_manifest[field] + response[field]\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869eab4d922cb0e688cc5", "code": ["def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n\t\"\"\"\n\tTogether with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present\n\t\"\"\"\n\tfor field in observer_schema:\n\t\tif field not in last_applied_manifest:\n\t\t\tlast_applied_manifest[field] = None\n\t\telif last_applied_manifest[field] is None:\n\t\t\tlast_applied_manifest[field] = response[field]\n\t\telse:\n\t\t\tif isinstance(last_applied_manifest[field], dict):\n\t\t\t\tif isinstance(response[field], dict):\n\t\t\t\t\tif isinstance(response[field]['status'], dict):\n\t\t\t\t\t\tif isinstance(response[field]['status']['status'], str):\n\t\t\t\t\t\t\tif response[field]['status']['status'] == 'Success':\n\t\t\t\t\t\t\t\tlast_applied_manifest[field] = response[field]['status']['message']\n\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tlast_applied_manifest[field] = response[field]['status']['message']\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tlast_applied_manifest[field] = response[field]['status']['message']\n\t\t\t\t\telse:\n\t\t\t\t\t\tlast_applied_manifest[field] = response[field]['status']['message']\n\t\t\t\telse:\n\t\t\t\t\tlast_applied_manifest[field] = response[field]\n\t\t\telse:\n\t\t\t\tlast_applied_manifest[field] = response[field]\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n\t\"\"\"\n\tTogether with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present\n\t\"\"\"\n\tfor field in observer_schema:\n\t\tif field not in last_applied_manifest:\n\t\t\tlast_applied_manifest[field] = None\n\t\telif last_applied_manifest[field] is None:\n\t\t\tlast_applied_manifest[field] = response[field]\n\t\telse:\n\t\t\tif isinstance(last_applied_manifest[field], dict):\n\t\t\t\tif isinstance(response[field], dict):\n\t\t\t\t\tif isinstance(response[field]['status'], dict):\n\t\t\t\t\t\tif isinstance(response[field]['status']['status'], str):\n\t\t\t\t\t\t\tif response[field]['status']['status'] == 'Success':\n\t\t\t\t\t\t\t\tlast_applied_manifest[field] = response[field]['status']['message']\n\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tlast_applied_manifest[field] = response[field]['status']['message']\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tlast_applied_manifest[field] = response[field]['status']['message']\n\t\t\t\t\telse:\n\t\t\t\t\t\tlast_applied_manifest[field] = response[field]['status']['message']\n\t\t\t\telse:\n\t\t\t\t\tlast_applied_manifest[field] = response[field]\n\t\t\telse:\n\t\t\t\tlast_applied_manifest[field] = response[field]\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "ques_id": "62b869eab4d922cb0e688cbf", "code": ["def generate_default_observer_schema(app):\n\t\"\"\"\n\tGenerate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema\n\t\"\"\"\n\tfor resource in app.resources:\n\t\tif resource.type == \"kubernetes\":\n\t\t\tresource.observers = []\n\t\t\tfor observer in resource.observers:\n\t\t\t\tif observer.schema is None:\n\t\t\t\t\tobserver.schema = generate_default_observer_schema(app)\n\t\t\t\tresource.observers.append(observer)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema(app):\n\t\"\"\"\n\tGenerate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema\n\t\"\"\"\n\tfor resource in app.resources:\n\t\tif resource.type == \"kubernetes\":\n\t\t\tresource.observers = []\n\t\t\tfor observer in resource.observers:\n\t\t\t\tif observer.schema is None:\n\t\t\t\t\tobserver.schema = generate_default_observer_schema(app)\n\t\t\t\tresource.observers.append(observer)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "ques_id": "62b43427903eeb48555d3ea5", "code": ["def format(\n\t\tself,\n\t\tsql:\n\t\"\"\"\n\tConvert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).\n\t\"\"\"\n\tif isinstance(sql, bytes):\n\t\tsql = sql.decode('utf-8')\n\tif isinstance(params, dict):\n\t\tparams = params.items()\n\telif isinstance(params, list):\n\t\tparams = params[0]\n\tif isinstance(params, SQLParams):\n\t\tparams = params.params\n\tif isinstance(params, SQLParams):\n\t\tparams = params.params\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif not params:\n\t\treturn sql, {}\n\tif isinstance(params, dict):\n\t\tparams = params.items()\n\telif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (int, float)):\n\t\tparams = [params]\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif not params:\n\t\treturn sql, {}\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params"], "level": "file_runnable", "generate_results": [{"generate_code": "def format(\n\t\tself,\n\t\tsql:\n\t\"\"\"\n\tConvert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).\n\t\"\"\"\n\tif isinstance(sql, bytes):\n\t\tsql = sql.decode('utf-8')\n\tif isinstance(params, dict):\n\t\tparams = params.items()\n\telif isinstance(params, list):\n\t\tparams = params[0]\n\tif isinstance(params, SQLParams):\n\t\tparams = params.params\n\tif isinstance(params, SQLParams):\n\t\tparams = params.params\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif not params:\n\t\treturn sql, {}\n\tif isinstance(params, dict):\n\t\tparams = params.items()\n\telif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (int, float)):\n\t\tparams = [params]\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif not params:\n\t\treturn sql, {}\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params, (tuple, list)):\n\t\tparams = list(params)\n\tif isinstance(params", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "ques_id": "62b43428903eeb48555d3eaa", "code": ["def formatmany(\n\t\tself,\n\t\tsql:\n\t\"\"\"\n\tConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).\n\t\"\"\"\n\tif not sql:\n\t\treturn sql, []\n\n\tif isinstance(sql, bytes):\n\t\tsql = sql.decode('utf-8')\n\n\tif isinstance(sql, str):\n\t\tsql = sql.split(';')\n\n\tif isinstance(sql, (list, tuple)):\n\t\tsql = [s.split(' ') for s in sql]\n\n\tif isinstance(sql[0], (list, tuple)):\n\t\tsql = [dict(zip(sql[0], params)) for params in sql]\n\n\tif isinstance(sql[0], dict):\n\t\tsql = [sql[0]]\n\n\tif isinstance(sql[0], (list, tuple)):\n\t\tsql = [dict(zip(params, params)) for params in sql]\n\n\treturn sql, [dict(zip(params, params)) for params in sql]"], "level": "project_runnable", "generate_results": [{"generate_code": "def formatmany(\n\t\tself,\n\t\tsql:\n\t\"\"\"\n\tConvert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).\n\t\"\"\"\n\tif not sql:\n\t\treturn sql, []\n\n\tif isinstance(sql, bytes):\n\t\tsql = sql.decode('utf-8')\n\n\tif isinstance(sql, str):\n\t\tsql = sql.split(';')\n\n\tif isinstance(sql, (list, tuple)):\n\t\tsql = [s.split(' ') for s in sql]\n\n\tif isinstance(sql[0], (list, tuple)):\n\t\tsql = [dict(zip(sql[0], params)) for params in sql]\n\n\tif isinstance(sql[0], dict):\n\t\tsql = [sql[0]]\n\n\tif isinstance(sql[0], (list, tuple)):\n\t\tsql = [dict(zip(params, params)) for params in sql]\n\n\treturn sql, [dict(zip(params, params)) for params in sql]", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "ques_id": "62b45df05108cfac7f2109ce", "code": ["def validate(self, path):\n\t\"\"\"\n\tValidate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.\n\t\"\"\"\n\tif not os.path.exists(path):\n\t\treturn False\n\tif not os.path.isdir(path):\n\t\treturn False\n\tif not os.path.isfile(path):\n\t\treturn False\n\tif not os.access(path, os.R_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.R_OK | os.W_OK | os.X_OK | os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.R_OK | os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access("], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, path):\n\t\"\"\"\n\tValidate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.\n\t\"\"\"\n\tif not os.path.exists(path):\n\t\treturn False\n\tif not os.path.isdir(path):\n\t\treturn False\n\tif not os.path.isfile(path):\n\t\treturn False\n\tif not os.access(path, os.R_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.R_OK | os.W_OK | os.X_OK | os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.R_OK | os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(path, os.W_OK):\n\t\treturn False\n\tif not os.access(path, os.X_OK):\n\t\treturn False\n\tif not os.access(", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dc", "code": ["def status_str(self, prefix=''):\n\t\"\"\"\n\tReturn string of validator status, with optional prefix.\n\t\"\"\"\n\treturn '%s%s' % (prefix, self.status)\n\nclass ValidationError(Exception):\n\t\"\"\"\n\tException raised for validation errors.\n\t\"\"\"\n\tdef __init__(self, message=None, errors=None):\n\t\tself.message = message\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.message:\n\t\t\treturn self.message\n\t\tif self.errors:\n\t\t\treturn 'ValidationError(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationError'\n\nclass ValidationErrorList(list):\n\t\"\"\"\n\tList of validation errors.\n\t\"\"\"\n\tdef __init__(self, message=None, errors=None):\n\t\tsuper(ValidationErrorList, self).__init__()\n\t\tself.message = message\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.message:\n\t\t\treturn self.message\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorList(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorList'\n\nclass ValidationErrorDict(dict):\n\t\"\"\"\n\tDictionary of validation errors.\n\t\"\"\"\n\tdef __init__(self, message=None, errors=None):\n\t\tsuper(ValidationErrorDict, self).__init__()\n\t\tself.message = message\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.message:\n\t\t\treturn self.message\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDict(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDict'\n\nclass ValidationErrorDictList(list):\n\t\"\"\"\n\tList of validation errors.\n\t\"\"\"\n\tdef __init__(self, message=None, errors=None):\n\t\tsuper(ValidationErrorDictList, self).__init__()\n\t\tself.message = message\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.message:\n\t\t\treturn self.message\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDictList(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDictList'\n\nclass ValidationErrorDictListDict(dict):\n\t\"\"\"\n\tDictionary of validation errors.\n\t\"\"\"\n\tdef __init__(self, message=None, errors=None):\n\t\tsuper(ValidationErrorDictListDict, self).__init__()\n\t\tself.message = message\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.message:\n\t\t\treturn self.message\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDictListDict(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDictListDict'\n\nclass ValidationErrorDictListDictList(list):\n\t\"\"\"\n\tList of validation errors.\n\t\"\"\"\n\tdef __init__(self, message=None, errors=None):\n\t\tsuper(ValidationErrorDictListDictList, self).__init__()\n\t\tself.message = message\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.message:\n\t\t\treturn self.message\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDictListDictList(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDictListDictList'\n\nclass ValidationErrorDictListDictListDict(dict):\n\t\"\"\"\n\tDictionary of validation errors.\n\t\"\"\"\n\tdef __init__(self, message=None, errors=None):\n\t\tsuper(ValidationErrorDictListDictListDict, self).__init__()\n\t\tself.message = message\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.message:\n\t\t\treturn self.message\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDictListDictListDict(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDictListDictListDict'\n\nclass ValidationErrorDictListDictListDictList(list):\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n\t\"\"\"\n\tReturn string of validator status, with optional prefix.\n\t\"\"\"\n\treturn '%s%s' % (prefix, self.status)\n\nclass ValidationError(Exception):\n\t\"\"\"\n\tException raised for validation errors.\n\t\"\"\"\n\tdef __init__(self, message=None, errors=None):\n\t\tself.message = message\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.message:\n\t\t\treturn self.message\n\t\tif self.errors:\n\t\t\treturn 'ValidationError(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationError'\n\nclass ValidationErrorList(list):\n\t\"\"\"\n\tList of validation errors.\n\t\"\"\"\n\tdef __init__(self, message=None, errors=None):\n\t\tsuper(ValidationErrorList, self).__init__()\n\t\tself.message = message\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.message:\n\t\t\treturn self.message\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorList(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorList'\n\nclass ValidationErrorDict(dict):\n\t\"\"\"\n\tDictionary of validation errors.\n\t\"\"\"\n\tdef __init__(self, message=None, errors=None):\n\t\tsuper(ValidationErrorDict, self).__init__()\n\t\tself.message = message\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.message:\n\t\t\treturn self.message\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDict(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDict'\n\nclass ValidationErrorDictList(list):\n\t\"\"\"\n\tList of validation errors.\n\t\"\"\"\n\tdef __init__(self, message=None, errors=None):\n\t\tsuper(ValidationErrorDictList, self).__init__()\n\t\tself.message = message\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.message:\n\t\t\treturn self.message\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDictList(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDictList'\n\nclass ValidationErrorDictListDict(dict):\n\t\"\"\"\n\tDictionary of validation errors.\n\t\"\"\"\n\tdef __init__(self, message=None, errors=None):\n\t\tsuper(ValidationErrorDictListDict, self).__init__()\n\t\tself.message = message\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.message:\n\t\t\treturn self.message\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDictListDict(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDictListDict'\n\nclass ValidationErrorDictListDictList(list):\n\t\"\"\"\n\tList of validation errors.\n\t\"\"\"\n\tdef __init__(self, message=None, errors=None):\n\t\tsuper(ValidationErrorDictListDictList, self).__init__()\n\t\tself.message = message\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.message:\n\t\t\treturn self.message\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDictListDictList(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDictListDictList'\n\nclass ValidationErrorDictListDictListDict(dict):\n\t\"\"\"\n\tDictionary of validation errors.\n\t\"\"\"\n\tdef __init__(self, message=None, errors=None):\n\t\tsuper(ValidationErrorDictListDictListDict, self).__init__()\n\t\tself.message = message\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.message:\n\t\t\treturn self.message\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDictListDictListDict(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDictListDictListDict'\n\nclass ValidationErrorDictListDictListDictList(list):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dd", "code": ["def status_str(self, prefix=''):\n\t\"\"\"\n\tReturn string representation of validation log, with optional prefix.\n\t\"\"\"\n\treturn '%s%s: %s' % (prefix, self.__class__.__name__, self.status)\n\nclass ValidationError(Exception):\n\t\"\"\"\n\tException raised for validation errors.\n\t\"\"\"\n\tdef __init__(self, message=None, errors=None):\n\t\tself.message = message\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.message:\n\t\t\treturn self.message\n\t\tif self.errors:\n\t\t\treturn 'ValidationError(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationError'\n\nclass ValidationErrorList(list):\n\t\"\"\"\n\tList of validation errors.\n\t\"\"\"\n\tdef __init__(self, errors=None):\n\t\tsuper(ValidationErrorList, self).__init__()\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorList(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorList()'\n\nclass ValidationErrorDict(dict):\n\t\"\"\"\n\tDictionary of validation errors.\n\t\"\"\"\n\tdef __init__(self, errors=None):\n\t\tsuper(ValidationErrorDict, self).__init__()\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDict(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDict()'\n\nclass ValidationErrorDictList(list):\n\t\"\"\"\n\tList of validation errors.\n\t\"\"\"\n\tdef __init__(self, errors=None):\n\t\tsuper(ValidationErrorDictList, self).__init__()\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDictList(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDictList()'\n\nclass ValidationErrorDictListDict(dict):\n\t\"\"\"\n\tDictionary of validation errors.\n\t\"\"\"\n\tdef __init__(self, errors=None):\n\t\tsuper(ValidationErrorDictListDict, self).__init__()\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDictListDict(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDictListDict()'\n\nclass ValidationErrorDictListDictList(list):\n\t\"\"\"\n\tList of validation errors.\n\t\"\"\"\n\tdef __init__(self, errors=None):\n\t\tsuper(ValidationErrorDictListDictList, self).__init__()\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDictListDictList(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDictListDictList()'\n\nclass ValidationErrorDictListDictListDict(dict):\n\t\"\"\"\n\tDictionary of validation errors.\n\t\"\"\"\n\tdef __init__(self, errors=None):\n\t\tsuper(ValidationErrorDictListDictListDict, self).__init__()\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDictListDictListDict(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDictListDictListDict()'\n\nclass ValidationErrorDictListDictListDictList(list):\n\t\"\"\"\n\tList of validation errors.\n\t\"\"\"\n\tdef __init__(self, errors=None):\n\t\tsuper(ValidationErrorDictListDictListDictList, self).__init__()\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDictListDictListDictList(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDictListDictListDictList()'\n\nclass ValidationErrorD"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n\t\"\"\"\n\tReturn string representation of validation log, with optional prefix.\n\t\"\"\"\n\treturn '%s%s: %s' % (prefix, self.__class__.__name__, self.status)\n\nclass ValidationError(Exception):\n\t\"\"\"\n\tException raised for validation errors.\n\t\"\"\"\n\tdef __init__(self, message=None, errors=None):\n\t\tself.message = message\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.message:\n\t\t\treturn self.message\n\t\tif self.errors:\n\t\t\treturn 'ValidationError(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationError'\n\nclass ValidationErrorList(list):\n\t\"\"\"\n\tList of validation errors.\n\t\"\"\"\n\tdef __init__(self, errors=None):\n\t\tsuper(ValidationErrorList, self).__init__()\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorList(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorList()'\n\nclass ValidationErrorDict(dict):\n\t\"\"\"\n\tDictionary of validation errors.\n\t\"\"\"\n\tdef __init__(self, errors=None):\n\t\tsuper(ValidationErrorDict, self).__init__()\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDict(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDict()'\n\nclass ValidationErrorDictList(list):\n\t\"\"\"\n\tList of validation errors.\n\t\"\"\"\n\tdef __init__(self, errors=None):\n\t\tsuper(ValidationErrorDictList, self).__init__()\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDictList(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDictList()'\n\nclass ValidationErrorDictListDict(dict):\n\t\"\"\"\n\tDictionary of validation errors.\n\t\"\"\"\n\tdef __init__(self, errors=None):\n\t\tsuper(ValidationErrorDictListDict, self).__init__()\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDictListDict(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDictListDict()'\n\nclass ValidationErrorDictListDictList(list):\n\t\"\"\"\n\tList of validation errors.\n\t\"\"\"\n\tdef __init__(self, errors=None):\n\t\tsuper(ValidationErrorDictListDictList, self).__init__()\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDictListDictList(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDictListDictList()'\n\nclass ValidationErrorDictListDictListDict(dict):\n\t\"\"\"\n\tDictionary of validation errors.\n\t\"\"\"\n\tdef __init__(self, errors=None):\n\t\tsuper(ValidationErrorDictListDictListDict, self).__init__()\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDictListDictListDict(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDictListDictListDict()'\n\nclass ValidationErrorDictListDictListDictList(list):\n\t\"\"\"\n\tList of validation errors.\n\t\"\"\"\n\tdef __init__(self, errors=None):\n\t\tsuper(ValidationErrorDictListDictListDictList, self).__init__()\n\t\tself.errors = errors\n\tdef __str__(self):\n\t\tif self.errors:\n\t\t\treturn 'ValidationErrorDictListDictListDictList(%s)' % ', '.join(self.errors)\n\t\treturn 'ValidationErrorDictListDictListDictList()'\n\nclass ValidationErrorD", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "ques_id": "62b45e135108cfac7f2109f4", "code": ["def is_valid(self, identifier):\n\t\"\"\"\n\tReturn True if identifier is valid, always True in this base implementation.\n\t\"\"\"\n\treturn True\n\nclass Base(object):\n\t\"\"\"\n\tBase class for all other classes.\n\t\"\"\"\n\tdef __init__(self, identifier):\n\t\tself.identifier = identifier\n\t\tself.name = identifier\n\t\tself.parent = None\n\t\tself.children = []\n\t\tself.children_names = []\n\t\tself.children_identifiers = []\n\t\tself.children_identifiers_names = []\n\t\tself.children_identifiers_names_ids = []\n\t\tself.children_identifiers_names_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids"], "level": "self_contained", "generate_results": [{"generate_code": "def is_valid(self, identifier):\n\t\"\"\"\n\tReturn True if identifier is valid, always True in this base implementation.\n\t\"\"\"\n\treturn True\n\nclass Base(object):\n\t\"\"\"\n\tBase class for all other classes.\n\t\"\"\"\n\tdef __init__(self, identifier):\n\t\tself.identifier = identifier\n\t\tself.name = identifier\n\t\tself.parent = None\n\t\tself.children = []\n\t\tself.children_names = []\n\t\tself.children_identifiers = []\n\t\tself.children_identifiers_names = []\n\t\tself.children_identifiers_names_ids = []\n\t\tself.children_identifiers_names_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids = []\n\t\tself.children_identifiers_names_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids_ids", "is_pass": true, "return_code": 0}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "ques_id": "62b45e145108cfac7f210a07", "code": ["def validate(self, inventory, extract_spec_version=False):\n\t\"\"\"\n\tValidate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.\n\t\"\"\"\n\tif self.spec_version is None:\n\t\treturn inventory\n\n\tif self.spec_version == 'latest':\n\t\treturn inventory\n\n\tif self.spec_version == 'v1':\n\t\treturn inventory\n\n\tif self.spec_version == 'v2':\n\t\treturn inventory\n\n\tif self.spec_version == 'v3':\n\t\treturn inventory\n\n\tif self.spec_version == 'v4':\n\t\treturn inventory\n\n\tif self.spec_version == 'v5':\n\t\treturn inventory\n\n\tif self.spec_version == 'v6':\n\t\treturn inventory\n\n\tif self.spec_version == 'v7':\n\t\treturn inventory\n\n\tif self.spec_version == 'v8':\n\t\treturn inventory\n\n\tif self.spec_version == 'v9':\n\t\treturn inventory\n\n\tif self.spec_version == 'v10':\n\t\treturn inventory\n\n\tif self.spec_version == 'v11':\n\t\treturn inventory\n\n\tif self.spec_version == 'v12':\n\t\treturn inventory\n\n\tif self.spec_version == 'v13':\n\t\treturn inventory\n\n\tif self.spec_version == 'v14':\n\t\treturn inventory\n\n\tif self.spec_version == 'v15':\n\t\treturn inventory\n\n\tif self.spec_version == 'v16':\n\t\treturn inventory\n\n\tif self.spec_version == 'v17':\n\t\treturn inventory\n\n\tif self.spec_version == 'v18':\n\t\treturn inventory\n\n\tif self.spec_version == 'v19':\n\t\treturn inventory\n\n\tif self.spec_version == 'v20':\n\t\treturn inventory\n\n\tif self.spec_version == 'v21':\n\t\treturn inventory\n\n\tif self.spec_version == 'v22':\n\t\treturn inventory\n\n\tif self.spec_version == 'v23':\n\t\treturn inventory\n\n\tif self.spec_version == 'v24':\n\t\treturn inventory\n\n\tif self.spec_version == 'v25':\n\t\treturn inventory\n\n\tif self.spec_version == 'v26':\n\t\treturn inventory\n\n\tif self.spec_version == 'v27':\n\t\treturn inventory\n\n\tif self.spec_version == 'v28':\n\t\treturn inventory\n\n\tif self.spec_version == 'v29':\n\t\treturn inventory\n\n\tif self.spec_version == 'v30':\n\t\treturn inventory\n\n\tif self.spec_version == 'v31':\n\t\treturn inventory\n\n\tif self.spec_version == 'v32':\n\t\treturn inventory\n\n\tif self.spec_version == 'v33':\n\t\treturn inventory\n\n\tif self.spec_version == 'v34':\n\t\treturn inventory\n\n\tif self.spec_version == 'v35':\n\t\treturn inventory\n\n\tif self.spec_version == 'v36':\n\t\treturn inventory\n\n\tif self.spec_version == 'v37':\n\t\treturn inventory\n\n\tif self.spec_version == 'v38':\n\t\treturn inventory\n\n\tif self.spec_version == 'v39':\n\t\treturn inventory\n\n\tif self.spec_version == 'v40':\n\t\treturn inventory\n\n\tif self.spec_version == 'v41':\n\t\treturn inventory\n\n\tif self.spec_version == 'v42':\n\t\treturn inventory\n\n\tif self.spec_version == 'v43':\n\t\treturn inventory\n\n\tif self.spec_version == 'v44':\n\t\treturn inventory\n\n\tif self.spec_version == 'v45':\n\t\treturn inventory\n\n\tif self.spec_version == 'v46':\n\t\treturn inventory\n\n\tif self.spec_version == 'v47':\n\t\treturn inventory\n\n\tif self.spec_version == 'v48':\n\t\treturn inventory\n\n\tif self.spec_version == 'v49':\n\t\treturn inventory\n\n\tif self.spec_version == 'v50':\n\t\treturn inventory\n\n\tif self.spec_version == 'v51':\n\t\treturn inventory\n\n\tif self.spec_version == 'v52':\n\t\treturn inventory\n\n\tif self.spec_version == 'v53':\n\t\treturn inventory\n\n\tif self.spec"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, inventory, extract_spec_version=False):\n\t\"\"\"\n\tValidate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.\n\t\"\"\"\n\tif self.spec_version is None:\n\t\treturn inventory\n\n\tif self.spec_version == 'latest':\n\t\treturn inventory\n\n\tif self.spec_version == 'v1':\n\t\treturn inventory\n\n\tif self.spec_version == 'v2':\n\t\treturn inventory\n\n\tif self.spec_version == 'v3':\n\t\treturn inventory\n\n\tif self.spec_version == 'v4':\n\t\treturn inventory\n\n\tif self.spec_version == 'v5':\n\t\treturn inventory\n\n\tif self.spec_version == 'v6':\n\t\treturn inventory\n\n\tif self.spec_version == 'v7':\n\t\treturn inventory\n\n\tif self.spec_version == 'v8':\n\t\treturn inventory\n\n\tif self.spec_version == 'v9':\n\t\treturn inventory\n\n\tif self.spec_version == 'v10':\n\t\treturn inventory\n\n\tif self.spec_version == 'v11':\n\t\treturn inventory\n\n\tif self.spec_version == 'v12':\n\t\treturn inventory\n\n\tif self.spec_version == 'v13':\n\t\treturn inventory\n\n\tif self.spec_version == 'v14':\n\t\treturn inventory\n\n\tif self.spec_version == 'v15':\n\t\treturn inventory\n\n\tif self.spec_version == 'v16':\n\t\treturn inventory\n\n\tif self.spec_version == 'v17':\n\t\treturn inventory\n\n\tif self.spec_version == 'v18':\n\t\treturn inventory\n\n\tif self.spec_version == 'v19':\n\t\treturn inventory\n\n\tif self.spec_version == 'v20':\n\t\treturn inventory\n\n\tif self.spec_version == 'v21':\n\t\treturn inventory\n\n\tif self.spec_version == 'v22':\n\t\treturn inventory\n\n\tif self.spec_version == 'v23':\n\t\treturn inventory\n\n\tif self.spec_version == 'v24':\n\t\treturn inventory\n\n\tif self.spec_version == 'v25':\n\t\treturn inventory\n\n\tif self.spec_version == 'v26':\n\t\treturn inventory\n\n\tif self.spec_version == 'v27':\n\t\treturn inventory\n\n\tif self.spec_version == 'v28':\n\t\treturn inventory\n\n\tif self.spec_version == 'v29':\n\t\treturn inventory\n\n\tif self.spec_version == 'v30':\n\t\treturn inventory\n\n\tif self.spec_version == 'v31':\n\t\treturn inventory\n\n\tif self.spec_version == 'v32':\n\t\treturn inventory\n\n\tif self.spec_version == 'v33':\n\t\treturn inventory\n\n\tif self.spec_version == 'v34':\n\t\treturn inventory\n\n\tif self.spec_version == 'v35':\n\t\treturn inventory\n\n\tif self.spec_version == 'v36':\n\t\treturn inventory\n\n\tif self.spec_version == 'v37':\n\t\treturn inventory\n\n\tif self.spec_version == 'v38':\n\t\treturn inventory\n\n\tif self.spec_version == 'v39':\n\t\treturn inventory\n\n\tif self.spec_version == 'v40':\n\t\treturn inventory\n\n\tif self.spec_version == 'v41':\n\t\treturn inventory\n\n\tif self.spec_version == 'v42':\n\t\treturn inventory\n\n\tif self.spec_version == 'v43':\n\t\treturn inventory\n\n\tif self.spec_version == 'v44':\n\t\treturn inventory\n\n\tif self.spec_version == 'v45':\n\t\treturn inventory\n\n\tif self.spec_version == 'v46':\n\t\treturn inventory\n\n\tif self.spec_version == 'v47':\n\t\treturn inventory\n\n\tif self.spec_version == 'v48':\n\t\treturn inventory\n\n\tif self.spec_version == 'v49':\n\t\treturn inventory\n\n\tif self.spec_version == 'v50':\n\t\treturn inventory\n\n\tif self.spec_version == 'v51':\n\t\treturn inventory\n\n\tif self.spec_version == 'v52':\n\t\treturn inventory\n\n\tif self.spec_version == 'v53':\n\t\treturn inventory\n\n\tif self.spec", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "ques_id": "62b45e145108cfac7f210a09", "code": ["def check_digests_present_and_used(self, manifest_files, digests_used):\n\t\"\"\"\n\tCheck all digests in manifest that are needed are present and used.\n\t\"\"\"\n\tfor manifest_file in manifest_files:\n\t\tif manifest_file not in digests_used:\n\t\t\treturn False\n\treturn True\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n\t\"\"\"\n\tCheck all digests in manifest that are needed are present and used.\n\t\"\"\"\n\tfor manifest_file in manifest_files:\n\t\tif manifest_file not in digests_used:\n\t\t\treturn False\n\treturn True\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "ques_id": "62b45e165108cfac7f210a16", "code": ["def validate_as_prior_version(self, prior):\n\t\"\"\"\n\tCheck that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.\n\t\"\"\"\n\tif not isinstance(prior, InventoryValidator):\n\t\traise TypeError(\"prior must be an InventoryValidator object\")\n\tif not isinstance(prior.inventory, Inventory):\n\t\traise TypeError(\"prior.inventory must be an Inventory object\")\n\tif not isinstance(prior.version, int):\n\t\traise TypeError(\"prior.version must be an int\")\n\tif prior.version < 1 or prior.version > Inventory.MAX_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1 and <= Inventory.MAX_VERSION\")\n\tif prior.version == Inventory.MAX_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_as_prior_version(self, prior):\n\t\"\"\"\n\tCheck that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.\n\t\"\"\"\n\tif not isinstance(prior, InventoryValidator):\n\t\traise TypeError(\"prior must be an InventoryValidator object\")\n\tif not isinstance(prior.inventory, Inventory):\n\t\traise TypeError(\"prior.inventory must be an Inventory object\")\n\tif not isinstance(prior.version, int):\n\t\traise TypeError(\"prior.version must be an int\")\n\tif prior.version < 1 or prior.version > Inventory.MAX_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1 and <= Inventory.MAX_VERSION\")\n\tif prior.version == Inventory.MAX_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_VERSION:\n\t\traise ValueError(\"prior.version must be an int >= 1\")\n\tif prior.version == Inventory.MIN_", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "ques_id": "62b45e165108cfac7f210a17", "code": ["def get_logical_path_map(inventory, version):\n\t\"\"\"\n\tGet a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.\n\t\"\"\"\n\tlogical_path_map = {}\n\tfor logical_path in inventory.get_logical_paths(version):\n\t\tlogical_path_map[logical_path] = set()\n\t\tfor file in inventory.get_logical_paths(version, logical_path):\n\t\t\tlogical_path_map[logical_path].add(file)\n\treturn logical_path_map\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get_logical_path_map(inventory, version):\n\t\"\"\"\n\tGet a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.\n\t\"\"\"\n\tlogical_path_map = {}\n\tfor logical_path in inventory.get_logical_paths(version):\n\t\tlogical_path_map[logical_path] = set()\n\t\tfor file in inventory.get_logical_paths(version, logical_path):\n\t\t\tlogical_path_map[logical_path].add(file)\n\treturn logical_path_map\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "ques_id": "62b45e175108cfac7f210a19", "code": ["def validate_fixity(self, fixity, manifest_files):\n\t\"\"\"\n\tValidate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.\n\t\"\"\"\n\tfixity_block = fixity.split('\\n')\n\tfor fixity_line in fixity_block:\n\t\tif fixity_line.startswith('#"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_fixity(self, fixity, manifest_files):\n\t\"\"\"\n\tValidate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.\n\t\"\"\"\n\tfixity_block = fixity.split('\\n')\n\tfor fixity_line in fixity_block:\n\t\tif fixity_line.startswith('#", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "ques_id": "62b463153879012d19481498", "code": ["def files_list(path):\n\t\"\"\"\n\tReturn the files in `path`\n\t\"\"\"\n\treturn [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list(path):\n\t\"\"\"\n\tReturn the files in `path`\n\t\"\"\"\n\treturn [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "ques_id": "62b463153879012d1948149a", "code": ["def _group_files_by_xml_filename(source, xmls, files):\n\t\"\"\"\n\tGroup files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package\n\t\"\"\"\n\t#"], "level": "file_runnable", "generate_results": [{"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n\t\"\"\"\n\tGroup files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package\n\t\"\"\"\n\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "ques_id": "62b463153879012d1948149b", "code": ["def match_file_by_prefix(prefix, file_path):\n\t\"\"\"\n\tIdentify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package\n\t\"\"\"\n\treturn os.path.isfile(os.path.join(prefix, file_path))\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match_file_by_prefix(prefix, file_path):\n\t\"\"\"\n\tIdentify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package\n\t\"\"\"\n\treturn os.path.isfile(os.path.join(prefix, file_path))\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "ques_id": "62b463153879012d1948149c", "code": ["def select_filenames_by_prefix(prefix, files):\n\t\"\"\"\n\tGet files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix\n\t\"\"\"\n\tfiles = [f for f in files if f.startswith(prefix)]\n\treturn files\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def select_filenames_by_prefix(prefix, files):\n\t\"\"\"\n\tGet files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix\n\t\"\"\"\n\tfiles = [f for f in files if f.startswith(prefix)]\n\treturn files\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149d", "code": ["def _explore_folder(folder):\n\t\"\"\"\n\tGet packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict\n\t\"\"\"\n\t#"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_folder(folder):\n\t\"\"\"\n\tGet packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict\n\t\"\"\"\n\t#", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149f", "code": ["def _eval_file(prefix, file_path):\n\t\"\"\"\n\tIdentifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict\n\t\"\"\"\n\tfile_folder = os.path.join(file_path, 'assets')\n\tif not os.path.exists(file_folder):\n\t\tos.makedirs(file_folder)\n\tfile_path = os.path.join(file_folder, filename)\n\tif not os.path.exists(file_path):\n\t\twith open(file_path, 'w') as f:\n\t\t\tf.write('')\n\treturn {\n\t\t'asset': 'assets',\n\t\t'rendition':'renditions',\n\t\t'packages': 'packages',\n\t\t'file_path': file_path,\n\t}\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _eval_file(prefix, file_path):\n\t\"\"\"\n\tIdentifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict\n\t\"\"\"\n\tfile_folder = os.path.join(file_path, 'assets')\n\tif not os.path.exists(file_folder):\n\t\tos.makedirs(file_folder)\n\tfile_path = os.path.join(file_folder, filename)\n\tif not os.path.exists(file_path):\n\t\twith open(file_path, 'w') as f:\n\t\t\tf.write('')\n\treturn {\n\t\t'asset': 'assets',\n\t\t'rendition':'renditions',\n\t\t'packages': 'packages',\n\t\t'file_path': file_path,\n\t}\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "ques_id": "62b463153879012d194814a1", "code": ["def add_rendition(self, lang, file_path):\n\t\"\"\"\n\t{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}\n\t\"\"\"\n\tif not file_path:\n\t\treturn None\n\tif not os.path.exists(file_path):\n\t\treturn None\n\tif not os.path.isfile(file_path):\n\t\treturn None\n\tif not os.path.splitext(file_path)[1] in (\".pdf\", \".PDF\"):\n\t\treturn None\n\tif not os.path.exists(os.path.join(self.path, \"artigo\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"en\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"en\", \"en\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \""], "level": "class_runnable", "generate_results": [{"generate_code": "def add_rendition(self, lang, file_path):\n\t\"\"\"\n\t{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}\n\t\"\"\"\n\tif not file_path:\n\t\treturn None\n\tif not os.path.exists(file_path):\n\t\treturn None\n\tif not os.path.isfile(file_path):\n\t\treturn None\n\tif not os.path.splitext(file_path)[1] in (\".pdf\", \".PDF\"):\n\t\treturn None\n\tif not os.path.exists(os.path.join(self.path, \"artigo\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"en\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"en\", \"en\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\"))\n\tif not os.path.exists(os.path.join(self.path, \"artigo\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\")):\n\t\tos.makedirs(os.path.join(self.path, \"artigo\", \"", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "ques_id": "62b463163879012d194814a2", "code": ["def add_asset(self, basename, file_path):\n\t\"\"\"\n\t\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}\n\t\"\"\"\n\tif basename in self.assets:\n\t\traise Exception(\"Asset already exists\")\n\tself.assets[basename] = file_path\n\treturn basename\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_asset(self, basename, file_path):\n\t\"\"\"\n\t\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}\n\t\"\"\"\n\tif basename in self.assets:\n\t\traise Exception(\"Asset already exists\")\n\tself.assets[basename] = file_path\n\treturn basename\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "ques_id": "62b463163879012d194814a4", "code": ["def _explore_zipfile(zip_path):\n\t\"\"\"\n\tGet packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict\n\t\"\"\"\n\t#"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_zipfile(zip_path):\n\t\"\"\"\n\tGet packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict\n\t\"\"\"\n\t#", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "ques_id": "62b463163879012d194814a6", "code": ["def files_list_from_zipfile(zip_path):\n\t\"\"\"\n\tReturn the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```\n\t\"\"\"\n\tfiles = []\n\twith zipfile.ZipFile(zip_path) as z:\n\t\tfor name in z.namelist():\n\t\t\tif name.endswith('.pdf'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.xml'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list_from_zipfile(zip_path):\n\t\"\"\"\n\tReturn the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```\n\t\"\"\"\n\tfiles = []\n\twith zipfile.ZipFile(zip_path) as z:\n\t\tfor name in z.namelist():\n\t\t\tif name.endswith('.pdf'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.xml'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)\n\t\t\telif name.endswith('.tif'):\n\t\t\t\tfiles.append(name)", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "ques_id": "62b4631b3879012d194814dd", "code": ["def fix_namespace_prefix_w(content):\n\t\"\"\"\n\tConvert text that defaults to 'w:st=\"' to 'w-st=\"'\n\t\"\"\"\n\tif content.startswith('w:st=\"'):\n\t\tcontent = content[4:]\n\tif content.startswith('w-st=\"'):\n\t\tcontent = content[5:]\n\treturn content\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def fix_namespace_prefix_w(content):\n\t\"\"\"\n\tConvert text that defaults to 'w:st=\"' to 'w-st=\"'\n\t\"\"\"\n\tif content.startswith('w:st=\"'):\n\t\tcontent = content[4:]\n\tif content.startswith('w-st=\"'):\n\t\tcontent = content[5:]\n\treturn content\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "ques_id": "62b463283879012d1948153d", "code": ["def match_pubdate(node, pubdate_xpaths):\n\t\"\"\"\n\tReturns the first match in the pubdate_xpaths list\n\t\"\"\"\n\tfor pubdate_xpath in pubdate_xpaths:\n\t\tpubdate = node.xpath(pubdate_xpath)\n\t\tif len(pubdate) > 0:\n\t\t\treturn pubdate[0]\n\treturn None\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def match_pubdate(node, pubdate_xpaths):\n\t\"\"\"\n\tReturns the first match in the pubdate_xpaths list\n\t\"\"\"\n\tfor pubdate_xpath in pubdate_xpaths:\n\t\tpubdate = node.xpath(pubdate_xpath)\n\t\tif len(pubdate) > 0:\n\t\t\treturn pubdate[0]\n\treturn None\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "ques_id": "62b463303879012d19481579", "code": ["def _extract_number_and_supplment_from_issue_element(issue):\n\t\"\"\"\n\tExtract the possible values of number and suppl from the contents of issue.\n\t\"\"\"\n\tnumber = None\n\tsuppl = None\n\tfor element in issue.find_elements_by_tag_name('div'):\n\t\tif element.get_attribute('class') == 'number':\n\t\t\tnumber = element.get_attribute('data-number')\n\t\telif element.get_attribute('class') =='suppl':\n\t\t\tsuppl = element.get_attribute('data-suppl')\n\treturn number, suppl\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n\t\"\"\"\n\tExtract the possible values of number and suppl from the contents of issue.\n\t\"\"\"\n\tnumber = None\n\tsuppl = None\n\tfor element in issue.find_elements_by_tag_name('div'):\n\t\tif element.get_attribute('class') == 'number':\n\t\t\tnumber = element.get_attribute('data-number')\n\t\telif element.get_attribute('class') =='suppl':\n\t\t\tsuppl = element.get_attribute('data-suppl')\n\treturn number, suppl\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "ques_id": "62b46740d2f69a53b466171a", "code": ["def pretty(self, indent=0, debug=False):\n\t\"\"\"\n\tReturn a pretty formatted representation of self.\n\t\"\"\"\n\tif debug:\n\t\tprint(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pretty(self, indent=0, debug=False):\n\t\"\"\"\n\tReturn a pretty formatted representation of self.\n\t\"\"\"\n\tif debug:\n\t\tprint(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "ques_id": "62b46746d2f69a53b4661722", "code": ["def absorb(self, args):\n\t\"\"\"\n\tGiven an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B\n\t\"\"\"\n\tif len(args) == 0:\n\t\treturn []\n\telif len(args) == 1:\n\t\treturn [args[0]]\n\telse:\n\t\treturn [args[0]] + absorb(args[1:])\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def absorb(self, args):\n\t\"\"\"\n\tGiven an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B\n\t\"\"\"\n\tif len(args) == 0:\n\t\treturn []\n\telif len(args) == 1:\n\t\treturn [args[0]]\n\telse:\n\t\treturn [args[0]] + absorb(args[1:])\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "ques_id": "62b86707b4d922cb0e688c2a", "code": ["def on(self, hook):\n\t\"\"\"\n\tDecorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.\n\t\"\"\"\n\tdef decorator(func):\n\t\tself.add_listener(hook, func)\n\t\treturn func\n\treturn decorator\n\nclass Hook(object):\n\t\"\"\"\n\tHook object.\n\t\"\"\"\n\tdef __init__(self, name, hook_type):\n\t\t\"\"\"\n\t\tInitialize the hook.\n\n\t\tArgs:\n\t\t\tname (str): Name of the hook.\n\t\t\thook_type (HookType): Type of the hook.\n\t\t\"\"\"\n\t\tself.name = name\n\t\tself.hook_type = hook_type\n\t\tself.listeners = []\n\n\tdef add_listener(self, hook, func):\n\t\t\"\"\"\n\t\tAdd a listener for the specified hook.\n\n\t\tArgs:\n\t\t\thook (HookType): Hook attribute for which to register the\n\t\t\tlistener.\n\t\t\tfunc (callable): Function to be called when the hook is\n\t\t\tregistered.\n\t\t\"\"\"\n\t\tself.listeners.append((hook, func))\n\n\tdef remove_listener(self, hook, func):\n\t\t\"\"\"\n\t\tRemove a listener for the specified hook.\n\n\t\tArgs:\n\t\t\thook (HookType): Hook attribute for which to remove the\n\t\t\tlistener.\n\t\t\tfunc (callable): Function to be called when the hook is\n\t\t\tremoved.\n\t\t\"\"\"\n\t\tself.listeners.remove((hook, func))\n\n\tdef __call__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\tCall the hook.\n\n\t\tArgs:\n\t\t\t*args (tuple): Positional arguments to be passed to the\n\t\t\thook.\n\t\t\t**kwargs (dict): Keyword arguments to be passed to the\n\t\t\thook.\n\t\t\"\"\"\n\t\tfor hook, func in self.listeners:\n\t\t\tif hook.name == self.name:\n\t\t\t\treturn func(*args, **kwargs)\n\t\traise ValueError(\"Hook %s not found\" % self.name)\n\nclass HookType(object):\n\t\"\"\"\n\tHook type.\n\t\"\"\"\n\tdef __init__(self, name):\n\t\t\"\"\"\n\t\tInitialize the hook type.\n\n\t\tArgs:\n\t\t\tname (str): Name of the hook type.\n\t\t\"\"\"\n\t\tself.name = name\n\t\tself.listeners = []\n\n\tdef add_listener(self, hook, func):\n\t\t\"\"\"\n\t\tAdd a listener for the specified hook.\n\n\t\tArgs:\n\t\t\thook (HookType): Hook attribute for which to register the\n\t\t\tlistener.\n\t\t\tfunc (callable): Function to be called when the hook is\n\t\t\tregistered.\n\t\t\"\"\"\n\t\tself.listeners.append((hook, func))\n\n\tdef remove_listener(self, hook, func):\n\t\t\"\"\"\n\t\tRemove a listener for the specified hook.\n\n\t\tArgs:\n\t\t\thook (HookType): Hook attribute for which to remove the\n\t\t\tlistener.\n\t\t\tfunc (callable): Function to be called when the hook is\n\t\t\tremoved.\n\t\t\"\"\"\n\t\tself.listeners.remove((hook, func))\n\n\tdef __call__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\tCall the hook type.\n\n\t\tArgs:\n\t\t\t*args (tuple): Positional arguments to be passed to the\n\t\t\thook.\n\t\t\t**kwargs (dict): Keyword arguments to be passed to the\n\t\t\thook.\n\t\t\"\"\"\n\t\tfor hook, func in self.listeners:\n\t\t\tif hook.name == self.name:\n\t\t\t\treturn func(*args, **kwargs)\n\t\traise ValueError(\"Hook %s not found\" % self.name)\n\nclass Hooks(object):\n\t\"\"\"\n\tHooks object.\n\t\"\"\"\n\tdef __init__(self):\n\t\t\"\"\"\n\t\tInitialize the hooks.\n\t\t\"\"\"\n\t\tself.hooks = {}\n\n\tdef add_hook(self, name, hook_type):\n\t\t\"\"\"\n\t\tAdd a new hook.\n\n\t\tArgs:\n\t\t\tname (str): Name of the hook.\n\t\t\thook_type (HookType): Type of the hook.\n\t\t\"\"\"\n\t\tself.hooks[name] = hook_type\n\n\tdef remove_hook(self, name, hook_type):\n\t\t\"\"\"\n\t\tRemove a hook.\n\n\t\tArgs:"], "level": "class_runnable", "generate_results": [{"generate_code": "def on(self, hook):\n\t\"\"\"\n\tDecorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.\n\t\"\"\"\n\tdef decorator(func):\n\t\tself.add_listener(hook, func)\n\t\treturn func\n\treturn decorator\n\nclass Hook(object):\n\t\"\"\"\n\tHook object.\n\t\"\"\"\n\tdef __init__(self, name, hook_type):\n\t\t\"\"\"\n\t\tInitialize the hook.\n\n\t\tArgs:\n\t\t\tname (str): Name of the hook.\n\t\t\thook_type (HookType): Type of the hook.\n\t\t\"\"\"\n\t\tself.name = name\n\t\tself.hook_type = hook_type\n\t\tself.listeners = []\n\n\tdef add_listener(self, hook, func):\n\t\t\"\"\"\n\t\tAdd a listener for the specified hook.\n\n\t\tArgs:\n\t\t\thook (HookType): Hook attribute for which to register the\n\t\t\tlistener.\n\t\t\tfunc (callable): Function to be called when the hook is\n\t\t\tregistered.\n\t\t\"\"\"\n\t\tself.listeners.append((hook, func))\n\n\tdef remove_listener(self, hook, func):\n\t\t\"\"\"\n\t\tRemove a listener for the specified hook.\n\n\t\tArgs:\n\t\t\thook (HookType): Hook attribute for which to remove the\n\t\t\tlistener.\n\t\t\tfunc (callable): Function to be called when the hook is\n\t\t\tremoved.\n\t\t\"\"\"\n\t\tself.listeners.remove((hook, func))\n\n\tdef __call__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\tCall the hook.\n\n\t\tArgs:\n\t\t\t*args (tuple): Positional arguments to be passed to the\n\t\t\thook.\n\t\t\t**kwargs (dict): Keyword arguments to be passed to the\n\t\t\thook.\n\t\t\"\"\"\n\t\tfor hook, func in self.listeners:\n\t\t\tif hook.name == self.name:\n\t\t\t\treturn func(*args, **kwargs)\n\t\traise ValueError(\"Hook %s not found\" % self.name)\n\nclass HookType(object):\n\t\"\"\"\n\tHook type.\n\t\"\"\"\n\tdef __init__(self, name):\n\t\t\"\"\"\n\t\tInitialize the hook type.\n\n\t\tArgs:\n\t\t\tname (str): Name of the hook type.\n\t\t\"\"\"\n\t\tself.name = name\n\t\tself.listeners = []\n\n\tdef add_listener(self, hook, func):\n\t\t\"\"\"\n\t\tAdd a listener for the specified hook.\n\n\t\tArgs:\n\t\t\thook (HookType): Hook attribute for which to register the\n\t\t\tlistener.\n\t\t\tfunc (callable): Function to be called when the hook is\n\t\t\tregistered.\n\t\t\"\"\"\n\t\tself.listeners.append((hook, func))\n\n\tdef remove_listener(self, hook, func):\n\t\t\"\"\"\n\t\tRemove a listener for the specified hook.\n\n\t\tArgs:\n\t\t\thook (HookType): Hook attribute for which to remove the\n\t\t\tlistener.\n\t\t\tfunc (callable): Function to be called when the hook is\n\t\t\tremoved.\n\t\t\"\"\"\n\t\tself.listeners.remove((hook, func))\n\n\tdef __call__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\tCall the hook type.\n\n\t\tArgs:\n\t\t\t*args (tuple): Positional arguments to be passed to the\n\t\t\thook.\n\t\t\t**kwargs (dict): Keyword arguments to be passed to the\n\t\t\thook.\n\t\t\"\"\"\n\t\tfor hook, func in self.listeners:\n\t\t\tif hook.name == self.name:\n\t\t\t\treturn func(*args, **kwargs)\n\t\traise ValueError(\"Hook %s not found\" % self.name)\n\nclass Hooks(object):\n\t\"\"\"\n\tHooks object.\n\t\"\"\"\n\tdef __init__(self):\n\t\t\"\"\"\n\t\tInitialize the hooks.\n\t\t\"\"\"\n\t\tself.hooks = {}\n\n\tdef add_hook(self, name, hook_type):\n\t\t\"\"\"\n\t\tAdd a new hook.\n\n\t\tArgs:\n\t\t\tname (str): Name of the hook.\n\t\t\thook_type (HookType): Type of the hook.\n\t\t\"\"\"\n\t\tself.hooks[name] = hook_type\n\n\tdef remove_hook(self, name, hook_type):\n\t\t\"\"\"\n\t\tRemove a hook.\n\n\t\tArgs:", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "ques_id": "62b86729b4d922cb0e688c2f", "code": ["def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n\t\"\"\"\n\tCreates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.\n\t\"\"\"\n\tconfig = {\n\t\t\"user\": user,\n\t\t\"etcd_host\": etcd_host,\n\t\t\"etcd_port\": etcd_port,\n\t\t\"etcd_root_path\": \"/\",\n\t\t\"etcd_root_path_prefix\": \"\",\n\t\t\"etcd_root_path_prefix_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len_len_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len_len_len_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len_len_len_len_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len_len_len_len_len_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len_len_len_len_len_len_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len_len_len_len_len_len_len_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len_len_len_len_len_len_len_len_len_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len"], "level": "self_contained", "generate_results": [{"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n\t\"\"\"\n\tCreates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.\n\t\"\"\"\n\tconfig = {\n\t\t\"user\": user,\n\t\t\"etcd_host\": etcd_host,\n\t\t\"etcd_port\": etcd_port,\n\t\t\"etcd_root_path\": \"/\",\n\t\t\"etcd_root_path_prefix\": \"\",\n\t\t\"etcd_root_path_prefix_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len_len_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len_len_len_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len_len_len_len_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len_len_len_len_len_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len_len_len_len_len_len_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len_len_len_len_len_len_len_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len_len_len_len_len_len_len_len_len_len_len\": 0,\n\t\t\"etcd_root_path_prefix_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d2", "code": ["def _fromutc(self, dt):\n\t\"\"\"\n\tGiven a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.\n\t\"\"\"\n\tif dt.tzinfo is None:\n\t\treturn dt\n\t#"], "level": "self_contained", "generate_results": [{"generate_code": "def _fromutc(self, dt):\n\t\"\"\"\n\tGiven a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.\n\t\"\"\"\n\tif dt.tzinfo is None:\n\t\treturn dt\n\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "ques_id": "62b8982f755ee91dce50a241", "code": ["def normalized(self):\n\t\"\"\"\n\tReturn a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.\n\t\"\"\"\n\treturn relativedelta(days=self.days, hours=self.hours, minutes=self.minutes, seconds=self.seconds, microseconds=self.microseconds)\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def normalized(self):\n\t\"\"\"\n\tReturn a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.\n\t\"\"\"\n\treturn relativedelta(days=self.days, hours=self.hours, minutes=self.minutes, seconds=self.seconds, microseconds=self.microseconds)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "ques_id": "62b89640755ee91dce50a114", "code": ["def tzname_in_python2(namefunc):\n\t\"\"\"\n\tChange unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings\n\t\"\"\"\n\tif PY2:\n\t\treturn namefunc\n\telse:\n\t\treturn namefunc.decode('utf-8')\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def tzname_in_python2(namefunc):\n\t\"\"\"\n\tChange unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings\n\t\"\"\"\n\tif PY2:\n\t\treturn namefunc\n\telse:\n\t\treturn namefunc.decode('utf-8')\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "ques_id": "62b87d24d292efb640a55670", "code": ["def get_versions():\n\t\"\"\"\n\tGet version information or return default if unable to do so.\n\t\"\"\"\n\t#"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_versions():\n\t\"\"\"\n\tGet version information or return default if unable to do so.\n\t\"\"\"\n\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "ques_id": "62b87d24d292efb640a5566f", "code": ["def render(pieces, style):\n\t\"\"\"\n\tRender the given version pieces into the requested style.\n\t\"\"\"\n\tif pieces[\"error\"]:\n\t\treturn {\"version\": \"unknown\",\n\t\t\t\t\"full-revisionid\": pieces.get(\"long\"),\n\t\t\t\t\"dirty\": None,\n\t\t\t\t\"error\": pieces[\"error\"],\n\t\t\t\t\"date\": None}\n\n\tif not style or style == \"default\":\n\t\tstyle = \"pep440\"  #"], "level": "file_runnable", "generate_results": [{"generate_code": "def render(pieces, style):\n\t\"\"\"\n\tRender the given version pieces into the requested style.\n\t\"\"\"\n\tif pieces[\"error\"]:\n\t\treturn {\"version\": \"unknown\",\n\t\t\t\t\"full-revisionid\": pieces.get(\"long\"),\n\t\t\t\t\"dirty\": None,\n\t\t\t\t\"error\": pieces[\"error\"],\n\t\t\t\t\"date\": None}\n\n\tif not style or style == \"default\":\n\t\tstyle = \"pep440\"  #", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "ques_id": "62b87d24d292efb640a5566d", "code": ["def plus_or_dot(pieces):\n\t\"\"\"\n\tReturn a + if we don't already have one, else return a.\n\t\"\"\"\n\tif \"+\" in pieces.get(\"closest-tag\", \"\"):\n\t\treturn \".\"\n\treturn \"+\"\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def plus_or_dot(pieces):\n\t\"\"\"\n\tReturn a + if we don't already have one, else return a.\n\t\"\"\"\n\tif \"+\" in pieces.get(\"closest-tag\", \"\"):\n\t\treturn \".\"\n\treturn \"+\"\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62b87d23d292efb640a5566b", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n\t\"\"\"\n\tCall the given command(s).\n\t\"\"\"\n\tassert isinstance(commands, list)\n\tsuccess = True\n\tfor index, cmd in enumerate(commands):\n\t\ttry:\n\t\t\tout = run_command(cmd, args, cwd=cwd, verbose=verbose, hide_stderr=hide_stderr, env=env)\n\t\t\tsuccess = success and out.returncode == 0\n\t\texcept Exception as e:\n\t\t\tout = e\n\t\t\tsuccess = False\n\t\t\tif hide_stderr:\n\t\t\t\t_stderr_level_traceback(e, out)\n\t\tif success:\n\t\t\tbreak\n\treturn success, out"], "level": "plib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n\t\"\"\"\n\tCall the given command(s).\n\t\"\"\"\n\tassert isinstance(commands, list)\n\tsuccess = True\n\tfor index, cmd in enumerate(commands):\n\t\ttry:\n\t\t\tout = run_command(cmd, args, cwd=cwd, verbose=verbose, hide_stderr=hide_stderr, env=env)\n\t\t\tsuccess = success and out.returncode == 0\n\t\texcept Exception as e:\n\t\t\tout = e\n\t\t\tsuccess = False\n\t\t\tif hide_stderr:\n\t\t\t\t_stderr_level_traceback(e, out)\n\t\tif success:\n\t\t\tbreak\n\treturn success, out", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "ques_id": "62b87d23d292efb640a55668", "code": ["def get_config():\n\t\"\"\"\n\tCreate, populate and return the VersioneerConfig() object.\n\t\"\"\"\n\t#"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_config():\n\t\"\"\"\n\tCreate, populate and return the VersioneerConfig() object.\n\t\"\"\"\n\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "ques_id": "62b87d23d292efb640a55667", "code": ["def register_vcs_handler(vcs, method):\n\t\"\"\"\n\tCreate decorator to mark a method as the handler of a VCS.\n\t\"\"\"\n\tdef decorator(func):\n\t\tif vcs not in ('git', 'hg'):\n\t\t\traise ValueError('Unsupported VCS: %s' % vcs)\n\t\tif method not in ('init', 'add', 'commit', 'tag', 'push'):\n\t\t\traise ValueError('Unsupported VCS: %s' % vcs)\n\t\treturn func\n\treturn decorator\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def register_vcs_handler(vcs, method):\n\t\"\"\"\n\tCreate decorator to mark a method as the handler of a VCS.\n\t\"\"\"\n\tdef decorator(func):\n\t\tif vcs not in ('git', 'hg'):\n\t\t\traise ValueError('Unsupported VCS: %s' % vcs)\n\t\tif method not in ('init', 'add', 'commit', 'tag', 'push'):\n\t\t\traise ValueError('Unsupported VCS: %s' % vcs)\n\t\treturn func\n\treturn decorator\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "ques_id": "62b45e945108cfac7f210a4a", "code": ["def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n\t\"\"\"\n\tValidate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid\n\t\"\"\"\n\tnum_objects = 0\n\tgood_objects = 0\n\tif self.root_hierarchy is None:\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n\t\"\"\"\n\tValidate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid\n\t\"\"\"\n\tnum_objects = 0\n\tgood_objects = 0\n\tif self.root_hierarchy is None:\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_root():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_leaf():\n\t\treturn num_objects, good_objects\n\tif self.root_hierarchy.is_empty", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "ques_id": "62b45e515108cfac7f210a3c", "code": ["def initialize(self):\n\t\"\"\"\n\tCreate and initialize a new OCFL storage root.\n\t\"\"\"\n\tself.root = ocfl.storage.Storage(self.name)\n\tself.root.set_root_path(self.root_path)\n\tself.root.set_root_path_type(self.root_path_type)\n\tself.root.set_root_path_type_string(self.root_path_type_string)\n\tself.root.set_root_path_type_string_list(self.root_path_type_string_list)\n\tself.root.set_root_path_type_string_list_string(self.root_path_type_string_list_string)\n\tself.root.set_root_path_type_string_list_string_list(self.root_path_type_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string(self.root_path_type_string_list_string_list_string)\n\tself.root.set_root_path_type_string_list_string_list_string_list(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set"], "level": "file_runnable", "generate_results": [{"generate_code": "def initialize(self):\n\t\"\"\"\n\tCreate and initialize a new OCFL storage root.\n\t\"\"\"\n\tself.root = ocfl.storage.Storage(self.name)\n\tself.root.set_root_path(self.root_path)\n\tself.root.set_root_path_type(self.root_path_type)\n\tself.root.set_root_path_type_string(self.root_path_type_string)\n\tself.root.set_root_path_type_string_list(self.root_path_type_string_list)\n\tself.root.set_root_path_type_string_list_string(self.root_path_type_string_list_string)\n\tself.root.set_root_path_type_string_list_string_list(self.root_path_type_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string(self.root_path_type_string_list_string_list_string)\n\tself.root.set_root_path_type_string_list_string_list_string_list(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set_root_path_type_string_list_string_list_string_list_string(self.root_path_type_string_list_string_list_string_list)\n\tself.root.set", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "ques_id": "62b45e2eb89c9fd354170232", "code": ["def next_version(version):\n\t\"\"\"\n\tNext version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.\n\t\"\"\"\n\tif version.startswith('0'):\n\t\treturn version\n\telse:\n\t\treturn '0' + version\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def next_version(version):\n\t\"\"\"\n\tNext version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.\n\t\"\"\"\n\tif version.startswith('0'):\n\t\treturn version\n\telse:\n\t\treturn '0' + version\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "ques_id": "62b45e23e0d4551b0392c90a", "code": ["def validate_version_inventories(self, version_dirs):\n\t\"\"\"\n\tEach version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).\n\t\"\"\"\n\tfor version_dir in version_dirs:\n\t\tif not os.path.isdir(version_dir):\n\t\t\traise ValueError(\"Version directory %s does not exist\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"inventory\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"content\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\", \"content\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\", \"content\", \"inventory\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\", \"content\", \"content\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\", \"content\", \"content\", \"inventory\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\", \"content\", \"content\", \"inventory\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\", \"content\", \"content\", \"content\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\", \"content\", \"content\", \"content\", \"inventory\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\", \"content\", \"content\", \"content\", \"content\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\", \"content\", \"content\", \"content\", \"content\", \"inventory\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\", \"content\", \"content\", \"content\", \"content\", \"content\", \"inventory\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_version_inventories(self, version_dirs):\n\t\"\"\"\n\tEach version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).\n\t\"\"\"\n\tfor version_dir in version_dirs:\n\t\tif not os.path.isdir(version_dir):\n\t\t\traise ValueError(\"Version directory %s does not exist\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"inventory\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"content\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\", \"content\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\", \"content\", \"inventory\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\", \"content\", \"content\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\", \"content\", \"content\", \"inventory\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\", \"content\", \"content\", \"inventory\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\", \"content\", \"content\", \"content\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\", \"content\", \"content\", \"content\", \"inventory\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\", \"content\", \"content\", \"content\", \"content\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\", \"content\", \"content\", \"content\", \"content\", \"inventory\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir(os.path.join(version_dir, \"digests\", \"content\", \"inventory\", \"content\", \"content\", \"content\", \"content\", \"content\", \"inventory\")):\n\t\t\traise ValueError(\"Version directory %s does not contain an inventory\" % version_dir)\n\t\tif not os.path.isdir", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "ques_id": "62b45e21e0d4551b0392c8ed", "code": ["def find_path_type(path):\n\t\"\"\"\n\tReturn a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.\n\t\"\"\"\n\tif path == '0=*':\n\t\treturn 'root'\n\telif path == '1=*':\n\t\treturn 'object'\n\telif path == '2=*':\n\t\treturn 'file'\n\telse:\n\t\treturn 'other'\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_path_type(path):\n\t\"\"\"\n\tReturn a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.\n\t\"\"\"\n\tif path == '0=*':\n\t\treturn 'root'\n\telif path == '1=*':\n\t\treturn 'object'\n\telif path == '2=*':\n\t\treturn 'file'\n\telse:\n\t\treturn 'other'\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "ques_id": "62b45b396decaeff903e1001", "code": ["def amend_bzparams(self, params, bug_ids):\n\t\"\"\"\n\tAmend the Bugzilla params\n\t\"\"\"\n\t#"], "level": "class_runnable", "generate_results": [{"generate_code": "def amend_bzparams(self, params, bug_ids):\n\t\"\"\"\n\tAmend the Bugzilla params\n\t\"\"\"\n\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b4567ed7d32e5b55cc83d9", "code": ["def deep_merge_nodes(nodes):\n\t\"\"\"\n\tGiven a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.\n\t\"\"\"\n\tdef deep_merge_nodes(nodes):\n\t\t\"\"\"\n\t\tGiven a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n        (\n            ruamel.yaml.nodes.ScalarNode as a key,\n            ruamel.yaml.nodes.MappingNode or other Node as a value,\n        ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n\t\"\"\"\n\tGiven a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.\n\t\"\"\"\n\tdef deep_merge_nodes(nodes):\n\t\t\"\"\"\n\t\tGiven a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n        (\n            ruamel.yaml.nodes.ScalarNode as a key,\n            ruamel.yaml.nodes.MappingNode or other Node as a value,\n        ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b4567ad7d32e5b55cc83af", "code": ["def parse_arguments(*arguments):\n\t\"\"\"\n\tGiven command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.\n\t\"\"\"\n\tparser = ArgumentParser(description=__doc__)\n\tparser.add_argument(\"-v\", \"--verbose\", action=\"store_true\", help=\"increase output verbosity\")\n\tparser.add_argument(\"-q\", \"--quiet\", action=\"store_true\", help=\"suppress output\")\n\tparser.add_argument(\"-d\", \"--debug\", action=\"store_true\", help=\"enable debug output\")\n\tparser.add_argument(\"-f\", \"--file\", help=\"read from FILE instead of stdin\")\n\tparser.add_argument(\"-i\", \"--input\", help=\"read from FILE instead of stdin\")\n\tparser.add_argument(\"-o\", \"--output\", help=\"write to FILE instead of stdout\")\n\tparser.add_argument(\"-s\", \"--sort\", help=\"sort output alphabetically\")\n\tparser.add_argument(\"-l\", \"--list\", action=\"store_true\", help=\"list all files\")\n\tparser.add_argument(\"-t\", \"--type\", help=\"specify the type of file to read\")\n\tparser.add_argument(\"-c\", \"--count\", help=\"specify the number of files to read\")\n\tparser.add_argument(\"-r\", \"--recursive\", action=\"store_true\", help=\"recursively read subdirectories\")\n\tparser.add_argument(\"-u\", \"--unpack\", action=\"store_true\", help=\"unpack the files\")\n\tparser.add_argument(\"-x\", \"--extract\", action=\"store_true\", help=\"extract the files\")\n\tparser.add_argument(\"-p\", \"--pack\", action=\"store_true\", help=\"pack the files\")\n\tparser.add_argument(\"-a\", \"--add\", action=\"store_true\", help=\"add the files\")\n\tparser.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s {}\".format(__version__))\n\treturn parser.parse_args(*arguments)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n\t\"\"\"\n\tGiven command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.\n\t\"\"\"\n\tparser = ArgumentParser(description=__doc__)\n\tparser.add_argument(\"-v\", \"--verbose\", action=\"store_true\", help=\"increase output verbosity\")\n\tparser.add_argument(\"-q\", \"--quiet\", action=\"store_true\", help=\"suppress output\")\n\tparser.add_argument(\"-d\", \"--debug\", action=\"store_true\", help=\"enable debug output\")\n\tparser.add_argument(\"-f\", \"--file\", help=\"read from FILE instead of stdin\")\n\tparser.add_argument(\"-i\", \"--input\", help=\"read from FILE instead of stdin\")\n\tparser.add_argument(\"-o\", \"--output\", help=\"write to FILE instead of stdout\")\n\tparser.add_argument(\"-s\", \"--sort\", help=\"sort output alphabetically\")\n\tparser.add_argument(\"-l\", \"--list\", action=\"store_true\", help=\"list all files\")\n\tparser.add_argument(\"-t\", \"--type\", help=\"specify the type of file to read\")\n\tparser.add_argument(\"-c\", \"--count\", help=\"specify the number of files to read\")\n\tparser.add_argument(\"-r\", \"--recursive\", action=\"store_true\", help=\"recursively read subdirectories\")\n\tparser.add_argument(\"-u\", \"--unpack\", action=\"store_true\", help=\"unpack the files\")\n\tparser.add_argument(\"-x\", \"--extract\", action=\"store_true\", help=\"extract the files\")\n\tparser.add_argument(\"-p\", \"--pack\", action=\"store_true\", help=\"pack the files\")\n\tparser.add_argument(\"-a\", \"--add\", action=\"store_true\", help=\"add the files\")\n\tparser.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s {}\".format(__version__))\n\treturn parser.parse_args(*arguments)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b45679d7d32e5b55cc83a9", "code": ["def parser_flags(parser):\n\t\"\"\"\n\tGiven an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.\n\t\"\"\"\n\tflags = \"\"\n\tfor flag in parser.flag_strings:\n\t\tflags += flag + \" \"\n\treturn flags[:-1]\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n\t\"\"\"\n\tGiven an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.\n\t\"\"\"\n\tflags = \"\"\n\tfor flag in parser.flag_strings:\n\t\tflags += flag + \" \"\n\treturn flags[:-1]\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b45665d7d32e5b55cc8365", "code": ["def parse_arguments(*unparsed_arguments):\n\t\"\"\"\n\tGiven command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.\n\t\"\"\"\n\t#"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n\t\"\"\"\n\tGiven command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.\n\t\"\"\"\n\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b45665d7d32e5b55cc8364", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n\t\"\"\"\n\tGiven a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).\n\t\"\"\"\n\t#"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n\t\"\"\"\n\tGiven a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).\n\t\"\"\"\n\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b45665d7d32e5b55cc8363", "code": ["def make_parsers():\n\t\"\"\"\n\tBuild a top-level parser and its subparsers and return them as a tuple.\n\t\"\"\"\n\tparser = argparse.ArgumentParser(description='A simple command line tool for the '\n\t\t'Python interpreter.')\n\tsubparsers = parser.add_subparsers(dest='command')\n\tsubparsers.required = True\n\tsubparsers.dest ='subcommand'\n\tsubparsers.metavar = 'COMMAND'\n\tsubparsers.help = 'Run a command'\n\tsubparsers.add_parser('help', help='Show this help message and exit.')\n\tsubparsers.add_parser('version', help='Show the version number and exit.')\n\treturn parser, subparsers\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n\t\"\"\"\n\tBuild a top-level parser and its subparsers and return them as a tuple.\n\t\"\"\"\n\tparser = argparse.ArgumentParser(description='A simple command line tool for the '\n\t\t'Python interpreter.')\n\tsubparsers = parser.add_subparsers(dest='command')\n\tsubparsers.required = True\n\tsubparsers.dest ='subcommand'\n\tsubparsers.metavar = 'COMMAND'\n\tsubparsers.help = 'Run a command'\n\tsubparsers.add_parser('help', help='Show this help message and exit.')\n\tsubparsers.add_parser('version', help='Show the version number and exit.')\n\treturn parser, subparsers\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b438ba66fea644fe22cca2", "code": ["def deep_merge_nodes(nodes):\n\t\"\"\"\n\tGiven a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.\n\t\"\"\"\n\tdef deep_merge_nodes(nodes):\n\t\t\"\"\"\n\t\tGiven a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n        (\n            ruamel.yaml.nodes.ScalarNode as a key,\n            ruamel.yaml.nodes.MappingNode or other Node as a value,\n        ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n\t\"\"\"\n\tGiven a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.\n\t\"\"\"\n\tdef deep_merge_nodes(nodes):\n\t\t\"\"\"\n\t\tGiven a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n        (\n            ruamel.yaml.nodes.ScalarNode as a key,\n            ruamel.yaml.nodes.MappingNode or other Node as a value,\n        ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b438b666fea644fe22cc78", "code": ["def parse_arguments(*arguments):\n\t\"\"\"\n\tGiven command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.\n\t\"\"\"\n\tparser = ArgumentParser(description=__doc__)\n\tparser.add_argument(\"-v\", \"--verbose\", action=\"store_true\", help=\"increase output verbosity\")\n\tparser.add_argument(\"-q\", \"--quiet\", action=\"store_true\", help=\"suppress output\")\n\tparser.add_argument(\"-d\", \"--debug\", action=\"store_true\", help=\"enable debug output\")\n\tparser.add_argument(\"-f\", \"--file\", help=\"read from FILE instead of stdin\")\n\tparser.add_argument(\"-i\", \"--input\", help=\"read from FILE instead of stdin\")\n\tparser.add_argument(\"-o\", \"--output\", help=\"write to FILE instead of stdout\")\n\tparser.add_argument(\"-s\", \"--sort\", help=\"sort output alphabetically\")\n\tparser.add_argument(\"-l\", \"--list\", action=\"store_true\", help=\"list all files\")\n\tparser.add_argument(\"-t\", \"--type\", help=\"specify the type of file to read\")\n\tparser.add_argument(\"-c\", \"--count\", help=\"specify the number of files to read\")\n\tparser.add_argument(\"-r\", \"--recursive\", action=\"store_true\", help=\"recursively read subdirectories\")\n\tparser.add_argument(\"-u\", \"--unpack\", action=\"store_true\", help=\"unpack the files\")\n\tparser.add_argument(\"-x\", \"--extract\", action=\"store_true\", help=\"extract the files\")\n\tparser.add_argument(\"-p\", \"--pack\", action=\"store_true\", help=\"pack the files\")\n\tparser.add_argument(\"-a\", \"--add\", action=\"store_true\", help=\"add the files\")\n\tparser.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s {}\".format(__version__))\n\treturn parser.parse_args(*arguments)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n\t\"\"\"\n\tGiven command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.\n\t\"\"\"\n\tparser = ArgumentParser(description=__doc__)\n\tparser.add_argument(\"-v\", \"--verbose\", action=\"store_true\", help=\"increase output verbosity\")\n\tparser.add_argument(\"-q\", \"--quiet\", action=\"store_true\", help=\"suppress output\")\n\tparser.add_argument(\"-d\", \"--debug\", action=\"store_true\", help=\"enable debug output\")\n\tparser.add_argument(\"-f\", \"--file\", help=\"read from FILE instead of stdin\")\n\tparser.add_argument(\"-i\", \"--input\", help=\"read from FILE instead of stdin\")\n\tparser.add_argument(\"-o\", \"--output\", help=\"write to FILE instead of stdout\")\n\tparser.add_argument(\"-s\", \"--sort\", help=\"sort output alphabetically\")\n\tparser.add_argument(\"-l\", \"--list\", action=\"store_true\", help=\"list all files\")\n\tparser.add_argument(\"-t\", \"--type\", help=\"specify the type of file to read\")\n\tparser.add_argument(\"-c\", \"--count\", help=\"specify the number of files to read\")\n\tparser.add_argument(\"-r\", \"--recursive\", action=\"store_true\", help=\"recursively read subdirectories\")\n\tparser.add_argument(\"-u\", \"--unpack\", action=\"store_true\", help=\"unpack the files\")\n\tparser.add_argument(\"-x\", \"--extract\", action=\"store_true\", help=\"extract the files\")\n\tparser.add_argument(\"-p\", \"--pack\", action=\"store_true\", help=\"pack the files\")\n\tparser.add_argument(\"-a\", \"--add\", action=\"store_true\", help=\"add the files\")\n\tparser.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s {}\".format(__version__))\n\treturn parser.parse_args(*arguments)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b438b666fea644fe22cc72", "code": ["def parser_flags(parser):\n\t\"\"\"\n\tGiven an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.\n\t\"\"\"\n\tflags = \"\"\n\tfor flag in parser.flag_strings:\n\t\tflags += flag + \" \"\n\treturn flags[:-1]\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n\t\"\"\"\n\tGiven an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.\n\t\"\"\"\n\tflags = \"\"\n\tfor flag in parser.flag_strings:\n\t\tflags += flag + \" \"\n\treturn flags[:-1]\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "ques_id": "62b438b566fea644fe22cc70", "code": ["def bash_completion():\n\t\"\"\"\n\tReturn a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.\n\t\"\"\"\n\timport os\n\timport sys\n\timport glob\n\timport re\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport os\n\timport sys\n\timport glob\n\timport re\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\t"], "level": "file_runnable", "generate_results": [{"generate_code": "def bash_completion():\n\t\"\"\"\n\tReturn a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.\n\t\"\"\"\n\timport os\n\timport sys\n\timport glob\n\timport re\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport os\n\timport sys\n\timport glob\n\timport re\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\timport time\n\timport datetime\n\timport logging\n\timport traceback\n\timport shutil\n\timport os\n\timport sys\n\timport glob\n\timport shutil\n\timport pathlib\n\timport subprocess\n\timport argparse\n\timport json\n\t", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b438a266fea644fe22cc2e", "code": ["def parse_arguments(*unparsed_arguments):\n\t\"\"\"\n\tGiven command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.\n\t\"\"\"\n\t#"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n\t\"\"\"\n\tGiven command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.\n\t\"\"\"\n\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b438a266fea644fe22cc2d", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n\t\"\"\"\n\tGiven a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).\n\t\"\"\"\n\t#"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n\t\"\"\"\n\tGiven a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).\n\t\"\"\"\n\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b438a266fea644fe22cc2c", "code": ["def make_parsers():\n\t\"\"\"\n\tBuild a top-level parser and its subparsers and return them as a tuple.\n\t\"\"\"\n\tparser = argparse.ArgumentParser(description='A simple command line tool for the '\n\t\t'Python interpreter.')\n\tsubparsers = parser.add_subparsers(dest='command')\n\tsubparsers.required = True\n\tsubparsers.dest ='subcommand'\n\tsubparsers.metavar = 'COMMAND'\n\tsubparsers.help = 'Run a command'\n\tsubparsers.add_parser('help', help='Show this help message and exit.')\n\tsubparsers.add_parser('version', help='Show the version number and exit.')\n\treturn parser, subparsers\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n\t\"\"\"\n\tBuild a top-level parser and its subparsers and return them as a tuple.\n\t\"\"\"\n\tparser = argparse.ArgumentParser(description='A simple command line tool for the '\n\t\t'Python interpreter.')\n\tsubparsers = parser.add_subparsers(dest='command')\n\tsubparsers.required = True\n\tsubparsers.dest ='subcommand'\n\tsubparsers.metavar = 'COMMAND'\n\tsubparsers.help = 'Run a command'\n\tsubparsers.add_parser('help', help='Show this help message and exit.')\n\tsubparsers.add_parser('version', help='Show the version number and exit.')\n\treturn parser, subparsers\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_10.py", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "ques_id": "62ece4982e6aefcf4aabbd5f", "code": ["def paging(response, max_results):\n\t\"\"\"\n\tReturns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.\n\t\"\"\"\n\tfor page in response:\n\t\tyield page\n\t\tif len(page) >= max_results:\n\t\t\tbreak\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def paging(response, max_results):\n\t\"\"\"\n\tReturns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.\n\t\"\"\"\n\tfor page in response:\n\t\tyield page\n\t\tif len(page) >= max_results:\n\t\t\tbreak\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_20.py", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "ques_id": "62ece4982e6aefcf4aabbd60", "code": ["def size_to_bytes(size:\n\t\"\"\"\n\tConvert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000\n\t\"\"\"\n\treturn int(size)"], "level": "self_contained", "generate_results": [{"generate_code": "def size_to_bytes(size:\n\t\"\"\"\n\tConvert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000\n\t\"\"\"\n\treturn int(size)", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_14.py", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "ques_id": "62ece4982e6aefcf4aabbd61", "code": ["def _dictsum(dicts):\n\t\"\"\"\n\tCombine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}\n\t\"\"\"\n\treturn {k: sum(v.values()) for k, v in dicts.items()}\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _dictsum(dicts):\n\t\"\"\"\n\tCombine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}\n\t\"\"\"\n\treturn {k: sum(v.values()) for k, v in dicts.items()}\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_15.py", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "ques_id": "62ece4982e6aefcf4aabbd62", "code": ["def _replace_url_args(url, url_args):\n\t\"\"\"\n\tReplace any custom string URL items with values in args\n\t\"\"\"\n\tif url_args is None:\n\t\treturn url\n\tif isinstance(url_args, dict):\n\t\turl_args = url_args.copy()\n\tfor key, value in url_args.items():\n\t\tif isinstance(value, str):\n\t\t\turl_args[key] = value.format(**url_args)\n\treturn url.format(**url_args)\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_url_args(url, url_args):\n\t\"\"\"\n\tReplace any custom string URL items with values in args\n\t\"\"\"\n\tif url_args is None:\n\t\treturn url\n\tif isinstance(url_args, dict):\n\t\turl_args = url_args.copy()\n\tfor key, value in url_args.items():\n\t\tif isinstance(value, str):\n\t\t\turl_args[key] = value.format(**url_args)\n\treturn url.format(**url_args)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_5.py", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "ques_id": "62ece4982e6aefcf4aabbd63", "code": ["def is_none_string(val:\n\t\"\"\"\n\tCheck if a string represents a None value.\n\t\"\"\"\n\treturn val is None"], "level": "self_contained", "generate_results": [{"generate_code": "def is_none_string(val:\n\t\"\"\"\n\tCheck if a string represents a None value.\n\t\"\"\"\n\treturn val is None", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_1.py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "ques_id": "62ece4982e6aefcf4aabbd64", "code": ["def strip_root(path, root):\n\t\"\"\"\n\tRemove root from path, throw exception on failure.\n\t\"\"\"\n\tif not path.startswith(root):\n\t\traise ValueError(\"path must start with %r\" % root)\n\treturn path[len(root):]\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def strip_root(path, root):\n\t\"\"\"\n\tRemove root from path, throw exception on failure.\n\t\"\"\"\n\tif not path.startswith(root):\n\t\traise ValueError(\"path must start with %r\" % root)\n\treturn path[len(root):]\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_8.py", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62ece4982e6aefcf4aabbd65", "code": ["def parser_flags(parser):\n\t\"\"\"\n\tGiven an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.\n\t\"\"\"\n\tflags = \"\"\n\tfor flag in parser.flag_strings:\n\t\tflags += flag + \" \"\n\treturn flags[:-1]\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n\t\"\"\"\n\tGiven an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.\n\t\"\"\"\n\tflags = \"\"\n\tfor flag in parser.flag_strings:\n\t\tflags += flag + \" \"\n\treturn flags[:-1]\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_19.py", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "ques_id": "62ece4982e6aefcf4aabbd66", "code": ["def was_processed(processed, path_name, verbose):\n\t\"\"\"\n\tCheck if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.\n\t\"\"\"\n\tif verbose:\n\t\tprint(\"Checking if %s has already been processed.\" % path_name)\n\tif path_name in processed:\n\t\tif verbose:\n\t\t\tprint(\"%s has already been processed.\" % path_name)\n\t\treturn True\n\tprocessed.add(path_name)\n\treturn False\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def was_processed(processed, path_name, verbose):\n\t\"\"\"\n\tCheck if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.\n\t\"\"\"\n\tif verbose:\n\t\tprint(\"Checking if %s has already been processed.\" % path_name)\n\tif path_name in processed:\n\t\tif verbose:\n\t\t\tprint(\"%s has already been processed.\" % path_name)\n\t\treturn True\n\tprocessed.add(path_name)\n\treturn False\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_9.py", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "ques_id": "62ece4982e6aefcf4aabbd67", "code": ["def vertex3tuple(vertices):\n\t\"\"\"\n\treturn 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n"], "level": "self_contained", "generate_results": [{"generate_code": "def vertex3tuple(vertices):\n\t\"\"\"\n\treturn 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_6.py", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd68", "code": ["def int_to_string(number:\n\t\"\"\"\n\tConvert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.\n\t\"\"\"\n\treturn str(number)[::-1].rstrip('0')\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def int_to_string(number:\n\t\"\"\"\n\tConvert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.\n\t\"\"\"\n\treturn str(number)[::-1].rstrip('0')\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_12.py", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "ques_id": "62ece4982e6aefcf4aabbd69", "code": ["def _replace_register(flow_params, register_number, register_value):\n\t\"\"\"\n\tReplace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number\n\t\"\"\"\n\tfor flow in flow_params:\n\t\tif flow =='register':\n\t\t\tflow_params[flow][register_number] = register_value\n\t\telse:\n\t\t\tflow_params[flow][register_number] = flow_params[flow][register_number].replace(register_value, register_number)\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_register(flow_params, register_number, register_value):\n\t\"\"\"\n\tReplace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number\n\t\"\"\"\n\tfor flow in flow_params:\n\t\tif flow =='register':\n\t\t\tflow_params[flow][register_number] = register_value\n\t\telse:\n\t\t\tflow_params[flow][register_number] = flow_params[flow][register_number].replace(register_value, register_number)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_2.py", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "ques_id": "62ece4982e6aefcf4aabbd6a", "code": ["def replace_dots(value, arg):\n\t\"\"\"\n\tReplaces all values of '.' to arg from the given string\n\t\"\"\"\n\tif value == '.':\n\t\treturn arg\n\telse:\n\t\treturn value\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def replace_dots(value, arg):\n\t\"\"\"\n\tReplaces all values of '.' to arg from the given string\n\t\"\"\"\n\tif value == '.':\n\t\treturn arg\n\telse:\n\t\treturn value\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_3.py", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "ques_id": "62ece4982e6aefcf4aabbd6b", "code": ["def subclasses(cls):\n\t\"\"\"\n\tReturn all subclasses of a class, recursively\n\t\"\"\"\n\tsubclasses = []\n\tfor subclass in cls.__subclasses__():\n\t\tsubclasses.append(subclasses + [subclass])\n\treturn subclasses\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def subclasses(cls):\n\t\"\"\"\n\tReturn all subclasses of a class, recursively\n\t\"\"\"\n\tsubclasses = []\n\tfor subclass in cls.__subclasses__():\n\t\tsubclasses.append(subclasses + [subclass])\n\treturn subclasses\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_7.py", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd6d", "code": ["def string_to_int(string:\n\t\"\"\"\n\tConvert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.\n\t\"\"\"\n\treturn int(string[0])\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def string_to_int(string:\n\t\"\"\"\n\tConvert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.\n\t\"\"\"\n\treturn int(string[0])\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_24.py", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "ques_id": "62ece4982e6aefcf4aabbd6f", "code": ["def get_repo_archive(url:\n\t\"\"\"\n\tGiven an url and a destination path, retrieve and extract.tar.gz archive\nwhich contains 'desc' file for each package.\nEach.tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the.tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.\n\t\"\"\"\n\t#"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_repo_archive(url:\n\t\"\"\"\n\tGiven an url and a destination path, retrieve and extract.tar.gz archive\nwhich contains 'desc' file for each package.\nEach.tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the.tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.\n\t\"\"\"\n\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_20.py", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "ques_id": "62ece4982e6aefcf4aabbd70", "code": ["def os_is_mac():\n\t\"\"\"\n\tChecks if the os is macOS\n\n:return: True is macOS\n:rtype: bool\n\t\"\"\"\n\treturn platform.system() == 'Darwin'\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def os_is_mac():\n\t\"\"\"\n\tChecks if the os is macOS\n\n:return: True is macOS\n:rtype: bool\n\t\"\"\"\n\treturn platform.system() == 'Darwin'\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_14.py", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "ques_id": "62ece4982e6aefcf4aabbd71", "code": ["def regex_dict(item):\n\t\"\"\"\n\tConvert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes\n\t\"\"\"\n\tregex_keys = {}\n\tfor key, value in item.items():\n\t\tif isinstance(value, dict):\n\t\t\tregex_keys[key] = regex_dict(value)\n\t\telse:\n\t\t\tregex_keys[key] = value\n\treturn regex_keys\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def regex_dict(item):\n\t\"\"\"\n\tConvert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes\n\t\"\"\"\n\tregex_keys = {}\n\tfor key, value in item.items():\n\t\tif isinstance(value, dict):\n\t\t\tregex_keys[key] = regex_dict(value)\n\t\telse:\n\t\t\tregex_keys[key] = value\n\treturn regex_keys\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_4.py", "name": "unquote", "docstring": "Remove quote from the given name.", "ques_id": "62ece4982e6aefcf4aabbd72", "code": ["def unquote(name):\n\t\"\"\"\n\tRemove quote from the given name.\n\t\"\"\"\n\tif name[:1] == '\"' or name[-1:] == '\"':\n\t\treturn name[1:-1]\n\telse:\n\t\treturn name\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def unquote(name):\n\t\"\"\"\n\tRemove quote from the given name.\n\t\"\"\"\n\tif name[:1] == '\"' or name[-1:] == '\"':\n\t\treturn name[1:-1]\n\telse:\n\t\treturn name\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_21.py", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "ques_id": "62ece4982e6aefcf4aabbd73", "code": ["def split(s, platform='this'):\n\t\"\"\"\n\tMulti-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)\n\t\"\"\"\n\tif platform == 'this':\n\t\treturn shlex.split(s)\n\telse:\n\t\treturn shlex.split(s, posix=platform == 'posix')\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def split(s, platform='this'):\n\t\"\"\"\n\tMulti-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)\n\t\"\"\"\n\tif platform == 'this':\n\t\treturn shlex.split(s)\n\telse:\n\t\treturn shlex.split(s, posix=platform == 'posix')\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_15.py", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "ques_id": "62ece4982e6aefcf4aabbd74", "code": ["def prepare_repository_from_archive(\n    archive_path:\n\t\"\"\"\n\tGiven an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.\n\t\"\"\"\n\t#"], "level": "slib_runnable", "generate_results": [{"generate_code": "def prepare_repository_from_archive(\n    archive_path:\n\t\"\"\"\n\tGiven an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.\n\t\"\"\"\n\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_5.py", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "ques_id": "62ece4982e6aefcf4aabbd75", "code": ["def addignored(ignored):\n\t\"\"\"\n\tUse the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.\n\t\"\"\"\n\t#"], "level": "slib_runnable", "generate_results": [{"generate_code": "def addignored(ignored):\n\t\"\"\"\n\tUse the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.\n\t\"\"\"\n\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_11.py", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "ques_id": "62ece4982e6aefcf4aabbd76", "code": ["def match(filename):\n\t\"\"\"\n\tCheck if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported\n\t\"\"\"\n\tif filename.endswith(\".py\"):\n\t\treturn True\n\tif filename.endswith(\".pyc\"):\n\t\treturn True\n\tif filename.endswith(\".pyo\"):\n\t\treturn True\n\tif filename.endswith(\".so\"):\n\t\treturn True\n\tif filename.endswith(\".dylib\"):\n\t\treturn True\n\tif filename.endswith(\".dll\"):\n\t\treturn True\n\tif filename.endswith(\".exe\"):\n\t\treturn True\n\tif filename.endswith(\".msi\"):\n\t\treturn True\n\tif filename.endswith(\".msc\"):\n\t\treturn True\n\tif filename.endswith(\".o\"):\n\t\treturn True\n\tif filename.endswith(\".o.\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".pyd\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".pyo\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".so\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".dylib\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".dll\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".exe\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".msi\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".msc\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".pyd\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".pyo\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".so\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".dylib\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".dll\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".exe\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".msi\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".msc\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".o.\" + sys.platform):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".o.\" + sys.platform + \".pyd\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".o.\" + sys.platform + \".pyo\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".o.\" + sys.platform + \".so\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".o.\" + sys.platform + \".dylib\"):\n\t\treturn True\n\tif filename.endswith"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match(filename):\n\t\"\"\"\n\tCheck if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported\n\t\"\"\"\n\tif filename.endswith(\".py\"):\n\t\treturn True\n\tif filename.endswith(\".pyc\"):\n\t\treturn True\n\tif filename.endswith(\".pyo\"):\n\t\treturn True\n\tif filename.endswith(\".so\"):\n\t\treturn True\n\tif filename.endswith(\".dylib\"):\n\t\treturn True\n\tif filename.endswith(\".dll\"):\n\t\treturn True\n\tif filename.endswith(\".exe\"):\n\t\treturn True\n\tif filename.endswith(\".msi\"):\n\t\treturn True\n\tif filename.endswith(\".msc\"):\n\t\treturn True\n\tif filename.endswith(\".o\"):\n\t\treturn True\n\tif filename.endswith(\".o.\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".pyd\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".pyo\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".so\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".dylib\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".dll\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".exe\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".msi\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".msc\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".pyd\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".pyo\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".so\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".dylib\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".dll\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".exe\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".msi\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".msc\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".o.\" + sys.platform):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".o.\" + sys.platform + \".pyd\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".o.\" + sys.platform + \".pyo\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".o.\" + sys.platform + \".so\"):\n\t\treturn True\n\tif filename.endswith(\".o.\" + sys.platform + \".o.\" + sys.platform + \".o.\" + sys.platform + \".dylib\"):\n\t\treturn True\n\tif filename.endswith", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_1.py", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "ques_id": "62ece4982e6aefcf4aabbd77", "code": ["def parse_frequency(frequency):\n\t\"\"\"\n\tGiven a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.\n\t\"\"\"\n\tif frequency == \"always\":\n\t\treturn None\n\tif frequency == \"weekly\":\n\t\treturn datetime.timedelta(days=7)\n\tif frequency == \"monthly\":\n\t\treturn datetime.timedelta(days=30)\n\tif frequency == \"quarterly\":\n\t\treturn datetime.timedelta(days=90)\n\tif frequency == \"semi-annually\":\n\t\treturn datetime.timedelta(days=365)\n\tif frequency == \"semi-annually-half-year\":\n\t\treturn datetime.timedelta(days=365*2)\n\tif frequency == \"semi-annually-quarterly\":\n\t\treturn datetime.timedelta(days=365*3)\n\tif frequency == \"semi-annually-semi-quarterly\":\n\t\treturn datetime.timedelta(days=365*4)\n\tif frequency == \"semi-annually-semi-annually\":\n\t\treturn datetime.timedelta(days=365*5)\n\tif frequency == \"semi-annually-semi-annually-half-year\":\n\t\treturn datetime.timedelta(days=365*6)\n\tif frequency == \"semi-annually-semi-annually-quarterly-half-year\":\n\t\treturn datetime.timedelta(days=365*7)\n\tif frequency == \"semi-annually-semi-annually-quarterly-quarterly\":\n\t\treturn datetime.timedelta(days=365*8)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-quarterly\":\n\t\treturn datetime.timedelta(days=365*9)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-annually\":\n\t\treturn datetime.timedelta(days=365*10)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-annually-half-year\":\n\t\treturn datetime.timedelta(days=365*11)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-annually-quarterly-half-year\":\n\t\treturn datetime.timedelta(days=365*12)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-annually-quarterly-quarterly\":\n\t\treturn datetime.timedelta(days=365*13)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-annually-quarterly-semi-annually\":\n\t\treturn datetime.timedelta(days=365*14)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-annually-quarterly-semi-annually\":\n\t\treturn datetime.timedelta(days=365*15)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-annually-quarterly-semi-annually-half-year\":\n\t\treturn datetime.timedelta(days=365*16)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-annually-quarterly-semi-annually-quarterly\":\n\t\treturn datetime.timedelta(days=365*17)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-annually-quarterly-semi-annually-half-year\":\n\t\treturn datetime.timedelta(days=365*18)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-annually-quarterly-semi-annually-quarterly\":\n\t\treturn datetime.timedelta(days=365*19)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi"], "level": "slib_runnable", "generate_results": [{"generate_code": "def parse_frequency(frequency):\n\t\"\"\"\n\tGiven a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.\n\t\"\"\"\n\tif frequency == \"always\":\n\t\treturn None\n\tif frequency == \"weekly\":\n\t\treturn datetime.timedelta(days=7)\n\tif frequency == \"monthly\":\n\t\treturn datetime.timedelta(days=30)\n\tif frequency == \"quarterly\":\n\t\treturn datetime.timedelta(days=90)\n\tif frequency == \"semi-annually\":\n\t\treturn datetime.timedelta(days=365)\n\tif frequency == \"semi-annually-half-year\":\n\t\treturn datetime.timedelta(days=365*2)\n\tif frequency == \"semi-annually-quarterly\":\n\t\treturn datetime.timedelta(days=365*3)\n\tif frequency == \"semi-annually-semi-quarterly\":\n\t\treturn datetime.timedelta(days=365*4)\n\tif frequency == \"semi-annually-semi-annually\":\n\t\treturn datetime.timedelta(days=365*5)\n\tif frequency == \"semi-annually-semi-annually-half-year\":\n\t\treturn datetime.timedelta(days=365*6)\n\tif frequency == \"semi-annually-semi-annually-quarterly-half-year\":\n\t\treturn datetime.timedelta(days=365*7)\n\tif frequency == \"semi-annually-semi-annually-quarterly-quarterly\":\n\t\treturn datetime.timedelta(days=365*8)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-quarterly\":\n\t\treturn datetime.timedelta(days=365*9)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-annually\":\n\t\treturn datetime.timedelta(days=365*10)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-annually-half-year\":\n\t\treturn datetime.timedelta(days=365*11)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-annually-quarterly-half-year\":\n\t\treturn datetime.timedelta(days=365*12)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-annually-quarterly-quarterly\":\n\t\treturn datetime.timedelta(days=365*13)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-annually-quarterly-semi-annually\":\n\t\treturn datetime.timedelta(days=365*14)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-annually-quarterly-semi-annually\":\n\t\treturn datetime.timedelta(days=365*15)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-annually-quarterly-semi-annually-half-year\":\n\t\treturn datetime.timedelta(days=365*16)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-annually-quarterly-semi-annually-quarterly\":\n\t\treturn datetime.timedelta(days=365*17)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-annually-quarterly-semi-annually-half-year\":\n\t\treturn datetime.timedelta(days=365*18)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi-annually-quarterly-semi-annually-quarterly\":\n\t\treturn datetime.timedelta(days=365*19)\n\tif frequency == \"semi-annually-semi-annually-quarterly-semi", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_18.py", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "ques_id": "62ece4992e6aefcf4aabbd78", "code": ["def is_local(host):\n\t\"\"\"\n\tChecks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost\n\t\"\"\"\n\treturn host == 'localhost' or host == '127.0.0.1' or host == '::1' or host == '::ffff:127.0.0.1'"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_local(host):\n\t\"\"\"\n\tChecks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost\n\t\"\"\"\n\treturn host == 'localhost' or host == '127.0.0.1' or host == '::1' or host == '::ffff:127.0.0.1'", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_8.py", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "ques_id": "62ece4992e6aefcf4aabbd79", "code": ["def make_find_paths(find_paths):\n\t\"\"\"\n\tGiven a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']\n\t\"\"\"\n\tif isinstance(find_paths, str):\n\t\tfind_paths = [find_paths]\n\tfor path in find_paths:\n\t\tfor pattern in path.split(':'):\n\t\t\tyield pattern\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def make_find_paths(find_paths):\n\t\"\"\"\n\tGiven a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']\n\t\"\"\"\n\tif isinstance(find_paths, str):\n\t\tfind_paths = [find_paths]\n\tfor path in find_paths:\n\t\tfor pattern in path.split(':'):\n\t\t\tyield pattern\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_19.py", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "ques_id": "62ece4992e6aefcf4aabbd7a", "code": ["def is_gitbash():\n\t\"\"\"\n\treturns True if you run in a Windows gitbash\n\n:return: True if gitbash\n\t\"\"\"\n\treturn os.path.exists('/bin/git')\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_gitbash():\n\t\"\"\"\n\treturns True if you run in a Windows gitbash\n\n:return: True if gitbash\n\t\"\"\"\n\treturn os.path.exists('/bin/git')\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_9.py", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "ques_id": "62ece4992e6aefcf4aabbd7b", "code": ["def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n\t\"\"\"\n\tGiven a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.\n\t\"\"\"\n\tif not os.path.exists(config_filename):\n\t\tif not overwrite:\n\t\t\traise Exception(\"Config file %s does not exist\" % config_filename)\n\t\telse:\n\t\t\treturn\n\tif os.path.isfile(config_filename):\n\t\tif not overwrite:\n\t\t\traise Exception(\"Config file %s already exists\" % config_filename)\n\t\telse:\n\t\t\treturn\n\twith open(config_filename, 'w') as f:\n\t\tyaml.dump(rendered_config, f, default_flow_style=False)\n\tif mode == 0o600:\n\t\tos.chmod(config_filename, mode)\n\telse:\n\t\tos.chmod(config_filename, mode)\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n\t\"\"\"\n\tGiven a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.\n\t\"\"\"\n\tif not os.path.exists(config_filename):\n\t\tif not overwrite:\n\t\t\traise Exception(\"Config file %s does not exist\" % config_filename)\n\t\telse:\n\t\t\treturn\n\tif os.path.isfile(config_filename):\n\t\tif not overwrite:\n\t\t\traise Exception(\"Config file %s already exists\" % config_filename)\n\t\telse:\n\t\t\treturn\n\twith open(config_filename, 'w') as f:\n\t\tyaml.dump(rendered_config, f, default_flow_style=False)\n\tif mode == 0o600:\n\t\tos.chmod(config_filename, mode)\n\telse:\n\t\tos.chmod(config_filename, mode)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_22.py", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "ques_id": "62ece4992e6aefcf4aabbd7c", "code": ["def oneline(script, seperator=\" && \"):\n\t\"\"\"\n\tconverts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:\n\t\"\"\"\n\treturn script.replace(\"\\n\", seperator)\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def oneline(script, seperator=\" && \"):\n\t\"\"\"\n\tconverts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:\n\t\"\"\"\n\treturn script.replace(\"\\n\", seperator)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_16.py", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "ques_id": "62ece4992e6aefcf4aabbd7d", "code": ["def subprocess_run_helper(func, *args, timeout, extra_env=None):\n\t\"\"\"\n\tRun a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.\n\t\"\"\"\n\tif extra_env is None:\n\t\textra_env = {}\n\tenv = os.environ.copy()\n\tenv.update(extra_env)\n\treturn subprocess.run(\n\t\t[sys.executable, \"-c\", \"import %s; %s\" % (func.__module__, func.__name__)],\n\t\tenv=env,\n\t\tstdout=subprocess.PIPE,\n\t\tstderr=subprocess.STDOUT,\n\t\ttimeout=timeout,\n\t)\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n\t\"\"\"\n\tRun a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.\n\t\"\"\"\n\tif extra_env is None:\n\t\textra_env = {}\n\tenv = os.environ.copy()\n\tenv.update(extra_env)\n\treturn subprocess.run(\n\t\t[sys.executable, \"-c\", \"import %s; %s\" % (func.__module__, func.__name__)],\n\t\tenv=env,\n\t\tstdout=subprocess.PIPE,\n\t\tstderr=subprocess.STDOUT,\n\t\ttimeout=timeout,\n\t)\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_6.py", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "ques_id": "62ece4992e6aefcf4aabbd7e", "code": ["def _resolve_string(matcher):\n\t\"\"\"\n\tGet the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.\n\t\"\"\"\n\tif matcher.name in os.environ:\n\t\treturn os.environ[matcher.name]\n\telse:\n\t\traise EnvironmentError(f\"Environment variable {matcher.name} not defined.\")\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _resolve_string(matcher):\n\t\"\"\"\n\tGet the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.\n\t\"\"\"\n\tif matcher.name in os.environ:\n\t\treturn os.environ[matcher.name]\n\telse:\n\t\traise EnvironmentError(f\"Environment variable {matcher.name} not defined.\")\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_2.py", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "ques_id": "62ece4992e6aefcf4aabbd7f", "code": ["def _parse_image_ref(image_href:\n\t\"\"\"\n\tParse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:\n\t\"\"\"\n\tif not image_href:\n\t\traise ValueError(\"Invalid image_href\")\n\n\tparts = image_href.split('/')\n\tif parts[-1]!= 'image':\n\t\traise ValueError(\"Invalid image_href\")\n\n\timage_id = parts[-2]\n\tnetloc = '.'.join(parts[-3:])\n\n\treturn (image_id, netloc, use_ssl)"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _parse_image_ref(image_href:\n\t\"\"\"\n\tParse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:\n\t\"\"\"\n\tif not image_href:\n\t\traise ValueError(\"Invalid image_href\")\n\n\tparts = image_href.split('/')\n\tif parts[-1]!= 'image':\n\t\traise ValueError(\"Invalid image_href\")\n\n\timage_id = parts[-2]\n\tnetloc = '.'.join(parts[-3:])\n\n\treturn (image_id, netloc, use_ssl)", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_13.py", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "ques_id": "62ece4992e6aefcf4aabbd80", "code": ["def remove_ending_os_sep(input_list):\n\t\"\"\"\n\tIterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError\n\t\"\"\"\n\tif not isinstance(input_list, list):\n\t\traise TypeError(\"input_list must be a list\")\n\tif not input_list:\n\t\traise TypeError(\"input_list cannot be empty\")\n\tif not all(isinstance(x, str) for x in input_list):\n\t\traise TypeError(\"input_list must be a list of strings\")\n\tif not all(len(x) > 1 for x in input_list):\n\t\traise TypeError(\"input_list must be a list of strings\")\n\tif not all(x.endswith(os.pathsep) for x in input_list):\n\t\traise TypeError(\"input_list must be a list of strings\")\n\tif not all(x.startswith(os.pathsep) for x in input_list):\n\t\traise TypeError(\"input_list must be a list of strings\")\n\treturn [x[1:] for x in input_list]\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def remove_ending_os_sep(input_list):\n\t\"\"\"\n\tIterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError\n\t\"\"\"\n\tif not isinstance(input_list, list):\n\t\traise TypeError(\"input_list must be a list\")\n\tif not input_list:\n\t\traise TypeError(\"input_list cannot be empty\")\n\tif not all(isinstance(x, str) for x in input_list):\n\t\traise TypeError(\"input_list must be a list of strings\")\n\tif not all(len(x) > 1 for x in input_list):\n\t\traise TypeError(\"input_list must be a list of strings\")\n\tif not all(x.endswith(os.pathsep) for x in input_list):\n\t\traise TypeError(\"input_list must be a list of strings\")\n\tif not all(x.startswith(os.pathsep) for x in input_list):\n\t\traise TypeError(\"input_list must be a list of strings\")\n\treturn [x[1:] for x in input_list]\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_17.py", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "ques_id": "62ece4992e6aefcf4aabbd82", "code": ["def get_pattern(pattern, strip=True):\n\t\"\"\"\n\tThis method converts the given string to regex pattern\n\t\"\"\"\n\tif strip:\n\t\tpattern = pattern.strip()\n\treturn re.compile(pattern)\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_pattern(pattern, strip=True):\n\t\"\"\"\n\tThis method converts the given string to regex pattern\n\t\"\"\"\n\tif strip:\n\t\tpattern = pattern.strip()\n\treturn re.compile(pattern)\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_7.py", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62ece4992e6aefcf4aabbd83", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n\t\"\"\"\n\tCall the given command(s).\n\t\"\"\"\n\tassert isinstance(commands, list)\n\tsuccess = True\n\tfor index, cmd in enumerate(commands):\n\t\ttry:\n\t\t\tout = run_command(cmd, args, cwd=cwd, verbose=verbose, hide_stderr=hide_stderr, env=env)\n\t\t\tsuccess = success and out.returncode == 0\n\t\texcept Exception as e:\n\t\t\tout = e\n\t\t\tsuccess = False\n\t\t\tif hide_stderr:\n\t\t\t\t_stderr_level_traceback(e, out)\n\t\tif success:\n\t\t\tbreak\n\treturn success, out"], "level": "slib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n\t\"\"\"\n\tCall the given command(s).\n\t\"\"\"\n\tassert isinstance(commands, list)\n\tsuccess = True\n\tfor index, cmd in enumerate(commands):\n\t\ttry:\n\t\t\tout = run_command(cmd, args, cwd=cwd, verbose=verbose, hide_stderr=hide_stderr, env=env)\n\t\t\tsuccess = success and out.returncode == 0\n\t\texcept Exception as e:\n\t\t\tout = e\n\t\t\tsuccess = False\n\t\t\tif hide_stderr:\n\t\t\t\t_stderr_level_traceback(e, out)\n\t\tif success:\n\t\t\tbreak\n\treturn success, out", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_4.py", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "ques_id": "62ece4992e6aefcf4aabbd84", "code": ["def is_ipv4(target):\n\t\"\"\"\n\tTest if IPv4 address or not\n    \n\t\"\"\"\n\ttry:\n\t\tsocket.inet_pton(socket.AF_INET, target)\n\t\treturn True\n\texcept socket.error:\n\t\treturn False\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def is_ipv4(target):\n\t\"\"\"\n\tTest if IPv4 address or not\n    \n\t\"\"\"\n\ttry:\n\t\tsocket.inet_pton(socket.AF_INET, target)\n\t\treturn True\n\texcept socket.error:\n\t\treturn False\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_11.py", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "ques_id": "62ece4992e6aefcf4aabbd85", "code": ["def find_roots(\n    graph:\n\t\"\"\"\n\tFind the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader\n\t\"\"\"\n\treturn set(graph.subjects(predicate=rdflib.RDFS.subClassOf, object=True))\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_roots(\n    graph:\n\t\"\"\"\n\tFind the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader\n\t\"\"\"\n\treturn set(graph.subjects(predicate=rdflib.RDFS.subClassOf, object=True))\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_1.py", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "ques_id": "62ece4992e6aefcf4aabbd86", "code": ["def _dump_string(obj, dumper=None):\n\t\"\"\"\n\tDump to a py2-unicode or py3-string\n\t\"\"\"\n\tif isinstance(obj, str):\n\t\treturn obj\n\tif isinstance(obj, bytes):\n\t\treturn obj.decode('utf-8')\n\tif isinstance(obj, dict):\n\t\treturn dict([(k, _dump_string(v, dumper=dumper)) for k, v in obj.items()])\n\tif isinstance(obj, list):\n\t\treturn [_dump_string(v, dumper=dumper) for v in obj]\n\tif isinstance(obj, tuple):\n\t\treturn tuple([_dump_string(v, dumper=dumper) for v in obj])\n\tif isinstance(obj, set):\n\t\treturn set([_dump_string(v, dumper=dumper) for v in obj])\n\tif isinstance(obj, frozenset):\n\t\treturn frozenset([_dump_string(v, dumper=dumper) for v in obj])\n\tif isinstance(obj, int):\n\t\treturn str(obj)\n\tif isinstance(obj, float):\n\t\treturn str(obj)\n\tif isinstance(obj, complex):\n\t\treturn str(obj)\n\tif isinstance(obj, datetime):\n\t\treturn obj.isoformat()\n\tif isinstance(obj, date):\n\t\treturn obj.isoformat()\n\tif isinstance(obj, time):\n\t\treturn obj.isoformat()\n\tif isinstance(obj, timedelta):\n\t\treturn obj.isoformat()\n\tif isinstance(obj, uuid.UUID):\n\t\treturn str(obj)\n\tif isinstance(obj, bytes):\n\t\treturn obj.decode('utf-8')\n\tif isinstance(obj, str):\n\t\treturn obj\n\tif isinstance(obj, dict):\n\t\treturn dict([(k, _dump_string(v, dumper=dumper)) for k, v in obj.items()])\n\tif isinstance(obj, list):\n\t\treturn [_dump_string(v, dumper=dumper) for v in obj]\n\tif isinstance(obj, tuple):\n\t\treturn tuple([_dump_string(v, dumper=dumper) for v in obj])\n\tif isinstance(obj, set):\n\t\treturn set([_dump_string(v, dumper=dumper) for v in obj])\n\tif isinstance(obj, frozenset):\n\t\treturn frozenset([_dump_string(v, dumper=dumper) for v in obj])\n\tif isinstance(obj, int):\n\t\treturn str(obj)\n\tif isinstance(obj, float):\n\t\treturn str(obj)\n\tif isinstance(obj, complex):\n\t\treturn str(obj)\n\tif isinstance(obj, datetime):\n\t\treturn obj.isoformat()\n\tif isinstance(obj, date):\n\t\treturn obj.isoformat()\n\tif isinstance(obj, time):\n\t\treturn obj.isoformat()\n\tif isinstance(obj, timedelta):\n\t\treturn obj.isoformat()\n\tif isinstance(obj, uuid.UUID):\n\t\treturn str(obj)\n\tif isinstance(obj, bytes):\n\t\treturn obj.decode('utf-8')\n\tif isinstance(obj, str):\n\t\treturn obj\n\tif isinstance(obj, dict):\n\t\treturn dict([(k, _dump_string(v, dumper=dumper)) for k, v in obj.items()])\n\tif isinstance(obj, list):\n\t\treturn [_dump_string(v, dumper=dumper) for v in obj]\n\tif isinstance(obj, tuple):\n\t\treturn tuple([_dump_string(v, dumper=dumper) for v in obj])\n\tif isinstance(obj, set):\n\t\treturn set([_dump_string(v, dumper=dumper) for v in obj])\n\tif isinstance(obj, frozenset):\n\t\treturn frozenset([_dump_string(v, dumper=dumper) for v in obj])\n\tif isinstance(obj, int):\n\t\treturn str(obj)\n\tif isinstance(obj, float):\n\t\treturn str(obj)\n\tif isinstance(obj, complex):\n\t\treturn str(obj)\n\tif isinstance(obj, datetime"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _dump_string(obj, dumper=None):\n\t\"\"\"\n\tDump to a py2-unicode or py3-string\n\t\"\"\"\n\tif isinstance(obj, str):\n\t\treturn obj\n\tif isinstance(obj, bytes):\n\t\treturn obj.decode('utf-8')\n\tif isinstance(obj, dict):\n\t\treturn dict([(k, _dump_string(v, dumper=dumper)) for k, v in obj.items()])\n\tif isinstance(obj, list):\n\t\treturn [_dump_string(v, dumper=dumper) for v in obj]\n\tif isinstance(obj, tuple):\n\t\treturn tuple([_dump_string(v, dumper=dumper) for v in obj])\n\tif isinstance(obj, set):\n\t\treturn set([_dump_string(v, dumper=dumper) for v in obj])\n\tif isinstance(obj, frozenset):\n\t\treturn frozenset([_dump_string(v, dumper=dumper) for v in obj])\n\tif isinstance(obj, int):\n\t\treturn str(obj)\n\tif isinstance(obj, float):\n\t\treturn str(obj)\n\tif isinstance(obj, complex):\n\t\treturn str(obj)\n\tif isinstance(obj, datetime):\n\t\treturn obj.isoformat()\n\tif isinstance(obj, date):\n\t\treturn obj.isoformat()\n\tif isinstance(obj, time):\n\t\treturn obj.isoformat()\n\tif isinstance(obj, timedelta):\n\t\treturn obj.isoformat()\n\tif isinstance(obj, uuid.UUID):\n\t\treturn str(obj)\n\tif isinstance(obj, bytes):\n\t\treturn obj.decode('utf-8')\n\tif isinstance(obj, str):\n\t\treturn obj\n\tif isinstance(obj, dict):\n\t\treturn dict([(k, _dump_string(v, dumper=dumper)) for k, v in obj.items()])\n\tif isinstance(obj, list):\n\t\treturn [_dump_string(v, dumper=dumper) for v in obj]\n\tif isinstance(obj, tuple):\n\t\treturn tuple([_dump_string(v, dumper=dumper) for v in obj])\n\tif isinstance(obj, set):\n\t\treturn set([_dump_string(v, dumper=dumper) for v in obj])\n\tif isinstance(obj, frozenset):\n\t\treturn frozenset([_dump_string(v, dumper=dumper) for v in obj])\n\tif isinstance(obj, int):\n\t\treturn str(obj)\n\tif isinstance(obj, float):\n\t\treturn str(obj)\n\tif isinstance(obj, complex):\n\t\treturn str(obj)\n\tif isinstance(obj, datetime):\n\t\treturn obj.isoformat()\n\tif isinstance(obj, date):\n\t\treturn obj.isoformat()\n\tif isinstance(obj, time):\n\t\treturn obj.isoformat()\n\tif isinstance(obj, timedelta):\n\t\treturn obj.isoformat()\n\tif isinstance(obj, uuid.UUID):\n\t\treturn str(obj)\n\tif isinstance(obj, bytes):\n\t\treturn obj.decode('utf-8')\n\tif isinstance(obj, str):\n\t\treturn obj\n\tif isinstance(obj, dict):\n\t\treturn dict([(k, _dump_string(v, dumper=dumper)) for k, v in obj.items()])\n\tif isinstance(obj, list):\n\t\treturn [_dump_string(v, dumper=dumper) for v in obj]\n\tif isinstance(obj, tuple):\n\t\treturn tuple([_dump_string(v, dumper=dumper) for v in obj])\n\tif isinstance(obj, set):\n\t\treturn set([_dump_string(v, dumper=dumper) for v in obj])\n\tif isinstance(obj, frozenset):\n\t\treturn frozenset([_dump_string(v, dumper=dumper) for v in obj])\n\tif isinstance(obj, int):\n\t\treturn str(obj)\n\tif isinstance(obj, float):\n\t\treturn str(obj)\n\tif isinstance(obj, complex):\n\t\treturn str(obj)\n\tif isinstance(obj, datetime", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_8.py", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "ques_id": "62ece4992e6aefcf4aabbd87", "code": ["def build_app_logger(name='app', logfile='app.log', debug=True):\n\t\"\"\"\n\tGeneral purpose application logger. Useful mainly for debugging\n\t\"\"\"\n\timport logging\n\timport os\n\timport sys\n\timport time\n\timport logging.handlers\n\timport logging.config\n\timport logging.handlers\n\timport logging.config\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging"], "level": "plib_runnable", "generate_results": [{"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n\t\"\"\"\n\tGeneral purpose application logger. Useful mainly for debugging\n\t\"\"\"\n\timport logging\n\timport os\n\timport sys\n\timport time\n\timport logging.handlers\n\timport logging.config\n\timport logging.handlers\n\timport logging.config\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging.handlers\n\timport logging", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_6.py", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "ques_id": "62ece4992e6aefcf4aabbd88", "code": ["def make_array(shape, dtype=np.dtype(\"float32\")):\n\t\"\"\"\n\tFunction to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create\n\t\"\"\"\n\treturn np.zeros(shape, dtype=dtype)\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n\t\"\"\"\n\tFunction to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create\n\t\"\"\"\n\treturn np.zeros(shape, dtype=dtype)\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "plib_runnable/test_2.py", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "ques_id": "62ece4992e6aefcf4aabbd89", "code": ["def gaussian(x):\n\t\"\"\"\n\tGaussian centered around 0.2 with a sigma of 0.1.\n\t\"\"\"\n\treturn np.exp(-(x-0.2)**2/(2*0.1**2))\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def gaussian(x):\n\t\"\"\"\n\tGaussian centered around 0.2 with a sigma of 0.1.\n\t\"\"\"\n\treturn np.exp(-(x-0.2)**2/(2*0.1**2))\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "plib_runnable/test_13.py", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "ques_id": "62ece4992e6aefcf4aabbd8a", "code": ["def load_configurations(config_filenames, overrides=None, resolve_env=True):\n\t\"\"\"\n\tGiven a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.\n\t\"\"\"\n\tconfigs = {}\n\tfor config_filename in config_filenames:\n\t\ttry:\n\t\t\tconfig = load_configuration(config_filename, overrides=overrides, resolve_env=resolve_env)\n\t\texcept Exception as e:\n\t\t\tlogging.error(f\"Failed to load configuration file {config_filename}: {e}\")\n\t\t\tcontinue\n\t\tconfigs[config_filename] = config\n\treturn configs, config_filenames"], "level": "plib_runnable", "generate_results": [{"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n\t\"\"\"\n\tGiven a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.\n\t\"\"\"\n\tconfigs = {}\n\tfor config_filename in config_filenames:\n\t\ttry:\n\t\t\tconfig = load_configuration(config_filename, overrides=overrides, resolve_env=resolve_env)\n\t\texcept Exception as e:\n\t\t\tlogging.error(f\"Failed to load configuration file {config_filename}: {e}\")\n\t\t\tcontinue\n\t\tconfigs[config_filename] = config\n\treturn configs, config_filenames", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_3.py", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "ques_id": "62ece4992e6aefcf4aabbd8b", "code": ["def force_string(obj):\n\t\"\"\"\n\tThis function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. \n\t\"\"\"\n\tif isinstance(obj, bytes):\n\t\treturn obj.decode('utf-8')\n\telse:\n\t\treturn obj\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def force_string(obj):\n\t\"\"\"\n\tThis function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. \n\t\"\"\"\n\tif isinstance(obj, bytes):\n\t\treturn obj.decode('utf-8')\n\telse:\n\t\treturn obj\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "ques_id": "62e60723d76274f8a4026b76", "code": ["def from_ticks(cls, ticks, tz=None):\n\t\"\"\"\n\tCreate a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)\n\t\"\"\"\n\tif ticks < 0:\n\t\traise ValueError(\"ticks must be positive\")\n\tif ticks < 86400000000000:\n\t\treturn cls(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"], "level": "file_runnable", "generate_results": [{"generate_code": "def from_ticks(cls, ticks, tz=None):\n\t\"\"\"\n\tCreate a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)\n\t\"\"\"\n\tif ticks < 0:\n\t\traise ValueError(\"ticks must be positive\")\n\tif ticks < 86400000000000:\n\t\treturn cls(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60873d76274f8a4026bd8", "code": ["def protocol_handlers(cls, protocol_version=None):\n\t\"\"\"\n\tReturn a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple\n\t\"\"\"\n\tif protocol_version is None:\n\t\treturn cls.protocol_handlers()\n\telif isinstance(protocol_version, tuple):\n\t\tif len(protocol_version) == 1:\n\t\t\treturn cls.protocol_handlers(protocol_version[0])\n\t\telse:\n\t\t\treturn {version: cls.protocol_handlers(version)\n\t\t\t\t\tfor version in protocol_version}\n\telse:\n\t\traise TypeError(\"protocol_version must be a tuple of length 1 or None\")\n\nclass BoltProtocol(object):\n\t\"\"\"\n\tA Bolt protocol is a set of commands that can be sent to a\n\tserver. It is a subclass of a class that implements the\n\tprotocol protocol.\n\t\"\"\"\n\tdef __init__(self, protocol_version=None):\n\t\t\"\"\"\n\t\t:param protocol_version: tuple identifying a specific protocol\n\t\t\tversion (e.g. (3, 5)) or None\n\t\t:raise TypeError: if protocol version is not passed in a tuple\n\t\t\"\"\"\n\t\tself.protocol_version = protocol_version\n\t\tself.protocol_handlers = protocol_handlers(protocol_version)\n\n\tdef __call__(self, command, *args, **kwargs):\n\t\t\"\"\"\n\t\t:param command: command to be sent to the server\n\t\t:param args: arguments to be passed to the command\n\t\t:param kwargs: keyword arguments to be passed to the command\n\t\t:return: the result of the command\n\t\t:raise TypeError: if command is not a string\n\t\t\"\"\"\n\t\tif not isinstance(command, str):\n\t\t\traise TypeError(\"command must be a string\")\n\t\treturn self.protocol_handlers[self.protocol_version](command, *args, **kwargs)\n\nclass BoltProtocolHandler(object):\n\t\"\"\"\n\tA Bolt protocol handler is a set of commands that can be sent to a\n\tserver. It is a subclass of a class that implements the\n\tprotocol protocol.\n\t\"\"\"\n\tdef __init__(self, protocol_version=None):\n\t\t\"\"\"\n\t\t:param protocol_version: tuple identifying a specific protocol\n\t\t\tversion (e.g. (3, 5)) or None\n\t\t:raise TypeError: if protocol version is not passed in a tuple\n\t\t\"\"\"\n\t\tself.protocol_version = protocol_version\n\t\tself.protocol_handlers = protocol_handlers(protocol_version)\n\n\tdef __call__(self, command, *args, **kwargs):\n\t\t\"\"\"\n\t\t:param command: command to be sent to the server\n\t\t:param args: arguments to be passed to the command\n\t\t:param kwargs: keyword arguments to be passed to the command\n\t\t:return: the result of the command\n\t\t:raise TypeError: if command is not a string\n\t\t\"\"\"\n\t\tif not isinstance(command, str):\n\t\t\traise TypeError(\"command must be a string\")\n\t\treturn self.protocol_handlers[self.protocol_version](command, *args, **kwargs)\n\nclass BoltProtocolHandlerFactory(object):\n\t\"\"\"\n\tA factory for Bolt protocol handlers.\n\t\"\"\"\n\tdef __init__(self, protocol_version=None):\n\t\t\"\"\"\n\t\t:param protocol_version: tuple identifying a specific protocol\n\t\t\tversion (e.g. (3, 5)) or None\n\t\t:raise TypeError: if protocol version is not passed in a tuple\n\t\t\"\"\"\n\t\tself.protocol_version = protocol_version\n\t\tself.protocol_handlers = protocol_handlers(protocol_version)\n\n\tdef create_protocol_handler(self, protocol_version=None):\n\t\t\"\"\"\n\t\t:param protocol_version: tuple identifying a specific protocol\n\t\t\tversion (e.g. (3, 5)) or None\n\t\t:return: a Bolt protocol handler\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n\t\"\"\"\n\tReturn a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple\n\t\"\"\"\n\tif protocol_version is None:\n\t\treturn cls.protocol_handlers()\n\telif isinstance(protocol_version, tuple):\n\t\tif len(protocol_version) == 1:\n\t\t\treturn cls.protocol_handlers(protocol_version[0])\n\t\telse:\n\t\t\treturn {version: cls.protocol_handlers(version)\n\t\t\t\t\tfor version in protocol_version}\n\telse:\n\t\traise TypeError(\"protocol_version must be a tuple of length 1 or None\")\n\nclass BoltProtocol(object):\n\t\"\"\"\n\tA Bolt protocol is a set of commands that can be sent to a\n\tserver. It is a subclass of a class that implements the\n\tprotocol protocol.\n\t\"\"\"\n\tdef __init__(self, protocol_version=None):\n\t\t\"\"\"\n\t\t:param protocol_version: tuple identifying a specific protocol\n\t\t\tversion (e.g. (3, 5)) or None\n\t\t:raise TypeError: if protocol version is not passed in a tuple\n\t\t\"\"\"\n\t\tself.protocol_version = protocol_version\n\t\tself.protocol_handlers = protocol_handlers(protocol_version)\n\n\tdef __call__(self, command, *args, **kwargs):\n\t\t\"\"\"\n\t\t:param command: command to be sent to the server\n\t\t:param args: arguments to be passed to the command\n\t\t:param kwargs: keyword arguments to be passed to the command\n\t\t:return: the result of the command\n\t\t:raise TypeError: if command is not a string\n\t\t\"\"\"\n\t\tif not isinstance(command, str):\n\t\t\traise TypeError(\"command must be a string\")\n\t\treturn self.protocol_handlers[self.protocol_version](command, *args, **kwargs)\n\nclass BoltProtocolHandler(object):\n\t\"\"\"\n\tA Bolt protocol handler is a set of commands that can be sent to a\n\tserver. It is a subclass of a class that implements the\n\tprotocol protocol.\n\t\"\"\"\n\tdef __init__(self, protocol_version=None):\n\t\t\"\"\"\n\t\t:param protocol_version: tuple identifying a specific protocol\n\t\t\tversion (e.g. (3, 5)) or None\n\t\t:raise TypeError: if protocol version is not passed in a tuple\n\t\t\"\"\"\n\t\tself.protocol_version = protocol_version\n\t\tself.protocol_handlers = protocol_handlers(protocol_version)\n\n\tdef __call__(self, command, *args, **kwargs):\n\t\t\"\"\"\n\t\t:param command: command to be sent to the server\n\t\t:param args: arguments to be passed to the command\n\t\t:param kwargs: keyword arguments to be passed to the command\n\t\t:return: the result of the command\n\t\t:raise TypeError: if command is not a string\n\t\t\"\"\"\n\t\tif not isinstance(command, str):\n\t\t\traise TypeError(\"command must be a string\")\n\t\treturn self.protocol_handlers[self.protocol_version](command, *args, **kwargs)\n\nclass BoltProtocolHandlerFactory(object):\n\t\"\"\"\n\tA factory for Bolt protocol handlers.\n\t\"\"\"\n\tdef __init__(self, protocol_version=None):\n\t\t\"\"\"\n\t\t:param protocol_version: tuple identifying a specific protocol\n\t\t\tversion (e.g. (3, 5)) or None\n\t\t:raise TypeError: if protocol version is not passed in a tuple\n\t\t\"\"\"\n\t\tself.protocol_version = protocol_version\n\t\tself.protocol_handlers = protocol_handlers(protocol_version)\n\n\tdef create_protocol_handler(self, protocol_version=None):\n\t\t\"\"\"\n\t\t:param protocol_version: tuple identifying a specific protocol\n\t\t\tversion (e.g. (3, 5)) or None\n\t\t:return: a Bolt protocol handler\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "ques_id": "62e60e3bd76274f8a4026d1a", "code": ["def from_raw_values(cls, values):\n\t\"\"\"\n\tCreate a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]\n\t\"\"\"\n\treturn cls(values)\n\nclass Bookmarks(object):\n\t\"\"\"\n\tA Bookmarks object represents a list of bookmarks.\n\t\"\"\"\n\tdef __init__(self, values):\n\t\t\"\"\"\n\t\tCreate a Bookmarks object from a list of raw bookmarks.\n\n\t\t:param values: ASCII string values (raw bookmarks)\n\t\t:type values: Iterable[str]\n\t\t\"\"\"\n\t\tself.values = values\n\n\tdef __repr__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the Bookmarks object.\n\n\t\t:return: A string representation of the Bookmarks object\n\t\t:rtype: str\n\t\t\"\"\"\n\t\treturn 'Bookmarks(%s)' % ', '.join(self.values)\n\n\tdef __str__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the Bookmarks object.\n\n\t\t:return: A string representation of the Bookmarks object\n\t\t:rtype: str\n\t\t\"\"\"\n\t\treturn 'Bookmarks(%s)' % ', '.join(self.values)\n\n\tdef __eq__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the Bookmarks object is equal to the other Bookmarks\n\t\tobject.\n\n\t\t:param other: Another Bookmarks object\n\t\t:type other: Bookmarks\n\t\t:return: True if the Bookmarks object is equal to the other Bookmarks\n\t\t:rtype: bool\n\t\t\"\"\"\n\t\tif not isinstance(other, Bookmarks):\n\t\t\treturn False\n\t\treturn self.values == other.values\n\n\tdef __ne__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the Bookmarks object is not equal to the other Bookmarks\n\t\tobject.\n\n\t\t:param other: Another Bookmarks object\n\t\t:type other: Bookmarks\n\t\t:return: True if the Bookmarks object is not equal to the other Bookmarks\n\t\t:rtype: bool\n\t\t\"\"\"\n\t\treturn not self.__eq__(other)\n\n\tdef __lt__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the Bookmarks object is less than the other Bookmarks\n\t\tobject.\n\n\t\t:param other: Another Bookmarks object\n\t\t:type other: Bookmarks\n\t\t:return: True if the Bookmarks object is less than the other Bookmarks\n\t\t:rtype: bool\n\t\t\"\"\"\n\t\tif not isinstance(other, Bookmarks):\n\t\t\treturn False\n\t\treturn self.values < other.values\n\n\tdef __le__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the Bookmarks object is less than or equal to the other\n\t\tBookmarks object.\n\n\t\t:param other: Another Bookmarks object\n\t\t:type other: Bookmarks\n\t\t:return: True if the Bookmarks object is less than or equal to the other\n\t\t:rtype: bool\n\t\t\"\"\"\n\t\tif not isinstance(other, Bookmarks):\n\t\t\treturn False\n\t\treturn self.values <= other.values\n\n\tdef __gt__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the Bookmarks object is greater than the other Bookmarks\n\t\tobject.\n\n\t\t:param other: Another Bookmarks object\n\t\t:type other: Bookmarks\n\t\t:return: True if the Bookmarks object is greater than the other Bookmarks\n\t\t:rtype: bool\n\t\t\"\"\"\n\t\tif not isinstance(other, Bookmarks):\n\t\t\treturn False\n\t\treturn self.values > other.values\n\n\tdef __ge__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the Bookmarks object is greater than or equal to the other\n\t\tBookmarks object.\n\n\t\t:param other: Another Bookmarks object\n\t\t:type other: Bookmarks\n\t\t:return: True if the Bookmarks object is greater than or equal to the other\n\t\t:rtype: bool\n\t\t\"\"\"\n\t\tif not isinstance(other, Bookmarks):\n\t\t\treturn False\n\t\treturn self.values >= other.values\n\n\tdef __contains__(self, item):\n\t\t\"\"\"\n\t\tReturn True if the Bookmarks object contains the given item.\n\n\t\t:param item: The item to be searched for\n\t\t:type item: str\n\t\t:return: True if the Bookmarks object contains the given item\n\t\t:rtype: bool\n\t\t\"\"\"\n\t\treturn item in self.values"], "level": "self_contained", "generate_results": [{"generate_code": "def from_raw_values(cls, values):\n\t\"\"\"\n\tCreate a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]\n\t\"\"\"\n\treturn cls(values)\n\nclass Bookmarks(object):\n\t\"\"\"\n\tA Bookmarks object represents a list of bookmarks.\n\t\"\"\"\n\tdef __init__(self, values):\n\t\t\"\"\"\n\t\tCreate a Bookmarks object from a list of raw bookmarks.\n\n\t\t:param values: ASCII string values (raw bookmarks)\n\t\t:type values: Iterable[str]\n\t\t\"\"\"\n\t\tself.values = values\n\n\tdef __repr__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the Bookmarks object.\n\n\t\t:return: A string representation of the Bookmarks object\n\t\t:rtype: str\n\t\t\"\"\"\n\t\treturn 'Bookmarks(%s)' % ', '.join(self.values)\n\n\tdef __str__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the Bookmarks object.\n\n\t\t:return: A string representation of the Bookmarks object\n\t\t:rtype: str\n\t\t\"\"\"\n\t\treturn 'Bookmarks(%s)' % ', '.join(self.values)\n\n\tdef __eq__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the Bookmarks object is equal to the other Bookmarks\n\t\tobject.\n\n\t\t:param other: Another Bookmarks object\n\t\t:type other: Bookmarks\n\t\t:return: True if the Bookmarks object is equal to the other Bookmarks\n\t\t:rtype: bool\n\t\t\"\"\"\n\t\tif not isinstance(other, Bookmarks):\n\t\t\treturn False\n\t\treturn self.values == other.values\n\n\tdef __ne__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the Bookmarks object is not equal to the other Bookmarks\n\t\tobject.\n\n\t\t:param other: Another Bookmarks object\n\t\t:type other: Bookmarks\n\t\t:return: True if the Bookmarks object is not equal to the other Bookmarks\n\t\t:rtype: bool\n\t\t\"\"\"\n\t\treturn not self.__eq__(other)\n\n\tdef __lt__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the Bookmarks object is less than the other Bookmarks\n\t\tobject.\n\n\t\t:param other: Another Bookmarks object\n\t\t:type other: Bookmarks\n\t\t:return: True if the Bookmarks object is less than the other Bookmarks\n\t\t:rtype: bool\n\t\t\"\"\"\n\t\tif not isinstance(other, Bookmarks):\n\t\t\treturn False\n\t\treturn self.values < other.values\n\n\tdef __le__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the Bookmarks object is less than or equal to the other\n\t\tBookmarks object.\n\n\t\t:param other: Another Bookmarks object\n\t\t:type other: Bookmarks\n\t\t:return: True if the Bookmarks object is less than or equal to the other\n\t\t:rtype: bool\n\t\t\"\"\"\n\t\tif not isinstance(other, Bookmarks):\n\t\t\treturn False\n\t\treturn self.values <= other.values\n\n\tdef __gt__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the Bookmarks object is greater than the other Bookmarks\n\t\tobject.\n\n\t\t:param other: Another Bookmarks object\n\t\t:type other: Bookmarks\n\t\t:return: True if the Bookmarks object is greater than the other Bookmarks\n\t\t:rtype: bool\n\t\t\"\"\"\n\t\tif not isinstance(other, Bookmarks):\n\t\t\treturn False\n\t\treturn self.values > other.values\n\n\tdef __ge__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the Bookmarks object is greater than or equal to the other\n\t\tBookmarks object.\n\n\t\t:param other: Another Bookmarks object\n\t\t:type other: Bookmarks\n\t\t:return: True if the Bookmarks object is greater than or equal to the other\n\t\t:rtype: bool\n\t\t\"\"\"\n\t\tif not isinstance(other, Bookmarks):\n\t\t\treturn False\n\t\treturn self.values >= other.values\n\n\tdef __contains__(self, item):\n\t\t\"\"\"\n\t\tReturn True if the Bookmarks object contains the given item.\n\n\t\t:param item: The item to be searched for\n\t\t:type item: str\n\t\t:return: True if the Bookmarks object contains the given item\n\t\t:rtype: bool\n\t\t\"\"\"\n\t\treturn item in self.values", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "ques_id": "62b87b199a0c4fa8b80b354c", "code": ["def _get_seq_with_type(seq, bufsize=None):\n\t\"\"\"\n\tReturn a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).\n\t\"\"\"\n\tif isinstance(seq, str):\n\t\tseq = seq.split()\n\tif not isinstance(seq, list):\n\t\traise TypeError(\"seq must be a list\")\n\tif not seq:\n\t\traise ValueError(\"seq must not be empty\")\n\tif len(seq) == 1:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 2:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 3:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 4:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 5:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 6:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 7:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 8:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 9:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 10:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 11:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 12:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 13:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 14:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 15:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 16:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 17:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 18:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 19:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 20:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 21:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 22:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 23:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 24:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 25:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 26:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 27:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 28:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 29:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 30:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 31:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 32:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 33:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 34:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 35:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 36:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 37:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 38:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 39:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 40:"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n\t\"\"\"\n\tReturn a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).\n\t\"\"\"\n\tif isinstance(seq, str):\n\t\tseq = seq.split()\n\tif not isinstance(seq, list):\n\t\traise TypeError(\"seq must be a list\")\n\tif not seq:\n\t\traise ValueError(\"seq must not be empty\")\n\tif len(seq) == 1:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 2:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 3:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 4:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 5:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 6:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 7:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 8:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 9:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 10:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 11:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 12:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 13:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 14:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 15:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 16:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 17:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 18:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 19:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 20:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 21:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 22:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 23:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 24:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 25:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 26:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 27:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 28:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 29:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 30:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 31:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 32:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 33:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 34:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 35:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 36:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 37:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 38:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 39:\n\t\treturn seq[0], type(seq[0])\n\tif len(seq) == 40:", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "ques_id": "62b87b4f9a0c4fa8b80b3581", "code": ["def scale(self, other=None, recompute=False):\n\t\"\"\"\n\tCompute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.\n\t\"\"\"\n\tif other is None:\n\t\treturn self.histogram.scale\n\telse:\n\t\tif not isinstance(other, (float, int)):\n\t\t\traise TypeError(\"'other' must be a float or an int\")\n\t\tif other == 0:\n\t\t\traise LenaValueError(\"Cannot rescale histogram to zero\")\n\t\tself.histogram.scale = other\n\t\treturn other\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None, recompute=False):\n\t\"\"\"\n\tCompute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.\n\t\"\"\"\n\tif other is None:\n\t\treturn self.histogram.scale\n\telse:\n\t\tif not isinstance(other, (float, int)):\n\t\t\traise TypeError(\"'other' must be a float or an int\")\n\t\tif other == 0:\n\t\t\traise LenaValueError(\"Cannot rescale histogram to zero\")\n\t\tself.histogram.scale = other\n\t\treturn other\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "ques_id": "62b87b519a0c4fa8b80b3583", "code": ["def scale(self, other=None):\n\t\"\"\"\n\tGet or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.\n\t\"\"\"\n\tif other is None:\n\t\treturn self.scale()\n\tif isinstance(other, (int, float)):\n\t\treturn self.scale(other)\n\tif isinstance(other, (list, tuple)):\n\t\treturn self.scale(other[-1])\n\tif isinstance(other, dict):\n\t\treturn self.scale(other)\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn self.scale(other)\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None):\n\t\"\"\"\n\tGet or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.\n\t\"\"\"\n\tif other is None:\n\t\treturn self.scale()\n\tif isinstance(other, (int, float)):\n\t\treturn self.scale(other)\n\tif isinstance(other, (list, tuple)):\n\t\treturn self.scale(other[-1])\n\tif isinstance(other, dict):\n\t\treturn self.scale(other)\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn self.scale(other)\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray, np.generic)):\n\t\treturn other\n\tif isinstance(other, (np.ndarray", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "ques_id": "62b87b869a0c4fa8b80b35e1", "code": ["def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n\t\"\"\"\n\tConvert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.\n\t\"\"\"\n\tif make_value is None:\n\t\tmake_value = bin_content\n\tif get_coordinate not in (\"left\", \"right\", \"middle\"):\n\t\traise ValueError(\"get_coordinate must be 'left', 'right' or'middle'\")\n\tif make_value is not None:\n\t\tif not isinstance(make_value, (tuple, list)):\n\t\t\tmake_value = (make_value,)\n\t\tif len(make_value)!= len(hist):\n\t\t\traise ValueError(\"make_value must have the same length as hist\")\n\tif get_coordinate == \"left\":\n\t\tcoordinate = \"left\"\n\telif get_coordinate == \"right\":\n\t\tcoordinate = \"right\"\n\telif get_coordinate == \"middle\":\n\t\tcoordinate = \"middle\"\n\telse:\n\t\traise ValueError(\"get_coordinate must be 'left', 'right' or'middle'\")\n\tif scale:\n\t\tscale = True\n\telse:\n\t\tscale = False\n\tif not isinstance(field_names, (tuple, list)):\n\t\tfield_names = (field_names,)\n\tif len(field_names)!= len(hist):\n\t\traise ValueError(\"field_names must have the same length as hist\")\n\tif len(field_names) == 0:\n\t\traise ValueError(\"field_names must not be empty\")\n\tif len(field_names) == 1:\n\t\tfield_names = field_names[0]\n\tif not isinstance(field_names, tuple):\n\t\tfield_names = (field_names,)\n\tif len(field_names)!= len(field_names):\n\t\traise ValueError(\"field_names must have the same length as field_names\")\n\tif len(field_names) == 0:\n\t\traise ValueError(\"field_names must not be empty\")\n\tif len(field_names) == 1:\n\t\tfield_names = field_names[0]\n\tif not isinstance(field_names, tuple):\n\t\tfield_names = (field_names,)\n\tif len(field_names)!= len(field_names):\n\t\traise ValueError(\"field_names must have the same length as field_names\")\n\tif len(field_names) == 0:\n\t\traise ValueError(\"field_names must not be empty\")\n\tif len(field_names) == 1:\n\t\tfield_names = field_names[0]\n\tif not isinstance(field_names, tuple):\n\t\tfield_names = (field_names,)\n\tif len(field_names)!= len(field_names):\n\t\traise ValueError(\"field_names must have the same length as field_names\")\n\tif len(field_names) == 0:\n\t\traise ValueError(\"field_names must not be empty\")\n\tif len(field_names) == 1:\n\t\tfield_names = field_names[0]"], "level": "project_runnable", "generate_results": [{"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n\t\"\"\"\n\tConvert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.\n\t\"\"\"\n\tif make_value is None:\n\t\tmake_value = bin_content\n\tif get_coordinate not in (\"left\", \"right\", \"middle\"):\n\t\traise ValueError(\"get_coordinate must be 'left', 'right' or'middle'\")\n\tif make_value is not None:\n\t\tif not isinstance(make_value, (tuple, list)):\n\t\t\tmake_value = (make_value,)\n\t\tif len(make_value)!= len(hist):\n\t\t\traise ValueError(\"make_value must have the same length as hist\")\n\tif get_coordinate == \"left\":\n\t\tcoordinate = \"left\"\n\telif get_coordinate == \"right\":\n\t\tcoordinate = \"right\"\n\telif get_coordinate == \"middle\":\n\t\tcoordinate = \"middle\"\n\telse:\n\t\traise ValueError(\"get_coordinate must be 'left', 'right' or'middle'\")\n\tif scale:\n\t\tscale = True\n\telse:\n\t\tscale = False\n\tif not isinstance(field_names, (tuple, list)):\n\t\tfield_names = (field_names,)\n\tif len(field_names)!= len(hist):\n\t\traise ValueError(\"field_names must have the same length as hist\")\n\tif len(field_names) == 0:\n\t\traise ValueError(\"field_names must not be empty\")\n\tif len(field_names) == 1:\n\t\tfield_names = field_names[0]\n\tif not isinstance(field_names, tuple):\n\t\tfield_names = (field_names,)\n\tif len(field_names)!= len(field_names):\n\t\traise ValueError(\"field_names must have the same length as field_names\")\n\tif len(field_names) == 0:\n\t\traise ValueError(\"field_names must not be empty\")\n\tif len(field_names) == 1:\n\t\tfield_names = field_names[0]\n\tif not isinstance(field_names, tuple):\n\t\tfield_names = (field_names,)\n\tif len(field_names)!= len(field_names):\n\t\traise ValueError(\"field_names must have the same length as field_names\")\n\tif len(field_names) == 0:\n\t\traise ValueError(\"field_names must not be empty\")\n\tif len(field_names) == 1:\n\t\tfield_names = field_names[0]\n\tif not isinstance(field_names, tuple):\n\t\tfield_names = (field_names,)\n\tif len(field_names)!= len(field_names):\n\t\traise ValueError(\"field_names must have the same length as field_names\")\n\tif len(field_names) == 0:\n\t\traise ValueError(\"field_names must not be empty\")\n\tif len(field_names) == 1:\n\t\tfield_names = field_names[0]", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1136", "code": ["def _verify(iface, candidate, tentative=False, vtype=None):\n\t\"\"\"\n\tVerify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.\n\t\"\"\"\n\tif tentative:\n\t\t#"], "level": "file_runnable", "generate_results": [{"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n\t\"\"\"\n\tVerify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.\n\t\"\"\"\n\tif tentative:\n\t\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1137", "code": ["def verifyObject(iface, candidate, tentative=False):\n\t\"\"\"\n\tVerify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.\n\t\"\"\"\n\tif tentative:\n\t\t#"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyObject(iface, candidate, tentative=False):\n\t\"\"\"\n\tVerify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.\n\t\"\"\"\n\tif tentative:\n\t\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "ques_id": "62b8b4c1eb7e40a82d2d1139", "code": ["def verifyClass(iface, candidate, tentative=False):\n\t\"\"\"\n\tVerify that the *candidate* might correctly provide *iface*.\n\t\"\"\"\n\tif not candidate:\n\t\treturn False\n\tif not tentative:\n\t\tiface.setTentative(candidate)\n\tiface.verify(candidate)\n\treturn True\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyClass(iface, candidate, tentative=False):\n\t\"\"\"\n\tVerify that the *candidate* might correctly provide *iface*.\n\t\"\"\"\n\tif not candidate:\n\t\treturn False\n\tif not tentative:\n\t\tiface.setTentative(candidate)\n\tiface.verify(candidate)\n\treturn True\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "ques_id": "62b8b559eb7e40a82d2d11f6", "code": ["def determineMetaclass(bases, explicit_mc=None):\n\t\"\"\"\n\tDetermine metaclass from 1+ bases and optional explicit __metaclass__\n\t\"\"\"\n\tif explicit_mc is not None:\n\t\treturn explicit_mc\n\tif len(bases) == 1 and bases[0].__class__.__name__ == 'type':\n\t\treturn bases[0].__class__.__bases__[0]\n\tfor base in bases:\n\t\tif base.__class__.__name__ == 'type':\n\t\t\treturn base.__class__.__bases__[0]\n\treturn type\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n\t\"\"\"\n\tDetermine metaclass from 1+ bases and optional explicit __metaclass__\n\t\"\"\"\n\tif explicit_mc is not None:\n\t\treturn explicit_mc\n\tif len(bases) == 1 and bases[0].__class__.__name__ == 'type':\n\t\treturn bases[0].__class__.__bases__[0]\n\tfor base in bases:\n\t\tif base.__class__.__name__ == 'type':\n\t\t\treturn base.__class__.__bases__[0]\n\treturn type\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "ques_id": "62b8d22a48ba5a41d1c3f47d", "code": ["def pop(self, key, default=__marker):\n\t\"\"\"\n\tD.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.\n\t\"\"\"\n\tif key in self:\n\t\treturn self[key]\n\tif default is __marker:\n\t\traise KeyError(key)\n\treturn default\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop(self, key, default=__marker):\n\t\"\"\"\n\tD.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.\n\t\"\"\"\n\tif key in self:\n\t\treturn self[key]\n\tif default is __marker:\n\t\traise KeyError(key)\n\treturn default\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "ques_id": "62b8d23748ba5a41d1c3f497", "code": ["def popitem(self):\n\t\"\"\"\n\tRemove and return the `(key, value)` pair least frequently used.\n\t\"\"\"\n\tif self.size == 0:\n\t\traise KeyError('popitem(): dictionary is empty')\n\tkey, value = self.items[self.size-1]\n\tself.size -= 1\n\tself.data.pop(key)\n\treturn key, value\n\nclass LRUCache(object):\n\t\"\"\"\n\tImplements a cache that stores keys and values.\n\t\"\"\"\n\tdef __init__(self, capacity):\n\t\tself.capacity = capacity\n\t\tself.cache = {}\n\t\tself.size = 0\n\n\tdef __len__(self):\n\t\treturn self.size\n\n\tdef __contains__(self, key):\n\t\treturn key in self.cache\n\n\tdef __getitem__(self, key):\n\t\tif key not in self.cache:\n\t\t\treturn self.cache[key]\n\t\telse:\n\t\t\treturn self.cache[key]\n\n\tdef __setitem__(self, key, value):\n\t\tif key in self.cache:\n\t\t\tself.cache.move_to_end(key)\n\t\tself.cache[key] = value\n\t\tif len(self.cache) > self.capacity:\n\t\t\tself.cache.popitem(last=False)\n\n\tdef get(self, key, default=None):\n\t\tif key not in self.cache:\n\t\t\treturn default\n\t\telse:\n\t\t\treturn self.cache[key]\n\n\tdef put(self, key, value):\n\t\tif key not in self.cache:\n\t\t\tif len(self.cache) >= self.capacity:\n\t\t\t\tself.cache.popitem(last=False)\n\t\t\tself.cache[key] = value\n\t\t\tself.size += 1\n\t\telse:\n\t\t\tself.cache.move_to_end(key)\n\t\t\tself.cache[key] = value\n\t\t\tself.size += 1\n\nclass LRUCache2(object):\n\t\"\"\"\n\tImplements a cache that stores keys and values.\n\t\"\"\"\n\tdef __init__(self, capacity):\n\t\tself.capacity = capacity\n\t\tself.cache = {}\n\t\tself.size = 0\n\n\tdef __len__(self):\n\t\treturn self.size\n\n\tdef __contains__(self, key):\n\t\treturn key in self.cache\n\n\tdef __getitem__(self, key):\n\t\tif key not in self.cache:\n\t\t\treturn self.cache[key]\n\t\telse:\n\t\t\treturn self.cache[key]\n\n\tdef __setitem__(self, key, value):\n\t\tif key in self.cache:\n\t\t\tself.cache.move_to_end(key)\n\t\tself.cache[key] = value\n\t\tif len(self.cache) > self.capacity:\n\t\t\tself.cache.popitem(last=False)\n\n\tdef get(self, key, default=None):\n\t\tif key not in self.cache:\n\t\t\treturn default\n\t\telse:\n\t\t\treturn self.cache[key]\n\n\tdef put(self, key, value):\n\t\tif key not in self.cache:\n\t\t\tif len(self.cache) >= self.capacity:\n\t\t\t\tself.cache.popitem(last=False)\n\t\t\tself.cache[key] = value\n\t\t\tself.size += 1\n\t\telse:\n\t\t\tself.cache.move_to_end(key)\n\t\t\tself.cache[key] = value\n\t\t\tself.size += 1\n\nclass LRUCache3(object):\n\t\"\"\"\n\tImplements a cache that stores keys and values.\n\t\"\"\"\n\tdef __init__(self, capacity):\n\t\tself.capacity = capacity\n\t\tself.cache = {}\n\t\tself.size = 0\n\n\tdef __len__(self):\n\t\treturn self.size\n\n\tdef __contains__(self, key):\n\t\treturn key in self.cache\n\n\tdef __getitem__(self, key):\n\t\tif key not in self.cache:\n\t\t\treturn self.cache[key]\n\t\telse:\n\t\t\treturn self.cache[key]\n\n\tdef __setitem__(self, key, value):\n\t\tif key in self.cache:\n\t\t\tself.cache.move_to_end(key)\n\t\tself.cache[key] = value\n\t\tif len(self.cache) > self.capacity:\n\t\t\tself.cache.popitem(last=False)\n\n\tdef get(self, key, default=None"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n\t\"\"\"\n\tRemove and return the `(key, value)` pair least frequently used.\n\t\"\"\"\n\tif self.size == 0:\n\t\traise KeyError('popitem(): dictionary is empty')\n\tkey, value = self.items[self.size-1]\n\tself.size -= 1\n\tself.data.pop(key)\n\treturn key, value\n\nclass LRUCache(object):\n\t\"\"\"\n\tImplements a cache that stores keys and values.\n\t\"\"\"\n\tdef __init__(self, capacity):\n\t\tself.capacity = capacity\n\t\tself.cache = {}\n\t\tself.size = 0\n\n\tdef __len__(self):\n\t\treturn self.size\n\n\tdef __contains__(self, key):\n\t\treturn key in self.cache\n\n\tdef __getitem__(self, key):\n\t\tif key not in self.cache:\n\t\t\treturn self.cache[key]\n\t\telse:\n\t\t\treturn self.cache[key]\n\n\tdef __setitem__(self, key, value):\n\t\tif key in self.cache:\n\t\t\tself.cache.move_to_end(key)\n\t\tself.cache[key] = value\n\t\tif len(self.cache) > self.capacity:\n\t\t\tself.cache.popitem(last=False)\n\n\tdef get(self, key, default=None):\n\t\tif key not in self.cache:\n\t\t\treturn default\n\t\telse:\n\t\t\treturn self.cache[key]\n\n\tdef put(self, key, value):\n\t\tif key not in self.cache:\n\t\t\tif len(self.cache) >= self.capacity:\n\t\t\t\tself.cache.popitem(last=False)\n\t\t\tself.cache[key] = value\n\t\t\tself.size += 1\n\t\telse:\n\t\t\tself.cache.move_to_end(key)\n\t\t\tself.cache[key] = value\n\t\t\tself.size += 1\n\nclass LRUCache2(object):\n\t\"\"\"\n\tImplements a cache that stores keys and values.\n\t\"\"\"\n\tdef __init__(self, capacity):\n\t\tself.capacity = capacity\n\t\tself.cache = {}\n\t\tself.size = 0\n\n\tdef __len__(self):\n\t\treturn self.size\n\n\tdef __contains__(self, key):\n\t\treturn key in self.cache\n\n\tdef __getitem__(self, key):\n\t\tif key not in self.cache:\n\t\t\treturn self.cache[key]\n\t\telse:\n\t\t\treturn self.cache[key]\n\n\tdef __setitem__(self, key, value):\n\t\tif key in self.cache:\n\t\t\tself.cache.move_to_end(key)\n\t\tself.cache[key] = value\n\t\tif len(self.cache) > self.capacity:\n\t\t\tself.cache.popitem(last=False)\n\n\tdef get(self, key, default=None):\n\t\tif key not in self.cache:\n\t\t\treturn default\n\t\telse:\n\t\t\treturn self.cache[key]\n\n\tdef put(self, key, value):\n\t\tif key not in self.cache:\n\t\t\tif len(self.cache) >= self.capacity:\n\t\t\t\tself.cache.popitem(last=False)\n\t\t\tself.cache[key] = value\n\t\t\tself.size += 1\n\t\telse:\n\t\t\tself.cache.move_to_end(key)\n\t\t\tself.cache[key] = value\n\t\t\tself.size += 1\n\nclass LRUCache3(object):\n\t\"\"\"\n\tImplements a cache that stores keys and values.\n\t\"\"\"\n\tdef __init__(self, capacity):\n\t\tself.capacity = capacity\n\t\tself.cache = {}\n\t\tself.size = 0\n\n\tdef __len__(self):\n\t\treturn self.size\n\n\tdef __contains__(self, key):\n\t\treturn key in self.cache\n\n\tdef __getitem__(self, key):\n\t\tif key not in self.cache:\n\t\t\treturn self.cache[key]\n\t\telse:\n\t\t\treturn self.cache[key]\n\n\tdef __setitem__(self, key, value):\n\t\tif key in self.cache:\n\t\t\tself.cache.move_to_end(key)\n\t\tself.cache[key] = value\n\t\tif len(self.cache) > self.capacity:\n\t\t\tself.cache.popitem(last=False)\n\n\tdef get(self, key, default=None", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "ques_id": "62b8d23a48ba5a41d1c3f499", "code": ["def popitem(self):\n\t\"\"\"\n\tRemove and return the `(key, value)` pair least recently used.\n\t\"\"\"\n\tif self.size == 0:\n\t\traise KeyError('popitem() is called when the dictionary is empty.')\n\tkey, value = self.items[self.size-1]\n\tself.size -= 1\n\tself.data.pop(key)\n\treturn key, value\n\nclass LRUCache(object):\n\t\"\"\"\n\tImplements a cache that stores keys and values.\n\t\"\"\"\n\tdef __init__(self, capacity):\n\t\tself.capacity = capacity\n\t\tself.cache = {}\n\t\tself.size = 0\n\n\tdef __len__(self):\n\t\treturn self.size\n\n\tdef __contains__(self, key):\n\t\treturn key in self.cache\n\n\tdef __getitem__(self, key):\n\t\tif key not in self.cache:\n\t\t\treturn self.cache[key]\n\t\telse:\n\t\t\treturn self.cache[key]\n\n\tdef __setitem__(self, key, value):\n\t\tif key in self.cache:\n\t\t\tself.cache.move_to_end(key)\n\t\tself.cache[key] = value\n\t\tif len(self.cache) > self.capacity:\n\t\t\tself.cache.popitem(last=False)\n\n\tdef get(self, key, default=None):\n\t\tif key not in self.cache:\n\t\t\treturn default\n\t\telse:\n\t\t\treturn self.cache[key]\n\n\tdef put(self, key, value):\n\t\tif key not in self.cache:\n\t\t\tif len(self.cache) >= self.capacity:\n\t\t\t\tself.cache.popitem(last=False)\n\t\t\tself.cache[key] = value\n\t\t\tself.size += 1\n\t\telse:\n\t\t\tself.cache.move_to_end(key)\n\t\t\tself.cache[key] = value\n\t\t\tself.size += 1\n\nclass LRUCache2(object):\n\t\"\"\"\n\tImplements a cache that stores keys and values.\n\t\"\"\"\n\tdef __init__(self, capacity):\n\t\tself.capacity = capacity\n\t\tself.cache = {}\n\t\tself.size = 0\n\n\tdef __len__(self):\n\t\treturn self.size\n\n\tdef __contains__(self, key):\n\t\treturn key in self.cache\n\n\tdef __getitem__(self, key):\n\t\tif key not in self.cache:\n\t\t\treturn self.cache[key]\n\t\telse:\n\t\t\treturn self.cache[key]\n\n\tdef __setitem__(self, key, value):\n\t\tif key in self.cache:\n\t\t\tself.cache.move_to_end(key)\n\t\tself.cache[key] = value\n\t\tif len(self.cache) > self.capacity:\n\t\t\tself.cache.popitem(last=False)\n\n\tdef get(self, key, default=None):\n\t\tif key not in self.cache:\n\t\t\treturn default\n\t\telse:\n\t\t\treturn self.cache[key]\n\n\tdef put(self, key, value):\n\t\tif key not in self.cache:\n\t\t\tif len(self.cache) >= self.capacity:\n\t\t\t\tself.cache.popitem(last=False)\n\t\t\tself.cache[key] = value\n\t\t\tself.size += 1\n\t\telse:\n\t\t\tself.cache.move_to_end(key)\n\t\t\tself.cache[key] = value\n\t\t\tself.size += 1\n\nclass LRUCache3(object):\n\t\"\"\"\n\tImplements a cache that stores keys and values.\n\t\"\"\"\n\tdef __init__(self, capacity):\n\t\tself.capacity = capacity\n\t\tself.cache = {}\n\t\tself.size = 0\n\n\tdef __len__(self):\n\t\treturn self.size\n\n\tdef __contains__(self, key):\n\t\treturn key in self.cache\n\n\tdef __getitem__(self, key):\n\t\tif key not in self.cache:\n\t\t\treturn self.cache[key]\n\t\telse:\n\t\t\treturn self.cache[key]\n\n\tdef __setitem__(self, key, value):\n\t\tif key in self.cache:\n\t\t\tself.cache.move_to_end(key)\n\t\tself.cache[key] = value\n\t\tif len(self.cache) > self.capacity:\n\t\t\tself.cache.popitem(last=False)\n\n\tdef get(self,"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n\t\"\"\"\n\tRemove and return the `(key, value)` pair least recently used.\n\t\"\"\"\n\tif self.size == 0:\n\t\traise KeyError('popitem() is called when the dictionary is empty.')\n\tkey, value = self.items[self.size-1]\n\tself.size -= 1\n\tself.data.pop(key)\n\treturn key, value\n\nclass LRUCache(object):\n\t\"\"\"\n\tImplements a cache that stores keys and values.\n\t\"\"\"\n\tdef __init__(self, capacity):\n\t\tself.capacity = capacity\n\t\tself.cache = {}\n\t\tself.size = 0\n\n\tdef __len__(self):\n\t\treturn self.size\n\n\tdef __contains__(self, key):\n\t\treturn key in self.cache\n\n\tdef __getitem__(self, key):\n\t\tif key not in self.cache:\n\t\t\treturn self.cache[key]\n\t\telse:\n\t\t\treturn self.cache[key]\n\n\tdef __setitem__(self, key, value):\n\t\tif key in self.cache:\n\t\t\tself.cache.move_to_end(key)\n\t\tself.cache[key] = value\n\t\tif len(self.cache) > self.capacity:\n\t\t\tself.cache.popitem(last=False)\n\n\tdef get(self, key, default=None):\n\t\tif key not in self.cache:\n\t\t\treturn default\n\t\telse:\n\t\t\treturn self.cache[key]\n\n\tdef put(self, key, value):\n\t\tif key not in self.cache:\n\t\t\tif len(self.cache) >= self.capacity:\n\t\t\t\tself.cache.popitem(last=False)\n\t\t\tself.cache[key] = value\n\t\t\tself.size += 1\n\t\telse:\n\t\t\tself.cache.move_to_end(key)\n\t\t\tself.cache[key] = value\n\t\t\tself.size += 1\n\nclass LRUCache2(object):\n\t\"\"\"\n\tImplements a cache that stores keys and values.\n\t\"\"\"\n\tdef __init__(self, capacity):\n\t\tself.capacity = capacity\n\t\tself.cache = {}\n\t\tself.size = 0\n\n\tdef __len__(self):\n\t\treturn self.size\n\n\tdef __contains__(self, key):\n\t\treturn key in self.cache\n\n\tdef __getitem__(self, key):\n\t\tif key not in self.cache:\n\t\t\treturn self.cache[key]\n\t\telse:\n\t\t\treturn self.cache[key]\n\n\tdef __setitem__(self, key, value):\n\t\tif key in self.cache:\n\t\t\tself.cache.move_to_end(key)\n\t\tself.cache[key] = value\n\t\tif len(self.cache) > self.capacity:\n\t\t\tself.cache.popitem(last=False)\n\n\tdef get(self, key, default=None):\n\t\tif key not in self.cache:\n\t\t\treturn default\n\t\telse:\n\t\t\treturn self.cache[key]\n\n\tdef put(self, key, value):\n\t\tif key not in self.cache:\n\t\t\tif len(self.cache) >= self.capacity:\n\t\t\t\tself.cache.popitem(last=False)\n\t\t\tself.cache[key] = value\n\t\t\tself.size += 1\n\t\telse:\n\t\t\tself.cache.move_to_end(key)\n\t\t\tself.cache[key] = value\n\t\t\tself.size += 1\n\nclass LRUCache3(object):\n\t\"\"\"\n\tImplements a cache that stores keys and values.\n\t\"\"\"\n\tdef __init__(self, capacity):\n\t\tself.capacity = capacity\n\t\tself.cache = {}\n\t\tself.size = 0\n\n\tdef __len__(self):\n\t\treturn self.size\n\n\tdef __contains__(self, key):\n\t\treturn key in self.cache\n\n\tdef __getitem__(self, key):\n\t\tif key not in self.cache:\n\t\t\treturn self.cache[key]\n\t\telse:\n\t\t\treturn self.cache[key]\n\n\tdef __setitem__(self, key, value):\n\t\tif key in self.cache:\n\t\t\tself.cache.move_to_end(key)\n\t\tself.cache[key] = value\n\t\tif len(self.cache) > self.capacity:\n\t\t\tself.cache.popitem(last=False)\n\n\tdef get(self,", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "ques_id": "62b8d23c48ba5a41d1c3f49b", "code": ["def popitem(self):\n\t\"\"\"\n\tRemove and return the `(key, value)` pair most recently used.\n\t\"\"\"\n\tif self.size == 0:\n\t\traise KeyError('popitem(): dictionary is empty')\n\tkey, value = self.items[self.size-1]\n\tself.items[self.size-1] = self.items.pop()\n\tself.size -= 1\n\treturn key, value\n\nclass LRUCache(object):\n\t\"\"\"\n\tImplements a cache that stores keys and values.\n\t\"\"\"\n\tdef __init__(self, capacity):\n\t\tself.capacity = capacity\n\t\tself.cache = {}\n\t\tself.size = 0\n\n\tdef get(self, key):\n\t\t\"\"\"\n\t\tReturn the value associated with `key`.\n\t\tRaise KeyError if not found.\n\t\t\"\"\"\n\t\tif key not in self.cache:\n\t\t\tif self.size == self.capacity:\n\t\t\t\traise KeyError('get(): dictionary is full')\n\t\t\tself.cache[key] = self.cache.pop(key)\n\t\t\tself.size += 1\n\t\treturn self.cache[key]\n\n\tdef set(self, key, value):\n\t\t\"\"\"\n\t\tSet the value associated with `key` to `value`.\n\t\tRaise KeyError if not found.\n\t\t\"\"\"\n\t\tif key not in self.cache:\n\t\t\tif self.size == self.capacity:\n\t\t\t\traise KeyError('set(): dictionary is full')\n\t\t\tself.cache[key] = value\n\t\t\tself.size += 1\n\t\telse:\n\t\t\tself.cache[key] = value\n\t\t\tself.cache.move_to_end(key)\n\t\t\tif self.size == self.capacity:\n\t\t\t\tself.cache.move_to_end(key)\n\t\t\t\tself.size -= 1\n\n\tdef popitem(self):\n\t\t\"\"\"\n\t\tRemove and return the `(key, value)` pair most recently used.\n\t\t\"\"\"\n\t\tif self.size == 0:\n\t\t\traise KeyError('popitem(): dictionary is empty')\n\t\tkey, value = self.cache.popitem()\n\t\tself.size -= 1\n\t\treturn key, value\n\nclass LRUCache2(object):\n\t\"\"\"\n\tImplements a cache that stores keys and values.\n\t\"\"\"\n\tdef __init__(self, capacity):\n\t\tself.capacity = capacity\n\t\tself.cache = {}\n\t\tself.size = 0\n\n\tdef get(self, key):\n\t\t\"\"\"\n\t\tReturn the value associated with `key`.\n\t\tRaise KeyError if not found.\n\t\t\"\"\"\n\t\tif key not in self.cache:\n\t\t\tif self.size == self.capacity:\n\t\t\t\traise KeyError('get(): dictionary is full')\n\t\t\tself.cache[key] = self.cache.pop(key)\n\t\t\tself.size += 1\n\t\treturn self.cache[key]\n\n\tdef set(self, key, value):\n\t\t\"\"\"\n\t\tSet the value associated with `key` to `value`.\n\t\tRaise KeyError if not found.\n\t\t\"\"\"\n\t\tif key not in self.cache:\n\t\t\tif self.size == self.capacity:\n\t\t\t\traise KeyError('set(): dictionary is full')\n\t\t\tself.cache[key] = value\n\t\t\tself.size += 1\n\t\telse:\n\t\t\tself.cache[key] = value\n\t\t\tself.cache.move_to_end(key)\n\t\t\tif self.size == self.capacity:\n\t\t\t\tself.cache.move_to_end(key)\n\t\t\t\tself.size -= 1\n\n\tdef popitem(self):\n\t\t\"\"\"\n\t\tRemove and return the `(key, value)` pair most recently used.\n\t\t\"\"\"\n\t\tif self.size == 0:\n\t\t\traise KeyError('popitem(): dictionary is empty')\n\t\tkey, value = self.cache.popitem()\n\t\tself.size -= 1\n\t\treturn key, value\n\nclass LRUCache3(object):\n\t\"\"\"\n\tImplements a cache that stores keys and values.\n\t\"\"\"\n\tdef __init__(self, capacity):\n\t\tself.capacity = capacity\n\t\tself.cache = {}\n\t\tself.size = 0\n\n\tdef get(self, key):\n\t\t\"\"\"\n\t\tReturn the value associated with `key`.\n\t\tRaise KeyError if not found.\n\t\t\"\"\"\n\t\tif key not in self.cache:\n\t\t\tif self.size == self.capacity:\n\t\t\t\traise KeyError('get(): dictionary is full')\n\t\t\tself.cache[key] = self"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n\t\"\"\"\n\tRemove and return the `(key, value)` pair most recently used.\n\t\"\"\"\n\tif self.size == 0:\n\t\traise KeyError('popitem(): dictionary is empty')\n\tkey, value = self.items[self.size-1]\n\tself.items[self.size-1] = self.items.pop()\n\tself.size -= 1\n\treturn key, value\n\nclass LRUCache(object):\n\t\"\"\"\n\tImplements a cache that stores keys and values.\n\t\"\"\"\n\tdef __init__(self, capacity):\n\t\tself.capacity = capacity\n\t\tself.cache = {}\n\t\tself.size = 0\n\n\tdef get(self, key):\n\t\t\"\"\"\n\t\tReturn the value associated with `key`.\n\t\tRaise KeyError if not found.\n\t\t\"\"\"\n\t\tif key not in self.cache:\n\t\t\tif self.size == self.capacity:\n\t\t\t\traise KeyError('get(): dictionary is full')\n\t\t\tself.cache[key] = self.cache.pop(key)\n\t\t\tself.size += 1\n\t\treturn self.cache[key]\n\n\tdef set(self, key, value):\n\t\t\"\"\"\n\t\tSet the value associated with `key` to `value`.\n\t\tRaise KeyError if not found.\n\t\t\"\"\"\n\t\tif key not in self.cache:\n\t\t\tif self.size == self.capacity:\n\t\t\t\traise KeyError('set(): dictionary is full')\n\t\t\tself.cache[key] = value\n\t\t\tself.size += 1\n\t\telse:\n\t\t\tself.cache[key] = value\n\t\t\tself.cache.move_to_end(key)\n\t\t\tif self.size == self.capacity:\n\t\t\t\tself.cache.move_to_end(key)\n\t\t\t\tself.size -= 1\n\n\tdef popitem(self):\n\t\t\"\"\"\n\t\tRemove and return the `(key, value)` pair most recently used.\n\t\t\"\"\"\n\t\tif self.size == 0:\n\t\t\traise KeyError('popitem(): dictionary is empty')\n\t\tkey, value = self.cache.popitem()\n\t\tself.size -= 1\n\t\treturn key, value\n\nclass LRUCache2(object):\n\t\"\"\"\n\tImplements a cache that stores keys and values.\n\t\"\"\"\n\tdef __init__(self, capacity):\n\t\tself.capacity = capacity\n\t\tself.cache = {}\n\t\tself.size = 0\n\n\tdef get(self, key):\n\t\t\"\"\"\n\t\tReturn the value associated with `key`.\n\t\tRaise KeyError if not found.\n\t\t\"\"\"\n\t\tif key not in self.cache:\n\t\t\tif self.size == self.capacity:\n\t\t\t\traise KeyError('get(): dictionary is full')\n\t\t\tself.cache[key] = self.cache.pop(key)\n\t\t\tself.size += 1\n\t\treturn self.cache[key]\n\n\tdef set(self, key, value):\n\t\t\"\"\"\n\t\tSet the value associated with `key` to `value`.\n\t\tRaise KeyError if not found.\n\t\t\"\"\"\n\t\tif key not in self.cache:\n\t\t\tif self.size == self.capacity:\n\t\t\t\traise KeyError('set(): dictionary is full')\n\t\t\tself.cache[key] = value\n\t\t\tself.size += 1\n\t\telse:\n\t\t\tself.cache[key] = value\n\t\t\tself.cache.move_to_end(key)\n\t\t\tif self.size == self.capacity:\n\t\t\t\tself.cache.move_to_end(key)\n\t\t\t\tself.size -= 1\n\n\tdef popitem(self):\n\t\t\"\"\"\n\t\tRemove and return the `(key, value)` pair most recently used.\n\t\t\"\"\"\n\t\tif self.size == 0:\n\t\t\traise KeyError('popitem(): dictionary is empty')\n\t\tkey, value = self.cache.popitem()\n\t\tself.size -= 1\n\t\treturn key, value\n\nclass LRUCache3(object):\n\t\"\"\"\n\tImplements a cache that stores keys and values.\n\t\"\"\"\n\tdef __init__(self, capacity):\n\t\tself.capacity = capacity\n\t\tself.cache = {}\n\t\tself.size = 0\n\n\tdef get(self, key):\n\t\t\"\"\"\n\t\tReturn the value associated with `key`.\n\t\tRaise KeyError if not found.\n\t\t\"\"\"\n\t\tif key not in self.cache:\n\t\t\tif self.size == self.capacity:\n\t\t\t\traise KeyError('get(): dictionary is full')\n\t\t\tself.cache[key] = self", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "ques_id": "62b8d23e48ba5a41d1c3f49e", "code": ["def popitem(self):\n\t\"\"\"\n\tRemove and return a random `(key, value)` pair.\n\t\"\"\"\n\treturn self.popitem()\n\nclass HashTable(object):\n\t\"\"\"\n\tA `HashTable` is a mapping that maps `(key, value)` pairs to unique\n\tindices.\n\t\"\"\"\n\tdef __init__(self, size=10):\n\t\t\"\"\"\n\t\tCreate a new `HashTable`.\n\t\t\"\"\"\n\t\tself.size = size\n\t\tself.table = [None] * self.size\n\t\tself.count = 0\n\n\tdef __len__(self):\n\t\t\"\"\"\n\t\tReturn the number of keys in the table.\n\t\t\"\"\"\n\t\treturn self.count\n\n\tdef __contains__(self, key):\n\t\t\"\"\"\n\t\tReturn True if the key is in the table.\n\t\t\"\"\"\n\t\treturn self.contains(key)\n\n\tdef __getitem__(self, key):\n\t\t\"\"\"\n\t\tReturn the value associated with the given key.\n\t\t\"\"\"\n\t\treturn self.get(key)\n\n\tdef __setitem__(self, key, value):\n\t\t\"\"\"\n\t\tAssociate the given value with the given key.\n\t\t\"\"\"\n\t\tself.set(key, value)\n\n\tdef __delitem__(self, key):\n\t\t\"\"\"\n\t\tDelete the given key and associated value.\n\t\t\"\"\"\n\t\tself.delete(key)\n\n\tdef __iter__(self):\n\t\t\"\"\"\n\t\tReturn an iterator over the keys in the table.\n\t\t\"\"\"\n\t\tfor i in range(len(self)):\n\t\t\tyield self[i]\n\n\tdef __repr__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the table.\n\t\t\"\"\"\n\t\treturn 'HashTable({})'.format(self.size)\n\n\tdef __str__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the table.\n\t\t\"\"\"\n\t\treturn '\\n'.join(str(k) + ':'+ repr(v) for k, v in self.items())\n\n\tdef __eq__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the given table is equal to the given table.\n\t\t\"\"\"\n\t\tif not isinstance(other, HashTable):\n\t\t\treturn False\n\t\treturn self.count == other.count\n\n\tdef __ne__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the given table is not equal to the given table.\n\t\t\"\"\"\n\t\treturn not self.__eq__(other)\n\n\tdef contains(self, key):\n\t\t\"\"\"\n\t\tReturn True if the given key is in the table.\n\t\t\"\"\"\n\t\treturn key in self\n\n\tdef get(self, key):\n\t\t\"\"\"\n\t\tReturn the value associated with the given key.\n\t\t\"\"\"\n\t\tif not self.contains(key):\n\t\t\treturn None\n\t\treturn self[key]\n\n\tdef set(self, key, value):\n\t\t\"\"\"\n\t\tAssociate the given value with the given key.\n\t\t\"\"\"\n\t\tif not self.contains(key):\n\t\t\tself.count += 1\n\t\t\tself.table[self.count] = key, value\n\t\t\treturn True\n\t\treturn False\n\n\tdef delete(self, key):\n\t\t\"\"\"\n\t\tDelete the given key and associated value.\n\t\t\"\"\"\n\t\tif not self.contains(key):\n\t\t\treturn False\n\t\tself.table[self.count] = None\n\t\tself.count -= 1\n\t\treturn True\n\n\tdef keys(self):\n\t\t\"\"\"\n\t\tReturn a list of all keys in the table.\n\t\t\"\"\"\n\t\treturn [k for k, v in self.table]\n\n\tdef values(self):\n\t\t\"\"\"\n\t\tReturn a list of all values in the table.\n\t\t\"\"\"\n\t\treturn [v for k, v in self.table]\n\n\tdef items(self):\n\t\t\"\"\"\n\t\tReturn a list of all (key, value) pairs in the table.\n\t\t\"\"\"\n\t\treturn [(k, v) for k, v in self.table]\n\n\tdef __getitem__(self, key):\n\t\t\"\"\"\n\t\tReturn the value associated with the given key.\n\t\t\"\"\"\n\t\treturn self.get(key)\n\n\tdef __setitem__(self, key, value):\n\t\t\"\"\"\n\t\tAssociate the given value with the given key.\n\t\t\"\"\"\n\t\tself.set(key, value)\n\n\tdef __delitem__(self, key):\n\t\t\"\"\"\n\t\tDelete the given key and associated value.\n\t\t\"\"\"\n\t\tself.delete(key)\n\n\t"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n\t\"\"\"\n\tRemove and return a random `(key, value)` pair.\n\t\"\"\"\n\treturn self.popitem()\n\nclass HashTable(object):\n\t\"\"\"\n\tA `HashTable` is a mapping that maps `(key, value)` pairs to unique\n\tindices.\n\t\"\"\"\n\tdef __init__(self, size=10):\n\t\t\"\"\"\n\t\tCreate a new `HashTable`.\n\t\t\"\"\"\n\t\tself.size = size\n\t\tself.table = [None] * self.size\n\t\tself.count = 0\n\n\tdef __len__(self):\n\t\t\"\"\"\n\t\tReturn the number of keys in the table.\n\t\t\"\"\"\n\t\treturn self.count\n\n\tdef __contains__(self, key):\n\t\t\"\"\"\n\t\tReturn True if the key is in the table.\n\t\t\"\"\"\n\t\treturn self.contains(key)\n\n\tdef __getitem__(self, key):\n\t\t\"\"\"\n\t\tReturn the value associated with the given key.\n\t\t\"\"\"\n\t\treturn self.get(key)\n\n\tdef __setitem__(self, key, value):\n\t\t\"\"\"\n\t\tAssociate the given value with the given key.\n\t\t\"\"\"\n\t\tself.set(key, value)\n\n\tdef __delitem__(self, key):\n\t\t\"\"\"\n\t\tDelete the given key and associated value.\n\t\t\"\"\"\n\t\tself.delete(key)\n\n\tdef __iter__(self):\n\t\t\"\"\"\n\t\tReturn an iterator over the keys in the table.\n\t\t\"\"\"\n\t\tfor i in range(len(self)):\n\t\t\tyield self[i]\n\n\tdef __repr__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the table.\n\t\t\"\"\"\n\t\treturn 'HashTable({})'.format(self.size)\n\n\tdef __str__(self):\n\t\t\"\"\"\n\t\tReturn a string representation of the table.\n\t\t\"\"\"\n\t\treturn '\\n'.join(str(k) + ':'+ repr(v) for k, v in self.items())\n\n\tdef __eq__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the given table is equal to the given table.\n\t\t\"\"\"\n\t\tif not isinstance(other, HashTable):\n\t\t\treturn False\n\t\treturn self.count == other.count\n\n\tdef __ne__(self, other):\n\t\t\"\"\"\n\t\tReturn True if the given table is not equal to the given table.\n\t\t\"\"\"\n\t\treturn not self.__eq__(other)\n\n\tdef contains(self, key):\n\t\t\"\"\"\n\t\tReturn True if the given key is in the table.\n\t\t\"\"\"\n\t\treturn key in self\n\n\tdef get(self, key):\n\t\t\"\"\"\n\t\tReturn the value associated with the given key.\n\t\t\"\"\"\n\t\tif not self.contains(key):\n\t\t\treturn None\n\t\treturn self[key]\n\n\tdef set(self, key, value):\n\t\t\"\"\"\n\t\tAssociate the given value with the given key.\n\t\t\"\"\"\n\t\tif not self.contains(key):\n\t\t\tself.count += 1\n\t\t\tself.table[self.count] = key, value\n\t\t\treturn True\n\t\treturn False\n\n\tdef delete(self, key):\n\t\t\"\"\"\n\t\tDelete the given key and associated value.\n\t\t\"\"\"\n\t\tif not self.contains(key):\n\t\t\treturn False\n\t\tself.table[self.count] = None\n\t\tself.count -= 1\n\t\treturn True\n\n\tdef keys(self):\n\t\t\"\"\"\n\t\tReturn a list of all keys in the table.\n\t\t\"\"\"\n\t\treturn [k for k, v in self.table]\n\n\tdef values(self):\n\t\t\"\"\"\n\t\tReturn a list of all values in the table.\n\t\t\"\"\"\n\t\treturn [v for k, v in self.table]\n\n\tdef items(self):\n\t\t\"\"\"\n\t\tReturn a list of all (key, value) pairs in the table.\n\t\t\"\"\"\n\t\treturn [(k, v) for k, v in self.table]\n\n\tdef __getitem__(self, key):\n\t\t\"\"\"\n\t\tReturn the value associated with the given key.\n\t\t\"\"\"\n\t\treturn self.get(key)\n\n\tdef __setitem__(self, key, value):\n\t\t\"\"\"\n\t\tAssociate the given value with the given key.\n\t\t\"\"\"\n\t\tself.set(key, value)\n\n\tdef __delitem__(self, key):\n\t\t\"\"\"\n\t\tDelete the given key and associated value.\n\t\t\"\"\"\n\t\tself.delete(key)\n\n\t", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "ques_id": "62b43425903eeb48555d3ea1", "code": ["def _create_in_regex(self) -> Pattern:\n\t\"\"\"\n\tCreate the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).\n\t\"\"\"\n\treturn re.compile(self.in_style)\n\nclass _InRegex(object):\n\t\"\"\"\n\tA class to represent a regular expression.\n\t\"\"\"\n\tdef __init__(self, in_style: str, in_style_regex: Pattern):\n\t\t\"\"\"\n\t\tInitialize the class.\n\n\t\t:param in_style: The in-style regular expression.\n\t\t:param in_style_regex: The in-style regular expression.\n\t\t\"\"\"\n\t\tself.in_style = in_style\n\t\tself.in_style_regex = in_style_regex\n\t\n\tdef __repr__(self) -> str:\n\t\t\"\"\"\n\t\tReturn the string representation of the class.\n\n\t\t:return: The string representation of the class.\n\t\t\"\"\"\n\t\treturn f\"<{self.__class__.__name__} in_style={self.in_style} in_style_regex={self.in_style_regex}>\"\n\t\n\tdef __str__(self) -> str:\n\t\t\"\"\"\n\t\tReturn the string representation of the class.\n\n\t\t:return: The string representation of the class.\n\t\t\"\"\"\n\t\treturn self.__repr__()\n\t\n\tdef __call__(self, *args, **kwargs) -> Pattern:\n\t\t\"\"\"\n\t\tReturn the regular expression.\n\n\t\t:param args: The positional arguments.\n\t\t:param kwargs: The keyword arguments.\n\t\t:return: The regular expression.\n\t\t\"\"\"\n\t\treturn self.in_style_regex.search(*args, **kwargs)\n\nclass _InRegexRegex(object):\n\t\"\"\"\n\tA class to represent a regular expression.\n\t\"\"\"\n\tdef __init__(self, in_style: str, in_style_regex: Pattern):\n\t\t\"\"\"\n\t\tInitialize the class.\n\n\t\t:param in_style: The in-style regular expression.\n\t\t:param in_style_regex: The in-style regular expression.\n\t\t\"\"\"\n\t\tself.in_style = in_style\n\t\tself.in_style_regex = in_style_regex\n\t\n\tdef __repr__(self) -> str:\n\t\t\"\"\"\n\t\tReturn the string representation of the class.\n\n\t\t:return: The string representation of the class.\n\t\t\"\"\"\n\t\treturn f\"<{self.__class__.__name__} in_style={self.in_style} in_style_regex={self.in_style_regex}>\"\n\t\n\tdef __str__(self) -> str:\n\t\t\"\"\"\n\t\tReturn the string representation of the class.\n\n\t\t:return: The string representation of the class.\n\t\t\"\"\"\n\t\treturn self.__repr__()\n\t\n\tdef __call__(self, *args, **kwargs) -> Pattern:\n\t\t\"\"\"\n\t\tReturn the regular expression.\n\n\t\t:param args: The positional arguments.\n\t\t:param kwargs: The keyword arguments.\n\t\t:return: The regular expression.\n\t\t\"\"\"\n\t\treturn self.in_style_regex.search(*args, **kwargs)\n\nclass _InRegexRegexRegex(object):\n\t\"\"\"\n\tA class to represent a regular expression.\n\t\"\"\"\n\tdef __init__(self, in_style: str, in_style_regex: Pattern):\n\t\t\"\"\"\n\t\tInitialize the class.\n\n\t\t:param in_style: The in-style regular expression.\n\t\t:param in_style_regex: The in-style regular expression.\n\t\t\"\"\"\n\t\tself.in_style = in_style\n\t\tself.in_style_regex = in_style_regex\n\t\n\tdef __repr__(self) -> str:\n\t\t\"\"\"\n\t\tReturn the string representation of the class.\n\n\t\t:return: The string representation of the class.\n\t\t\"\"\"\n\t\treturn f\"<{self.__class__.__name__} in_style={self.in_style} in_style_regex={self.in_style_regex}>\"\n\t\n\tdef __str__(self) -> str:\n\t\t\"\"\"\n\t\tReturn the string representation of the class.\n\n\t\t:return: The string representation of the class.\n\t\t\"\"\"\n\t\treturn self"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_in_regex(self) -> Pattern:\n\t\"\"\"\n\tCreate the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).\n\t\"\"\"\n\treturn re.compile(self.in_style)\n\nclass _InRegex(object):\n\t\"\"\"\n\tA class to represent a regular expression.\n\t\"\"\"\n\tdef __init__(self, in_style: str, in_style_regex: Pattern):\n\t\t\"\"\"\n\t\tInitialize the class.\n\n\t\t:param in_style: The in-style regular expression.\n\t\t:param in_style_regex: The in-style regular expression.\n\t\t\"\"\"\n\t\tself.in_style = in_style\n\t\tself.in_style_regex = in_style_regex\n\t\n\tdef __repr__(self) -> str:\n\t\t\"\"\"\n\t\tReturn the string representation of the class.\n\n\t\t:return: The string representation of the class.\n\t\t\"\"\"\n\t\treturn f\"<{self.__class__.__name__} in_style={self.in_style} in_style_regex={self.in_style_regex}>\"\n\t\n\tdef __str__(self) -> str:\n\t\t\"\"\"\n\t\tReturn the string representation of the class.\n\n\t\t:return: The string representation of the class.\n\t\t\"\"\"\n\t\treturn self.__repr__()\n\t\n\tdef __call__(self, *args, **kwargs) -> Pattern:\n\t\t\"\"\"\n\t\tReturn the regular expression.\n\n\t\t:param args: The positional arguments.\n\t\t:param kwargs: The keyword arguments.\n\t\t:return: The regular expression.\n\t\t\"\"\"\n\t\treturn self.in_style_regex.search(*args, **kwargs)\n\nclass _InRegexRegex(object):\n\t\"\"\"\n\tA class to represent a regular expression.\n\t\"\"\"\n\tdef __init__(self, in_style: str, in_style_regex: Pattern):\n\t\t\"\"\"\n\t\tInitialize the class.\n\n\t\t:param in_style: The in-style regular expression.\n\t\t:param in_style_regex: The in-style regular expression.\n\t\t\"\"\"\n\t\tself.in_style = in_style\n\t\tself.in_style_regex = in_style_regex\n\t\n\tdef __repr__(self) -> str:\n\t\t\"\"\"\n\t\tReturn the string representation of the class.\n\n\t\t:return: The string representation of the class.\n\t\t\"\"\"\n\t\treturn f\"<{self.__class__.__name__} in_style={self.in_style} in_style_regex={self.in_style_regex}>\"\n\t\n\tdef __str__(self) -> str:\n\t\t\"\"\"\n\t\tReturn the string representation of the class.\n\n\t\t:return: The string representation of the class.\n\t\t\"\"\"\n\t\treturn self.__repr__()\n\t\n\tdef __call__(self, *args, **kwargs) -> Pattern:\n\t\t\"\"\"\n\t\tReturn the regular expression.\n\n\t\t:param args: The positional arguments.\n\t\t:param kwargs: The keyword arguments.\n\t\t:return: The regular expression.\n\t\t\"\"\"\n\t\treturn self.in_style_regex.search(*args, **kwargs)\n\nclass _InRegexRegexRegex(object):\n\t\"\"\"\n\tA class to represent a regular expression.\n\t\"\"\"\n\tdef __init__(self, in_style: str, in_style_regex: Pattern):\n\t\t\"\"\"\n\t\tInitialize the class.\n\n\t\t:param in_style: The in-style regular expression.\n\t\t:param in_style_regex: The in-style regular expression.\n\t\t\"\"\"\n\t\tself.in_style = in_style\n\t\tself.in_style_regex = in_style_regex\n\t\n\tdef __repr__(self) -> str:\n\t\t\"\"\"\n\t\tReturn the string representation of the class.\n\n\t\t:return: The string representation of the class.\n\t\t\"\"\"\n\t\treturn f\"<{self.__class__.__name__} in_style={self.in_style} in_style_regex={self.in_style_regex}>\"\n\t\n\tdef __str__(self) -> str:\n\t\t\"\"\"\n\t\tReturn the string representation of the class.\n\n\t\t:return: The string representation of the class.\n\t\t\"\"\"\n\t\treturn self", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "ques_id": "62b43426903eeb48555d3ea2", "code": ["def _create_converter(self) -> _converting._Converter:\n\t\"\"\"\n\tCreate the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).\n\t\"\"\"\n\treturn _converting._Converter(self)"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_converter(self) -> _converting._Converter:\n\t\"\"\"\n\tCreate the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).\n\t\"\"\"\n\treturn _converting._Converter(self)", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "ques_id": "62b8966c755ee91dce50a154", "code": ["def isoparse(self, dt_str):\n\t\"\"\"\n\tParse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma."], "level": "class_runnable", "generate_results": [{"generate_code": "def isoparse(self, dt_str):\n\t\"\"\"\n\tParse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "ques_id": "62b896de755ee91dce50a183", "code": ["def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n\t\"\"\"\n\tParse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n   .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.\n\t\"\"\"\n\treturn _parse_datetime_internal(timestr, **kwargs)\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n\t\"\"\"\n\tParse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n   .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.\n\t\"\"\"\n\treturn _parse_datetime_internal(timestr, **kwargs)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d3", "code": ["def fromutc(self, dt):\n\t\"\"\"\n\tGiven a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.\n\t\"\"\"\n\tif dt.tzinfo is None:\n\t\treturn dt\n\telif dt.tzinfo.utcoffset(dt) is None:\n\t\treturn dt\n\telse:\n\t\treturn dt.astimezone(dt.tzinfo.tzoffset(dt.tzinfo, -dt.tzinfo.utcoffset(dt)))\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fromutc(self, dt):\n\t\"\"\"\n\tGiven a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.\n\t\"\"\"\n\tif dt.tzinfo is None:\n\t\treturn dt\n\telif dt.tzinfo.utcoffset(dt) is None:\n\t\treturn dt\n\telse:\n\t\treturn dt.astimezone(dt.tzinfo.tzoffset(dt.tzinfo, -dt.tzinfo.utcoffset(dt)))\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "ques_id": "62b8a7b2755ee91dce50a4a7", "code": ["def default_tzinfo(dt, tzinfo):\n\t\"\"\"\n\tSets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.\n\t\"\"\"\n\tif dt.tzinfo is not None:\n\t\treturn dt\n\telse:\n\t\treturn dt.replace(tzinfo=tzinfo)\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def default_tzinfo(dt, tzinfo):\n\t\"\"\"\n\tSets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.\n\t\"\"\"\n\tif dt.tzinfo is not None:\n\t\treturn dt\n\telse:\n\t\treturn dt.replace(tzinfo=tzinfo)\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "ques_id": "6305f9991d275c6667163c50", "code": ["def set_cut_chars(self, before:\n\t\"\"\"\n\tSet the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.\n\t\"\"\"\n\tself.cut_chars = before\n\tself.after_chars = after\n\n\tself.cut_chars_len = len(self.cut_chars)\n\tself.after_chars_len = len(self.after_chars)\n\n\tself.cut_chars_len_str = str(self.cut_chars_len)\n\tself.after_chars_len_str = str(self.after_chars_len)\n\n\tself.cut_chars_len_str_len = len(self.cut_chars_len_str)\n\tself.after_chars_len_str_len = len(self.after_chars_len_str)\n\n\tself.cut_chars_len_str_len_str = str(self.cut_chars_len_str_len)\n\tself.after_chars_len_str_len_str = str(self.after_chars_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len = len(self.cut_chars_len_str_len_str)\n\n\tself.cut_chars_len_str_len_str_len_str = str(self.cut_chars_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str = str(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len_str_len = len(self.cut"], "level": "class_runnable", "generate_results": [{"generate_code": "def set_cut_chars(self, before:\n\t\"\"\"\n\tSet the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.\n\t\"\"\"\n\tself.cut_chars = before\n\tself.after_chars = after\n\n\tself.cut_chars_len = len(self.cut_chars)\n\tself.after_chars_len = len(self.after_chars)\n\n\tself.cut_chars_len_str = str(self.cut_chars_len)\n\tself.after_chars_len_str = str(self.after_chars_len)\n\n\tself.cut_chars_len_str_len = len(self.cut_chars_len_str)\n\tself.after_chars_len_str_len = len(self.after_chars_len_str)\n\n\tself.cut_chars_len_str_len_str = str(self.cut_chars_len_str_len)\n\tself.after_chars_len_str_len_str = str(self.after_chars_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len = len(self.cut_chars_len_str_len_str)\n\n\tself.cut_chars_len_str_len_str_len_str = str(self.cut_chars_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str = str(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len_str_len = len(self.cut_chars_len_str_len_str_len_str_len)\n\n\tself.cut_chars_len_str_len_str_len_str_len_str_len_str_len = len(self.cut", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "ques_id": "6306292052e177c0ba469f09", "code": ["def identify_request(request:\n\t\"\"\"\n\tTry to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.\n\t\"\"\"\n\ttry:\n\t\tif request.is_legacy_payload():\n\t\t\treturn True\n\t\telif request.is_private_message():\n\t\t\treturn True\n\t\telif request.is_public_message():\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\texcept Exception as e:\n\t\treturn False\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def identify_request(request:\n\t\"\"\"\n\tTry to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.\n\t\"\"\"\n\ttry:\n\t\tif request.is_legacy_payload():\n\t\t\treturn True\n\t\telif request.is_private_message():\n\t\t\treturn True\n\t\telif request.is_public_message():\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\texcept Exception as e:\n\t\treturn False\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "ques_id": "6306292152e177c0ba469f0d", "code": ["def identify_request(request:\n\t\"\"\"\n\tTry to identify whether this is a Matrix request\n\t\"\"\"\n\tif request.method == 'GET':\n\t\treturn True\n\telif request.method == 'POST':\n\t\treturn False\n\telse:\n\t\treturn False\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def identify_request(request:\n\t\"\"\"\n\tTry to identify whether this is a Matrix request\n\t\"\"\"\n\tif request.method == 'GET':\n\t\treturn True\n\telif request.method == 'POST':\n\t\treturn False\n\telse:\n\t\treturn False\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "ques_id": "6306292252e177c0ba469f11", "code": ["def format_dt(dt):\n\t\"\"\"\n\tFormat a datetime in the way that D* nodes expect.\n\t\"\"\"\n\tif dt.tzinfo is None:\n\t\tdt = dt.replace(tzinfo=timezone.utc)\n\treturn dt.astimezone(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S')\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def format_dt(dt):\n\t\"\"\"\n\tFormat a datetime in the way that D* nodes expect.\n\t\"\"\"\n\tif dt.tzinfo is None:\n\t\tdt = dt.replace(tzinfo=timezone.utc)\n\treturn dt.astimezone(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S')\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "ques_id": "6306292352e177c0ba469f1d", "code": ["def find_tags(text:\n\t\"\"\"\n\tFind tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.\n\t\"\"\"\n\ttags = set()\n\treplacer = None\n\tif text.startswith(\"<code>\"):\n\t\treplacer = lambda x: x.replace(\"<code>\", \"\")\n\telif text.startswith(\"<code>\"):\n\t\treplacer = lambda x: x.replace(\"<code>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.start"], "level": "file_runnable", "generate_results": [{"generate_code": "def find_tags(text:\n\t\"\"\"\n\tFind tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.\n\t\"\"\"\n\ttags = set()\n\treplacer = None\n\tif text.startswith(\"<code>\"):\n\t\treplacer = lambda x: x.replace(\"<code>\", \"\")\n\telif text.startswith(\"<code>\"):\n\t\treplacer = lambda x: x.replace(\"<code>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.startswith(\"<pre>\"):\n\t\treplacer = lambda x: x.replace(\"<pre>\", \"\")\n\telif text.start", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "ques_id": "6306292352e177c0ba469f1e", "code": ["def process_text_links(text):\n\t\"\"\"\n\tProcess links in text, adding some attributes and linkifying textual links.\n\t\"\"\"\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext"], "level": "plib_runnable", "generate_results": [{"generate_code": "def process_text_links(text):\n\t\"\"\"\n\tProcess links in text, adding some attributes and linkifying textual links.\n\t\"\"\"\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext = re.sub(r'\\s+','', text)\n\ttext", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "ques_id": "6306292652e177c0ba469f34", "code": ["def fetch_content_type(url:\n\t\"\"\"\n\tFetch the HEAD of the remote url to determine the content type.\n\t\"\"\"\n\ttry:\n\t\tresponse = requests.head(url, allow_redirects=True)\n\t\tif response.status_code == 200:\n\t\t\treturn response.headers['Content-Type']\n\texcept requests.exceptions.RequestException as e:\n\t\tprint(e)\n\t\treturn None\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def fetch_content_type(url:\n\t\"\"\"\n\tFetch the HEAD of the remote url to determine the content type.\n\t\"\"\"\n\ttry:\n\t\tresponse = requests.head(url, allow_redirects=True)\n\t\tif response.status_code == 200:\n\t\t\treturn response.headers['Content-Type']\n\texcept requests.exceptions.RequestException as e:\n\t\tprint(e)\n\t\treturn None\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "ques_id": "6306292a52e177c0ba469f41", "code": ["def test_tag(tag:\n\t\"\"\"\n\tTest a word whether it could be accepted as a tag.\n\t\"\"\"\n\tassert tag.tag == \"tag\"\n\tassert tag.text == \"tag\"\n\tassert tag.attributes == {}\n\tassert tag.next_sibling is None\n\tassert tag.previous_sibling is None\n\tassert tag.next_element is None\n\tassert tag.previous_element is None\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\t"], "level": "file_runnable", "generate_results": [{"generate_code": "def test_tag(tag:\n\t\"\"\"\n\tTest a word whether it could be accepted as a tag.\n\t\"\"\"\n\tassert tag.tag == \"tag\"\n\tassert tag.text == \"tag\"\n\tassert tag.attributes == {}\n\tassert tag.next_sibling is None\n\tassert tag.previous_sibling is None\n\tassert tag.next_element is None\n\tassert tag.previous_element is None\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\tassert tag.previous_elements_are_from_same_document(tag)\n\tassert tag.next_elements_are_from_same_document(tag)\n\t", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "ques_id": "6306298b52e177c0ba469fdc", "code": ["def xml_children_as_dict(node):\n\t\"\"\"\n\tTurn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.\n\t\"\"\"\n\tif node.tag == 'xml':\n\t\treturn {'xml': node.text}\n\telse:\n\t\treturn {'xml': node.tag}\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def xml_children_as_dict(node):\n\t\"\"\"\n\tTurn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.\n\t\"\"\"\n\tif node.tag == 'xml':\n\t\treturn {'xml': node.text}\n\telse:\n\t\treturn {'xml': node.tag}\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "ques_id": "6306299052e177c0ba469fe8", "code": ["def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\t\"\"\"\n\tEnsure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.\n\t\"\"\"\n\tif sender_handle!= entity_handle:\n\t\traise Exception(\"Sender and entity handle mismatch\")\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n\t\"\"\"\n\tEnsure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.\n\t\"\"\"\n\tif sender_handle!= entity_handle:\n\t\traise Exception(\"Sender and entity handle mismatch\")\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "ques_id": "630629b952e177c0ba46a043", "code": ["def get_nodeinfo_well_known_document(url, document_path=None):\n\t\"\"\"\n\tGenerate a NodeInfo.well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict\n\t\"\"\"\n\tif document_path is None:\n\t\tdocument_path = url\n\treturn {\n\t\t\"type\": \"nodeinfo\",\n\t\t\"url\": document_path,\n\t\t\"version\": \"1.0\",\n\t\t\"format\": \"json\",\n\t\t\"format_version\": \"1.0\",\n\t\t\"format_version_date\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n\t\"\"\"\n\tGenerate a NodeInfo.well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict\n\t\"\"\"\n\tif document_path is None:\n\t\tdocument_path = url\n\treturn {\n\t\t\"type\": \"nodeinfo\",\n\t\t\"url\": document_path,\n\t\t\"version\": \"1.0\",\n\t\t\"format\": \"json\",\n\t\t\"format_version\": \"1.0\",\n\t\t\"format_version_date\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:00Z\",\n\t\t\"format_version_date_time_millis_millis_millis_millis_millis_millis_millis_millis\": \"2021-03-01T00:00:", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "ques_id": "630629d052e177c0ba46a0a1", "code": ["def verify_relayable_signature(public_key, doc, signature):\n\t\"\"\"\n\tVerify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.\n\t\"\"\"\n\ttry:\n\t\t#"], "level": "project_runnable", "generate_results": [{"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n\t\"\"\"\n\tVerify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.\n\t\"\"\"\n\ttry:\n\t\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "ques_id": "630629e052e177c0ba46a0c4", "code": ["def parse_diaspora_webfinger(document:\n\t\"\"\"\n\tParse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html\n\t\"\"\"\n\timport json\n\timport re\n\timport requests\n\tfrom datetime import datetime\n\tfrom dateutil.relativedelta import relativedelta\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import urljoin\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urljoin\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib."], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_diaspora_webfinger(document:\n\t\"\"\"\n\tParse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html\n\t\"\"\"\n\timport json\n\timport re\n\timport requests\n\tfrom datetime import datetime\n\tfrom dateutil.relativedelta import relativedelta\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import urljoin\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urljoin\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.parse import urlencode\n\tfrom urllib.parse import urlunparse\n\tfrom urllib.parse import urlparse\n\tfrom urllib.parse import parse_qs\n\tfrom urllib.parse import unquote\n\tfrom urllib.", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "ques_id": "630629e152e177c0ba46a0d1", "code": ["def try_retrieve_webfinger_document(handle:\n\t\"\"\"\n\tTry to retrieve an RFC7033 webfinger document. Does not raise if it fails.\n\t\"\"\"\n\ttry:\n\t\treturn requests.get(f\"https://www.webfinger.com/{handle}\").text\n\texcept requests.exceptions.RequestException:\n\t\treturn None\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def try_retrieve_webfinger_document(handle:\n\t\"\"\"\n\tTry to retrieve an RFC7033 webfinger document. Does not raise if it fails.\n\t\"\"\"\n\ttry:\n\t\treturn requests.get(f\"https://www.webfinger.com/{handle}\").text\n\texcept requests.exceptions.RequestException:\n\t\treturn None\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "ques_id": "630629e152e177c0ba46a0d2", "code": ["def retrieve_and_parse_diaspora_webfinger(handle):\n\t\"\"\"\n\tRetrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict\n\t\"\"\"\n\turl = \"https://diaspora.org/diaspora/webfinger/%s\" % handle\n\ttry:\n\t\tresponse = requests.get(url)\n\t\tresponse.raise_for_status()\n\texcept requests.exceptions.HTTPError as err:\n\t\traise Exception(\"Error retrieving Diaspora webfinger document: %s\" % err)\n\treturn response.json()\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n\t\"\"\"\n\tRetrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict\n\t\"\"\"\n\turl = \"https://diaspora.org/diaspora/webfinger/%s\" % handle\n\ttry:\n\t\tresponse = requests.get(url)\n\t\tresponse.raise_for_status()\n\texcept requests.exceptions.HTTPError as err:\n\t\traise Exception(\"Error retrieving Diaspora webfinger document: %s\" % err)\n\treturn response.json()\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "ques_id": "630629e252e177c0ba46a0d6", "code": ["def retrieve_diaspora_host_meta(host):\n\t\"\"\"\n\tRetrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance\n\t\"\"\"\n\treturn XRD(host, 'host-meta')\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def retrieve_diaspora_host_meta(host):\n\t\"\"\"\n\tRetrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance\n\t\"\"\"\n\treturn XRD(host, 'host-meta')\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "ques_id": "630629e752e177c0ba46a0fb", "code": ["def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n\t\"\"\"\n\tHelper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)\n\t\"\"\"\n\tif method == \"post\":\n\t\treturn requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n\telse:\n\t\treturn requests.get(url, data=data, timeout=timeout, *args, **kwargs)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n\t\"\"\"\n\tHelper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)\n\t\"\"\"\n\tif method == \"post\":\n\t\treturn requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n\telse:\n\t\treturn requests.get(url, data=data, timeout=timeout, *args, **kwargs)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "ques_id": "6306091073426c38ae68acac", "code": ["def dict_insert(dic, val, key, *keys):\n\t\"\"\"\n\tinsert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain\n\t\"\"\"\n\tif key in dic:\n\t\tfor key_ in keys:\n\t\t\tif key_ in dic[key]:\n\t\t\t\tdic[key][key_] = dic[key][key_] + val\n\t\t\telse:\n\t\t\t\tdic[key][key_] = val\n\telse:\n\t\tdic[key] = {key:val}\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def dict_insert(dic, val, key, *keys):\n\t\"\"\"\n\tinsert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain\n\t\"\"\"\n\tif key in dic:\n\t\tfor key_ in keys:\n\t\t\tif key_ in dic[key]:\n\t\t\t\tdic[key][key_] = dic[key][key_] + val\n\t\t\telse:\n\t\t\t\tdic[key][key_] = val\n\telse:\n\t\tdic[key] = {key:val}\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "ques_id": "6306091a73426c38ae68acc8", "code": ["def list_of_file_names(settings_dirs, spec_option):\n\t\"\"\"\n\tCreate a new IniType complex type\n\t\"\"\"\n\t#"], "level": "plib_runnable", "generate_results": [{"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n\t\"\"\"\n\tCreate a new IniType complex type\n\t\"\"\"\n\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "ques_id": "6306091b73426c38ae68acd7", "code": ["def ansible_config_manager(cls):\n\t\"\"\"\n\tGets the ansible config manager.\n\t\"\"\"\n\treturn AnsibleConfigManager(cls)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def ansible_config_manager(cls):\n\t\"\"\"\n\tGets the ansible config manager.\n\t\"\"\"\n\treturn AnsibleConfigManager(cls)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "ques_id": "6306091b73426c38ae68acd9", "code": ["def workspace_manager(cls):\n\t\"\"\"\n\tGets the workspace manager.\n\t\"\"\"\n\treturn cls.workspace_manager\n\nclass WorkspaceManager(object):\n\t\"\"\"\n\tA class to manage the workspace.\n\t\"\"\"\n\tdef __init__(self, workspace_manager):\n\t\t\"\"\"\n\t\tConstructor.\n\t\t\"\"\"\n\t\tself.workspace_manager = workspace_manager\n\n\tdef get_workspace(self, workspace_name):\n\t\t\"\"\"\n\t\tGets the workspace.\n\t\t\"\"\"\n\t\treturn self.workspace_manager.get_workspace(workspace_name)\n\n\tdef create_workspace(self, workspace_name, workspace_type):\n\t\t\"\"\"\n\t\tCreates a workspace.\n\t\t\"\"\"\n\t\treturn self.workspace_manager.create_workspace(workspace_name, workspace_type)\n\n\tdef delete_workspace(self, workspace_name):\n\t\t\"\"\"\n\t\tDeletes a workspace.\n\t\t\"\"\"\n\t\treturn self.workspace_manager.delete_workspace(workspace_name)\n\n\tdef get_workspace_types(self):\n\t\t\"\"\"\n\t\tGets the workspace types.\n\t\t\"\"\"\n\t\treturn self.workspace_manager.get_workspace_types()\n\n\tdef get_workspace_types_by_name(self, workspace_name):\n\t\t\"\"\"\n\t\tGets the workspace types by name.\n\t\t\"\"\"\n\t\treturn self.workspace_manager.get_workspace_types_by_name(workspace_name)\n\n\tdef get_workspace_types_by_id(self, workspace_type_id):\n\t\t\"\"\"\n\t\tGets the workspace types by id.\n\t\t\"\"\"\n\t\treturn self.workspace_manager.get_workspace_types_by_id(workspace_type_id)\n\n\tdef get_workspace_types_by_name_and_id(self, workspace_name, workspace_type_id):\n\t\t\"\"\"\n\t\tGets the workspace types by name and id.\n\t\t\"\"\"\n\t\treturn self.workspace_manager.get_workspace_types_by_name_and_id(workspace_name, workspace_type_id)\n\n\tdef get_workspace_types_by_name_and_id_and_workspace_id(self, workspace_name, workspace_type_id, workspace_id):\n\t\t\"\"\"\n\t\tGets the workspace types by name and id and workspace id.\n\t\t\"\"\"\n\t\treturn self.workspace_manager.get_workspace_types_by_name_and_id_and_workspace_id(workspace_name, workspace_type_id, workspace_id)\n\n\tdef get_workspace_types_by_name_and_id_and_workspace_id_and_workspace_name(self, workspace_name, workspace_type_id, workspace_id, workspace_name_to_find):\n\t\t\"\"\"\n\t\tGets the workspace types by name and id and workspace id and workspace name.\n\t\t\"\"\"\n\t\treturn self.workspace_manager.get_workspace_types_by_name_and_id_and_workspace_id_and_workspace_name(workspace_name, workspace_type_id, workspace_id, workspace_name_to_find)\n\n\tdef get_workspace_types_by_name_and_id_and_workspace_id_and_workspace_name_and_workspace_type(self, workspace_name, workspace_type_id, workspace_id, workspace_name_to_find, workspace_type):\n\t\t\"\"\"\n\t\tGets the workspace types by name and id and workspace id and workspace name and workspace type.\n\t\t\"\"\"\n\t\treturn self.workspace_manager.get_workspace_types_by_name_and_id_and_workspace_id_and_workspace_name_and_workspace_type(workspace_name, workspace_type_id, workspace_id, workspace_name_to_find, workspace_type)\n\n\tdef get_workspace_types_by_name_and_id_and_workspace_id_and_workspace_name_and_workspace_type_and_workspace_name(self, workspace_name, workspace_type_id, workspace_id, workspace_name_to_find, workspace_type):\n\t\t\"\"\"\n\t\tGets the workspace types by name and id and workspace id and workspace name and workspace type and workspace name.\n\t\t\"\"\"\n\t\treturn self.works"], "level": "class_runnable", "generate_results": [{"generate_code": "def workspace_manager(cls):\n\t\"\"\"\n\tGets the workspace manager.\n\t\"\"\"\n\treturn cls.workspace_manager\n\nclass WorkspaceManager(object):\n\t\"\"\"\n\tA class to manage the workspace.\n\t\"\"\"\n\tdef __init__(self, workspace_manager):\n\t\t\"\"\"\n\t\tConstructor.\n\t\t\"\"\"\n\t\tself.workspace_manager = workspace_manager\n\n\tdef get_workspace(self, workspace_name):\n\t\t\"\"\"\n\t\tGets the workspace.\n\t\t\"\"\"\n\t\treturn self.workspace_manager.get_workspace(workspace_name)\n\n\tdef create_workspace(self, workspace_name, workspace_type):\n\t\t\"\"\"\n\t\tCreates a workspace.\n\t\t\"\"\"\n\t\treturn self.workspace_manager.create_workspace(workspace_name, workspace_type)\n\n\tdef delete_workspace(self, workspace_name):\n\t\t\"\"\"\n\t\tDeletes a workspace.\n\t\t\"\"\"\n\t\treturn self.workspace_manager.delete_workspace(workspace_name)\n\n\tdef get_workspace_types(self):\n\t\t\"\"\"\n\t\tGets the workspace types.\n\t\t\"\"\"\n\t\treturn self.workspace_manager.get_workspace_types()\n\n\tdef get_workspace_types_by_name(self, workspace_name):\n\t\t\"\"\"\n\t\tGets the workspace types by name.\n\t\t\"\"\"\n\t\treturn self.workspace_manager.get_workspace_types_by_name(workspace_name)\n\n\tdef get_workspace_types_by_id(self, workspace_type_id):\n\t\t\"\"\"\n\t\tGets the workspace types by id.\n\t\t\"\"\"\n\t\treturn self.workspace_manager.get_workspace_types_by_id(workspace_type_id)\n\n\tdef get_workspace_types_by_name_and_id(self, workspace_name, workspace_type_id):\n\t\t\"\"\"\n\t\tGets the workspace types by name and id.\n\t\t\"\"\"\n\t\treturn self.workspace_manager.get_workspace_types_by_name_and_id(workspace_name, workspace_type_id)\n\n\tdef get_workspace_types_by_name_and_id_and_workspace_id(self, workspace_name, workspace_type_id, workspace_id):\n\t\t\"\"\"\n\t\tGets the workspace types by name and id and workspace id.\n\t\t\"\"\"\n\t\treturn self.workspace_manager.get_workspace_types_by_name_and_id_and_workspace_id(workspace_name, workspace_type_id, workspace_id)\n\n\tdef get_workspace_types_by_name_and_id_and_workspace_id_and_workspace_name(self, workspace_name, workspace_type_id, workspace_id, workspace_name_to_find):\n\t\t\"\"\"\n\t\tGets the workspace types by name and id and workspace id and workspace name.\n\t\t\"\"\"\n\t\treturn self.workspace_manager.get_workspace_types_by_name_and_id_and_workspace_id_and_workspace_name(workspace_name, workspace_type_id, workspace_id, workspace_name_to_find)\n\n\tdef get_workspace_types_by_name_and_id_and_workspace_id_and_workspace_name_and_workspace_type(self, workspace_name, workspace_type_id, workspace_id, workspace_name_to_find, workspace_type):\n\t\t\"\"\"\n\t\tGets the workspace types by name and id and workspace id and workspace name and workspace type.\n\t\t\"\"\"\n\t\treturn self.workspace_manager.get_workspace_types_by_name_and_id_and_workspace_id_and_workspace_name_and_workspace_type(workspace_name, workspace_type_id, workspace_id, workspace_name_to_find, workspace_type)\n\n\tdef get_workspace_types_by_name_and_id_and_workspace_id_and_workspace_name_and_workspace_type_and_workspace_name(self, workspace_name, workspace_type_id, workspace_id, workspace_name_to_find, workspace_type):\n\t\t\"\"\"\n\t\tGets the workspace types by name and id and workspace id and workspace name and workspace type and workspace name.\n\t\t\"\"\"\n\t\treturn self.works", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "ques_id": "6306091b73426c38ae68acda", "code": ["def plugins_manager(cls):\n\t\"\"\"\n\tGets the plugin manager.\n\t\"\"\"\n\treturn cls._plugins_manager"], "level": "file_runnable", "generate_results": [{"generate_code": "def plugins_manager(cls):\n\t\"\"\"\n\tGets the plugin manager.\n\t\"\"\"\n\treturn cls._plugins_manager", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "ques_id": "6306091c73426c38ae68acdc", "code": ["def validate_from_content(cls, spec_content=None):\n\t\"\"\"\n\tvalidates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file\n\t\"\"\"\n\tif spec_content is None:\n\t\traise IRValidatorException(\"spec_content is None\")\n\n\tif not isinstance(spec_content, dict):\n\t\traise IRValidatorException(\"spec_content is not a dictionary\")\n\n\tif not all(key in spec_content for key in (\n\t\t\"name\",\n\t\t\"version\",\n\t\t\"description\",\n\t\t\"author\",\n\t\t\"license\",\n\t\t\"license_url\",\n\t\t\"license_file\",\n\t\t\"license_file_url\",\n\t\t\"license_file_url_path\",\n\t\t\"license_file_url_path_ext\",\n\t\t\"license_file_url_path_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_content(cls, spec_content=None):\n\t\"\"\"\n\tvalidates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file\n\t\"\"\"\n\tif spec_content is None:\n\t\traise IRValidatorException(\"spec_content is None\")\n\n\tif not isinstance(spec_content, dict):\n\t\traise IRValidatorException(\"spec_content is not a dictionary\")\n\n\tif not all(key in spec_content for key in (\n\t\t\"name\",\n\t\t\"version\",\n\t\t\"description\",\n\t\t\"author\",\n\t\t\"license\",\n\t\t\"license_url\",\n\t\t\"license_file\",\n\t\t\"license_file_url\",\n\t\t\"license_file_url_path\",\n\t\t\"license_file_url_path_ext\",\n\t\t\"license_file_url_path_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_ext_ext_ext\",\n\t\t\"license_file_url_path_ext_ext_", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "ques_id": "6306091c73426c38ae68acdd", "code": ["def validate_from_file(cls, yaml_file=None):\n\t\"\"\"\n\tLoads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file\n\t\"\"\"\n\tif yaml_file is None:\n\t\traise ValueError(\"YAML file is missing\")\n\n\tif not os.path.exists(yaml_file):\n\t\traise ValueError(\"YAML file does not exist\")\n\n\twith open(yaml_file, 'r') as f:\n\t\ttry:\n\t\t\tdata = yaml.safe_load(f)\n\t\texcept yaml.YAMLError as exc:\n\t\t\traise IRValidatorException(exc)\n\n\treturn data"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_file(cls, yaml_file=None):\n\t\"\"\"\n\tLoads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file\n\t\"\"\"\n\tif yaml_file is None:\n\t\traise ValueError(\"YAML file is missing\")\n\n\tif not os.path.exists(yaml_file):\n\t\traise ValueError(\"YAML file does not exist\")\n\n\twith open(yaml_file, 'r') as f:\n\t\ttry:\n\t\t\tdata = yaml.safe_load(f)\n\t\texcept yaml.YAMLError as exc:\n\t\t\traise IRValidatorException(exc)\n\n\treturn data", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "ques_id": "6306091d73426c38ae68ace5", "code": ["def _include_groups(self, parser_dict):\n\t\"\"\"\n\tResolves the include dict directive in the spec files.\n\t\"\"\"\n\tif not parser_dict:\n\t\treturn\n\tif 'include' not in parser_dict:\n\t\treturn\n\tif 'groups' not in parser_dict:\n\t\treturn\n\tfor group in parser_dict['groups']:\n\t\tif group not in parser_dict:\n\t\t\tcontinue\n\t\tif 'include' not in parser_dict[group]:\n\t\t\tcontinue\n\t\tif 'groups' not in parser_dict[group]:\n\t\t\tcontinue\n\t\tfor include in parser_dict[group]['include']:\n\t\t\tif include not in parser_dict:\n\t\t\t\tcontinue\n\t\t\tif 'groups' not in parser_dict[include]:\n\t\t\t\tcontinue\n\t\t\tfor group in parser_dict[include]['groups']:\n\t\t\t\tif group not in parser_dict:\n\t\t\t\t\tcontinue\n\t\t\t\tif 'include' not in parser_dict[group]:\n\t\t\t\t\tcontinue\n\t\t\t\tif 'groups' not in parser_dict[group]:\n\t\t\t\t\tcontinue\n\t\t\t\tfor include in parser_dict[group]['include']:\n\t\t\t\t\tif include not in parser_dict:\n\t\t\t\t\t\tcontinue\n\t\t\t\t\tif 'groups' not in parser_dict[include]:\n\t\t\t\t\t\tcontinue\n\t\t\t\t\tfor group in parser_dict[include]['groups']:\n\t\t\t\t\t\tif group not in parser_dict:\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\tif 'include' not in parser_dict[group]:\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\tif 'groups' not in parser_dict[group]:\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\tfor include in parser_dict[group]['include']:\n\t\t\t\t\t\t\tif include not in parser_dict:\n\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\tif 'groups' not in parser_dict[include]:\n\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\tfor group in parser_dict[include]['groups']:\n\t\t\t\t\t\t\t\tif group not in parser_dict:\n\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\tif 'include' not in parser_dict[group]:\n\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\tif 'groups' not in parser_dict[group]:\n\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\tfor include in parser_dict[group]['include']:\n\t\t\t\t\t\t\t\t\tif include not in parser_dict:\n\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\tif 'groups' not in parser_dict[include]:\n\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\tfor group in parser_dict[include]['groups']:\n\t\t\t\t\t\t\t\t\t\tif group not in parser_dict:\n\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\tif 'include' not in parser_dict[group]:\n\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\tif 'groups' not in parser_dict[group]:\n\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\tfor include in parser_dict[group]['include']:\n\t\t\t\t\t\t\t\t\t\t\tif include not in parser_dict:\n\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\tif 'groups' not in parser_dict[include]:\n\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\tfor group in parser_dict[include]['groups']:\n\t\t\t\t\t\t\t\t\t\t\t\tif group not in parser_dict:\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\tif 'include' not in parser_dict[group]:\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\tif 'groups' not in parser_dict[group]:\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\tfor include in parser_dict[group]['include']:\n\t\t\t\t\t\t\t\t\t\t\t\t\tif include not in parser_dict:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\tif 'groups' not in parser_dict[include]:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor group in parser_dict[include]['groups']:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif group not in parser_dict:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif 'include' not in parser_dict[group]:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif 'groups' not in parser_dict[group]:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor include in parser_dict[group]['include']:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif include not in parser_dict:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif 'groups' not in parser_dict[include]:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor group in parser_dict[include]['groups']:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif group not in parser_dict:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif 'include' not in parser_dict[group]:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif 'groups' not in parser_dict[group]:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor include in parser_dict[group]['include']:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif include not in parser_dict:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif 'groups' not in parser_dict[include]:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor group in parser_dict[include]["], "level": "class_runnable", "generate_results": [{"generate_code": "def _include_groups(self, parser_dict):\n\t\"\"\"\n\tResolves the include dict directive in the spec files.\n\t\"\"\"\n\tif not parser_dict:\n\t\treturn\n\tif 'include' not in parser_dict:\n\t\treturn\n\tif 'groups' not in parser_dict:\n\t\treturn\n\tfor group in parser_dict['groups']:\n\t\tif group not in parser_dict:\n\t\t\tcontinue\n\t\tif 'include' not in parser_dict[group]:\n\t\t\tcontinue\n\t\tif 'groups' not in parser_dict[group]:\n\t\t\tcontinue\n\t\tfor include in parser_dict[group]['include']:\n\t\t\tif include not in parser_dict:\n\t\t\t\tcontinue\n\t\t\tif 'groups' not in parser_dict[include]:\n\t\t\t\tcontinue\n\t\t\tfor group in parser_dict[include]['groups']:\n\t\t\t\tif group not in parser_dict:\n\t\t\t\t\tcontinue\n\t\t\t\tif 'include' not in parser_dict[group]:\n\t\t\t\t\tcontinue\n\t\t\t\tif 'groups' not in parser_dict[group]:\n\t\t\t\t\tcontinue\n\t\t\t\tfor include in parser_dict[group]['include']:\n\t\t\t\t\tif include not in parser_dict:\n\t\t\t\t\t\tcontinue\n\t\t\t\t\tif 'groups' not in parser_dict[include]:\n\t\t\t\t\t\tcontinue\n\t\t\t\t\tfor group in parser_dict[include]['groups']:\n\t\t\t\t\t\tif group not in parser_dict:\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\tif 'include' not in parser_dict[group]:\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\tif 'groups' not in parser_dict[group]:\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\tfor include in parser_dict[group]['include']:\n\t\t\t\t\t\t\tif include not in parser_dict:\n\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\tif 'groups' not in parser_dict[include]:\n\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\tfor group in parser_dict[include]['groups']:\n\t\t\t\t\t\t\t\tif group not in parser_dict:\n\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\tif 'include' not in parser_dict[group]:\n\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\tif 'groups' not in parser_dict[group]:\n\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\tfor include in parser_dict[group]['include']:\n\t\t\t\t\t\t\t\t\tif include not in parser_dict:\n\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\tif 'groups' not in parser_dict[include]:\n\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\tfor group in parser_dict[include]['groups']:\n\t\t\t\t\t\t\t\t\t\tif group not in parser_dict:\n\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\tif 'include' not in parser_dict[group]:\n\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\tif 'groups' not in parser_dict[group]:\n\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\tfor include in parser_dict[group]['include']:\n\t\t\t\t\t\t\t\t\t\t\tif include not in parser_dict:\n\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\tif 'groups' not in parser_dict[include]:\n\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\tfor group in parser_dict[include]['groups']:\n\t\t\t\t\t\t\t\t\t\t\t\tif group not in parser_dict:\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\tif 'include' not in parser_dict[group]:\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\tif 'groups' not in parser_dict[group]:\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\tfor include in parser_dict[group]['include']:\n\t\t\t\t\t\t\t\t\t\t\t\t\tif include not in parser_dict:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\tif 'groups' not in parser_dict[include]:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor group in parser_dict[include]['groups']:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif group not in parser_dict:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif 'include' not in parser_dict[group]:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif 'groups' not in parser_dict[group]:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor include in parser_dict[group]['include']:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif include not in parser_dict:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif 'groups' not in parser_dict[include]:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor group in parser_dict[include]['groups']:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif group not in parser_dict:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif 'include' not in parser_dict[group]:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif 'groups' not in parser_dict[group]:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor include in parser_dict[group]['include']:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif include not in parser_dict:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif 'groups' not in parser_dict[include]:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor group in parser_dict[include][", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "ques_id": "6306092373426c38ae68acfa", "code": ["def get_spec_defaults(self):\n\t\"\"\"\n\tResolve arguments' values from spec and other sources.\n\t\"\"\"\n\tspec_defaults = {}\n\tfor arg in self.args:\n\t\tif arg.default is not None:\n\t\t\tspec_defaults[arg.name] = arg.default\n\treturn spec_defaults\n\n\t\nclass Argument(object):\n\t\"\"\"\n\tA single argument.\n\t\"\"\"\n\tdef __init__(self, name, default=None, help=None, required=False,\n\t\t\tchoices=None, metavar=None, type=None, default_metavar=None,\n\t\t\tnargs=None, const=None, required_if=None,\n\t\t\tchoices_metavar=None, metavar_prefix=None,\n\t\t\thelp_prefix=None, metavar_prefix_default=None,\n\t\t\tmetavar_prefix_choices=None, metavar_prefix_required=None,\n\t\t\tmetavar_prefix_choices_metavar=None, metavar_prefix_required_if=None,\n\t\t\tmetavar_prefix_required_if_metavar=None, metavar_prefix_required_if_metavar_prefix=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_default=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_choices=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_default=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_choices=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_default=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_choices=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_default=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_default=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_met"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_spec_defaults(self):\n\t\"\"\"\n\tResolve arguments' values from spec and other sources.\n\t\"\"\"\n\tspec_defaults = {}\n\tfor arg in self.args:\n\t\tif arg.default is not None:\n\t\t\tspec_defaults[arg.name] = arg.default\n\treturn spec_defaults\n\n\t\nclass Argument(object):\n\t\"\"\"\n\tA single argument.\n\t\"\"\"\n\tdef __init__(self, name, default=None, help=None, required=False,\n\t\t\tchoices=None, metavar=None, type=None, default_metavar=None,\n\t\t\tnargs=None, const=None, required_if=None,\n\t\t\tchoices_metavar=None, metavar_prefix=None,\n\t\t\thelp_prefix=None, metavar_prefix_default=None,\n\t\t\tmetavar_prefix_choices=None, metavar_prefix_required=None,\n\t\t\tmetavar_prefix_choices_metavar=None, metavar_prefix_required_if=None,\n\t\t\tmetavar_prefix_required_if_metavar=None, metavar_prefix_required_if_metavar_prefix=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_default=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_choices=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_default=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_choices=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_default=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_choices=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_default=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_required_if_metavar_prefix_default=None,\n\t\t\tmetavar_prefix_required_if_metavar_prefix_required_if_met", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "ques_id": "6306092973426c38ae68ad01", "code": ["def get_deprecated_args(self):\n\t\"\"\"\n\tReturning dict with options which deprecate others.\n\t\"\"\"\n\treturn {\n\t\t'name': self.name,\n\t\t'category': self.category,\n\t\t'category_id': self.category_id,\n\t\t'user_id': self.user_id,\n\t\t'user_id_str': self.user_id_str,\n\t\t'user_name': self.user_name,\n\t\t'user_name_str': self.user_name_str,\n\t\t'user_avatar': self.user_avatar,\n\t\t'user_avatar_str': self.user_avatar_str,\n\t\t'user_avatar_url': self.user_avatar_url,\n\t\t'user_avatar_url_str': self.user_avatar_url_str,\n\t\t'user_avatar_url_small': self.user_avatar_url_small,\n\t\t'user_avatar_url_medium': self.user_avatar_url_medium,\n\t\t'user_avatar_url_large': self.user_avatar_url_large,\n\t\t'user_avatar_url_small_url': self.user_avatar_url_small_url,\n\t\t'user_avatar_url_medium_url': self.user_avatar_url_medium_url,\n\t\t'user_avatar_url_large_url': self.user_avatar_url_large_url,\n\t\t'user_avatar_url_small_url_url': self.user_avatar_url_small_url_url,\n\t\t'user_avatar_url_medium_url_url': self.user_avatar_url_medium_url_url,\n\t\t'user_avatar_url_large_url_url': self.user_avatar_url_large_url_url,\n\t\t'user_avatar_url_small_url_small': self.user_avatar_url_small_url_small,\n\t\t'user_avatar_url_medium_url_small': self.user_avatar_url_medium_url_small,\n\t\t'user_avatar_url_large_url_small': self.user_avatar_url_large_url_small,\n\t\t'user_avatar_url_medium_url_medium': self.user_avatar_url_medium_url_medium,\n\t\t'user_avatar_url_large_url_medium': self.user_avatar_url_large_url_medium,\n\t\t'user_avatar_url_medium_url_large': self.user_avatar_url_medium_url_large,\n\t\t'user_avatar_url_large_url_large': self.user_avatar_url_large_url_large,\n\t\t'user_avatar_url_small_url_small_url': self.user_avatar_url_small_url_small_url,\n\t\t'user_avatar_url_medium_url_small_url': self.user_avatar_url_medium_url_small_url,\n\t\t'user_avatar_url_large_url_small_url': self.user_avatar_url_large_url_small_url,\n\t\t'user_avatar_url_medium_url_medium_url': self.user_avatar_url_medium_url_medium_url,\n\t\t'user_avatar_url_large_url_medium_url': self.user_avatar_url_large_url_medium_url,\n\t\t'user_avatar_url_medium_url_large_url': self.user_avatar_url_medium_url_large_url,\n\t\t'user_avatar_url_large_url_large': self.user_avatar_url_large_url_large,\n\t\t'user_avatar_url_small_url_small_url_url': self.user_avatar_url_small_url_small_url_url,\n\t\t'user_avatar_url_medium_url_small_url_url': self.user_avatar_url_medium_url_small_url_url,\n\t\t'user_avatar_url_large_url_small_url_url': self.user_avatar_url_large_url_small_url_url,\n\t\t'user_av"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_deprecated_args(self):\n\t\"\"\"\n\tReturning dict with options which deprecate others.\n\t\"\"\"\n\treturn {\n\t\t'name': self.name,\n\t\t'category': self.category,\n\t\t'category_id': self.category_id,\n\t\t'user_id': self.user_id,\n\t\t'user_id_str': self.user_id_str,\n\t\t'user_name': self.user_name,\n\t\t'user_name_str': self.user_name_str,\n\t\t'user_avatar': self.user_avatar,\n\t\t'user_avatar_str': self.user_avatar_str,\n\t\t'user_avatar_url': self.user_avatar_url,\n\t\t'user_avatar_url_str': self.user_avatar_url_str,\n\t\t'user_avatar_url_small': self.user_avatar_url_small,\n\t\t'user_avatar_url_medium': self.user_avatar_url_medium,\n\t\t'user_avatar_url_large': self.user_avatar_url_large,\n\t\t'user_avatar_url_small_url': self.user_avatar_url_small_url,\n\t\t'user_avatar_url_medium_url': self.user_avatar_url_medium_url,\n\t\t'user_avatar_url_large_url': self.user_avatar_url_large_url,\n\t\t'user_avatar_url_small_url_url': self.user_avatar_url_small_url_url,\n\t\t'user_avatar_url_medium_url_url': self.user_avatar_url_medium_url_url,\n\t\t'user_avatar_url_large_url_url': self.user_avatar_url_large_url_url,\n\t\t'user_avatar_url_small_url_small': self.user_avatar_url_small_url_small,\n\t\t'user_avatar_url_medium_url_small': self.user_avatar_url_medium_url_small,\n\t\t'user_avatar_url_large_url_small': self.user_avatar_url_large_url_small,\n\t\t'user_avatar_url_medium_url_medium': self.user_avatar_url_medium_url_medium,\n\t\t'user_avatar_url_large_url_medium': self.user_avatar_url_large_url_medium,\n\t\t'user_avatar_url_medium_url_large': self.user_avatar_url_medium_url_large,\n\t\t'user_avatar_url_large_url_large': self.user_avatar_url_large_url_large,\n\t\t'user_avatar_url_small_url_small_url': self.user_avatar_url_small_url_small_url,\n\t\t'user_avatar_url_medium_url_small_url': self.user_avatar_url_medium_url_small_url,\n\t\t'user_avatar_url_large_url_small_url': self.user_avatar_url_large_url_small_url,\n\t\t'user_avatar_url_medium_url_medium_url': self.user_avatar_url_medium_url_medium_url,\n\t\t'user_avatar_url_large_url_medium_url': self.user_avatar_url_large_url_medium_url,\n\t\t'user_avatar_url_medium_url_large_url': self.user_avatar_url_medium_url_large_url,\n\t\t'user_avatar_url_large_url_large': self.user_avatar_url_large_url_large,\n\t\t'user_avatar_url_small_url_small_url_url': self.user_avatar_url_small_url_small_url_url,\n\t\t'user_avatar_url_medium_url_small_url_url': self.user_avatar_url_medium_url_small_url_url,\n\t\t'user_avatar_url_large_url_small_url_url': self.user_avatar_url_large_url_small_url_url,\n\t\t'user_av", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "ques_id": "6306092c73426c38ae68ad02", "code": ["def validate_arg_deprecation(self, cli_args, answer_file_args):\n\t\"\"\"\n\tValidates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files\n\t\"\"\"\n\tif cli_args.get('--deprecation-message', None) is not None:\n\t\tprint(cli_args['--deprecation-message'])\n\t\tsys.exit(1)\n\n\tif cli_args.get('--deprecation-message-file', None) is not None:\n\t\tprint(cli_args['--deprecation-message-file'])\n\t\tsys.exit(1)\n\n\tif cli_args.get('--deprecation-message-file-path', None) is not None:\n\t\tprint(cli_args['--deprecation-message-file-path'])\n\t\tsys.exit(1)\n\n\tif cli_args.get('--deprecation-message-file-path-exists', None) is not None:\n\t\tprint(cli_args['--deprecation-message-file-path-exists'])\n\t\tsys.exit(1)\n\n\tif cli_args.get('--deprecation-message-file-path-exists-and-not-exists', None) is not None:\n\t\tprint(cli_args['--deprecation-message-file-path-exists-and-not-exists'])\n\t\tsys.exit(1)\n\n\tif cli_args.get('--deprecation-message-file-path-exists-and-not-exists-and-not-exists', None) is not None:\n\t\tprint(cli_args['--deprecation-message-file-path-exists-and-not-exists-and-not-exists'])\n\t\tsys.exit(1)\n\n\tif cli_args.get('--deprecation-message-file-path-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists', None) is not None:\n\t\tprint(cli_args['--deprecation-message-file-path-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists'])\n\t\tsys.exit(1)\n\n\tif cli_args.get('--deprecation-message-file-path-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n\t\"\"\"\n\tValidates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files\n\t\"\"\"\n\tif cli_args.get('--deprecation-message', None) is not None:\n\t\tprint(cli_args['--deprecation-message'])\n\t\tsys.exit(1)\n\n\tif cli_args.get('--deprecation-message-file', None) is not None:\n\t\tprint(cli_args['--deprecation-message-file'])\n\t\tsys.exit(1)\n\n\tif cli_args.get('--deprecation-message-file-path', None) is not None:\n\t\tprint(cli_args['--deprecation-message-file-path'])\n\t\tsys.exit(1)\n\n\tif cli_args.get('--deprecation-message-file-path-exists', None) is not None:\n\t\tprint(cli_args['--deprecation-message-file-path-exists'])\n\t\tsys.exit(1)\n\n\tif cli_args.get('--deprecation-message-file-path-exists-and-not-exists', None) is not None:\n\t\tprint(cli_args['--deprecation-message-file-path-exists-and-not-exists'])\n\t\tsys.exit(1)\n\n\tif cli_args.get('--deprecation-message-file-path-exists-and-not-exists-and-not-exists', None) is not None:\n\t\tprint(cli_args['--deprecation-message-file-path-exists-and-not-exists-and-not-exists'])\n\t\tsys.exit(1)\n\n\tif cli_args.get('--deprecation-message-file-path-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists', None) is not None:\n\t\tprint(cli_args['--deprecation-message-file-path-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists'])\n\t\tsys.exit(1)\n\n\tif cli_args.get('--deprecation-message-file-path-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and-not-exists-and", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "ques_id": "6306092d73426c38ae68ad04", "code": ["def get_parser_option_specs(self, command_name):\n\t\"\"\"\n\tGets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options\n\t\"\"\"\n\treturn self.options.get(command_name, [])"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_parser_option_specs(self, command_name):\n\t\"\"\"\n\tGets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options\n\t\"\"\"\n\treturn self.options.get(command_name, [])", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "ques_id": "6306092d73426c38ae68ad05", "code": ["def get_option_spec(self, command_name, argument_name):\n\t\"\"\"\n\tGets the specification for the specified option name.\n\t\"\"\"\n\treturn self.options_spec[command_name][argument_name]"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_option_spec(self, command_name, argument_name):\n\t\"\"\"\n\tGets the specification for the specified option name.\n\t\"\"\"\n\treturn self.options_spec[command_name][argument_name]", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "ques_id": "6306092d73426c38ae68ad06", "code": ["def get_silent_args(self, args):\n\t\"\"\"\n\tlist of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names\n\t\"\"\"\n\tsilenced_args = []\n\tfor arg in args:\n\t\tif arg.startswith('-'):\n\t\t\tsilenced_args.append(arg[1:])\n\t\telse:\n\t\t\tsilenced_args.append(arg)\n\treturn silenced_args"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_silent_args(self, args):\n\t\"\"\"\n\tlist of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names\n\t\"\"\"\n\tsilenced_args = []\n\tfor arg in args:\n\t\tif arg.startswith('-'):\n\t\t\tsilenced_args.append(arg[1:])\n\t\telse:\n\t\t\tsilenced_args.append(arg)\n\treturn silenced_args", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "ques_id": "6306092d73426c38ae68ad07", "code": ["def validate_requires_args(self, args):\n\t\"\"\"\n\tCheck if all the required arguments have been provided.\n\t\"\"\"\n\tif not args.image_path:\n\t\traise ValueError(\"Image path is required.\")\n\tif not args.image_name:\n\t\traise ValueError(\"Image name is required.\")\n\tif not args.image_path.endswith(\".jpg\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.endswith(\".jpg\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.startswith(\"http\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.startswith(\"http\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.endswith(\".jpg\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.endswith(\".jpg\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.startswith(\"http\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.startswith(\"http\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.endswith(\".jpg\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.endswith(\".jpg\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.startswith(\"http\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.startswith(\"http\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.endswith(\".jpg\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.endswith(\".jpg\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.startswith(\"http\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.startswith(\"http\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.endswith(\".jpg\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.endswith(\".jpg\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.startswith(\"http\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.startswith(\"http\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.endswith(\".jpg\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.endswith(\".jpg\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.startswith(\"http\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.startswith(\"http\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.endswith(\".jpg\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.endswith(\".jpg\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.startswith(\"http\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.startswith(\"http\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.endswith(\".jpg\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name."], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_requires_args(self, args):\n\t\"\"\"\n\tCheck if all the required arguments have been provided.\n\t\"\"\"\n\tif not args.image_path:\n\t\traise ValueError(\"Image path is required.\")\n\tif not args.image_name:\n\t\traise ValueError(\"Image name is required.\")\n\tif not args.image_path.endswith(\".jpg\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.endswith(\".jpg\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.startswith(\"http\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.startswith(\"http\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.endswith(\".jpg\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.endswith(\".jpg\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.startswith(\"http\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.startswith(\"http\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.endswith(\".jpg\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.endswith(\".jpg\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.startswith(\"http\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.startswith(\"http\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.endswith(\".jpg\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.endswith(\".jpg\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.startswith(\"http\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.startswith(\"http\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.endswith(\".jpg\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.endswith(\".jpg\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.startswith(\"http\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.startswith(\"http\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.endswith(\".jpg\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.endswith(\".jpg\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.startswith(\"http\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.startswith(\"http\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.endswith(\".jpg\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.endswith(\".jpg\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.startswith(\"http\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.startswith(\"http\"):\n\t\traise ValueError(\"Image name must be a.jpg file.\")\n\tif not args.image_path.endswith(\".jpg\"):\n\t\traise ValueError(\"Image path must be a.jpg file.\")\n\tif not args.image_name.", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "ques_id": "6306092d73426c38ae68ad08", "code": ["def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n\t\"\"\"\n\tList arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition\n\t\"\"\"\n\trequired_when = []\n\tfor option in options_spec:\n\t\tif option.required_when:\n\t\t\trequired_when.append(option.name)\n\treturn required_when, args"], "level": "project_runnable", "generate_results": [{"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n\t\"\"\"\n\tList arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition\n\t\"\"\"\n\trequired_when = []\n\tfor option in options_spec:\n\t\tif option.required_when:\n\t\t\trequired_when.append(option.name)\n\treturn required_when, args", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad09", "code": ["def validate_length_args(self, args):\n\t\"\"\"\n\tCheck if value of arguments is not longer than length specified.\n\n:param args: The received arguments.\n\t\"\"\"\n\tif len(args) > self.length:\n\t\traise ValueError(\"Length of the argument is longer than the maximum allowed length.\")\n\nclass ArgumentParser(argparse.ArgumentParser):\n\t\"\"\"\n\tArgument parser for the command line interface.\n\t\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\tInitialize the ArgumentParser.\n\n\t\t:param args: The received arguments.\n\t\t:param kwargs: The keyword arguments.\n\t\t\"\"\"\n\t\tsuper(ArgumentParser, self).__init__(*args, **kwargs)\n\t\tself.add_argument(\"-l\", \"--length\", type=int, default=None, help=\"The maximum length of the argument.\")\n\t\tself.add_argument(\"-v\", \"--verbose\", action=\"store_true\", help=\"Enable verbose mode.\")\n\t\tself.add_argument(\"-q\", \"--quiet\", action=\"store_true\", help=\"Disable verbose mode.\")\n\t\tself.add_argument(\"-d\", \"--debug\", action=\"store_true\", help=\"Enable debug mode.\")\n\t\tself.add_argument(\"-s\", \"--show\", action=\"store_true\", help=\"Show the arguments.\")\n\t\tself.add_argument(\"-t\", \"--type\", type=str, default=\"string\", help=\"The type of the argument.\")\n\t\tself.add_argument(\"-f\", \"--file\", type=str, default=\"\", help=\"The file to read the arguments from.\")\n\t\tself.add_argument(\"-i\", \"--input\", type=str, default=\"\", help=\"The input file to read the arguments from.\")\n\t\tself.add_argument(\"-o\", \"--output\", type=str, default=\"\", help=\"The output file to write the arguments to.\")\n\t\tself.add_argument(\"-c\", \"--config\", type=str, default=\"\", help=\"The config file to read the arguments from.\")\n\t\tself.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n\t\tself.add_argument(\"-h\", \"--help\", action=\"help\", help=\"Show this help message and exit.\")\n\t\tself.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n\t\tself.add_argument(\"-h\", \"--help\", action=\"help\", help=\"Show this help message and exit.\")\n\t\tself.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n\t\tself.add_argument(\"-h\", \"--help\", action=\"help\", help=\"Show this help message and exit.\")\n\t\tself.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n\t\tself.add_argument(\"-h\", \"--help\", action=\"help\", help=\"Show this help message and exit.\")\n\t\tself.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n\t\tself.add_argument(\"-h\", \"--help\", action=\"help\", help=\"Show this help message and exit.\")\n\t\tself.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n\t\tself.add_argument(\"-h\", \"--help\", action=\"help\", help=\"Show this help message and exit.\")\n\t\tself.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n\t\tself.add_argument(\"-h\", \"--help\", action=\"help\", help=\"Show this help message and exit.\")\n\t\tself.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n\t\tself.add_argument(\"-h\", \"--help\", action=\"help\", help=\"Show this help message and exit.\")\n\t\tself.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n\t\tself.add_argument(\"-h\", \"--help\", action=\"help\", help=\"Show this help message"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_length_args(self, args):\n\t\"\"\"\n\tCheck if value of arguments is not longer than length specified.\n\n:param args: The received arguments.\n\t\"\"\"\n\tif len(args) > self.length:\n\t\traise ValueError(\"Length of the argument is longer than the maximum allowed length.\")\n\nclass ArgumentParser(argparse.ArgumentParser):\n\t\"\"\"\n\tArgument parser for the command line interface.\n\t\"\"\"\n\tdef __init__(self, *args, **kwargs):\n\t\t\"\"\"\n\t\tInitialize the ArgumentParser.\n\n\t\t:param args: The received arguments.\n\t\t:param kwargs: The keyword arguments.\n\t\t\"\"\"\n\t\tsuper(ArgumentParser, self).__init__(*args, **kwargs)\n\t\tself.add_argument(\"-l\", \"--length\", type=int, default=None, help=\"The maximum length of the argument.\")\n\t\tself.add_argument(\"-v\", \"--verbose\", action=\"store_true\", help=\"Enable verbose mode.\")\n\t\tself.add_argument(\"-q\", \"--quiet\", action=\"store_true\", help=\"Disable verbose mode.\")\n\t\tself.add_argument(\"-d\", \"--debug\", action=\"store_true\", help=\"Enable debug mode.\")\n\t\tself.add_argument(\"-s\", \"--show\", action=\"store_true\", help=\"Show the arguments.\")\n\t\tself.add_argument(\"-t\", \"--type\", type=str, default=\"string\", help=\"The type of the argument.\")\n\t\tself.add_argument(\"-f\", \"--file\", type=str, default=\"\", help=\"The file to read the arguments from.\")\n\t\tself.add_argument(\"-i\", \"--input\", type=str, default=\"\", help=\"The input file to read the arguments from.\")\n\t\tself.add_argument(\"-o\", \"--output\", type=str, default=\"\", help=\"The output file to write the arguments to.\")\n\t\tself.add_argument(\"-c\", \"--config\", type=str, default=\"\", help=\"The config file to read the arguments from.\")\n\t\tself.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n\t\tself.add_argument(\"-h\", \"--help\", action=\"help\", help=\"Show this help message and exit.\")\n\t\tself.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n\t\tself.add_argument(\"-h\", \"--help\", action=\"help\", help=\"Show this help message and exit.\")\n\t\tself.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n\t\tself.add_argument(\"-h\", \"--help\", action=\"help\", help=\"Show this help message and exit.\")\n\t\tself.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n\t\tself.add_argument(\"-h\", \"--help\", action=\"help\", help=\"Show this help message and exit.\")\n\t\tself.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n\t\tself.add_argument(\"-h\", \"--help\", action=\"help\", help=\"Show this help message and exit.\")\n\t\tself.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n\t\tself.add_argument(\"-h\", \"--help\", action=\"help\", help=\"Show this help message and exit.\")\n\t\tself.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n\t\tself.add_argument(\"-h\", \"--help\", action=\"help\", help=\"Show this help message and exit.\")\n\t\tself.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n\t\tself.add_argument(\"-h\", \"--help\", action=\"help\", help=\"Show this help message and exit.\")\n\t\tself.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n\t\tself.add_argument(\"-h\", \"--help\", action=\"help\", help=\"Show this help message", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0a", "code": ["def validate_choices_args(self, args):\n\t\"\"\"\n\tCheck if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.\n\t\"\"\"\n\tif args.get('choices') is None:\n\t\treturn\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs."], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_choices_args(self, args):\n\t\"\"\"\n\tCheck if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.\n\t\"\"\"\n\tif args.get('choices') is None:\n\t\treturn\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.get('choices') = [args.get('choices')]\n\tif not isinstance(args.get('choices'), list):\n\t\targs.", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0b", "code": ["def validate_min_max_args(self, args):\n\t\"\"\"\n\tCheck if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.\n\t\"\"\"\n\tif args.min_value is not None and args.max_value is not None:\n\t\tif args.min_value < args.max_value:\n\t\t\traise ValueError(\"Minimum value must be greater than maximum value.\")\n\nclass ValidateArguments(object):\n\t\"\"\"\n\tClass to validate arguments.\n\t\"\"\"\n\tdef __init__(self, args):\n\t\t\"\"\"\n\t\tConstructor.\n\n\t\t:param args: The received arguments.\n\t\t\"\"\"\n\t\tself.args = args\n\n\tdef validate(self):\n\t\t\"\"\"\n\t\tValidate arguments.\n\t\t\"\"\"\n\t\tself.args.validate()\n\nclass ValidateArgumentsWithDefault(object):\n\t\"\"\"\n\tClass to validate arguments with default value.\n\t\"\"\"\n\tdef __init__(self, args, default):\n\t\t\"\"\"\n\t\tConstructor.\n\n\t\t:param args: The received arguments.\n\t\t:param default: The default value.\n\t\t\"\"\"\n\t\tself.args = args\n\t\tself.default = default\n\n\tdef validate(self):\n\t\t\"\"\"\n\t\tValidate arguments with default value.\n\t\t\"\"\"\n\t\tself.args.validate()\n\t\tself.default.validate()\n\nclass ValidateArgumentsWithDefaultWithDefault(object):\n\t\"\"\"\n\tClass to validate arguments with default value and default value.\n\t\"\"\"\n\tdef __init__(self, args, default, default_value):\n\t\t\"\"\"\n\t\tConstructor.\n\n\t\t:param args: The received arguments.\n\t\t:param default: The default value.\n\t\t:param default_value: The default value.\n\t\t\"\"\"\n\t\tself.args = args\n\t\tself.default = default\n\t\tself.default_value = default_value\n\n\tdef validate(self):\n\t\t\"\"\"\n\t\tValidate arguments with default value and default value.\n\t\t\"\"\"\n\t\tself.args.validate()\n\t\tself.default.validate()\n\t\tself.default_value.validate()\n\nclass ValidateArgumentsWithDefaultWithDefault(object):\n\t\"\"\"\n\tClass to validate arguments with default value and default value.\n\t\"\"\"\n\tdef __init__(self, args, default, default_value, default_value_value):\n\t\t\"\"\"\n\t\tConstructor.\n\n\t\t:param args: The received arguments.\n\t\t:param default: The default value.\n\t\t:param default_value: The default value.\n\t\t:param default_value_value: The default value.\n\t\t\"\"\"\n\t\tself.args = args\n\t\tself.default = default\n\t\tself.default_value = default_value\n\t\tself.default_value_value = default_value_value\n\n\tdef validate(self):\n\t\t\"\"\"\n\t\tValidate arguments with default value and default value.\n\t\t\"\"\"\n\t\tself.args.validate()\n\t\tself.default.validate()\n\t\tself.default_value.validate()\n\t\tself.default_value_value.validate()\n\nclass ValidateArgumentsWithDefaultWithDefault(object):\n\t\"\"\"\n\tClass to validate arguments with default value and default value.\n\t\"\"\"\n\tdef __init__(self, args, default, default_value, default_value_value, default_value_value_value):\n\t\t\"\"\"\n\t\tConstructor.\n\n\t\t:param args: The received arguments.\n\t\t:param default: The default value.\n\t\t:param default_value: The default value.\n\t\t:param default_value_value: The default value.\n\t\t:param default_value_value_value: The default value.\n\t\t\"\"\"\n\t\tself.args = args\n\t\tself.default = default\n\t\tself.default_value = default_value\n\t\tself.default_value_value = default_value_value\n\t\tself.default_value_value_value = default_value_value_value\n\n\tdef validate(self):\n\t\t\"\"\"\n\t\tValidate arguments with default value and default value.\n\t\t\"\"\"\n\t\tself.args.validate()\n\t\tself.default.validate()\n\t\tself.default_value.validate()\n\t\tself.default_value_value.validate()\n\t\tself.default_value_value_value.validate()\n\nclass ValidateArgumentsWithDefaultWithDefault(object):\n\t\"\"\"\n\tClass to validate arguments with default value and default value.\n\t\"\"\"\n\tdef __init__(self, args,"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_min_max_args(self, args):\n\t\"\"\"\n\tCheck if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.\n\t\"\"\"\n\tif args.min_value is not None and args.max_value is not None:\n\t\tif args.min_value < args.max_value:\n\t\t\traise ValueError(\"Minimum value must be greater than maximum value.\")\n\nclass ValidateArguments(object):\n\t\"\"\"\n\tClass to validate arguments.\n\t\"\"\"\n\tdef __init__(self, args):\n\t\t\"\"\"\n\t\tConstructor.\n\n\t\t:param args: The received arguments.\n\t\t\"\"\"\n\t\tself.args = args\n\n\tdef validate(self):\n\t\t\"\"\"\n\t\tValidate arguments.\n\t\t\"\"\"\n\t\tself.args.validate()\n\nclass ValidateArgumentsWithDefault(object):\n\t\"\"\"\n\tClass to validate arguments with default value.\n\t\"\"\"\n\tdef __init__(self, args, default):\n\t\t\"\"\"\n\t\tConstructor.\n\n\t\t:param args: The received arguments.\n\t\t:param default: The default value.\n\t\t\"\"\"\n\t\tself.args = args\n\t\tself.default = default\n\n\tdef validate(self):\n\t\t\"\"\"\n\t\tValidate arguments with default value.\n\t\t\"\"\"\n\t\tself.args.validate()\n\t\tself.default.validate()\n\nclass ValidateArgumentsWithDefaultWithDefault(object):\n\t\"\"\"\n\tClass to validate arguments with default value and default value.\n\t\"\"\"\n\tdef __init__(self, args, default, default_value):\n\t\t\"\"\"\n\t\tConstructor.\n\n\t\t:param args: The received arguments.\n\t\t:param default: The default value.\n\t\t:param default_value: The default value.\n\t\t\"\"\"\n\t\tself.args = args\n\t\tself.default = default\n\t\tself.default_value = default_value\n\n\tdef validate(self):\n\t\t\"\"\"\n\t\tValidate arguments with default value and default value.\n\t\t\"\"\"\n\t\tself.args.validate()\n\t\tself.default.validate()\n\t\tself.default_value.validate()\n\nclass ValidateArgumentsWithDefaultWithDefault(object):\n\t\"\"\"\n\tClass to validate arguments with default value and default value.\n\t\"\"\"\n\tdef __init__(self, args, default, default_value, default_value_value):\n\t\t\"\"\"\n\t\tConstructor.\n\n\t\t:param args: The received arguments.\n\t\t:param default: The default value.\n\t\t:param default_value: The default value.\n\t\t:param default_value_value: The default value.\n\t\t\"\"\"\n\t\tself.args = args\n\t\tself.default = default\n\t\tself.default_value = default_value\n\t\tself.default_value_value = default_value_value\n\n\tdef validate(self):\n\t\t\"\"\"\n\t\tValidate arguments with default value and default value.\n\t\t\"\"\"\n\t\tself.args.validate()\n\t\tself.default.validate()\n\t\tself.default_value.validate()\n\t\tself.default_value_value.validate()\n\nclass ValidateArgumentsWithDefaultWithDefault(object):\n\t\"\"\"\n\tClass to validate arguments with default value and default value.\n\t\"\"\"\n\tdef __init__(self, args, default, default_value, default_value_value, default_value_value_value):\n\t\t\"\"\"\n\t\tConstructor.\n\n\t\t:param args: The received arguments.\n\t\t:param default: The default value.\n\t\t:param default_value: The default value.\n\t\t:param default_value_value: The default value.\n\t\t:param default_value_value_value: The default value.\n\t\t\"\"\"\n\t\tself.args = args\n\t\tself.default = default\n\t\tself.default_value = default_value\n\t\tself.default_value_value = default_value_value\n\t\tself.default_value_value_value = default_value_value_value\n\n\tdef validate(self):\n\t\t\"\"\"\n\t\tValidate arguments with default value and default value.\n\t\t\"\"\"\n\t\tself.args.validate()\n\t\tself.default.validate()\n\t\tself.default_value.validate()\n\t\tself.default_value_value.validate()\n\t\tself.default_value_value_value.validate()\n\nclass ValidateArgumentsWithDefaultWithDefault(object):\n\t\"\"\"\n\tClass to validate arguments with default value and default value.\n\t\"\"\"\n\tdef __init__(self, args,", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "ques_id": "6306092e73426c38ae68ad0d", "code": ["def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n\t\"\"\"\n\tBuild the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance\n\t\"\"\"\n\tcomplex_type = ComplexType(type_name, option_name, spec_option)\n\treturn complex_type"], "level": "class_runnable", "generate_results": [{"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n\t\"\"\"\n\tBuild the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance\n\t\"\"\"\n\tcomplex_type = ComplexType(type_name, option_name, spec_option)\n\treturn complex_type", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "ques_id": "6306092e73426c38ae68ad0f", "code": ["def get_nested_custom_and_control_args(self, args):\n\t\"\"\"\n\tSplit input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)\n\t\"\"\"\n\tcontrol_args = {}\n\tnested_args = {}\n\tfor arg in args:\n\t\tif arg.startswith('--'):\n\t\t\tif arg in self.control_args:\n\t\t\t\tcontrol_args[arg] = self.control_args[arg]\n\t\t\telif arg in self.nested_args:\n\t\t\t\tnested_args[arg] = self.nested_args[arg]\n\t\t\telse:\n\t\t\t\traise AnsibleError(\"Unknown argument: %s\" % arg)\n\t\telse:\n\t\t\traise AnsibleError(\"Unknown argument: %s\" % arg)\n\treturn control_args, nested_args"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nested_custom_and_control_args(self, args):\n\t\"\"\"\n\tSplit input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)\n\t\"\"\"\n\tcontrol_args = {}\n\tnested_args = {}\n\tfor arg in args:\n\t\tif arg.startswith('--'):\n\t\t\tif arg in self.control_args:\n\t\t\t\tcontrol_args[arg] = self.control_args[arg]\n\t\t\telif arg in self.nested_args:\n\t\t\t\tnested_args[arg] = self.nested_args[arg]\n\t\t\telse:\n\t\t\t\traise AnsibleError(\"Unknown argument: %s\" % arg)\n\t\telse:\n\t\t\traise AnsibleError(\"Unknown argument: %s\" % arg)\n\treturn control_args, nested_args", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "ques_id": "6306092e73426c38ae68ad11", "code": ["def merge_extra_vars(vars_dict, extra_vars=None):\n\t\"\"\"\n\tExtend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars\n\t\"\"\"\n\tif extra_vars is None:\n\t\textra_vars = []\n\tif not isinstance(extra_vars, list):\n\t\textra_vars = [extra_vars]\n\tfor extra_var in extra_vars:\n\t\tif not isinstance(extra_var, dict):\n\t\t\traise TypeError(\"'extra-vars' must be a list of dicts\")\n\t\tif not isinstance(extra_var, dict):\n\t\t\traise TypeError(\"'extra-vars' must be a list of dicts\")\n\t\tfor k, v in extra_var.items():\n\t\t\tif not isinstance(k, str):\n\t\t\t\traise TypeError(\"'extra-vars' keys must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\t"], "level": "project_runnable", "generate_results": [{"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n\t\"\"\"\n\tExtend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars\n\t\"\"\"\n\tif extra_vars is None:\n\t\textra_vars = []\n\tif not isinstance(extra_vars, list):\n\t\textra_vars = [extra_vars]\n\tfor extra_var in extra_vars:\n\t\tif not isinstance(extra_var, dict):\n\t\t\traise TypeError(\"'extra-vars' must be a list of dicts\")\n\t\tif not isinstance(extra_var, dict):\n\t\t\traise TypeError(\"'extra-vars' must be a list of dicts\")\n\t\tfor k, v in extra_var.items():\n\t\t\tif not isinstance(k, str):\n\t\t\t\traise TypeError(\"'extra-vars' keys must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\tif not isinstance(v, str):\n\t\t\t\traise TypeError(\"'extra-vars' values must be strings\")\n\t\t\t", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "ques_id": "6306092f73426c38ae68ad13", "code": ["def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n\t\"\"\"\n\tWraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.\n\t\"\"\"\n\t#"], "level": "file_runnable", "generate_results": [{"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n\t\"\"\"\n\tWraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.\n\t\"\"\"\n\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "ques_id": "6306093273426c38ae68ad15", "code": ["def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n\t\"\"\"\n\tRuns ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results\n\t\"\"\"\n\t#"], "level": "project_runnable", "generate_results": [{"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n\t\"\"\"\n\tRuns ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results\n\t\"\"\"\n\t#", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "ques_id": "63060ada73426c38ae68ad31", "code": ["def _convert_non_cli_args(self, parser_name, values_dict):\n\t\"\"\"\n\tCasts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments\n\t\"\"\"\n\tif parser_name =='main':\n\t\tvalues_dict['cmd'] ='main'\n\telif parser_name == 'virsh':\n\t\tvalues_dict['cmd'] = 'virsh'\n\telif parser_name == 'ospd':\n\t\tvalues_dict['cmd'] = 'ospd'\n\telif parser_name =='main':\n\t\tvalues_dict['cmd'] ='main'\n\telif parser_name == 'virsh':\n\t\tvalues_dict['cmd'] = 'virsh'\n\telif parser_name == 'ospd':\n\t\tvalues_dict['cmd'] = 'ospd'\n\telse:\n\t\traise ValueError('Unknown parser name: %s' % parser_name)\n\treturn values_dict"], "level": "class_runnable", "generate_results": [{"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n\t\"\"\"\n\tCasts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments\n\t\"\"\"\n\tif parser_name =='main':\n\t\tvalues_dict['cmd'] ='main'\n\telif parser_name == 'virsh':\n\t\tvalues_dict['cmd'] = 'virsh'\n\telif parser_name == 'ospd':\n\t\tvalues_dict['cmd'] = 'ospd'\n\telif parser_name =='main':\n\t\tvalues_dict['cmd'] ='main'\n\telif parser_name == 'virsh':\n\t\tvalues_dict['cmd'] = 'virsh'\n\telif parser_name == 'ospd':\n\t\tvalues_dict['cmd'] = 'ospd'\n\telse:\n\t\traise ValueError('Unknown parser name: %s' % parser_name)\n\treturn values_dict", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "ques_id": "63060b1a73426c38ae68ad3e", "code": ["def get_plugin_spec_flatten_dict(plugin_dir):\n\t\"\"\"\n\tCreates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties\n\t\"\"\"\n\tplugin_spec_dict = {}\n\tfor plugin_spec in plugin_dir.iterdir():\n\t\tif plugin_spec.is_dir():\n\t\t\tplugin_spec_dict[plugin_spec.name] = get_plugin_spec_flatten_dict(plugin_spec)\n\treturn plugin_spec_dict\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n\t\"\"\"\n\tCreates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties\n\t\"\"\"\n\tplugin_spec_dict = {}\n\tfor plugin_spec in plugin_dir.iterdir():\n\t\tif plugin_spec.is_dir():\n\t\t\tplugin_spec_dict[plugin_spec.name] = get_plugin_spec_flatten_dict(plugin_spec)\n\treturn plugin_spec_dict\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "ques_id": "63060b1b73426c38ae68ad42", "code": ["def inject_config(self):\n\t\"\"\"\n\tSet the environment variable for config path, if it is undefined.\n\t\"\"\"\n\tif self.config_path is None:\n\t\tself.config_path = os.path.join(os.path.expanduser('~'), '.config')\n\tif not os.path.exists(self.config_path):\n\t\tos.makedirs(self.config_path)\n\tself.config_path = os.path.join(self.config_path, 'config.json')\n\twith open(self.config_path, 'w') as f:\n\t\tjson.dump(self.config, f, indent=2)\n\tself.config_path = os.path.join(self.config_path, 'config.json')\n\tself.config = json.load(open(self.config_path))\n\tself.config['config_path'] = self.config_path\n\tself.config['config_path_exists'] = os.path.exists(self.config_path)\n\tself.config['config_path_is_dir'] = os.path.isdir(self.config_path)\n\tself.config['config_path_is_file'] = os.path.isfile(self.config_path)\n\tself.config['config_path_is_symlink'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_file'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file_and_dir'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file_and_dir_and_file'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file_and_dir_and_file_and_dir'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file_and_dir_and_file_and_dir_and_file'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir_and_file'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir_and_file'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir_and_file'] = os.path."], "level": "class_runnable", "generate_results": [{"generate_code": "def inject_config(self):\n\t\"\"\"\n\tSet the environment variable for config path, if it is undefined.\n\t\"\"\"\n\tif self.config_path is None:\n\t\tself.config_path = os.path.join(os.path.expanduser('~'), '.config')\n\tif not os.path.exists(self.config_path):\n\t\tos.makedirs(self.config_path)\n\tself.config_path = os.path.join(self.config_path, 'config.json')\n\twith open(self.config_path, 'w') as f:\n\t\tjson.dump(self.config, f, indent=2)\n\tself.config_path = os.path.join(self.config_path, 'config.json')\n\tself.config = json.load(open(self.config_path))\n\tself.config['config_path'] = self.config_path\n\tself.config['config_path_exists'] = os.path.exists(self.config_path)\n\tself.config['config_path_is_dir'] = os.path.isdir(self.config_path)\n\tself.config['config_path_is_file'] = os.path.isfile(self.config_path)\n\tself.config['config_path_is_symlink'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_file'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file_and_dir'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file_and_dir_and_file'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file_and_dir_and_file_and_dir'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file_and_dir_and_file_and_dir_and_file'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir_and_file'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir_and_file'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir'] = os.path.islink(self.config_path)\n\tself.config['config_path_is_symlink_to_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir_and_file_and_dir_and_file'] = os.path.", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "ques_id": "63060b1b73426c38ae68ad43", "code": ["def extend_cli(self, root_subparsers):\n\t\"\"\"\n\tAdds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.\n\t\"\"\"\n\tparser = subparsers.add_parser(\n\t\t'extend',\n\t\thelp='Extend the current spec',\n\t\tdescription='Extend the current spec',\n\t\tparents=[root_subparsers],\n\t\tformatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\tparser.add_argument(\n\t\t'-i', '--input',\n\t\thelp='Specify the input file',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-o', '--output',\n\t\thelp='Specify the output file',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-r', '--root',\n\t\thelp='Specify the root directory',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-d', '--debug',\n\t\thelp='Enable debug mode',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-v', '--verbose',\n\t\thelp='Enable verbose mode',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-q', '--quiet',\n\t\thelp='Disable verbose mode',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-c', '--config',\n\t\thelp='Specify the config file',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-s', '--spec',\n\t\thelp='Specify the spec file',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-t', '--type',\n\t\thelp='Specify the type of the spec',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-l', '--list',\n\t\thelp='List the spec files',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-e', '--extend',\n\t\thelp='Extend the spec',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-d', '--delete',\n\t\thelp='Delete the spec',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-f', '--force',\n\t\thelp='Force overwrite of the spec',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-v', '--verbose',\n\t\thelp='Enable verbose mode',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-q', '--quiet',\n\t\thelp='Disable verbose mode',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-c', '--config',\n\t\thelp='Specify the config file',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-s', '--spec',\n\t\thelp='Specify the spec file',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-t', '--type',\n\t\thelp='Specify the type of the spec',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-l', '--list',\n\t\thelp='List the spec files',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-e', '--extend',\n\t\thelp='Extend the spec',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-d', '--delete',\n\t\thelp='Delete the spec',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-f', '--force',\n\t\thelp='Force overwrite of the spec',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-v', '--verbose',\n\t\thelp='Enable verbose mode',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-q', '--quiet',\n\t\thelp='Disable verbose mode',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-c', '--config',\n\t\thelp='Specify the config file',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-s', '--spec',\n\t\thelp='Specify the spec file',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-t', '--type',\n\t\thelp='Specify the type of the"], "level": "project_runnable", "generate_results": [{"generate_code": "def extend_cli(self, root_subparsers):\n\t\"\"\"\n\tAdds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.\n\t\"\"\"\n\tparser = subparsers.add_parser(\n\t\t'extend',\n\t\thelp='Extend the current spec',\n\t\tdescription='Extend the current spec',\n\t\tparents=[root_subparsers],\n\t\tformatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\tparser.add_argument(\n\t\t'-i', '--input',\n\t\thelp='Specify the input file',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-o', '--output',\n\t\thelp='Specify the output file',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-r', '--root',\n\t\thelp='Specify the root directory',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-d', '--debug',\n\t\thelp='Enable debug mode',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-v', '--verbose',\n\t\thelp='Enable verbose mode',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-q', '--quiet',\n\t\thelp='Disable verbose mode',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-c', '--config',\n\t\thelp='Specify the config file',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-s', '--spec',\n\t\thelp='Specify the spec file',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-t', '--type',\n\t\thelp='Specify the type of the spec',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-l', '--list',\n\t\thelp='List the spec files',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-e', '--extend',\n\t\thelp='Extend the spec',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-d', '--delete',\n\t\thelp='Delete the spec',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-f', '--force',\n\t\thelp='Force overwrite of the spec',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-v', '--verbose',\n\t\thelp='Enable verbose mode',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-q', '--quiet',\n\t\thelp='Disable verbose mode',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-c', '--config',\n\t\thelp='Specify the config file',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-s', '--spec',\n\t\thelp='Specify the spec file',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-t', '--type',\n\t\thelp='Specify the type of the spec',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-l', '--list',\n\t\thelp='List the spec files',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-e', '--extend',\n\t\thelp='Extend the spec',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-d', '--delete',\n\t\thelp='Delete the spec',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-f', '--force',\n\t\thelp='Force overwrite of the spec',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-v', '--verbose',\n\t\thelp='Enable verbose mode',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-q', '--quiet',\n\t\thelp='Disable verbose mode',\n\t\taction='store_true')\n\tparser.add_argument(\n\t\t'-c', '--config',\n\t\thelp='Specify the config file',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-s', '--spec',\n\t\thelp='Specify the spec file',\n\t\trequired=True)\n\tparser.add_argument(\n\t\t'-t', '--type',\n\t\thelp='Specify the type of the", "is_pass": false, "return_code": 1}]}
