{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "ques_id": "62e60f43d76274f8a4026e28", "code": ["def hydrate_time(nanoseconds, tz=None):\n    if nanoseconds < 0:\n        return None\n\n    if tz is None:\n        tz = get_local_timezone()\n\n    if isinstance(tz, str):\n        tz = pytz.timezone(tz)\n\n    return tz.localize(datetime.fromtimestamp(nanoseconds))\n", "def hydrate_time(nanoseconds, tz=None):\n    if not tz:\n        tz = timezone.get_current_timezone()\n    return datetime.time(nanoseconds=nanoseconds, tzinfo=tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = get_localzone()\n    return Time(nanoseconds=nanoseconds, tzinfo=tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone(settings.TIME_ZONE)\n    return datetime.datetime.fromtimestamp(nanoseconds, tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone('Europe/London')\n    return datetime.time(\n        hour=nanoseconds // 10000,\n        minute=nanoseconds % 10000,\n        second=nanoseconds % 100,\n        tzinfo=tz\n    )\n", "def hydrate_time(nanoseconds, tz=None):\n    if nanoseconds > 0:\n        return hydrate_time_nanoseconds(nanoseconds)\n    if tz is not None:\n        return hydrate_time_utc(tz)\n    return datetime.fromtimestamp(0)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = get_localzone()\n    return Time(nanoseconds, tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is not None:\n        return Time.from_nanoseconds(nanoseconds, tz)\n    else:\n        return Time.from_nanoseconds(nanoseconds)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone(\"UTC\")\n\n    return datetime.fromtimestamp(nanoseconds / 1000, tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if nanoseconds is None:\n        return None\n    if tz is None:\n        tz = pytz.timezone('UTC')\n    return tz.localize(datetime.utcfromtimestamp(nanoseconds))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if nanoseconds < 0:\n        return None\n\n    if tz is None:\n        tz = get_local_timezone()\n\n    if isinstance(tz, str):\n        tz = pytz.timezone(tz)\n\n    return tz.localize(datetime.fromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if not tz:\n        tz = timezone.get_current_timezone()\n    return datetime.time(nanoseconds=nanoseconds, tzinfo=tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = get_localzone()\n    return Time(nanoseconds=nanoseconds, tzinfo=tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone(settings.TIME_ZONE)\n    return datetime.datetime.fromtimestamp(nanoseconds, tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone('Europe/London')\n    return datetime.time(\n        hour=nanoseconds // 10000,\n        minute=nanoseconds % 10000,\n        second=nanoseconds % 100,\n        tzinfo=tz\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if nanoseconds > 0:\n        return hydrate_time_nanoseconds(nanoseconds)\n    if tz is not None:\n        return hydrate_time_utc(tz)\n    return datetime.fromtimestamp(0)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = get_localzone()\n    return Time(nanoseconds, tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is not None:\n        return Time.from_nanoseconds(nanoseconds, tz)\n    else:\n        return Time.from_nanoseconds(nanoseconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone(\"UTC\")\n\n    return datetime.fromtimestamp(nanoseconds / 1000, tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if nanoseconds is None:\n        return None\n    if tz is None:\n        tz = pytz.timezone('UTC')\n    return tz.localize(datetime.utcfromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "ques_id": "62e60f3bd76274f8a4026e10", "code": ["def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    if value is None:\n        return None\n    if isinstance(value, datetime.timedelta):\n        return timedelta(seconds=value.total_seconds())\n    raise ValueError(\"Unknown type for timedelta: %s\" % type(value))\n", "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    return datetime.timedelta(hours=value.hours, minutes=value.minutes)\n", "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    if value is None:\n        return None\n    else:\n        return timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    return dehydrate_number(value.total_seconds())\n", "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.total_seconds())\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value is None:\n        return None\n    if isinstance(value, datetime.timedelta):\n        return timedelta(seconds=value.total_seconds())\n    raise ValueError(\"Unknown type for timedelta: %s\" % type(value))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(hours=value.hours, minutes=value.minutes)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value is None:\n        return None\n    else:\n        return timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return dehydrate_number(value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return datetime.timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "ques_id": "62e60f37d76274f8a4026dfd", "code": ["def dehydrate_time(value):\n    return dehydrate_date(value.date)\n", "def dehydrate_time(value):\n    return dehydrate_datetime(value)\n", "def dehydrate_time(value):\n    return value.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n", "def dehydrate_time(value):\n    return time_format(value)\n", "def dehydrate_time(value):\n    if value is not None:\n        return value.isoformat()\n", "def dehydrate_time(value):\n    if value is None:\n        return None\n    return time(value.hour, value.minute, value.second)\n", "def dehydrate_time(value):\n    return value.strftime('%Y-%m-%d %H:%M:%S')\n", "def dehydrate_time(value):\n    return dehydrate_date(value)\n", "def dehydrate_time(value):\n    return dehydrate_datetime(value)\n", "def dehydrate_time(value):\n    return time_format(value)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_time(value):\n    return dehydrate_date(value.date)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return dehydrate_datetime(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return time_format(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    if value is not None:\n        return value.isoformat()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    if value is None:\n        return None\n    return time(value.hour, value.minute, value.second)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return dehydrate_date(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return dehydrate_datetime(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return time_format(value)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "ques_id": "62e60f33d76274f8a4026de9", "code": ["def dehydrate_point(value):\n    return dehydrate_vector(value.vector)\n", "def dehydrate_point(value):\n    return dict(x=value.x, y=value.y)\n", "def dehydrate_point(value):\n    return Point(value.latitude, value.longitude)\n", "def dehydrate_point(value):\n    return {\n        'type': 'Point',\n        'coordinates': [value.latitude, value.longitude]\n    }\n", "def dehydrate_point(value):\n    return dehydrate_coordinates(value.coordinates)\n", "def dehydrate_point(value):\n    return [dehydrate_point_data(data) for data in value.data]\n", "def dehydrate_point(value):\n    return {\n        'x': value.x,\n        'y': value.y,\n    }\n", "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise AttributeError(\"Expected Point, got %s instead\" % type(value))\n    return value.__dict__\n", "def dehydrate_point(value):\n    return Point(value.latitude, value.longitude, value.altitude)\n", "def dehydrate_point(value):\n    return {\n        'x': value.x,\n        'y': value.y,\n        'z': value.z,\n    }\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_point(value):\n    return dehydrate_vector(value.vector)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return dict(x=value.x, y=value.y)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return Point(value.latitude, value.longitude)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'type': 'Point',\n        'coordinates': [value.latitude, value.longitude]\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return dehydrate_coordinates(value.coordinates)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return [dehydrate_point_data(data) for data in value.data]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'x': value.x,\n        'y': value.y,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if not isinstance(value, Point):\n        raise AttributeError(\"Expected Point, got %s instead\" % type(value))\n    return value.__dict__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return Point(value.latitude, value.longitude, value.altitude)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'x': value.x,\n        'y': value.y,\n        'z': value.z,\n    }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "ques_id": "62e60ed4d76274f8a4026da0", "code": ["def keys(self):\n    return self.__record.keys()\n", "def keys(self):\n    return self._keys\n", "def keys(self):\nreturn self.record.keys()", "def keys(self):\n    return self._record.keys()\n", "def keys(self):\n    return self.__record.keys()", "def keys(self):\n    return self.__keys", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return self.__data.keys()\n", "def keys(self):\n    return self._keys\n", "def keys(self):\n    return self.__keys"], "level": "class_runnable", "generate_results": [{"generate_code": "def keys(self):\n    return self.__record.keys()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def keys(self):\n    return self._keys\n", "is_pass": true, "return_code": 0}, {"generate_code": "def keys(self):\nreturn self.record.keys()", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self._record.keys()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def keys(self):\n    return self.__record.keys()", "is_pass": true, "return_code": 0}, {"generate_code": "def keys(self):\n    return self.__keys", "is_pass": true, "return_code": 0}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": true, "return_code": 0}, {"generate_code": "def keys(self):\n    return self.__data.keys()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def keys(self):\n    return self._keys\n", "is_pass": true, "return_code": 0}, {"generate_code": "def keys(self):\n    return self.__keys", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60ecfd76274f8a4026d6a", "code": ["def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        protocol_version = tuple(cls.__protocol_version__)\n\n    return {version: handler for version, handler in cls.__protocol_handlers__.items() if version in protocol_version}", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return _protocol_handlers_dict(cls, protocol_version)\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {version: protocol_handler(cls, version) for version in protocol_version}\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.__protocol_versions\n\n    if protocol_version is None:\n        return versions\n    else:\n        return versions.get(protocol_version, versions.keys())", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return _protocol_versions.get(protocol_version, cls._protocol_handlers)\n", "def protocol_handlers(cls, protocol_version=None):\n    protocol_version = cls._get_protocol_version(protocol_version)\n    return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    return _protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return _PROTOCOL_HANDLERS.get(cls)\n    else:\n        return _PROTOCOL_HANDLERS[cls][protocol_version]\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {version: cls._protocol_handlers[version] for version in protocol_version}\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        protocol_version = tuple(cls.__protocol_version__)\n\n    return {version: handler for version, handler in cls.__protocol_handlers__.items() if version in protocol_version}", "is_pass": true, "return_code": 0}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return _protocol_handlers_dict(cls, protocol_version)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {version: protocol_handler(cls, version) for version in protocol_version}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": true, "return_code": 0}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.__protocol_versions\n\n    if protocol_version is None:\n        return versions\n    else:\n        return versions.get(protocol_version, versions.keys())", "is_pass": true, "return_code": 0}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return _protocol_versions.get(protocol_version, cls._protocol_handlers)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    protocol_version = cls._get_protocol_version(protocol_version)\n    return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": true, "return_code": 0}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return _protocol_handlers.get(protocol_version, {})\n", "is_pass": true, "return_code": 0}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return _PROTOCOL_HANDLERS.get(cls)\n    else:\n        return _PROTOCOL_HANDLERS[cls][protocol_version]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {version: cls._protocol_handlers[version] for version in protocol_version}\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "ques_id": "62e60e49d76274f8a4026d25", "code": ["def unit_of_work(metadata=None, timeout=None):", "def unit_of_work(metadata=None, timeout=None):", "def unit_of_work(metadata=None, timeout=None):\n    pass", "def unit_of_work(metadata=None, timeout=None):\npass", "def unit_of_work(metadata=None, timeout=None):", "def unit_of_work(metadata=None, timeout=None):", "def unit_of_work(metadata=None, timeout=None):", "def unit_of_work(metadata=None, timeout=None):\npass", "def unit_of_work(metadata=None, timeout=None):", "def unit_of_work(metadata=None, timeout=None):"], "level": "self_contained", "generate_results": [{"generate_code": "def unit_of_work(metadata=None, timeout=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "ques_id": "62e60e05d76274f8a4026cfd", "code": ["def index(self, key):\nreturn self._keys.index(key)", "def index(self, key):\nif key in self._keys:\nreturn self._keys.index(key)\nreturn -1", "def index(self, key):\nreturn self._map.index(key)", "def index(self, key):\nreturn self._map.index(key)\n", "def index(self, key):\n\nreturn self.__keys.index(key)", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\nreturn self._items.index(key)", "def index(self, key):\n    return self._items.index(key)\n", "def index(self, key):\nif key is None:\nreturn -1\nreturn self._index.get(key, -1)", "def index(self, key):\nreturn self.__keys.index(key)"], "level": "class_runnable", "generate_results": [{"generate_code": "def index(self, key):\nreturn self._keys.index(key)", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\nif key in self._keys:\nreturn self._keys.index(key)\nreturn -1", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\nreturn self._map.index(key)", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\nreturn self._map.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n\nreturn self.__keys.index(key)", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\nreturn self._items.index(key)", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self._items.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\nif key is None:\nreturn -1\nreturn self._index.get(key, -1)", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\nreturn self.__keys.index(key)", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "ques_id": "62e60da4d76274f8a4026cf1", "code": ["def values(self, *keys):\nif keys is None:\nreturn self._values\nreturn [self._values[key] for key in keys]", "def values(self, *keys):\nreturn list(self.itervalues(*keys))", "def values(self, *keys):\n\n    if not keys:\n        return [item[1] for item in self.items()]\n\n    return [item[1] for item in self.items() if item[0] in keys]\n", "def values(self, *keys):\nreturn self._record.values(*keys)\n", "def values(self, *keys):\nreturn self._record.values(*keys)\n", "def values(self, *keys):\nreturn self.__values(keys)", "def values(self, *keys):\nreturn [self.get(key) for key in keys if key in self]\n", "def values(self, *keys):\nif keys:\nreturn [self.get(k) for k in keys]\nreturn self.__values__", "def values(self, *keys):\nreturn [item.value for item in self._items(keys)]", "def values(self, *keys):\nreturn [r[1] for r in self.__iter__(*keys)]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def values(self, *keys):\nif keys is None:\nreturn self._values\nreturn [self._values[key] for key in keys]", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\nreturn list(self.itervalues(*keys))", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n\n    if not keys:\n        return [item[1] for item in self.items()]\n\n    return [item[1] for item in self.items() if item[0] in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\nreturn self._record.values(*keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\nreturn self._record.values(*keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\nreturn self.__values(keys)", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\nreturn [self.get(key) for key in keys if key in self]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\nif keys:\nreturn [self.get(k) for k in keys]\nreturn self.__values__", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\nreturn [item.value for item in self._items(keys)]", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\nreturn [r[1] for r in self.__iter__(*keys)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "ques_id": "62e60b10d76274f8a4026ccd", "code": ["def data(self, *keys):\n    return {k: self[k] for k in self._check_keys(keys)}\n", "def data(self, *keys):\n    return dict(zip(self._fields, self._record.data(*keys)))\n", "def data(self, *keys):\n    return dict((key, self[key]) for key in self._convert_indexes(keys))\n", "def data(self, *keys):\n\n    return dict((k, self._data[k]) for k in self._get_field_names(*keys))", "def data(self, *keys):\nreturn self._data(keys)", "def data(self, *keys):\nif keys:\nreturn self._data(self._data.keys(), *keys)\nelse:\nreturn self._data()", "def data(self, *keys):\n\nif not keys:\nreturn self._data\n\nif len(keys) == 1:\nreturn self._data[keys[0]]\n\nreturn {k: v for k, v in self._data.items() if k in keys}", "def data(self, *keys):\n    return {k: self[k] for k in keys or self.keys()}", "def data(self, *keys):\nreturn dict(self._data(*keys))", "def data(self, *keys):\n    return {k: self[k] for k in self._keys(keys)}\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def data(self, *keys):\n    return {k: self[k] for k in self._check_keys(keys)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict(zip(self._fields, self._record.data(*keys)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict((key, self[key]) for key in self._convert_indexes(keys))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n\n    return dict((k, self._data[k]) for k in self._get_field_names(*keys))", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\nreturn self._data(keys)", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\nif keys:\nreturn self._data(self._data.keys(), *keys)\nelse:\nreturn self._data()", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n\nif not keys:\nreturn self._data\n\nif len(keys) == 1:\nreturn self._data[keys[0]]\n\nreturn {k: v for k, v in self._data.items() if k in keys}", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return {k: self[k] for k in keys or self.keys()}", "is_pass": true, "return_code": 0}, {"generate_code": "def data(self, *keys):\nreturn dict(self._data(*keys))", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return {k: self[k] for k in self._keys(keys)}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "ques_id": "62e6087bd76274f8a4026bfa", "code": ["def pop_u16(self):\n    return struct.unpack('>H', self.pop(2))[0]\n", "def pop_u16(self):\n    return self.pop_u8() + (self.pop_u8() << 8)", "def pop_u16(self):\n    return self.pop_u8() << 8 | self.pop_u8()\n", "def pop_u16(self):\n    return self.pop_u16le() + (self.pop_u16be() << 8)", "def pop_u16(self):\n    return self.pop_u8() | (self.pop_u8() << 8)\n", "def pop_u16(self):\n    return struct.unpack('>H', self.pop(2))[0]", "def pop_u16(self):\n    return self.pop_u8() << 8 | self.pop_u8()\n", "def pop_u16(self):\n    return self.pop_u8() << 8 | self.pop_u8()", "def pop_u16(self):\n    return self.pop_u16_be()", "def pop_u16(self):\n    value = self.pop()\n    value &= 0xffff\n    return value, self.pop()"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop_u16(self):\n    return struct.unpack('>H', self.pop(2))[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.pop_u8() + (self.pop_u8() << 8)", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.pop_u8() << 8 | self.pop_u8()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.pop_u16le() + (self.pop_u16be() << 8)", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.pop_u8() | (self.pop_u8() << 8)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return struct.unpack('>H', self.pop(2))[0]", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.pop_u8() << 8 | self.pop_u8()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.pop_u8() << 8 | self.pop_u8()", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.pop_u16_be()", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    value = self.pop()\n    value &= 0xffff\n    return value, self.pop()", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "ques_id": "62e6087ad76274f8a4026bf2", "code": ["def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.output_queue.append(DiscardMessage(n, qid, dehydration_hooks,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.append(discard.DiscardRequest(n, qid, dehydration_hooks,\n                                        hydration_hooks, **handlers))\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append(DISCARD, n, qid, dehydration_hooks, hydration_hooks, **handlers)\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.__append_message(DISCARD, n, qid, dehydration_hooks, hydration_hooks, **handlers)\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._add_message(DISCARD, n, qid, dehydration_hooks, hydration_hooks, **handlers)", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append(Response(Response.DISCARD, n, qid, dehydration_hooks,\n                           hydration_hooks, **handlers))", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.__append(DiscardMessage(n, qid, dehydration_hooks, hydration_hooks, **handlers))", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._add_record(RecordType.DISCARD, n, qid, dehydration_hooks, hydration_hooks, **handlers)", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    return self._append(Discard(n, qid, dehydration_hooks, hydration_hooks, handlers))"], "level": "project_runnable", "generate_results": [{"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.output_queue.append(DiscardMessage(n, qid, dehydration_hooks,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.append(discard.DiscardRequest(n, qid, dehydration_hooks,\n                                        hydration_hooks, **handlers))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append(DISCARD, n, qid, dehydration_hooks, hydration_hooks, **handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.__append_message(DISCARD, n, qid, dehydration_hooks, hydration_hooks, **handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._add_message(DISCARD, n, qid, dehydration_hooks, hydration_hooks, **handlers)", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append(Response(Response.DISCARD, n, qid, dehydration_hooks,\n                           hydration_hooks, **handlers))", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.__append(DiscardMessage(n, qid, dehydration_hooks, hydration_hooks, **handlers))", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._add_record(RecordType.DISCARD, n, qid, dehydration_hooks, hydration_hooks, **handlers)", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    return self._append(Discard(n, qid, dehydration_hooks, hydration_hooks, handlers))", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "ques_id": "62e60879d76274f8a4026bec", "code": ["def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    pass", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    pass", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "ques_id": "62e60723d76274f8a4026b75", "code": ["def round_half_to_even(n):\n    return int(n / 2) * 2\n", "def round_half_to_even(n):\n    return n - int(n / 2)\n", "def round_half_to_even(n):\n    if n % 2 == 0:\n        return int(n / 2)\n    else:\n        return int(n * 2 + 1)\n", "def round_half_to_even(n):\n    return int(round(n / 2))\n", "def round_half_to_even(n):\n    return int(round(n / 2))\n", "def round_half_to_even(n):\n    return round(n / 2) * 2\n", "def round_half_to_even(n):\n    return int(round(n * 2))\n", "def round_half_to_even(n):\n    if n < 0:\n        n = n + 2 ** 31\n    return n\n", "def round_half_to_even(n):\n    return n if n % 2 == 0 else n + 1\n", "def round_half_to_even(n):\n    return int(n +.5)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def round_half_to_even(n):\n    return int(n / 2) * 2\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    return n - int(n / 2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    if n % 2 == 0:\n        return int(n / 2)\n    else:\n        return int(n * 2 + 1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    return int(round(n / 2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    return int(round(n / 2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    return round(n / 2) * 2\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    return int(round(n * 2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    if n < 0:\n        n = n + 2 ** 31\n    return n\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    return n if n % 2 == 0 else n + 1\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    return int(n +.5)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "ques_id": "62e60707d76274f8a4026b69", "code": ["def point_type(name, fields, srid_map):\n    return type(\n        name,\n        (Point,),\n        dict(\n            fields=fields,\n            srid=srid_map['SRID'],\n            geom_type=srid_map['GEOMETRYCOLLECTION'],\n        ),\n    )\n", "def point_type(name, fields, srid_map):\n    class Point(PointBase):\n        srid = srid_map[name]\n    Point.__name__ = name\n    Point._meta.get_field(name).choices = fields\n    Point._meta.get_field(name).default = fields[0][0]\n    Point._meta.get_field(name).null = fields[0][1]\n    return Point", "def point_type(name, fields, srid_map):\n    return type(name, (Point,), {\n        '__module__': 'geodjango.db.models',\n        '__fields__': fields,\n       'srid': srid_map['SRID'],\n       'srid_column': srid_map['SRID_COLUMN'],\n        '__mappings__': srid_map['__mappings__'],\n        })", "def point_type(name, fields, srid_map):\n    return type(name, (Point,), {'fields': fields,'srid': srid_map[name]})\n", "def point_type(name, fields, srid_map):\n    \n    \n    class Point(PointBase):\n        __srid__ = srid_map\n\n    Point.__name__ = name\n    Point.__fields__ = fields\n    Point.__table__ = name\n    return Point\n", "def point_type(name, fields, srid_map):\n    \n    \n    return type(name, (Point,), {\n        'fields': fields,\n       'srid_map': srid_map\n    })\n", "def point_type(name, fields, srid_map):\n    return type(name, (Point,), {\n        '__module__': 'django.contrib.gis.geos',\n       'srid': srid_map['SRID'],\n        'fields': fields,\n        'geom_type': 'POINT',\n    })\n", "def point_type(name, fields, srid_map):\n    \n    \n    point_type = type(name, (Point,), {\n        '__module__': 'geodjango.db.models',\n        '__name__': name,\n        '_srid_field': srid_map['srid'],\n        '_srid_casting': srid_map['srid'],\n        '__fields__': fields,\n        '__all__': (),\n    })\n    point_type._meta.add_fields(fields)\n    return point_type\n", "def point_type(name, fields, srid_map):\n    return type(name, (Point,), {'_fields': fields, '_srid_map': srid_map})", "def point_type(name, fields, srid_map):\n    \n    \n    return type(name, (Point,), {\n        '__module__': 'django.contrib.gis.geos.point',\n        'fields': fields,\n       'srid': srid_map['SRID'],\n       'srid_name': srid_map['SRID_NAME'],\n        '_transform': transform_point,\n        '__mapping__': srid_map,\n    })\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def point_type(name, fields, srid_map):\n    return type(\n        name,\n        (Point,),\n        dict(\n            fields=fields,\n            srid=srid_map['SRID'],\n            geom_type=srid_map['GEOMETRYCOLLECTION'],\n        ),\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(PointBase):\n        srid = srid_map[name]\n    Point.__name__ = name\n    Point._meta.get_field(name).choices = fields\n    Point._meta.get_field(name).default = fields[0][0]\n    Point._meta.get_field(name).null = fields[0][1]\n    return Point", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    return type(name, (Point,), {\n        '__module__': 'geodjango.db.models',\n        '__fields__': fields,\n       'srid': srid_map['SRID'],\n       'srid_column': srid_map['SRID_COLUMN'],\n        '__mappings__': srid_map['__mappings__'],\n        })", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    return type(name, (Point,), {'fields': fields,'srid': srid_map[name]})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    \n    \n    class Point(PointBase):\n        __srid__ = srid_map\n\n    Point.__name__ = name\n    Point.__fields__ = fields\n    Point.__table__ = name\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    \n    \n    return type(name, (Point,), {\n        'fields': fields,\n       'srid_map': srid_map\n    })\n", "is_pass": true, "return_code": 0}, {"generate_code": "def point_type(name, fields, srid_map):\n    return type(name, (Point,), {\n        '__module__': 'django.contrib.gis.geos',\n       'srid': srid_map['SRID'],\n        'fields': fields,\n        'geom_type': 'POINT',\n    })\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    \n    \n    point_type = type(name, (Point,), {\n        '__module__': 'geodjango.db.models',\n        '__name__': name,\n        '_srid_field': srid_map['srid'],\n        '_srid_casting': srid_map['srid'],\n        '__fields__': fields,\n        '__all__': (),\n    })\n    point_type._meta.add_fields(fields)\n    return point_type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    return type(name, (Point,), {'_fields': fields, '_srid_map': srid_map})", "is_pass": true, "return_code": 0}, {"generate_code": "def point_type(name, fields, srid_map):\n    \n    \n    return type(name, (Point,), {\n        '__module__': 'django.contrib.gis.geos.point',\n        'fields': fields,\n       'srid': srid_map['SRID'],\n       'srid_name': srid_map['SRID_NAME'],\n        '_transform': transform_point,\n        '__mapping__': srid_map,\n    })\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "ques_id": "62e5dc9ed76274f8a4026b5b", "code": ["def deprecated(message):\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn(message, DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n\n        return wrapper\n\n    return decorator\n", "def deprecated(message):\n    def wrapper(func):\n        @functools.wraps(func)\n        def new_func(*args, **kwargs):\n            warnings.warn(message, DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return new_func\n    return wrapper", "def deprecated(message):\n    def _deprecated(func):\n        @functools.wraps(func)\n        def _deprecated_wrapper(*args, **kwargs):\n            warnings.warn_explicit(message, DeprecationWarning, __file__, func.__name__)\n            return func(*args, **kwargs)\n        return _deprecated_wrapper\n    return _deprecated\n", "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn_explicit(message, category=DeprecationWarning,\n                                   filename=func.__code__.co_filename,\n                                   lineno=func.__code__.co_firstlineno + 1)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n", "def deprecated(message):\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn(message, DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n\n        return wrapper\n\n    return decorator\n", "def deprecated(message):\n    def wrap(func):\n        @wraps(func)\n        def new_func(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning)\n            return func(*args, **kwargs)\n        return new_func\n    return wrap", "def deprecated(message):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator", "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        def new_func(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return new_func\n    return decorator\n", "def deprecated(message):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn(message, DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator", "def deprecated(message):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator"], "level": "file_runnable", "generate_results": [{"generate_code": "def deprecated(message):\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn(message, DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n\n        return wrapper\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def wrapper(func):\n        @functools.wraps(func)\n        def new_func(*args, **kwargs):\n            warnings.warn(message, DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return new_func\n    return wrapper", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def _deprecated(func):\n        @functools.wraps(func)\n        def _deprecated_wrapper(*args, **kwargs):\n            warnings.warn_explicit(message, DeprecationWarning, __file__, func.__name__)\n            return func(*args, **kwargs)\n        return _deprecated_wrapper\n    return _deprecated\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn_explicit(message, category=DeprecationWarning,\n                                   filename=func.__code__.co_filename,\n                                   lineno=func.__code__.co_firstlineno + 1)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn(message, DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n\n        return wrapper\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def wrap(func):\n        @wraps(func)\n        def new_func(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning)\n            return func(*args, **kwargs)\n        return new_func\n    return wrap", "is_pass": true, "return_code": 0}, {"generate_code": "def deprecated(message):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator", "is_pass": true, "return_code": 0}, {"generate_code": "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        def new_func(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return new_func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn(message, DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator", "is_pass": true, "return_code": 0}, {"generate_code": "def deprecated(message):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator", "is_pass": true, "return_code": 0}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "ques_id": "62e4fc3c85ea98643089041e", "code": ["def _inline_r_setup(code: str) -> str:\n    if \"R\" not in os.environ:\n        raise RuntimeError(\"Cannot set R to run R commands without previous R environment set.\")\n    return code\n", "def _inline_r_setup(code: str) -> str:\n    return code\n", "def _inline_r_setup(code: str):\n    global _inline_r_config\n    _inline_r_config = _inline_r_config or R.load_config()\n    if _inline_r_config is None:\n        raise Exception(f\"R is not configured correctly. In order to set R options, you must run `rm -rf` first. Check the installation of R.\")\n    if \"R_TEST_ENV_VARIABLE\" in os.environ:\n        raise Exception(f\"R is configured as a test environment. This is not allowed in production.\")\n", "def _inline_r_setup(code: str):\n    # Set up environment variables and inline R\n    _inline_r_env_setup(code)\n    # Set up R environment variables that are not configured via R\n    _inline_r_env_setup_non_existent_vars(code)\n", "def _inline_r_setup(code: str):\n    if code == \"\":\n        code = \"--no-r\"\n\n    sys.path.insert(0, __path__[0])\n    import r\n\n    try:\n        r.__version__\n    except AttributeError:\n        pass\n    else:\n        sys.path.insert(0, __path__[0] + \"/\" + r.__version__)\n        import r\n\n    try:\n        r.__r_version__\n    except AttributeError:\n        pass\n    else:\n        sys.path.insert(0, __path__[0] + \"/\" + r.__r_version__)\n        import r\n", "def _inline_r_setup(code: str):\n    with open('./.env', 'w') as f:\n        f.write(code)\n    with open('./.r-config', 'w') as f:\n        f.write(code)\n", "def _inline_r_setup(code: str, filename: str) -> None:\n    if os.environ.get('R_CONFIGURATION') is None:\n        raise ValueError(\n            'Please set the R environment variable to run this script.')\n\n    with open(filename, 'w') as f:\n        f.write(code)\n", "def _inline_r_setup(code: str, options: Optional[str] = None) -> None:\n    if not options:\n        options = ''\n    code = code.format(options=options)\n    return _run_inline(code)\n", "def _inline_r_setup(code: str) -> str:\n    if code == \"R\":\n        return \"R -- \" + _inline_r_configure()\n    else:\n        return _inline_r_configure()\n", "def _inline_r_setup(code: str) -> str:\n    return \"\"\"\n# R is still configured via env variables. This should be set by R only.\n# R should not be configured via R options anymore.\n\nexport R_LOG_LEVEL=INFO\n\nexport R_LOG_FILE=/dev/null\n\nexport R_LOG_LEVEL_DETAILS=true\n\"\"\"\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _inline_r_setup(code: str) -> str:\n    if \"R\" not in os.environ:\n        raise RuntimeError(\"Cannot set R to run R commands without previous R environment set.\")\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    global _inline_r_config\n    _inline_r_config = _inline_r_config or R.load_config()\n    if _inline_r_config is None:\n        raise Exception(f\"R is not configured correctly. In order to set R options, you must run `rm -rf` first. Check the installation of R.\")\n    if \"R_TEST_ENV_VARIABLE\" in os.environ:\n        raise Exception(f\"R is configured as a test environment. This is not allowed in production.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    # Set up environment variables and inline R\n    _inline_r_env_setup(code)\n    # Set up R environment variables that are not configured via R\n    _inline_r_env_setup_non_existent_vars(code)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    if code == \"\":\n        code = \"--no-r\"\n\n    sys.path.insert(0, __path__[0])\n    import r\n\n    try:\n        r.__version__\n    except AttributeError:\n        pass\n    else:\n        sys.path.insert(0, __path__[0] + \"/\" + r.__version__)\n        import r\n\n    try:\n        r.__r_version__\n    except AttributeError:\n        pass\n    else:\n        sys.path.insert(0, __path__[0] + \"/\" + r.__r_version__)\n        import r\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    with open('./.env', 'w') as f:\n        f.write(code)\n    with open('./.r-config', 'w') as f:\n        f.write(code)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str, filename: str) -> None:\n    if os.environ.get('R_CONFIGURATION') is None:\n        raise ValueError(\n            'Please set the R environment variable to run this script.')\n\n    with open(filename, 'w') as f:\n        f.write(code)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str, options: Optional[str] = None) -> None:\n    if not options:\n        options = ''\n    code = code.format(options=options)\n    return _run_inline(code)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    if code == \"R\":\n        return \"R -- \" + _inline_r_configure()\n    else:\n        return _inline_r_configure()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    return \"\"\"\n# R is still configured via env variables. This should be set by R only.\n# R should not be configured via R options anymore.\n\nexport R_LOG_LEVEL=INFO\n\nexport R_LOG_FILE=/dev/null\n\nexport R_LOG_LEVEL_DETAILS=true\n\"\"\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "ques_id": "62e4fbda85ea986430890405", "code": ["def xargs(\n        cmd: str,\n        args: List[str],\n        target_concurrency: int = None,\n        **kwargs) -> Tuple[List[str], int]:\n    if platform.system() == \"Windows\":\n        return _windows_xargs(cmd, args, target_concurrency, **kwargs)\n    else:\n        return _posix_xargs(cmd, args, target_concurrency, **kwargs)\n", "def xargs(\n        cmd: str,\n        target_concurrency: int = None,\n        color: bool = True,\n        **kwargs: Any,\n) -> str:\n    if target_concurrency is None:\n        target_concurrency = os.cpu_count()\n\n    if not color:\n        return subprocess.check_output(cmd, **kwargs).decode('utf-8')\n    return subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT, **kwargs).decode('utf-8')\n", "def xargs(\n        cmd: str,\n        *args,\n        stdin: Optional[str] = None,\n        stdout: Optional[str] = None,\n        stderr: Optional[str] = None,\n        **kwargs) -> Tuple[List[str], int, int]:\n    pty = stdin if stdin else stdout\n    return pty, 0, 0\n", "def xargs(\n        cmd: str,\n        *args: str,\n        color: bool = True,\n        target_concurrency: int = None,\n) -> List[str]:\n    if not has_xargs():\n        raise RuntimeError(\"xargs is not available on this platform\")\n    if color:\n        return [\"xargs\", \"-q\", \"-c\"] + list(args)\n    else:\n        return [\"xargs\", \"-c\"] + list(args)\n", "def xargs(\n        cmd: str,\n        args: T.List[str],\n        **kwargs: T.Any\n) -> T.List[str]:\n    if os.name == 'nt':\n        pty = '-t'\n        kwargs['target_concurrency'] = kwargs.get('target_concurrency', 1)\n        kwargs['target_count'] = kwargs.get('target_count', 1)\n        return subprocess.run([pty] + args, **kwargs).stdout.decode('utf-8').splitlines()\n    return subprocess.run(cmd, **kwargs).stdout.decode('utf-8').splitlines()\n", "def xargs(\n        cmd: List[str],\n        target_concurrency: int = 1,\n) -> List[str]:\n    args = ['xargs'] + cmd\n    if is_macos():\n        args.append('--target-concurrency={}'.format(target_concurrency))\n    return subprocess.check_output(args).decode().splitlines()\n", "def xargs(\n        cmd: str,\n        *args: str,\n        target_concurrency: int = 2,\n        color: bool = True,\n        target_concurrency: int = None,\n) -> str:\n    return xargs_helper(cmd, args, target_concurrency, color)\n", "def xargs(\n        cmd: str,\n        target_concurrency: int,\n        color: bool = False,\n        target_concurrency: int = None,\n        **kwargs: Any,\n) -> str:\n    return _xargs(cmd, target_concurrency=target_concurrency, target_concurrency_arg=target_concurrency, color=color, **kwargs)\n", "def xargs(\n        cmd: str,\n        args: List[str],\n        target_concurrency: int = 1) -> Tuple[List[str], List[str]]:\n    if sys.platform in ('win32', 'cygwin'):\n        return _xargs_win(cmd, args, target_concurrency)\n    else:\n        return _xargs_posix(cmd, args, target_concurrency)\n", "def xargs(\n        cmd: str,\n        stdin: Optional[str] = None,\n        stdout: Optional[str] = None,\n        stderr: Optional[str] = None,\n        target_concurrency: int = 1,\n        **kwargs: Any) -> int:\n    process = subprocess.Popen(\n        cmd,\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        **kwargs,\n    )\n\n    stdout_stream, stderr_stream = process.communicate(stdin)\n\n    return process.returncode\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def xargs(\n        cmd: str,\n        args: List[str],\n        target_concurrency: int = None,\n        **kwargs) -> Tuple[List[str], int]:\n    if platform.system() == \"Windows\":\n        return _windows_xargs(cmd, args, target_concurrency, **kwargs)\n    else:\n        return _posix_xargs(cmd, args, target_concurrency, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        target_concurrency: int = None,\n        color: bool = True,\n        **kwargs: Any,\n) -> str:\n    if target_concurrency is None:\n        target_concurrency = os.cpu_count()\n\n    if not color:\n        return subprocess.check_output(cmd, **kwargs).decode('utf-8')\n    return subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT, **kwargs).decode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        *args,\n        stdin: Optional[str] = None,\n        stdout: Optional[str] = None,\n        stderr: Optional[str] = None,\n        **kwargs) -> Tuple[List[str], int, int]:\n    pty = stdin if stdin else stdout\n    return pty, 0, 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        *args: str,\n        color: bool = True,\n        target_concurrency: int = None,\n) -> List[str]:\n    if not has_xargs():\n        raise RuntimeError(\"xargs is not available on this platform\")\n    if color:\n        return [\"xargs\", \"-q\", \"-c\"] + list(args)\n    else:\n        return [\"xargs\", \"-c\"] + list(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        args: T.List[str],\n        **kwargs: T.Any\n) -> T.List[str]:\n    if os.name == 'nt':\n        pty = '-t'\n        kwargs['target_concurrency'] = kwargs.get('target_concurrency', 1)\n        kwargs['target_count'] = kwargs.get('target_count', 1)\n        return subprocess.run([pty] + args, **kwargs).stdout.decode('utf-8').splitlines()\n    return subprocess.run(cmd, **kwargs).stdout.decode('utf-8').splitlines()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: List[str],\n        target_concurrency: int = 1,\n) -> List[str]:\n    args = ['xargs'] + cmd\n    if is_macos():\n        args.append('--target-concurrency={}'.format(target_concurrency))\n    return subprocess.check_output(args).decode().splitlines()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        *args: str,\n        target_concurrency: int = 2,\n        color: bool = True,\n        target_concurrency: int = None,\n) -> str:\n    return xargs_helper(cmd, args, target_concurrency, color)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        target_concurrency: int,\n        color: bool = False,\n        target_concurrency: int = None,\n        **kwargs: Any,\n) -> str:\n    return _xargs(cmd, target_concurrency=target_concurrency, target_concurrency_arg=target_concurrency, color=color, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        args: List[str],\n        target_concurrency: int = 1) -> Tuple[List[str], List[str]]:\n    if sys.platform in ('win32', 'cygwin'):\n        return _xargs_win(cmd, args, target_concurrency)\n    else:\n        return _xargs_posix(cmd, args, target_concurrency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        stdin: Optional[str] = None,\n        stdout: Optional[str] = None,\n        stderr: Optional[str] = None,\n        target_concurrency: int = 1,\n        **kwargs: Any) -> int:\n    process = subprocess.Popen(\n        cmd,\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        **kwargs,\n    )\n\n    stdout_stream, stderr_stream = process.communicate(stdin)\n\n    return process.returncode\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "ques_id": "62e4fbda85ea986430890403", "code": ["def _shuffled(seq: list, random: int):\n    return random.sample(seq, len(seq))\n", "def _shuffled(seq: Sequence[T]) -> Sequence[T]:\n    seen = set()\n    return [x for x in seq if not (x in seen or seen.add(x))]\n", "def _shuffled(seq: Iterable[Any]) -> Iterable[Any]:\n    return random.sample(seq, len(seq))\n", "def _shuffled(seq: Iterable[T]) -> Iterable[T]:\n    seq = list(seq)\n    np.random.shuffle(seq)\n    return seq\n", "def _shuffled(seq: Sequence[T]) -> Sequence[T]:\n    \n    \n    return list(seq) + list(random.sample(seq, len(seq)))\n", "def _shuffled(seq: Sequence[T]) -> Sequence[T]:\n    return list(random.sample(seq, len(seq)))\n", "def _shuffled(seq: Iterable[T]) -> Iterable[T]:\n    \n    \n    random.shuffle(seq)\n    return seq\n", "def _shuffled(seq: Sequence[T], random_state: Optional[np.random.RandomState] = None) -> Sequence[T]:\n    \n    \n    if random_state is None:\n        random_state = np.random.RandomState()\n    indices = random_state.permutation(len(seq))\n    return [seq[i] for i in indices]\n", "def _shuffled(seq: Iterable[Any]) -> Iterable[Any]:\n    idx = list(range(len(seq)))\n    random.shuffle(idx)\n    return (seq[i] for i in idx)\n", "def _shuffled(seq: Iterable[T]) -> Iterable[T]:\n    return random.sample(seq, len(seq))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _shuffled(seq: list, random: int):\n    return random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[T]) -> Sequence[T]:\n    seen = set()\n    return [x for x in seq if not (x in seen or seen.add(x))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Iterable[Any]) -> Iterable[Any]:\n    return random.sample(seq, len(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Iterable[T]) -> Iterable[T]:\n    seq = list(seq)\n    np.random.shuffle(seq)\n    return seq\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[T]) -> Sequence[T]:\n    \n    \n    return list(seq) + list(random.sample(seq, len(seq)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[T]) -> Sequence[T]:\n    return list(random.sample(seq, len(seq)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Iterable[T]) -> Iterable[T]:\n    \n    \n    random.shuffle(seq)\n    return seq\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[T], random_state: Optional[np.random.RandomState] = None) -> Sequence[T]:\n    \n    \n    if random_state is None:\n        random_state = np.random.RandomState()\n    indices = random_state.permutation(len(seq))\n    return [seq[i] for i in indices]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Iterable[Any]) -> Iterable[Any]:\n    idx = list(range(len(seq)))\n    random.shuffle(idx)\n    return (seq[i] for i in idx)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Iterable[T]) -> Iterable[T]:\n    return random.sample(seq, len(seq))\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "ques_id": "62e4fb6585ea98643089032b", "code": ["def parse_version(s: str) -> Version:\n    \n    \n    return Version(s)\n", "def parse_version(s: str) -> str:\n    \n    \n    return '.'.join(map(str, map(int, s.split('.'))))\n", "def parse_version(s: str) -> Version:\n    return Version(s)\n", "def parse_version(s: str) -> str:\n    return s.replace(\".\", \"\")\n", "def parse_version(s: str) -> str:\n    \n    \n    return re.match(r\"^(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)$\", s).groupdict()[\"patch\"]\n", "def parse_version(s: str) -> Version:\n    return Version(s)\n", "def parse_version(s: str) -> tuple:\n    return tuple(map(int, s.split(\".\")))\n", "def parse_version(s: str) -> Version:\n    \n    \n    # TODO check if this is correct\n    return parse(s)\n", "def parse_version(s: str) -> Version:\n    return Version(s)\n", "def parse_version(s: str) -> Optional[str]:\n    return s.split(\".\")[0]\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def parse_version(s: str) -> Version:\n    \n    \n    return Version(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> str:\n    \n    \n    return '.'.join(map(str, map(int, s.split('.'))))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Version:\n    return Version(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> str:\n    return s.replace(\".\", \"\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> str:\n    \n    \n    return re.match(r\"^(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)$\", s).groupdict()[\"patch\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Version:\n    return Version(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> tuple:\n    return tuple(map(int, s.split(\".\")))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> Version:\n    \n    \n    # TODO check if this is correct\n    return parse(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Version:\n    return Version(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> Optional[str]:\n    return s.split(\".\")[0]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "ques_id": "62e4fb4d85ea9864308902e7", "code": ["def normalize_cmd(cmd: str) -> str:\n    if os.name == \"nt\":\n        cmd = cmd.replace(\"/usr/bin/env\", \"/bin/env\")\n\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    cmd = cmd.replace(\"\\\\\", \"/\")\n    cmd = cmd.replace(\"//\", \"/\")\n    cmd = cmd.replace(\"\\\\\\\\\", \"\\\\\")\n    cmd = cmd.replace(\"/\\\\\\\\\", \"/\")\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    cmd = cmd.replace(\"#!\", \"\\\\\")\n    cmd = cmd.replace(\"/\", \"\\\\\")\n    cmd = cmd.replace(\"\\\\\", \"/\")\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    if is_windows_environment():\n        cmd = cmd.replace(\"/usr/bin/env python\", \"\")\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    cmd = cmd.replace(\"/\", \"\\\\\")\n    cmd = cmd.replace(\"#\", \"\\\\#\")\n    cmd = cmd.replace(\"$\", \"\\\\$\")\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    return cmd.replace('#!', '/usr/bin/env python')\n", "def normalize_cmd(cmd: str) -> str:\n    if sys.platform == \"win32\":\n        cmd = cmd.replace(\"/usr/bin/env \", \"/usr/bin/python\")\n    return cmd", "def normalize_cmd(cmd: str) -> str:\n    cmd = re.sub(r\"[:;/?*+,{}\\[\\]^_`{|}]\", \"\", cmd)\n    cmd = re.sub(r\"[:;/?*+,{}\\[\\]^_`{|}]\", \"#\", cmd)\n    cmd = re.sub(r\"[:;/?*+,{}\\[\\]^_`{|}]\", \"/\", cmd)\n    cmd = re.sub(r\"\\\\?$\", \"\", cmd)\n    cmd = re.sub(r\"\\\\?\\\\?\", \"\", cmd)\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    cmd = cmd.strip()\n    if sys.platform == \"win32\":\n        if cmd.startswith(\"#!\"):\n            cmd = cmd[1:]\n        elif cmd.startswith(\"/usr/bin/env python\"):\n            cmd = cmd[len(\"/usr/bin/env python\") :]\n        elif cmd.startswith(\"/usr/bin/env python3\"):\n            cmd = cmd[len(\"/usr/bin/env python3\") :]\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    cmd = cmd.replace(\"/usr/bin/python\", \"/usr/local/bin/python\")\n    return cmd\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def normalize_cmd(cmd: str) -> str:\n    if os.name == \"nt\":\n        cmd = cmd.replace(\"/usr/bin/env\", \"/bin/env\")\n\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = cmd.replace(\"\\\\\", \"/\")\n    cmd = cmd.replace(\"//\", \"/\")\n    cmd = cmd.replace(\"\\\\\\\\\", \"\\\\\")\n    cmd = cmd.replace(\"/\\\\\\\\\", \"/\")\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = cmd.replace(\"#!\", \"\\\\\")\n    cmd = cmd.replace(\"/\", \"\\\\\")\n    cmd = cmd.replace(\"\\\\\", \"/\")\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    if is_windows_environment():\n        cmd = cmd.replace(\"/usr/bin/env python\", \"\")\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = cmd.replace(\"/\", \"\\\\\")\n    cmd = cmd.replace(\"#\", \"\\\\#\")\n    cmd = cmd.replace(\"$\", \"\\\\$\")\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    return cmd.replace('#!', '/usr/bin/env python')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    if sys.platform == \"win32\":\n        cmd = cmd.replace(\"/usr/bin/env \", \"/usr/bin/python\")\n    return cmd", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = re.sub(r\"[:;/?*+,{}\\[\\]^_`{|}]\", \"\", cmd)\n    cmd = re.sub(r\"[:;/?*+,{}\\[\\]^_`{|}]\", \"#\", cmd)\n    cmd = re.sub(r\"[:;/?*+,{}\\[\\]^_`{|}]\", \"/\", cmd)\n    cmd = re.sub(r\"\\\\?$\", \"\", cmd)\n    cmd = re.sub(r\"\\\\?\\\\?\", \"\", cmd)\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = cmd.strip()\n    if sys.platform == \"win32\":\n        if cmd.startswith(\"#!\"):\n            cmd = cmd[1:]\n        elif cmd.startswith(\"/usr/bin/env python\"):\n            cmd = cmd[len(\"/usr/bin/env python\") :]\n        elif cmd.startswith(\"/usr/bin/env python3\"):\n            cmd = cmd[len(\"/usr/bin/env python3\") :]\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = cmd.replace(\"/usr/bin/python\", \"/usr/local/bin/python\")\n    return cmd\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "ques_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["def cached(cache, key=hashkey, lock=None):\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                value = cache[key] = f(*args, **kwargs)\n                return value\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(f):\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if not result:\n                result = cache[key] = f(*args, **kwargs)\n            return result\n        return wrapper\n    return decorator", "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = Lock()\n\n    def wrapper(func):\n        def wrapped(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = func(*args, **kwargs)\n                cache.set(key, result)\n            return result\n        return wrapped\n    return wrapper", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            key = key(args, kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                result = func(*args, **kwargs)\n                cache[key] = result\n                return result\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            result = cache.get(key, None)\n            if result is None:\n                result = func(*args, **kwargs)\n                cache.set(key, result, timeout=CACHE_TIMEOUT)\n            return result\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key % func.__name__\n            value = cache.get(key)\n            if value is None:\n                value = func(*args, **kwargs)\n                cache.set(key, value, timeout=None)\n            return value\n        return wrapper\n    return decorator", "def cached(cache, key=hashkey, lock=None):\n    def wrapper(func):\n        def cache_wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            if key in cache:\n                return cache[key]\n            else:\n                result = func(*args, **kwargs)\n                cache[key] = result\n                return result\n        return cache_wrapper\n    return wrapper", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            val = cache.get(key)\n            if val is None:\n                val = func(*args, **kwargs)\n                cache.set(key, val, timeout=cache_timeout)\n            return val\n        return wrapper\n    return decorator", "def cached(cache, key=hashkey, lock=None):\n    def wrapper(func):\n        def cached_func(*args, **kwargs):\n            key = key(func, *args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = func(*args, **kwargs)\n                cache.set(key, result, timeout=60)\n            return result\n        return cached_func\n    return wrapper\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = func(*args, **kwargs)\n                cache.set(key, result, timeout=None)\n            return result\n        return wrapper\n    return decorator\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                value = cache[key] = f(*args, **kwargs)\n                return value\n        return wrapper\n    return decorator\n", "is_pass": true, "return_code": 0}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(f):\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if not result:\n                result = cache[key] = f(*args, **kwargs)\n            return result\n        return wrapper\n    return decorator", "is_pass": true, "return_code": 0}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = Lock()\n\n    def wrapper(func):\n        def wrapped(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = func(*args, **kwargs)\n                cache.set(key, result)\n            return result\n        return wrapped\n    return wrapper", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            key = key(args, kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                result = func(*args, **kwargs)\n                cache[key] = result\n                return result\n        return wrapper\n    return decorator\n", "is_pass": true, "return_code": 0}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            result = cache.get(key, None)\n            if result is None:\n                result = func(*args, **kwargs)\n                cache.set(key, result, timeout=CACHE_TIMEOUT)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": true, "return_code": 0}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key % func.__name__\n            value = cache.get(key)\n            if value is None:\n                value = func(*args, **kwargs)\n                cache.set(key, value, timeout=None)\n            return value\n        return wrapper\n    return decorator", "is_pass": true, "return_code": 0}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def wrapper(func):\n        def cache_wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            if key in cache:\n                return cache[key]\n            else:\n                result = func(*args, **kwargs)\n                cache[key] = result\n                return result\n        return cache_wrapper\n    return wrapper", "is_pass": true, "return_code": 0}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            val = cache.get(key)\n            if val is None:\n                val = func(*args, **kwargs)\n                cache.set(key, val, timeout=cache_timeout)\n            return val\n        return wrapper\n    return decorator", "is_pass": true, "return_code": 0}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def wrapper(func):\n        def cached_func(*args, **kwargs):\n            key = key(func, *args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = func(*args, **kwargs)\n                cache.set(key, result, timeout=60)\n            return result\n        return cached_func\n    return wrapper\n", "is_pass": true, "return_code": 0}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = func(*args, **kwargs)\n                cache.set(key, result, timeout=None)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "ques_id": "62b8d24048ba5a41d1c3f49f", "code": ["def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('ttl', maxsize, ttl, timer, typed)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache(TTLCache(maxsize, ttl, timer, typed))\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTL', _wrapped_cache, maxsize, ttl, timer, typed)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('ttl', _wrap(TTLCache(maxsize, ttl, timer), typed))\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('ttl', maxsize, ttl, timer, typed)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('ttl', maxsize, ttl, timer, typed)", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return cached(TTLCache(maxsize, ttl, timer, typed))\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cachedfunc(TTLCache(maxsize, ttl, timer), typed)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('ttl', maxsize, ttl, timer, typed)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('ttl', maxsize, ttl, timer, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache(TTLCache(maxsize, ttl, timer, typed))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTL', _wrapped_cache, maxsize, ttl, timer, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('ttl', _wrap(TTLCache(maxsize, ttl, timer), typed))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('ttl', maxsize, ttl, timer, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('ttl', maxsize, ttl, timer, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return cached(TTLCache(maxsize, ttl, timer, typed))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cachedfunc(TTLCache(maxsize, ttl, timer), typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('ttl', maxsize, ttl, timer, typed)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "ques_id": "62b8d23b48ba5a41d1c3f49a", "code": ["def mru_cache(maxsize=128, typed=False):\n    return _cache('mru', maxsize, typed)\n", "def mru_cache(maxsize=128, typed=False):\n    return _cache(MRU, maxsize, typed)", "def mru_cache(maxsize=128, typed=False):\n    return _cachedfunc(mru, maxsize, typed)", "def mru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _mru_cache\n    return _mru_cache(maxsize, _mru_cache_typed if typed else _mru_cache_nontyped)\n", "def mru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _cache(_MRU_CACHE_TYPE, typed)\n    else:\n        return _cache(_MRU_CACHE_TYPE, typed, maxsize)", "def mru_cache(maxsize=128, typed=False):\n    # type: (int, bool) -> CacheDecorator\n    if maxsize is None:\n        return cache(MRU(maxsize), typed)\n    else:\n        return cache(MRU(maxsize), typed, True)\n", "def mru_cache(maxsize=128, typed=False):\n    # type: (int, bool) -> Callable[[Callable[[], Any]], Callable[[], Any]]\n\n    def _decorator(func):\n        # type: (Callable[..., Any]) -> Callable[..., Any]\n        cache = LRUCache(maxsize=maxsize, typed=typed)\n        return _cache_wrapper(func, cache)\n\n    return _decorator\n", "def mru_cache(maxsize=128, typed=False):\n    return _cachedfunc(MRU, maxsize, typed)", "def mru_cache(maxsize=128, typed=False):\n    return _cachedfunc(MRU, maxsize, typed)", "def mru_cache(maxsize=128, typed=False):\n    cache = LRUCache(maxsize)\n    def _inner(f):\n        def _wrapper(*args, **kwargs):\n            key = str(args) + str(kwargs)\n            if key not in cache:\n                cache[key] = f(*args, **kwargs)\n            return cache[key]\n        return _wrapper\n    return _inner"], "level": "project_runnable", "generate_results": [{"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _cache('mru', maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _cache(MRU, maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _cachedfunc(mru, maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _mru_cache\n    return _mru_cache(maxsize, _mru_cache_typed if typed else _mru_cache_nontyped)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _cache(_MRU_CACHE_TYPE, typed)\n    else:\n        return _cache(_MRU_CACHE_TYPE, typed, maxsize)", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # type: (int, bool) -> CacheDecorator\n    if maxsize is None:\n        return cache(MRU(maxsize), typed)\n    else:\n        return cache(MRU(maxsize), typed, True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # type: (int, bool) -> Callable[[Callable[[], Any]], Callable[[], Any]]\n\n    def _decorator(func):\n        # type: (Callable[..., Any]) -> Callable[..., Any]\n        cache = LRUCache(maxsize=maxsize, typed=typed)\n        return _cache_wrapper(func, cache)\n\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _cachedfunc(MRU, maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _cachedfunc(MRU, maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    cache = LRUCache(maxsize)\n    def _inner(f):\n        def _wrapper(*args, **kwargs):\n            key = str(args) + str(kwargs)\n            if key not in cache:\n                cache[key] = f(*args, **kwargs)\n            return cache[key]\n        return _wrapper\n    return _inner", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "ques_id": "62b8d23948ba5a41d1c3f498", "code": ["def lru_cache(maxsize=128, typed=False):\n    return _cache(LRUCache(maxsize), typed)", "def lru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _cache(_make_lru_cache(), typed)\n    else:\n        return _cache(LRUCache(maxsize), typed)\n", "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError(\"'maxsize' must be at least 1\")\n    return _cache(LRUCache(maxsize), typed)", "def lru_cache(maxsize=128, typed=False):\n    return _cachedfunc(LRUCache(maxsize), typed)\n", "def lru_cache(maxsize=128, typed=False):\n    if typed:\n        cache = typedcache.TypedCache(maxsize=maxsize)\n    else:\n        cache = cachemod.LRUCache(maxsize=maxsize)\n\n    def wrapper(func):\n        @functools.wraps(func)\n        def wrapped(*args, **kwargs):\n            key = str(args) + str(kwargs)\n            if key in cache:\n                return cache[key]\n            else:\n                value = func(*args, **kwargs)\n                cache[key] = value\n                return value\n        return wrapped\n    return wrapper", "def lru_cache(maxsize=128, typed=False):\n    return cached(LRUCache(maxsize, typed=typed))", "def lru_cache(maxsize=128, typed=False):\n    return _cachedfunc(LRUCache(maxsize), typed)", "def lru_cache(maxsize=128, typed=False):\n    if typed:\n        from collections import deque\n        from functools import lru_cache\n        return lru_cache(maxsize, deque)\n    else:\n        return _cached_lru_cache(maxsize)", "def lru_cache(maxsize=128, typed=False):\n    return _cachedfunc(LRUCache(maxsize), typed)", "def lru_cache(maxsize=128, typed=False):\n    return _cached(LRUCache(maxsize), typed)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cache(LRUCache(maxsize), typed)", "is_pass": true, "return_code": 0}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _cache(_make_lru_cache(), typed)\n    else:\n        return _cache(LRUCache(maxsize), typed)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if maxsize < 1:\n        raise ValueError(\"'maxsize' must be at least 1\")\n    return _cache(LRUCache(maxsize), typed)", "is_pass": true, "return_code": 0}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cachedfunc(LRUCache(maxsize), typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if typed:\n        cache = typedcache.TypedCache(maxsize=maxsize)\n    else:\n        cache = cachemod.LRUCache(maxsize=maxsize)\n\n    def wrapper(func):\n        @functools.wraps(func)\n        def wrapped(*args, **kwargs):\n            key = str(args) + str(kwargs)\n            if key in cache:\n                return cache[key]\n            else:\n                value = func(*args, **kwargs)\n                cache[key] = value\n                return value\n        return wrapped\n    return wrapper", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return cached(LRUCache(maxsize, typed=typed))", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cachedfunc(LRUCache(maxsize), typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    if typed:\n        from collections import deque\n        from functools import lru_cache\n        return lru_cache(maxsize, deque)\n    else:\n        return _cached_lru_cache(maxsize)", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cachedfunc(LRUCache(maxsize), typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cached(LRUCache(maxsize), typed)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "ques_id": "62b8d23748ba5a41d1c3f496", "code": ["def lfu_cache(maxsize=128, typed=False):\n    return _cache('lfu', maxsize, typed)\n", "def lfu_cache(maxsize=128, typed=False):\n    return _cache('lfu', maxsize, typed)\n", "def lfu_cache(maxsize=128, typed=False):\n    return _cachedfunc(LRUCache(maxsize), typed)", "def lfu_cache(maxsize=128, typed=False):\n    return _cachedfunc(LFU, maxsize, typed)", "def lfu_cache(maxsize=128, typed=False):\n    return _cachedfunc(LRUCache(maxsize, typed))\n", "def lfu_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _lfu_cache\n    return _lfu_cache_with_maxsize(maxsize, typed)", "def lfu_cache(maxsize=128, typed=False):\n    return _cache('lfu', maxsize, typed)\n", "def lfu_cache(maxsize=128, typed=False):\n    return cachedfunc(lfu, maxsize, typed)", "def lfu_cache(maxsize=128, typed=False):\n    return _cachedfunc(LFUCache(maxsize), typed)\n", "def lfu_cache(maxsize=128, typed=False):\n    return _cachedfunc(LRFUCache(maxsize), typed)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _cache('lfu', maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _cache('lfu', maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _cachedfunc(LRUCache(maxsize), typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _cachedfunc(LFU, maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _cachedfunc(LRUCache(maxsize, typed))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    if maxsize is None:\n        return _lfu_cache\n    return _lfu_cache_with_maxsize(maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _cache('lfu', maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return cachedfunc(lfu, maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _cachedfunc(LFUCache(maxsize), typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _cachedfunc(LRFUCache(maxsize), typed)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "ques_id": "62b8d22f48ba5a41d1c3f488", "code": ["def popitem(self):\n    raise NotImplementedError()", "def popitem(self):\n    return self._data.popitem()", "def popitem(self):\n    return self._data.popitem()", "def popitem(self):\n    item = self._dict.popitem()\n    self._list.remove(item[0])\n    return item\n", "def popitem(self):\n    try:\n        return self._dict.popitem()\n    except KeyError:\n        raise KeyError('%r is empty' % self._key)", "def popitem(self):\n    k = self._keys[0]\n    try:\n        value = self[k]\n        del self[k]\n    except KeyError:\n        raise KeyError('Key %r not found' % k)\n    return (k, value)\n", "def popitem(self):\n    \n    \n    return self._data.popitem()\n", "def popitem(self):\n    with self._wl:\n        return next(self._cursor)", "def popitem(self):\n    return self.__db.lpop(self.key)\n", "def popitem(self):\n    return super(MultiDict, self).popitem()[0]"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    raise NotImplementedError()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self._data.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self._data.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    item = self._dict.popitem()\n    self._list.remove(item[0])\n    return item\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self._dict.popitem()\n    except KeyError:\n        raise KeyError('%r is empty' % self._key)", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    k = self._keys[0]\n    try:\n        value = self[k]\n        del self[k]\n    except KeyError:\n        raise KeyError('Key %r not found' % k)\n    return (k, value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \n    \n    return self._data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    with self._wl:\n        return next(self._cursor)", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__db.lpop(self.key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return super(MultiDict, self).popitem()[0]", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "ques_id": "62b8d22a48ba5a41d1c3f47e", "code": ["def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]", "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default", "def setdefault(self, key, default=None):\nif key not in self:\nself[key] = default\nreturn self[key]", "def setdefault(self, key, default=None):\n    return super(Dict, self).setdefault(key.lower(), default)", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default"], "level": "self_contained", "generate_results": [{"generate_code": "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\nif key not in self:\nself[key] = default\nreturn self[key]", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    return super(Dict, self).setdefault(key.lower(), default)", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "ques_id": "62b8d22948ba5a41d1c3f47c", "code": ["def get(self, key, default=None):\nif key in self._dict:\nreturn self._dict[key]\nelse:\nreturn default\n", "def get(self, key, default=None):\n\n\nreturn self.__getitem__(key, default)", "def get(self, key, default=None):\n\n\nreturn self.__getitem__(key, default)", "def get(self, key, default=None):\n    return self._data.get(key, default)", "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "def get(self, key, default=None):\n    if key in self:\n        return self[key]\n    else:\n        return default\n", "def get(self, key, default=None):\nreturn self.__data.get(key, default)", "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default", "def get(self, key, default=None):\nif key in self:\nreturn self[key]\nelse:\nreturn default"], "level": "self_contained", "generate_results": [{"generate_code": "def get(self, key, default=None):\nif key in self._dict:\nreturn self._dict[key]\nelse:\nreturn default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n\n\nreturn self.__getitem__(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n\n\nreturn self.__getitem__(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return self._data.get(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    if key in self:\n        return self[key]\n    else:\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\nreturn self.__data.get(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\nif key in self:\nreturn self[key]\nelse:\nreturn default", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "ques_id": "62b8d22548ba5a41d1c3f472", "code": ["def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(method):\n        @wraps(method)\n        def wrapper(self, *args, **kwargs):\n            if key not in cache:\n                cache[key] = method(self, *args, **kwargs)\n            return cache[key]\n        return wrapper\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                result = cache[key]\n            except KeyError:\n                result = func(self, *args, **kwargs)\n                cache[key] = result\n            return result\n        return wrapper\n    return decorator", "def cachedmethod(cache, key=hashkey, lock=None):\n\n    def _wrap(func):\n        def _func(*args, **kw):\n            key = key(args, kw)\n            if lock is None:\n                with cache.lock:\n                    result = cache[key]\n            else:\n                result = cache[key]\n            if result is None:\n                result = func(*args, **kw)\n                cache[key] = result\n            return result\n\n        return _func\n\n    return _wrap\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(self, *args, **kwargs):\n            result = cache.get(key(self), None)\n            if result is None:\n                result = func(self, *args, **kwargs)\n                cache.set(key(self), result)\n            return result\n        return wrapper\n    if lock is None:\n        return decorator\n    else:\n        return decorator(lock)\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(self, *args, **kw):\n            if lock is None:\n                lock = RLock()\n            key = key(self, *args, **kw)\n            result = cache.get(key)\n            if result is None:\n                result = func(self, *args, **kw)\n                cache.set(key, result, timeout=config.cache_timeout)\n            return result\n        return wrapper\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(fn):\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            value = cache.get(key)\n            if value is None:\n                value = fn(*args, **kwargs)\n                cache.set(key, value, timeout=CACHE_TIMEOUT)\n            return value\n        return wrapper\n    return decorator", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorate(f):\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            if lock is None:\n                lock = Lock()\n            result = cache.get(key(f, args, kwargs), lock=lock)\n            if result is None:\n                result = f(*args, **kwargs)\n                cache.set(key(f, args, kwargs), result, lock=lock)\n            return result\n        return wrapped\n    return decorate\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def wrapper(method):\n        def wrapped(self, *args, **kw):\n            key = key(self, *args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                cache[key] = result = method(self, *args, **kw)\n                return result\n        return wrapped\n    return wrapper\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        def wrapper(*args, **kw):\n            key = key % func.__module__\n            if key not in cache:\n                cache[key] = func(*args, **kw)\n            return cache[key]\n        return wrapper\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = RLock()\n\n    def wrapper(obj, *args, **kwargs):\n        with lock:\n            return cache(key, obj, *args, **kwargs)\n    return wrapper\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(method):\n        @wraps(method)\n        def wrapper(self, *args, **kwargs):\n            if key not in cache:\n                cache[key] = method(self, *args, **kwargs)\n            return cache[key]\n        return wrapper\n    return decorator\n", "is_pass": true, "return_code": 0}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            try:\n                result = cache[key]\n            except KeyError:\n                result = func(self, *args, **kwargs)\n                cache[key] = result\n            return result\n        return wrapper\n    return decorator", "is_pass": true, "return_code": 0}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n\n    def _wrap(func):\n        def _func(*args, **kw):\n            key = key(args, kw)\n            if lock is None:\n                with cache.lock:\n                    result = cache[key]\n            else:\n                result = cache[key]\n            if result is None:\n                result = func(*args, **kw)\n                cache[key] = result\n            return result\n\n        return _func\n\n    return _wrap\n", "is_pass": true, "return_code": 0}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(self, *args, **kwargs):\n            result = cache.get(key(self), None)\n            if result is None:\n                result = func(self, *args, **kwargs)\n                cache.set(key(self), result)\n            return result\n        return wrapper\n    if lock is None:\n        return decorator\n    else:\n        return decorator(lock)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(self, *args, **kw):\n            if lock is None:\n                lock = RLock()\n            key = key(self, *args, **kw)\n            result = cache.get(key)\n            if result is None:\n                result = func(self, *args, **kw)\n                cache.set(key, result, timeout=config.cache_timeout)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": true, "return_code": 0}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(fn):\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            value = cache.get(key)\n            if value is None:\n                value = fn(*args, **kwargs)\n                cache.set(key, value, timeout=CACHE_TIMEOUT)\n            return value\n        return wrapper\n    return decorator", "is_pass": true, "return_code": 0}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorate(f):\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            if lock is None:\n                lock = Lock()\n            result = cache.get(key(f, args, kwargs), lock=lock)\n            if result is None:\n                result = f(*args, **kwargs)\n                cache.set(key(f, args, kwargs), result, lock=lock)\n            return result\n        return wrapped\n    return decorate\n", "is_pass": true, "return_code": 0}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def wrapper(method):\n        def wrapped(self, *args, **kw):\n            key = key(self, *args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                cache[key] = result = method(self, *args, **kw)\n                return result\n        return wrapped\n    return wrapper\n", "is_pass": true, "return_code": 0}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        def wrapper(*args, **kw):\n            key = key % func.__module__\n            if key not in cache:\n                cache[key] = func(*args, **kw)\n            return cache[key]\n        return wrapper\n    return decorator\n", "is_pass": true, "return_code": 0}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = RLock()\n\n    def wrapper(obj, *args, **kwargs):\n        with lock:\n            return cache(key, obj, *args, **kwargs)\n    return wrapper\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "ques_id": "62b8c517e0d34b282c18122e", "code": ["def extostr(cls, e, max_level=30, max_path_level=5):\n    return '{}: {}'.format(cls.__name__, e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return \"\".join(traceback.format_exception(cls, e, e.__traceback__))\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return \"%s: %s\" % (cls.__name__, str(e))\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return _extostr(cls, e, max_level, max_path_level)", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return extostr_str(cls, e.args, max_level, max_path_level)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return '\\n'.join(traceback.format_exception(cls, e, e.__traceback__))", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return str(cls) + ':'+ str(e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return _format_exception(cls, e, max_level=max_level, max_path_level=max_path_level)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return str(cls.format(e, max_level, max_path_level))\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    s = str(e)\n    for i in range(max_path_level):\n        s = s.replace('\\n', '\\\\n')\n    for i in range(max_level):\n        s = s.replace('\\r', '\\\\r')\n    return s\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return '{}: {}'.format(cls.__name__, e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return \"\".join(traceback.format_exception(cls, e, e.__traceback__))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return \"%s: %s\" % (cls.__name__, str(e))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return _extostr(cls, e, max_level, max_path_level)", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return extostr_str(cls, e.args, max_level, max_path_level)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return '\\n'.join(traceback.format_exception(cls, e, e.__traceback__))", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return str(cls) + ':'+ str(e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return _format_exception(cls, e, max_level=max_level, max_path_level=max_path_level)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return str(cls.format(e, max_level, max_path_level))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    s = str(e)\n    for i in range(max_path_level):\n        s = s.replace('\\n', '\\\\n')\n    for i in range(max_level):\n        s = s.replace('\\r', '\\\\r')\n    return s\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "ques_id": "62b8bbbfe0d34b282c181210", "code": ["def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not file_exists(file_name) or overwrite:\n        with open(file_name, \"wb\") as file_handle:\n            file_handle.write(text_buffer)\n        return len(text_buffer)\n    else:\n        return 0\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if overwrite or os.path.exists(file_name):\n        with open(file_name, 'ab') as f:\n            f.write(text_buffer)\n        return len(text_buffer)\n    else:\n        return 0", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not isinstance(file_name, str):\n        raise TypeError(\"file_name must be a string\")\n    if not isinstance(text_buffer, str):\n        raise TypeError(\"text_buffer must be a string\")\n    return __write_text_to_file(file_name, text_buffer, encoding, overwrite)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    with open(file_name, 'ab') as f:\n        if overwrite:\n            f.write(text_buffer.encode(encoding))\n        else:\n            f.write(text_buffer)\n\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if os.path.exists(file_name) and not overwrite:\n        return 0\n\n    with open(file_name, 'a', encoding=encoding) as f:\n        f.write(text_buffer)\n\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        return 0\n\n    with open(file_name, 'ab') as file:\n        file.write(text_buffer)\n\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite:\n        if os.path.isfile(file_name):\n            return 0\n    with open(file_name, 'wb') as f:\n        f.write(text_buffer)\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        return 0\n    with open(file_name, 'a', encoding=encoding) as f:\n        f.write(text_buffer)\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if overwrite or not os.path.exists(file_name):\n        with open(file_name, 'wb') as file:\n            file.write(text_buffer)\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    with open(file_name, 'a' if overwrite else 'w', encoding=encoding) as f:\n        return f.write(text_buffer)"], "level": "file_runnable", "generate_results": [{"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not file_exists(file_name) or overwrite:\n        with open(file_name, \"wb\") as file_handle:\n            file_handle.write(text_buffer)\n        return len(text_buffer)\n    else:\n        return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if overwrite or os.path.exists(file_name):\n        with open(file_name, 'ab') as f:\n            f.write(text_buffer)\n        return len(text_buffer)\n    else:\n        return 0", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not isinstance(file_name, str):\n        raise TypeError(\"file_name must be a string\")\n    if not isinstance(text_buffer, str):\n        raise TypeError(\"text_buffer must be a string\")\n    return __write_text_to_file(file_name, text_buffer, encoding, overwrite)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    with open(file_name, 'ab') as f:\n        if overwrite:\n            f.write(text_buffer.encode(encoding))\n        else:\n            f.write(text_buffer)\n\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if os.path.exists(file_name) and not overwrite:\n        return 0\n\n    with open(file_name, 'a', encoding=encoding) as f:\n        f.write(text_buffer)\n\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        return 0\n\n    with open(file_name, 'ab') as file:\n        file.write(text_buffer)\n\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite:\n        if os.path.isfile(file_name):\n            return 0\n    with open(file_name, 'wb') as f:\n        f.write(text_buffer)\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        return 0\n    with open(file_name, 'a', encoding=encoding) as f:\n        f.write(text_buffer)\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if overwrite or not os.path.exists(file_name):\n        with open(file_name, 'wb') as file:\n            file.write(text_buffer)\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    with open(file_name, 'a' if overwrite else 'w', encoding=encoding) as f:\n        return f.write(text_buffer)", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "ques_id": "62b8bbbfe0d34b282c18120f", "code": ["def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, mode='r', encoding=encoding) as f:\n            return f.read()\n    except UnicodeDecodeError:\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, encoding=encoding) as f:\n            return f.read()\n    except UnicodeDecodeError:\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        text_buffer = codecs.open(file_name, \"r\", encoding)\n        return text_buffer.read()\n    except UnicodeDecodeError as e:\n        log.error(\"Failed to read file %s (%s)\", file_name, e)\n    except IOError as e:\n        log.error(\"Failed to read file %s (%s)\", file_name, e)\n    return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, 'r', encoding=encoding) as f:\n            text = f.read()\n        return text\n    except FileNotFoundError:\n        return None", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, \"r\", encoding=encoding) as file:\n            text = file.read()\n            return text\n    except UnicodeDecodeError:\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, \"r\", encoding=encoding) as f:\n            text = f.read()\n            return text\n    except UnicodeDecodeError:\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer = open(file_name, 'r', encoding=encoding).read()\n    except Exception:\n        buffer = None\n    return buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, \"r\", encoding=encoding) as f:\n            text = f.read()\n            return text\n    except UnicodeDecodeError:\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer_ = io.open(file_name, 'r', encoding=encoding)\n    except Exception:\n        return None\n    try:\n        text = buffer_.read()\n    finally:\n        buffer_.close()\n    return text\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        text = file_to_text(file_name, encoding=encoding)\n        return text\n    except UnicodeDecodeError:\n        return None"], "level": "file_runnable", "generate_results": [{"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, mode='r', encoding=encoding) as f:\n            return f.read()\n    except UnicodeDecodeError:\n        return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, encoding=encoding) as f:\n            return f.read()\n    except UnicodeDecodeError:\n        return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        text_buffer = codecs.open(file_name, \"r\", encoding)\n        return text_buffer.read()\n    except UnicodeDecodeError as e:\n        log.error(\"Failed to read file %s (%s)\", file_name, e)\n    except IOError as e:\n        log.error(\"Failed to read file %s (%s)\", file_name, e)\n    return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, 'r', encoding=encoding) as f:\n            text = f.read()\n        return text\n    except FileNotFoundError:\n        return None", "is_pass": true, "return_code": 0}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, \"r\", encoding=encoding) as file:\n            text = file.read()\n            return text\n    except UnicodeDecodeError:\n        return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with open(file_name, \"r\", encoding=encoding) as f:\n            text = f.read()\n            return text\n    except UnicodeDecodeError:\n        return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer = open(file_name, 'r', encoding=encoding).read()\n    except Exception:\n        buffer = None\n    return buffer\n", "is_pass": true, "return_code": 0}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, \"r\", encoding=encoding) as f:\n            text = f.read()\n            return text\n    except UnicodeDecodeError:\n        return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer_ = io.open(file_name, 'r', encoding=encoding)\n    except Exception:\n        return None\n    try:\n        text = buffer_.read()\n    finally:\n        buffer_.close()\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        text = file_to_text(file_name, encoding=encoding)\n        return text\n    except UnicodeDecodeError:\n        return None", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "ques_id": "62b8bbbce0d34b282c18120d", "code": ["def is_file_exist(file_name):\n    return os.path.exists(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    if not os.path.exists(file_name):\n        return False\n    return True\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    if not os.path.exists(file_name):\n        return False\n    return True\n", "def is_file_exist(file_name):\n    if not os.path.isfile(file_name):\n        return False\n    return True\n", "def is_file_exist(file_name):\n    if not os.path.exists(file_name):\n        return False\n    if not os.path.isfile(file_name):\n        return False\n    return True\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_file_exist(file_name):\n    return os.path.exists(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if not os.path.exists(file_name):\n        return False\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if not os.path.exists(file_name):\n        return False\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if not os.path.isfile(file_name):\n        return False\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if not os.path.exists(file_name):\n        return False\n    if not os.path.isfile(file_name):\n        return False\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "ques_id": "62b8b99de0d34b282c1811f8", "code": ["def _reset_logging(cls):\n    if cls._logging is not None:\n        cls._logging.close()\n        cls._logging = None\n", "def _reset_logging(cls):\n    logging.basicConfig(\n        format='%(asctime)s %(levelname)s %(message)s',\n        datefmt='%Y-%m-%d %H:%M:%S')\n    logger = logging.getLogger(__name__)\n    logger.setLevel(logging.INFO)\n    return logger\n", "def _reset_logging(cls):\n    logging.getLogger(\"\").handlers = []\n", "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n    logging.basicConfig()\n", "def _reset_logging(cls):\n    \n    \n    logging.basicConfig(format='%(asctime)s %(levelname)s: %(message)s',\n                        level=logging.INFO)\n", "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "def _reset_logging(cls):\n    \n    \n    global _LOG_LEVEL\n    _LOG_LEVEL = logging.INFO\n", "def _reset_logging(cls):\n    _LOGGER.handlers = []\n    _LOGGER.setLevel(logging.DEBUG)\n", "def _reset_logging(cls):\n    cls.__init__ = cls._init_default\n    cls.__doc__ = cls.__doc__.format(__name__)\n    cls._init_default()\n    return cls\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _reset_logging(cls):\n    if cls._logging is not None:\n        cls._logging.close()\n        cls._logging = None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.basicConfig(\n        format='%(asctime)s %(levelname)s %(message)s',\n        datefmt='%Y-%m-%d %H:%M:%S')\n    logger = logging.getLogger(__name__)\n    logger.setLevel(logging.INFO)\n    return logger\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger(\"\").handlers = []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n    logging.basicConfig()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    \n    \n    logging.basicConfig(format='%(asctime)s %(levelname)s: %(message)s',\n                        level=logging.INFO)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    \n    \n    global _LOG_LEVEL\n    _LOG_LEVEL = logging.INFO\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    _LOGGER.handlers = []\n    _LOGGER.setLevel(logging.DEBUG)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    cls.__init__ = cls._init_default\n    cls.__doc__ = cls.__doc__.format(__name__)\n    cls._init_default()\n    return cls\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "ques_id": "62b8b59feb7e40a82d2d1291", "code": ["def _getTargetClass(self):\n    return NoTarget", "def _getTargetClass(self):\n    \n    \n    return File\n\n", "def _getTargetClass(self):\n    return None", "def _getTargetClass(self):\nreturn self._targetClass", "def _getTargetClass(self):\n    raise NotImplementedError('%s must implement _getTargetClass()' % (self.__class__.__name__,))\n", "def _getTargetClass(self):\n    \n    \n    return None\n\n\n# The following are the shortcuts for the Fallback implementations.", "def _getTargetClass(self):\n    return File", "def _getTargetClass(self):\npass", "def _getTargetClass(self):\n    return None\n", "def _getTargetClass(self):\n    return None\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _getTargetClass(self):\n    return NoTarget", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    \n    \n    return File\n\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return None", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\nreturn self._targetClass", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    raise NotImplementedError('%s must implement _getTargetClass()' % (self.__class__.__name__,))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    \n    \n    return None\n\n\n# The following are the shortcuts for the Fallback implementations.", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return File", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "ques_id": "62b8b590eb7e40a82d2d1275", "code": ["def _legacy_mergeOrderings(orderings):\n    seen = set()\n    result = []\n    for ordering in orderings:\n        if not any([o.startswith(seen) for o in ordering]):\n            result.extend(ordering)\n            seen.add(ordering[0])\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    if not orderings:\n        return []\n    elif len(orderings) == 1:\n        return orderings[0]\n    else:\n        first = orderings[0]\n        return _mergeOrderings([first] + [_legacy_mergeOrderings(orderings[1:])])\n", "def _legacy_mergeOrderings(orderings):\n    result = []\n    for ordering in orderings:\n        if not isinstance(ordering, (list, tuple)):\n            ordering = [ordering]\n        for order in ordering:\n            result.extend(order)\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    return [x for y in orderings for x in y]\n", "def _legacy_mergeOrderings(orderings):\n    return [o for o in orderings if o]\n", "def _legacy_mergeOrderings(orderings):\n    newOrderings = []\n    for ordering in orderings:\n        newOrderings.extend(ordering)\n    return newOrderings\n", "def _legacy_mergeOrderings(orderings):\n    return [o for o in orderings if len(o) > 1]", "def _legacy_mergeOrderings(orderings):\n    orderings = [ordering for ordering in orderings if ordering]\n    return mergeOrderings(orderings)\n", "def _legacy_mergeOrderings(orderings):\n    result = []\n    for ordering in orderings:\n        if ordering:\n            result.append(ordering[0])\n            for item in ordering[1:]:\n                result.append(item)\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    # FIXME: Should we rename the orderings to something more general?\n    orderings = [_mergeOrdering(o) for o in orderings]\n    return [o.name for o in orderings]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _legacy_mergeOrderings(orderings):\n    seen = set()\n    result = []\n    for ordering in orderings:\n        if not any([o.startswith(seen) for o in ordering]):\n            result.extend(ordering)\n            seen.add(ordering[0])\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    if not orderings:\n        return []\n    elif len(orderings) == 1:\n        return orderings[0]\n    else:\n        first = orderings[0]\n        return _mergeOrderings([first] + [_legacy_mergeOrderings(orderings[1:])])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    result = []\n    for ordering in orderings:\n        if not isinstance(ordering, (list, tuple)):\n            ordering = [ordering]\n        for order in ordering:\n            result.extend(order)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    return [x for y in orderings for x in y]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    return [o for o in orderings if o]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    newOrderings = []\n    for ordering in orderings:\n        newOrderings.extend(ordering)\n    return newOrderings\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    return [o for o in orderings if len(o) > 1]", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings = [ordering for ordering in orderings if ordering]\n    return mergeOrderings(orderings)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    result = []\n    for ordering in orderings:\n        if ordering:\n            result.append(ordering[0])\n            for item in ordering[1:]:\n                result.append(item)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    # FIXME: Should we rename the orderings to something more general?\n    orderings = [_mergeOrdering(o) for o in orderings]\n    return [o.name for o in orderings]\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "ques_id": "62b8b58deb7e40a82d2d1269", "code": ["def directlyProvidedBy(object):\n    if not isinstance(object, (Interface, Class)):\n        raise TypeError(\"%r is not a directly provided object\" % object)\n\n    return implementedBy(object)", "def directlyProvidedBy(object):\n    provided = getattr(object, '__providedBy__', None)\n    if provided is None:\n        provided = providedBy(object)\n    return provided\n", "def directlyProvidedBy(object):\n    return directlyProvidedByInterface(object.__interface__)\n", "def directlyProvidedBy(object):\n    return interfaces.providedBy(object)", "def directlyProvidedBy(object):\n    return Interface(implementedBy(object))\n", "def directlyProvidedBy(object):\n    providedBy = getattr(object, '__providedBy__', None)\n    if providedBy is None:\n        return Interface\n    elif isinstance(providedBy, interfaces.IDeclaration):\n        return providedBy\n    else:\n        return providedBy.providedBy(object)\n", "def directlyProvidedBy(object):\n    return interfaces.providedBy(object)", "def directlyProvidedBy(object):\n    providedBy = providedByInterface(object)\n    for iface in providedBy.__implements__:\n        yield iface\n", "def directlyProvidedBy(object):\n    return interfaces.IDeclaration(object)", "def directlyProvidedBy(object):\n    return directlyProvidedByInterface(object.__of__(object))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def directlyProvidedBy(object):\n    if not isinstance(object, (Interface, Class)):\n        raise TypeError(\"%r is not a directly provided object\" % object)\n\n    return implementedBy(object)", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    provided = getattr(object, '__providedBy__', None)\n    if provided is None:\n        provided = providedBy(object)\n    return provided\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return directlyProvidedByInterface(object.__interface__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return interfaces.providedBy(object)", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return Interface(implementedBy(object))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    providedBy = getattr(object, '__providedBy__', None)\n    if providedBy is None:\n        return Interface\n    elif isinstance(providedBy, interfaces.IDeclaration):\n        return providedBy\n    else:\n        return providedBy.providedBy(object)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return interfaces.providedBy(object)", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    providedBy = providedByInterface(object)\n    for iface in providedBy.__implements__:\n        yield iface\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return interfaces.IDeclaration(object)", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return directlyProvidedByInterface(object.__of__(object))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "ques_id": "62b8b559eb7e40a82d2d11f8", "code": ["def minimalBases(classes):\n    \n    \n    classes.sort(key=lambda x: x.order)\n    return classes", "def minimalBases(classes):\n    \n    \n    return sorted(classes, key=lambda c: c.__bases__[0])\n", "def minimalBases(classes):\n    \n    \n    return sorted(classes, key=lambda c: c.__bases__[0])", "def minimalBases(classes):\n    minimal = []\n    for classe in classes:\n        if classe.__bases__:\n            for base in classe.__bases__:\n                if base not in minimal:\n                    minimal.append(base)\n    return minimal\n", "def minimalBases(classes):\n    return [c for c in classes if issubclass(c, Base)]\n", "def minimalBases(classes):\n    return sorted([cls for cls in classes if issubclass(cls, Base)], key=lambda cls: cls.__name__)\n", "def minimalBases(classes):\n    return sorted(classes, key=lambda c: c.name)\n", "def minimalBases(classes):\n    \n    \n    return sorted(classes, key=lambda x: x.__name__)", "def minimalBases(classes):\n    return sorted(classes, key=lambda c: c.order)", "def minimalBases(classes):\n    \n    \n    return sorted(classes, key=lambda c: c.__module__.split('.')[-1])"], "level": "self_contained", "generate_results": [{"generate_code": "def minimalBases(classes):\n    \n    \n    classes.sort(key=lambda x: x.order)\n    return classes", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \n    \n    return sorted(classes, key=lambda c: c.__bases__[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \n    \n    return sorted(classes, key=lambda c: c.__bases__[0])", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    minimal = []\n    for classe in classes:\n        if classe.__bases__:\n            for base in classe.__bases__:\n                if base not in minimal:\n                    minimal.append(base)\n    return minimal\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return [c for c in classes if issubclass(c, Base)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return sorted([cls for cls in classes if issubclass(cls, Base)], key=lambda cls: cls.__name__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return sorted(classes, key=lambda c: c.name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \n    \n    return sorted(classes, key=lambda x: x.__name__)", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return sorted(classes, key=lambda c: c.order)", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \n    \n    return sorted(classes, key=lambda c: c.__module__.split('.')[-1])", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "ques_id": "62b8b4b9eb7e40a82d2d1134", "code": ["def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for name, obj in self.items():\n        if not isinstance(obj, Attribute):\n            continue\n        if all:\n            names.append(name)\n            descriptions.append(obj.getDescription())\n        else:\n            names.append(name)\n            descriptions.append(obj.getDescription())\n    return names, descriptions\n", "def namesAndDescriptions(self, all=False):\n    result = []\n    for iface in self.__ifaces__:\n        names = iface.names(all)\n        desc = iface.description(all)\n        result.append((names, desc))\n    return result\n", "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for iface in self.interfaces(all=all):\n        names.extend(iface.names())\n        descriptions.extend(iface.descriptions())\n    return names, descriptions", "def namesAndDescriptions(self, all=False):\n    return _attrs(self.iface_attrs if all else self.iface_attrs_no_description)\n", "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for name, description in self.items(all):\n        names.append(name)\n        descriptions.append(description)\n    return names, descriptions\n", "def namesAndDescriptions(self, all=False):\n    return sorted(self.names(all=all) + self.descriptions(all=all))", "def namesAndDescriptions(self, all=False):\n    names = [\n        \"Name\",\n        \"Description\"\n    ]\n    descriptions = [\n        \"Description\",\n        \"Description\",\n        \"Description\"\n    ]\n    return names, descriptions\n", "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for iface in self.__interfaces__:\n        if all or iface.isAttributeAllowed(self):\n            names.append(iface.name)\n            descriptions.append(iface.description)\n    return names, descriptions\n", "def namesAndDescriptions(self, all=False):\n    if all:\n        return sorted(self._namesAndDescriptions.items())\n    else:\n        return self._namesAndDescriptions.items()\n", "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for name, iface in self.items():\n        if iface.providedBy(self):\n            if all:\n                names.append(name)\n                descriptions.append(iface.description)\n            else:\n                yield name, iface.description\n    if all:\n        yield names, descriptions\n    else:\n        yield names\n        yield descriptions\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for name, obj in self.items():\n        if not isinstance(obj, Attribute):\n            continue\n        if all:\n            names.append(name)\n            descriptions.append(obj.getDescription())\n        else:\n            names.append(name)\n            descriptions.append(obj.getDescription())\n    return names, descriptions\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    result = []\n    for iface in self.__ifaces__:\n        names = iface.names(all)\n        desc = iface.description(all)\n        result.append((names, desc))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for iface in self.interfaces(all=all):\n        names.extend(iface.names())\n        descriptions.extend(iface.descriptions())\n    return names, descriptions", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    return _attrs(self.iface_attrs if all else self.iface_attrs_no_description)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for name, description in self.items(all):\n        names.append(name)\n        descriptions.append(description)\n    return names, descriptions\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    return sorted(self.names(all=all) + self.descriptions(all=all))", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = [\n        \"Name\",\n        \"Description\"\n    ]\n    descriptions = [\n        \"Description\",\n        \"Description\",\n        \"Description\"\n    ]\n    return names, descriptions\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for iface in self.__interfaces__:\n        if all or iface.isAttributeAllowed(self):\n            names.append(iface.name)\n            descriptions.append(iface.description)\n    return names, descriptions\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    if all:\n        return sorted(self._namesAndDescriptions.items())\n    else:\n        return self._namesAndDescriptions.items()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for name, iface in self.items():\n        if iface.providedBy(self):\n            if all:\n                names.append(name)\n                descriptions.append(iface.description)\n            else:\n                yield name, iface.description\n    if all:\n        yield names, descriptions\n    else:\n        yield names\n        yield descriptions\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "ques_id": "62b8b416eb7e40a82d2d1129", "code": ["def names(self, all=False):\n    if all:\n        return self._attributes.keys()\n    else:\n        return self._attributes.keys() + self._dynamic_attributes.keys()", "def names(self, all=False):\n    \n    \n    names = set(dir(self))\n    if all:\n        return names\n    else:\n        return list(names)\n", "def names(self, all=False):\n    return self.attributes(all)\n", "def names(self, all=False):\n    if all:\n        return self.attributes.keys()\n    else:\n        return self.attributes.keys() + self.iface_attributes.keys()\n", "def names(self, all=False):\n    return self._attrs", "def names(self, all=False):\n    \n    \n    if all:\n        return self._names\n    return self._names[:]\n", "def names(self, all=False):\n    \n    \n    if all:\n        return list(self.__dict__.keys())\n    else:\n        return list(self.__dict__.keys())", "def names(self, all=False):\n    \n    \n    return self.get(all=all).keys()\n", "def names(self, all=False):\n    if all:\n        return self.__attrs.keys()\n    return self.__attrs.keys()[:]", "def names(self, all=False):\n    if all:\n        return dir(self)\n    else:\n        return [a.name for a in self.__attributes__]"], "level": "class_runnable", "generate_results": [{"generate_code": "def names(self, all=False):\n    if all:\n        return self._attributes.keys()\n    else:\n        return self._attributes.keys() + self._dynamic_attributes.keys()", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \n    \n    names = set(dir(self))\n    if all:\n        return names\n    else:\n        return list(names)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    return self.attributes(all)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return self.attributes.keys()\n    else:\n        return self.attributes.keys() + self.iface_attributes.keys()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    return self._attrs", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \n    \n    if all:\n        return self._names\n    return self._names[:]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \n    \n    if all:\n        return list(self.__dict__.keys())\n    else:\n        return list(self.__dict__.keys())", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \n    \n    return self.get(all=all).keys()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return self.__attrs.keys()\n    return self.__attrs.keys()[:]", "is_pass": true, "return_code": 0}, {"generate_code": "def names(self, all=False):\n    if all:\n        return dir(self)\n    else:\n        return [a.name for a in self.__attributes__]", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "ques_id": "62b8b3d6eb7e40a82d2d111c", "code": ["def _normalizeargs(sequence, output=None):\n\n    return _normalizeargs_impl(sequence, output)[0]\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for arg in sequence:\n        if isinstance(arg, (Interface, Declaration, tuple)):\n            arg = _normalizeinterface(arg)\n        output.append(arg)\n    return output", "def _normalizeargs(sequence, output=None):\n    output = output or []\n    for arg in sequence:\n        if isinstance(arg, interfaces.Implementation):\n            arg = arg.implementation\n        if not isinstance(arg, interfaces.Implementation):\n            arg = interfaces.Implementation(arg)\n        arg.normalize(output)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for arg in sequence:\n        if isinstance(arg, Decl):\n            _normalizeargs(arg.args, output=output + [arg])\n        elif isinstance(arg, (tuple, list)):\n            for item in arg:\n                _normalizeargs(item, output=output + [arg])\n        else:\n            output.append(arg)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if isinstance(sequence, Interface):\n        return sequence\n\n    if output is None:\n        output = []\n    for item in sequence:\n        if isinstance(item, Interface):\n            _normalizeargs(item, output)\n        else:\n            output.append(item)\n    return output", "def _normalizeargs(sequence, output=None):\n    if isinstance(sequence, Interface):\n        return _normalizeinterface(sequence, output)\n    elif isinstance(sequence, (list, tuple)):\n        return [_normalizeargs(arg, output) for arg in sequence]\n    elif output is None:\n        return sequence\n    else:\n        return output", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    if isinstance(sequence, Interface):\n        sequence = sequence.__args__\n    for i, arg in enumerate(sequence):\n        if isinstance(arg, Declaration):\n            sequence[i] = arg.__args__\n    return sequence\n", "def _normalizeargs(sequence, output=None):\n    return sequence", "def _normalizeargs(sequence, output=None):\n    if output is not None:\n        output.write(\"def normalizeargs(\" + \", \".join(map(repr, sequence)) + \"):\")\n        return\n\n    for arg in sequence:\n        if isinstance(arg, (Interface, tuple, Spec)):\n            _normalizeargs(arg, output=output)\n        elif isinstance(arg, str):\n            output.write(\"%s = %s\" % (arg, repr(arg)))\n        else:\n            raise ValueError(arg)\n", "def _normalizeargs(sequence, output=None):\n    return [_normalizearg(seq, output) for seq in sequence]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _normalizeargs(sequence, output=None):\n\n    return _normalizeargs_impl(sequence, output)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for arg in sequence:\n        if isinstance(arg, (Interface, Declaration, tuple)):\n            arg = _normalizeinterface(arg)\n        output.append(arg)\n    return output", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    output = output or []\n    for arg in sequence:\n        if isinstance(arg, interfaces.Implementation):\n            arg = arg.implementation\n        if not isinstance(arg, interfaces.Implementation):\n            arg = interfaces.Implementation(arg)\n        arg.normalize(output)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for arg in sequence:\n        if isinstance(arg, Decl):\n            _normalizeargs(arg.args, output=output + [arg])\n        elif isinstance(arg, (tuple, list)):\n            for item in arg:\n                _normalizeargs(item, output=output + [arg])\n        else:\n            output.append(arg)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if isinstance(sequence, Interface):\n        return sequence\n\n    if output is None:\n        output = []\n    for item in sequence:\n        if isinstance(item, Interface):\n            _normalizeargs(item, output)\n        else:\n            output.append(item)\n    return output", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if isinstance(sequence, Interface):\n        return _normalizeinterface(sequence, output)\n    elif isinstance(sequence, (list, tuple)):\n        return [_normalizeargs(arg, output) for arg in sequence]\n    elif output is None:\n        return sequence\n    else:\n        return output", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    if isinstance(sequence, Interface):\n        sequence = sequence.__args__\n    for i, arg in enumerate(sequence):\n        if isinstance(arg, Declaration):\n            sequence[i] = arg.__args__\n    return sequence\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    return sequence", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is not None:\n        output.write(\"def normalizeargs(\" + \", \".join(map(repr, sequence)) + \"):\")\n        return\n\n    for arg in sequence:\n        if isinstance(arg, (Interface, tuple, Spec)):\n            _normalizeargs(arg, output=output)\n        elif isinstance(arg, str):\n            output.write(\"%s = %s\" % (arg, repr(arg)))\n        else:\n            raise ValueError(arg)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    return [_normalizearg(seq, output) for seq in sequence]\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "ques_id": "62b8b3d5eb7e40a82d2d1110", "code": ["def _c_optimizations_available():\n    if 'c_optimizations' in __opts__:\n        return __opts__['c_optimizations']\n    else:\n        return False", "def _c_optimizations_available():\n    from sympy.optimize import OptimizeResults\n    try:\n        import c_optimizations\n        return c_optimizations\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        import c_optimizations  # noqa: F401\n    except ImportError:\n        return False\n    else:\n        return True\n", "def _c_optimizations_available():\n    return c_optimizations_available()\n", "def _c_optimizations_available():\n    import sys\n    import six\n\n    if '__cplusplus' in sys.modules:\n        return sys.modules['__cplusplus']\n    elif '__cplusplus' in six.modules:\n        return six.modules['__cplusplus']\n    else:\n        raise ImportError(\"C optimizations are required but not available\")\n", "def _c_optimizations_available():\n    try:\n        from scipy.optimize import c_optimize as c_optimize_module\n    except ImportError:\n        return False\n    else:\n        return c_optimize_module\n", "def _c_optimizations_available():\n    from. import c_optimizations\n    return c_optimizations", "def _c_optimizations_available():\n    try:\n        from pysph.base.optimizations import COptimizations\n    except ImportError:\n        return False\n    else:\n        return COptimizations\n", "def _c_optimizations_available():\n    try:\n        from c_optimizations import c_optimizations  # noqa\n    except ImportError:\n        return False\n    else:\n        return True\n", "def _c_optimizations_available():\n    from. import _c_optimizations\n    return _c_optimizations\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _c_optimizations_available():\n    if 'c_optimizations' in __opts__:\n        return __opts__['c_optimizations']\n    else:\n        return False", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    from sympy.optimize import OptimizeResults\n    try:\n        import c_optimizations\n        return c_optimizations\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        import c_optimizations  # noqa: F401\n    except ImportError:\n        return False\n    else:\n        return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    return c_optimizations_available()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    import sys\n    import six\n\n    if '__cplusplus' in sys.modules:\n        return sys.modules['__cplusplus']\n    elif '__cplusplus' in six.modules:\n        return six.modules['__cplusplus']\n    else:\n        raise ImportError(\"C optimizations are required but not available\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from scipy.optimize import c_optimize as c_optimize_module\n    except ImportError:\n        return False\n    else:\n        return c_optimize_module\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    from. import c_optimizations\n    return c_optimizations", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from pysph.base.optimizations import COptimizations\n    except ImportError:\n        return False\n    else:\n        return COptimizations\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from c_optimizations import c_optimizations  # noqa\n    except ImportError:\n        return False\n    else:\n        return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    from. import _c_optimizations\n    return _c_optimizations\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110f", "code": ["def _should_attempt_c_optimizations():\n    from _pypy_pure_python import PurePythonOptions\n\n    return not _use_c_impl() and PurePythonOptions.get_boolean_option(\"optimizations\")\n", "def _should_attempt_c_optimizations():\n    if sys.version_info < (3, 0):\n        return os.environ.get('PURE_PYTHON') == '1'\n    else:\n        return _use_c_impl()\n", "def _should_attempt_c_optimizations():\n    return (\n        os.environ.get(\"PURE_PYTHON\") == \"1\" and\n        _use_c_impl()\n    )\n", "def _should_attempt_c_optimizations():\n    return _use_c_impl() or PYPY\n", "def _should_attempt_c_optimizations():\n    # type: () -> bool\n    return (\n        os.environ.get(\"PURE_PYTHON\", \"\").lower() == \"true\"\n        and _use_c_impl()\n    )\n", "def _should_attempt_c_optimizations():\n    return PURE_PYTHON is not None and getattr(sys, 'frozen', False)\n", "def _should_attempt_c_optimizations():\n    python_is_c = (os.environ.get('PURE_PYTHON', None) == '1')\n    return (not python_is_c) and _use_c_impl()\n", "def _should_attempt_c_optimizations():\n    # type: () -> bool\n    return (\n        os.environ.get(\"PURE_PYTHON\") is not None and\n        not is_frozen() and\n        hasattr(sys, \"implementation\")\n    )\n", "def _should_attempt_c_optimizations():\n    return (os.environ.get('PURE_PYTHON') == 'true'\n            and sys.version_info < (3, 7))\n", "def _should_attempt_c_optimizations():\n    return os.environ.get(\"PURE_PYTHON\", \"0\") == \"1\"\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _should_attempt_c_optimizations():\n    from _pypy_pure_python import PurePythonOptions\n\n    return not _use_c_impl() and PurePythonOptions.get_boolean_option(\"optimizations\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    if sys.version_info < (3, 0):\n        return os.environ.get('PURE_PYTHON') == '1'\n    else:\n        return _use_c_impl()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return (\n        os.environ.get(\"PURE_PYTHON\") == \"1\" and\n        _use_c_impl()\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return _use_c_impl() or PYPY\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    # type: () -> bool\n    return (\n        os.environ.get(\"PURE_PYTHON\", \"\").lower() == \"true\"\n        and _use_c_impl()\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return PURE_PYTHON is not None and getattr(sys, 'frozen', False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    python_is_c = (os.environ.get('PURE_PYTHON', None) == '1')\n    return (not python_is_c) and _use_c_impl()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    # type: () -> bool\n    return (\n        os.environ.get(\"PURE_PYTHON\") is not None and\n        not is_frozen() and\n        hasattr(sys, \"implementation\")\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return (os.environ.get('PURE_PYTHON') == 'true'\n            and sys.version_info < (3, 7))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return os.environ.get(\"PURE_PYTHON\", \"0\") == \"1\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "ques_id": "62b8b3d4eb7e40a82d2d110e", "code": ["def _c_optimizations_ignored():\n    \n    \n    return True\n", "def _c_optimizations_ignored():\n    return False\n", "def _c_optimizations_ignored():\n    return _c_optimizations_required() & (1 << 5)\n", "def _c_optimizations_ignored():\n    return 0\n", "def _c_optimizations_ignored():\n    return c_optimizations_required(_c_optimizations_ignored_options)\n", "def _c_optimizations_ignored():\n    \n    \n    return False\n", "def _c_optimizations_ignored():\n    return 0", "def _c_optimizations_ignored():\n    return _c_optimizations_required() == 'no'\n", "def _c_optimizations_ignored():\n    return _c_optimizations_required() == 'ignore'\n", "def _c_optimizations_ignored():\n    \n    \n    return 0"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_ignored():\n    \n    \n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    return _c_optimizations_required() & (1 << 5)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return c_optimizations_required(_c_optimizations_ignored_options)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    \n    \n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    return 0", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return _c_optimizations_required() == 'no'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    return _c_optimizations_required() == 'ignore'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    \n    \n    return 0", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110d", "code": ["def _c_optimizations_required():\n    return _use_c_impl() and (PURE_PYTHON or '') in sys.builtin_module_names", "def _c_optimizations_required():\n    return PURE_PYTHON\n", "def _c_optimizations_required():\n    return PURE_PYTHON or \\\n            (sys.platform == 'win32' and sys.version_info >= (3, 0))", "def _c_optimizations_required():\n    return PURE_PYTHON and sys.version_info < (3, 9)\n", "def _c_optimizations_required():\n    return 'PURE_PYTHON' in os.environ\n", "def _c_optimizations_required():\n    return PURE_PYTHON or _use_c_impl('optimizations')\n", "def _c_optimizations_required():\n    return PURE_PYTHON or (PURE_PYTHON is None and sys.version_info[:2] < (3, 0))\n", "def _c_optimizations_required():\n    return PURE_PYTHON is not None\n", "def _c_optimizations_required():\n    return PURE_PYTHON is not None\n", "def _c_optimizations_required():\n    if _use_c_impl['PURE_PYTHON']:\n        return True\n    return False\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_required():\n    return _use_c_impl() and (PURE_PYTHON or '') in sys.builtin_module_names", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    return PURE_PYTHON\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    return PURE_PYTHON or \\\n            (sys.platform == 'win32' and sys.version_info >= (3, 0))", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    return PURE_PYTHON and sys.version_info < (3, 9)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    return 'PURE_PYTHON' in os.environ\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    return PURE_PYTHON or _use_c_impl('optimizations')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    return PURE_PYTHON or (PURE_PYTHON is None and sys.version_info[:2] < (3, 0))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    return PURE_PYTHON is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    return PURE_PYTHON is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    if _use_c_impl['PURE_PYTHON']:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "ques_id": "62b87b989a0c4fa8b80b35ee", "code": ["def reset(self):\n    self._histo = {}\n", "def reset(self):\nself._histogram = {}\nself._bins = {}", "def reset(self):\n\n    self._bins = {}", "def reset(self):\nif self.__bins is None:\nself.__bins = {}\nelse:\nself.__bins = { k:[] for k in self.__bins }\nself.__max_value = None\nself.__min_value = None\nself.__initialized = False\nself.__bin_size = None", "def reset(self):\nself._hist = {}\nself._bins = []\nself._initial_value = {}", "def reset(self):\nself._context = {}\n", "def reset(self):\n    self._histogram = {}\n    self._histogram_size = 0", "def reset(self):\n    self._histogram = {}\n    self._bins = {}\n    self._initial_value = None\n", "def reset(self):\n    self._bins = {}\n    self._initial_value = self.make_bins()", "def reset(self):\n\nself.histogram = {}\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def reset(self):\n    self._histo = {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\nself._histogram = {}\nself._bins = {}", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n\n    self._bins = {}", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\nif self.__bins is None:\nself.__bins = {}\nelse:\nself.__bins = { k:[] for k in self.__bins }\nself.__max_value = None\nself.__min_value = None\nself.__initialized = False\nself.__bin_size = None", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\nself._hist = {}\nself._bins = []\nself._initial_value = {}", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\nself._context = {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n    self._histogram = {}\n    self._histogram_size = 0", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n    self._histogram = {}\n    self._bins = {}\n    self._initial_value = None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n    self._bins = {}\n    self._initial_value = self.make_bins()", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n\nself.histogram = {}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "ques_id": "62b87b859a0c4fa8b80b35d7", "code": ["def to_csv(self, separator=\",\", header=None):\n    warnings.warn(\"to_csv is deprecated, use to_csv instead\", DeprecationWarning)\n    return ToCSV(self, separator, header)\n", "def to_csv(self, separator=\",\", header=None):\n    from lena.output import ToCSV\n    return ToCSV(self, separator, header)\n", "def to_csv(self, separator=\",\", header=None):\n    warnings.warn(\n        \"to_csv is deprecated and will be removed in Lena 0.5 to_csv and \"\n        \"will be removed in Leena 0.5 to_csv in graphs and Lena 0.5 use \"\n        \"to_csv(separator, header)\",\n        DeprecationWarning)\n", "def to_csv(self, separator=\",\", header=None):\n    warnings.warn(\"to_csv is deprecated, use to_csv instead\")\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    from lena.output.ToCSV import to_csv\n    return to_csv(self, separator, header)\n", "def to_csv(self, separator=\",\", header=None):\n    return ToCSV(self, separator, header)\n", "def to_csv(self, separator=\",\", header=None):\n    warnings.warn(\n        \"to_csv is deprecated. Iterables are converted to tables. It is returned as a single line\",\n        DeprecationWarning)\n    return ToCSV(self, separator, header)\n", "def to_csv(self, separator=\",\", header=None):\n    warnings.warn(\"to_csv is deprecated, use Graph.to_csv instead\")\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    return to_iterable(self, separator, header)", "def to_csv(self, separator=\",\", header=None):\n    return ToCSV(self, separator, header)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def to_csv(self, separator=\",\", header=None):\n    warnings.warn(\"to_csv is deprecated, use to_csv instead\", DeprecationWarning)\n    return ToCSV(self, separator, header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from lena.output import ToCSV\n    return ToCSV(self, separator, header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    warnings.warn(\n        \"to_csv is deprecated and will be removed in Lena 0.5 to_csv and \"\n        \"will be removed in Leena 0.5 to_csv in graphs and Lena 0.5 use \"\n        \"to_csv(separator, header)\",\n        DeprecationWarning)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    warnings.warn(\"to_csv is deprecated, use to_csv instead\")\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from lena.output.ToCSV import to_csv\n    return to_csv(self, separator, header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return ToCSV(self, separator, header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    warnings.warn(\n        \"to_csv is deprecated. Iterables are converted to tables. It is returned as a single line\",\n        DeprecationWarning)\n    return ToCSV(self, separator, header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    warnings.warn(\"to_csv is deprecated, use Graph.to_csv instead\")\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return to_iterable(self, separator, header)", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return ToCSV(self, separator, header)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "ques_id": "62b87b839a0c4fa8b80b35cb", "code": ["def _get_err_indices(self, coord_name):\n    return np.where(self._coord_names == coord_name)[0]", "def _get_err_indices(self, coord_name):\n    return self._get_indices(coord_name, 'err')\n", "def _get_err_indices(self, coord_name):\n    coord_name = coord_name.lower()\n    if coord_name not in self.coord_names:\n        raise ValueError(\"{} is not a valid coordinate name\".format(coord_name))\n    if coord_name == \"earth\":\n        return self._get_err_earth_indices()\n    elif coord_name == \"polar\":\n        return self._get_err_polar_indices()\n    elif coord_name == \"sky\":\n        return self._get_err_sky_indices()\n    else:\n        raise ValueError(\"Unknown coordinate name: {}\".format(coord_name))", "def _get_err_indices(self, coord_name):\n    \n    \n    coord = self.coords[coord_name]\n    err_inds = np.zeros(coord.shape, dtype=np.int64)\n    for i, c in enumerate(coord):\n        if c < self.min_coord[i]:\n            err_inds[i] = self.min_coord[i] - c\n        elif c > self.max_coord[i]:\n            err_inds[i] = self.max_coord[i] + c\n    return err_inds\n", "def _get_err_indices(self, coord_name):\n    \n    \n    return self._err_coords[coord_name][self._error_indices]", "def _get_err_indices(self, coord_name):\n    \n    \n    coord = self.coord(coord_name)\n    if coord.ndim > 1:\n        raise ValueError(\"{} must be a single coordinate\".format(coord_name))\n    if coord.ndim == 1:\n        return np.arange(coord.size)\n    else:\n        return np.arange(coord.size + 1)\n", "def _get_err_indices(self, coord_name):\n    return self._coord_to_err_indices[coord_name]\n", "def _get_err_indices(self, coord_name):\n    return self.coord_err_indices[coord_name]", "def _get_err_indices(self, coord_name):\n    if coord_name not in self._coord_names:\n        raise ValueError(\"Unknown coordinate: {}\".format(coord_name))\n\n    if self._coord_names.index(coord_name) == 0:\n        return [0]\n    elif self._coord_names.index(coord_name) == self._n_dims - 1:\n        return [self._n_dims - 1]\n    else:\n        raise ValueError(\"Coordinate name not found: {}\".format(coord_name))\n", "def _get_err_indices(self, coord_name):\n    return self._coord_err_indices[coord_name]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _get_err_indices(self, coord_name):\n    return np.where(self._coord_names == coord_name)[0]", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    return self._get_indices(coord_name, 'err')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    coord_name = coord_name.lower()\n    if coord_name not in self.coord_names:\n        raise ValueError(\"{} is not a valid coordinate name\".format(coord_name))\n    if coord_name == \"earth\":\n        return self._get_err_earth_indices()\n    elif coord_name == \"polar\":\n        return self._get_err_polar_indices()\n    elif coord_name == \"sky\":\n        return self._get_err_sky_indices()\n    else:\n        raise ValueError(\"Unknown coordinate name: {}\".format(coord_name))", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \n    \n    coord = self.coords[coord_name]\n    err_inds = np.zeros(coord.shape, dtype=np.int64)\n    for i, c in enumerate(coord):\n        if c < self.min_coord[i]:\n            err_inds[i] = self.min_coord[i] - c\n        elif c > self.max_coord[i]:\n            err_inds[i] = self.max_coord[i] + c\n    return err_inds\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \n    \n    return self._err_coords[coord_name][self._error_indices]", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \n    \n    coord = self.coord(coord_name)\n    if coord.ndim > 1:\n        raise ValueError(\"{} must be a single coordinate\".format(coord_name))\n    if coord.ndim == 1:\n        return np.arange(coord.size)\n    else:\n        return np.arange(coord.size + 1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    return self._coord_to_err_indices[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    return self.coord_err_indices[coord_name]", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name not in self._coord_names:\n        raise ValueError(\"Unknown coordinate: {}\".format(coord_name))\n\n    if self._coord_names.index(coord_name) == 0:\n        return [0]\n    elif self._coord_names.index(coord_name) == self._n_dims - 1:\n        return [self._n_dims - 1]\n    else:\n        raise ValueError(\"Coordinate name not found: {}\".format(coord_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    return self._coord_err_indices[coord_name]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "ques_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["def _update_context(self, context):\n    raise NotImplementedError(\"Must be implemented by subclass.\")\n", "def _update_context(self, context):\n    context.error = []\n    context.value = {}\n    context.value[\"x_low\"] = {}\n    context.value[\"y\"] = {}\n    context.value[\"z\"] = {}\n", "def _update_context(self, context):\n    context.value = {\"error\": {}}\n    for name in self._error_names:\n        context.value[\"error\"][name] = self._errors[name]\n", "def _update_context(self, context):\n    context.value = {}\n    for name in self.fields:\n        context.value[name] = {}\n        for index in self.fields[name].indices:\n            context.value[name][index] = getattr(self, name)[index]", "def _update_context(self, context):\n    context.error = []\n    context.value = {}\n    context.value[\"x_low\"] = {}\n    context.value[\"y\"] = {}\n    context.value[\"z\"] = {}\n", "def _update_context(self, context):\n    pass\n", "def _update_context(self, context):\n    context.value = self._graph.__class__(self._graph.__class__.__name__, self._graph._fields)\n    context.error = []\n", "def _update_context(self, context):\n    context.error = []\n    context.value = []\n    for field, value in self.__dict__.items():\n        context.error.append(field)\n        context.value.append(value)\n", "def _update_context(self, context):\n    context.value.update(self.value)\n    context.error.update(self.error)\n", "def _update_context(self, context):\n    context.error = []\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _update_context(self, context):\n    raise NotImplementedError(\"Must be implemented by subclass.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n    context.value = {}\n    context.value[\"x_low\"] = {}\n    context.value[\"y\"] = {}\n    context.value[\"z\"] = {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.value = {\"error\": {}}\n    for name in self._error_names:\n        context.value[\"error\"][name] = self._errors[name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.value = {}\n    for name in self.fields:\n        context.value[name] = {}\n        for index in self.fields[name].indices:\n            context.value[name][index] = getattr(self, name)[index]", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n    context.value = {}\n    context.value[\"x_low\"] = {}\n    context.value[\"y\"] = {}\n    context.value[\"z\"] = {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.value = self._graph.__class__(self._graph.__class__.__name__, self._graph._fields)\n    context.error = []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n    context.value = []\n    for field, value in self.__dict__.items():\n        context.error.append(field)\n        context.value.append(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.value.update(self.value)\n    context.error.update(self.error)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "ques_id": "62b87b4f9a0c4fa8b80b3580", "code": ["def integral(bins, edges):\n    return np.trapz(bins, edges)\n", "def integral(bins, edges):\n    return np.trapz(bins * edges, edges)\n", "def integral(bins, edges):\n    raise NotImplementedError\n", "def integral(bins, edges):\n    bins = numpy.array(bins)\n    edges = numpy.array(edges)\n    return numpy.trapz(bins*edges, edges)", "def integral(bins, edges):\n    return np.sum(bins*edges)\n", "def integral(bins, edges):\n    return np.sum(np.diff(edges) * bins)\n", "def integral(bins, edges):\n    return np.sum((bins - edges[:-1]) * (bins - edges[1:]))\n", "def integral(bins, edges):\n    return np.trapz(bins, edges)\n", "def integral(bins, edges):\n    bins, edges = np.broadcast_arrays(bins, edges)\n    # We don't need to return the values because the histogram\n    # has been normalized.\n    return np.sum(bins * edges)\n", "def integral(bins, edges):\n    return np.sum(edges[1:] * bins * edges[:-1], axis=0)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def integral(bins, edges):\n    return np.trapz(bins, edges)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return np.trapz(bins * edges, edges)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    raise NotImplementedError\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    bins = numpy.array(bins)\n    edges = numpy.array(edges)\n    return numpy.trapz(bins*edges, edges)", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return np.sum(bins*edges)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return np.sum(np.diff(edges) * bins)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return np.sum((bins - edges[:-1]) * (bins - edges[1:]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return np.trapz(bins, edges)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    bins, edges = np.broadcast_arrays(bins, edges)\n    # We don't need to return the values because the histogram\n    # has been normalized.\n    return np.sum(bins * edges)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return np.sum(edges[1:] * bins * edges[:-1], axis=0)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "ques_id": "62b87b199a0c4fa8b80b354e", "code": ["def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) or (\n            isinstance(seq, SourceSeq) and not seq.is_empty())", "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequestSeq):\n        return False\n    return (\n        len(seq.elements) > 0\n        and not seq.elements[0].is_source()\n        and not seq.elements[-1].is_source()\n    )\n", "def is_fill_request_seq(seq):\n    return (isinstance(seq, FillRequest) or\n            any(isinstance(x, Source) for x in seq))\n", "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest):\n        return False\n    if not seq.is_source_seq():\n        return False\n    return not any([isinstance(x, Source) for x in seq.reqs])\n", "def is_fill_request_seq(seq):\n    return (isinstance(seq, FillRequest) or\n            isinstance(seq, SourceSequence))\n", "def is_fill_request_seq(seq):\n    if isinstance(seq, FillRequest):\n        return True\n    elif isinstance(seq, SourceSequence):\n        return any(is_fill_request_seq(s) for s in seq)\n    else:\n        return False\n", "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest):\n        return False\n    if seq.get_source() is None:\n        return False\n    return True\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequest) \\\n        and any(isinstance(x, FillRequest) for x in seq) \\\n        and not isinstance(seq, SourceSequence)", "def is_fill_request_seq(seq):\n    if isinstance(seq, FillRequest):\n        return True\n    if isinstance(seq, Source):\n        return False\n    return hasattr(seq, 'is_source_sequence')\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) or is_source_seq(seq)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) or (\n            isinstance(seq, SourceSeq) and not seq.is_empty())", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequestSeq):\n        return False\n    return (\n        len(seq.elements) > 0\n        and not seq.elements[0].is_source()\n        and not seq.elements[-1].is_source()\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return (isinstance(seq, FillRequest) or\n            any(isinstance(x, Source) for x in seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest):\n        return False\n    if not seq.is_source_seq():\n        return False\n    return not any([isinstance(x, Source) for x in seq.reqs])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return (isinstance(seq, FillRequest) or\n            isinstance(seq, SourceSequence))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if isinstance(seq, FillRequest):\n        return True\n    elif isinstance(seq, SourceSequence):\n        return any(is_fill_request_seq(s) for s in seq)\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest):\n        return False\n    if seq.get_source() is None:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequest) \\\n        and any(isinstance(x, FillRequest) for x in seq) \\\n        and not isinstance(seq, SourceSequence)", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if isinstance(seq, FillRequest):\n        return True\n    if isinstance(seq, Source):\n        return False\n    return hasattr(seq, 'is_source_sequence')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequestSeq) or is_source_seq(seq)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "ques_id": "62b87b099a0c4fa8b80b3538", "code": ["def is_fill_request_el(obj):\n    return isinstance(obj, (list, tuple)) and len(obj) == 2 and obj[0] == 'fill' \\\n        and isinstance(obj[1], (list, tuple)) and len(obj[1]) == 2 and obj[1][0] =='request'\n", "def is_fill_request_el(obj):\n    return isinstance(obj, dict) and 'fill' in obj\n", "def is_fill_request_el(obj):\n    return (\n        is_fill(obj) and\n        is_request(obj)\n    )\n", "def is_fill_request_el(obj):\n    return isinstance(obj, dict) and obj.get('fill') is not None\n", "def is_fill_request_el(obj):\n    return isinstance(obj, (ExecutableMethod, SequenceMethod, SetMethod))\n", "def is_fill_request_el(obj):\n    return (isinstance(obj, dict) and\n            'fill' in obj and\n           'request' in obj)\n", "def is_fill_request_el(obj):\n    return isinstance(obj, dict) and 'fill' in obj and'request' in obj\n", "def is_fill_request_el(obj):\n    return (isinstance(obj, Element) and\n            obj.tag == qn('svg:fill') and\n            obj.attrib.get(qn('stroke')) == '#000000')\n", "def is_fill_request_el(obj):\n    return isinstance(obj, (Element, list)) and obj and obj[0] == 'fill'", "def is_fill_request_el(obj):\n    return is_fill_el(obj) and hasattr(obj, \"request\")"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_request_el(obj):\n    return isinstance(obj, (list, tuple)) and len(obj) == 2 and obj[0] == 'fill' \\\n        and isinstance(obj[1], (list, tuple)) and len(obj[1]) == 2 and obj[1][0] =='request'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return isinstance(obj, dict) and 'fill' in obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return (\n        is_fill(obj) and\n        is_request(obj)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return isinstance(obj, dict) and obj.get('fill') is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return isinstance(obj, (ExecutableMethod, SequenceMethod, SetMethod))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return (isinstance(obj, dict) and\n            'fill' in obj and\n           'request' in obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return isinstance(obj, dict) and 'fill' in obj and'request' in obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return (isinstance(obj, Element) and\n            obj.tag == qn('svg:fill') and\n            obj.attrib.get(qn('stroke')) == '#000000')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return isinstance(obj, (Element, list)) and obj and obj[0] == 'fill'", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return is_fill_el(obj) and hasattr(obj, \"request\")", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "ques_id": "62b87af99a0c4fa8b80b3524", "code": ["def is_run_el(obj):\n    return isinstance(obj, types.MethodType) and obj.__name__ == 'run'\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return isinstance(obj, types.FunctionType) and obj.__name__ == 'run'", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return isinstance(obj, (MethodType, FunctionType)) and obj.__name__ == 'run'", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_run_el(obj):\n    return isinstance(obj, types.MethodType) and obj.__name__ == 'run'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return isinstance(obj, types.FunctionType) and obj.__name__ == 'run'", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return isinstance(obj, (MethodType, FunctionType)) and obj.__name__ == 'run'", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "ques_id": "62b87af69a0c4fa8b80b351a", "code": ["def is_fill_compute_el(obj):\n    \n    \n    return isinstance(obj, FillElement) and obj.__name__ == 'compute'\n", "def is_fill_compute_el(obj):\n    return isinstance(obj, dict) and obj.get(\"type\") == \"fill\" and obj.get(\"method\") == \"compute\"\n", "def is_fill_compute_el(obj):\n    return ((isinstance(obj, type) and issubclass(obj, FillCompute) and\n             obj.fill is not None) or\n            (isinstance(obj, type) and issubclass(obj, Compute) and\n             obj.compute is not None))\n", "def is_fill_compute_el(obj):\n    return isinstance(obj, (Fill, Compute))\n", "def is_fill_compute_el(obj):\n    return isinstance(obj, FillComputeEl)\n", "def is_fill_compute_el(obj):\n    return (is_fill_el(obj) and is_compute_el(obj))", "def is_fill_compute_el(obj):\n    return is_fill_el(obj) and hasattr(obj, 'fill') and hasattr(obj, 'compute')", "def is_fill_compute_el(obj):\n    return (is_executable_method(obj, \"fill\")\n            or is_executable_method(obj, \"compute\"))\n", "def is_fill_compute_el(obj):\n    return (hasattr(obj, 'fill') and\n            hasattr(obj, 'compute'))\n", "def is_fill_compute_el(obj):\n    return isinstance(obj, (Block, Executable)) and obj.name == \"fill\" and obj.mode == \"compute\""], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_compute_el(obj):\n    \n    \n    return isinstance(obj, FillElement) and obj.__name__ == 'compute'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, dict) and obj.get(\"type\") == \"fill\" and obj.get(\"method\") == \"compute\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return ((isinstance(obj, type) and issubclass(obj, FillCompute) and\n             obj.fill is not None) or\n            (isinstance(obj, type) and issubclass(obj, Compute) and\n             obj.compute is not None))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, (Fill, Compute))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, FillComputeEl)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (is_fill_el(obj) and is_compute_el(obj))", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return is_fill_el(obj) and hasattr(obj, 'fill') and hasattr(obj, 'compute')", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (is_executable_method(obj, \"fill\")\n            or is_executable_method(obj, \"compute\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (hasattr(obj, 'fill') and\n            hasattr(obj, 'compute'))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, (Block, Executable)) and obj.name == \"fill\" and obj.mode == \"compute\"", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "ques_id": "62b87af19a0c4fa8b80b34f7", "code": ["def difference(d1, d2, level=-1):\n    d = deepcopy(d1)\n    if level < 0:\n        level = len(d)\n    for k, v in d2.items():\n        if k not in d:\n            d[k] = v\n        elif d[k]!= v:\n            d[k] = d[k] - v\n    return d\n", "def difference(d1, d2, level=-1):\n    return _difference(d1, d2, False, level)\n", "def difference(d1, d2, level=-1):\n    d2 = d2 if isinstance(d2, dict) else d2.copy()\n    return _difference(d1, d2, level)\n", "def difference(d1, d2, level=-1):\n    return dict(d1, **d2 if level < 0 else d1.copy())\n", "def difference(d1, d2, level=-1):\n    return __compare(d1, d2, operator.sub, level)\n", "def difference(d1, d2, level=-1):\n    d = copy(d1)\n    d.update(d2)\n    if not d1:\n        return d\n    if not d2:\n        return d\n    for key in d1:\n        if key not in d2:\n            d[key] = level\n    return d", "def difference(d1, d2, level=-1):\n    return dict(_difference(d1, d2, level))\n", "def difference(d1, d2, level=-1):\n    d2 = d2 if isinstance(d2, dict) else dict(d2)\n    return _difference(d1, d2, level)\n", "def difference(d1, d2, level=-1):\n    if level == 0:\n        return d1 if d2 is None else d2\n    else:\n        return _difference(d1, d2, level - 1)\n", "def difference(d1, d2, level=-1):\n    d = {}\n    if len(d1) > len(d2):\n        d = d1.copy()\n    else:\n        d = d2.copy()\n    for k, v in d1.items():\n        if k not in d2 or v is not d2[k]:\n            d[k] = v\n    return d\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def difference(d1, d2, level=-1):\n    d = deepcopy(d1)\n    if level < 0:\n        level = len(d)\n    for k, v in d2.items():\n        if k not in d:\n            d[k] = v\n        elif d[k]!= v:\n            d[k] = d[k] - v\n    return d\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    return _difference(d1, d2, False, level)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    d2 = d2 if isinstance(d2, dict) else d2.copy()\n    return _difference(d1, d2, level)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    return dict(d1, **d2 if level < 0 else d1.copy())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    return __compare(d1, d2, operator.sub, level)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    d = copy(d1)\n    d.update(d2)\n    if not d1:\n        return d\n    if not d2:\n        return d\n    for key in d1:\n        if key not in d2:\n            d[key] = level\n    return d", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    return dict(_difference(d1, d2, level))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    d2 = d2 if isinstance(d2, dict) else dict(d2)\n    return _difference(d1, d2, level)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if level == 0:\n        return d1 if d2 is None else d2\n    else:\n        return _difference(d1, d2, level - 1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    d = {}\n    if len(d1) > len(d2):\n        d = d1.copy()\n    else:\n        d = d2.copy()\n    for k, v in d1.items():\n        if k not in d2 or v is not d2[k]:\n            d[k] = v\n    return d\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "ques_id": "62b87af09a0c4fa8b80b34f1", "code": ["def fill(self, coord, weight=1):\n    if self.__validate_coord(coord):\n        self.__fill_histogram(coord, weight)\n", "def fill(self, coord, weight=1):\n    self.__fill__(coord, weight)\n", "def fill(self, coord, weight=1):\n    if coord < 0:\n        coord += self.bins\n    if coord >= self.bins:\n        return\n    self.filled_histograms[coord] = weight", "def fill(self, coord, weight=1):\n\n    self.fill_rect(coord, 0, self.hist.shape[0], weight)", "def fill(self, coord, weight=1):\n\n    if coord < 0 or coord >= self.size:\n        return\n\n    self.histogram[coord] = weight", "def fill(self, coord, weight=1):\n    self.histogram.fill(coord, weight)", "def fill(self, coord, weight=1):\nif weight > 0:\nself._fill_in(coord, weight)\nelse:\nself._fill_out(coord)", "def fill(self, coord, weight=1):\n    x, y = coord\n    if x < 0 or y < 0:\n        return\n    self._fill(x, y, weight)", "def fill(self, coord, weight=1):\nself._fill(coord, weight)", "def fill(self, coord, weight=1):\n    c = coord\n    if c[0] >= self.nbins[0] or c[1] >= self.nbins[1]:\n        return\n    if c[0] < 0:\n        c[0] += self.nbins[0]\n    if c[1] < 0:\n        c[1] += self.nbins[1]\n    self._fill(coord, weight)"], "level": "class_runnable", "generate_results": [{"generate_code": "def fill(self, coord, weight=1):\n    if self.__validate_coord(coord):\n        self.__fill_histogram(coord, weight)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    self.__fill__(coord, weight)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    if coord < 0:\n        coord += self.bins\n    if coord >= self.bins:\n        return\n    self.filled_histograms[coord] = weight", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n\n    self.fill_rect(coord, 0, self.hist.shape[0], weight)", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n\n    if coord < 0 or coord >= self.size:\n        return\n\n    self.histogram[coord] = weight", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    self.histogram.fill(coord, weight)", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\nif weight > 0:\nself._fill_in(coord, weight)\nelse:\nself._fill_out(coord)", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    x, y = coord\n    if x < 0 or y < 0:\n        return\n    self._fill(x, y, weight)", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\nself._fill(coord, weight)", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    c = coord\n    if c[0] >= self.nbins[0] or c[1] >= self.nbins[1]:\n        return\n    if c[0] < 0:\n        c[0] += self.nbins[0]\n    if c[1] < 0:\n        c[1] += self.nbins[1]\n    self._fill(coord, weight)", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "ques_id": "62b86aa3b4d922cb0e688d36", "code": ["def _validate_labels(labels):\n", "def _validate_labels(labels):\n", "def _validate_labels(labels):\n", "def _validate_labels(labels):\n", "def _validate_labels(labels):\npass", "def _validate_labels(labels):\n", "def _validate_labels(labels):\n", "def _validate_labels(labels):\n", "def _validate_labels(labels):\n", "def _validate_labels(labels):\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _validate_labels(labels):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "ques_id": "62b86a9eb4d922cb0e688d25", "code": ["def _get_resource_name_regex():\n    return re.compile(\n        r'^(?P<name>.+)/(?P<type>.+)$',\n        re.IGNORECASE)\n", "def _get_resource_name_regex():\n    return re.compile(r\"^(?P<resource_name>.+)$\")\n", "def _get_resource_name_regex():\n    return re.compile(r'^{}$'.format(Krake.NAME_PATTERN))\n", "def _get_resource_name_regex():\n    return re.compile(r\"^(?:/.*)?(?:(?P<resource_name>.*))$\")\n", "def _get_resource_name_regex():\n    # type: () -> re.Pattern\n    return _resource_name_regex\n", "def _get_resource_name_regex():\n    return _get_regex('resource_name')\n", "def _get_resource_name_regex():\n    return re.compile(r\"^[a-zA-Z0-9\\-]{1,32}-[a-zA-Z0-9\\-]{1,32}$\")\n", "def _get_resource_name_regex():\n    return re.compile(r'^(?P<resource_name>.+)$')\n", "def _get_resource_name_regex():\n    return re.compile(r\"^(?P<name>[a-zA-Z0-9_-]+)$\")\n", "def _get_resource_name_regex():\n    return re.compile(r'^((?:^|[^/])+/)?(?P<name>.*)$')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _get_resource_name_regex():\n    return re.compile(\n        r'^(?P<name>.+)/(?P<type>.+)$',\n        re.IGNORECASE)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r\"^(?P<resource_name>.+)$\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r'^{}$'.format(Krake.NAME_PATTERN))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r\"^(?:/.*)?(?:(?P<resource_name>.*))$\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    # type: () -> re.Pattern\n    return _resource_name_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return _get_regex('resource_name')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r\"^[a-zA-Z0-9\\-]{1,32}-[a-zA-Z0-9\\-]{1,32}$\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r'^(?P<resource_name>.+)$')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r\"^(?P<name>[a-zA-Z0-9_-]+)$\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r'^((?:^|[^/])+/)?(?P<name>.*)$')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf8", "code": ["def validate_value(value):\n    regex = re.compile(r'^[a-zA-Z0-9_.+-]*$')\n    if not regex.match(value):\n        raise ValidationError(\n            _('The value \"%(value)s\" is not a valid shortcut for the '\n             'regular expression \"%(regex)s\".'),\n            params={'value': value,'regex': REGEX_STRING},\n        )", "def validate_value(value):\n    if not re.match(REGEX, value):\n        raise ValidationError(_('Must be a valid IPv4 address'))\n", "def validate_value(value):\n    try:\n        re.compile(value)\n    except re.error as e:\n        raise ValidationError(str(e))\n", "def validate_value(value):\n    regex = _get_regex()\n    if not regex.match(value):\n        raise ValidationError(\n            'Value {} is not valid. Please check the regex {}.'.format(\n                value, regex.pattern))\n", "def validate_value(value):\n    regex = re.compile(r'^[0-9]+$')\n    if not regex.match(value):\n        raise ValidationError('Value is not a valid integer')\n", "def validate_value(value):\n    try:\n        re.compile(value)\n    except re.error as e:\n        raise ValidationError('Invalid value \"{}\"'.format(value)) from e\n", "def validate_value(value):\n    if not re.match(REGEX, value):\n        raise ValidationError('Invalid value \"{0}\"'.format(value))", "def validate_value(value):\n    if not re.match(REGEX, value):\n        raise ValidationError(\n            _('The value \"%s\" is not a valid %s.') % (value, _('regex'))\n        )\n", "def validate_value(value):\n    try:\n        re.compile(value)\n    except re.error:\n        raise ValidationError('Value is not a valid regular expression.')\n", "def validate_value(value):\n    try:\n        re.compile(value)\n    except re.error as e:\n        raise ValidationError(str(e))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_value(value):\n    regex = re.compile(r'^[a-zA-Z0-9_.+-]*$')\n    if not regex.match(value):\n        raise ValidationError(\n            _('The value \"%(value)s\" is not a valid shortcut for the '\n             'regular expression \"%(regex)s\".'),\n            params={'value': value,'regex': REGEX_STRING},\n        )", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    if not re.match(REGEX, value):\n        raise ValidationError(_('Must be a valid IPv4 address'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    try:\n        re.compile(value)\n    except re.error as e:\n        raise ValidationError(str(e))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    regex = _get_regex()\n    if not regex.match(value):\n        raise ValidationError(\n            'Value {} is not valid. Please check the regex {}.'.format(\n                value, regex.pattern))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    regex = re.compile(r'^[0-9]+$')\n    if not regex.match(value):\n        raise ValidationError('Value is not a valid integer')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    try:\n        re.compile(value)\n    except re.error as e:\n        raise ValidationError('Invalid value \"{}\"'.format(value)) from e\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    if not re.match(REGEX, value):\n        raise ValidationError('Invalid value \"{0}\"'.format(value))", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    if not re.match(REGEX, value):\n        raise ValidationError(\n            _('The value \"%s\" is not a valid %s.') % (value, _('regex'))\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    try:\n        re.compile(value)\n    except re.error:\n        raise ValidationError('Value is not a valid regular expression.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    try:\n        re.compile(value)\n    except re.error as e:\n        raise ValidationError(str(e))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf7", "code": ["def validate_key(key):\n    regex = re.compile(KEY_REGEX_PATTERN)\n    if not regex.match(key):\n        raise ValidationError('Invalid key: {}'.format(key))\n", "def validate_key(key):\n    if not isinstance(key, str):\n        raise ValidationError('Key must be a string')\n    if not re.match(REGEX, key):\n        raise ValidationError('Key does not match regex')\n", "def validate_key(key):\n    try:\n        re.compile(key)\n    except re.error:\n        raise ValidationError('invalid key')\n", "def validate_key(key):\n    if not _KEY_RE.match(key):\n        raise ValidationError('Key \"%s\" is not a valid key.' % key)", "def validate_key(key):\n    if key is None:\n        return\n    regex = _get_regex()\n    if not regex.match(key):\n        raise ValidationError(\n            \"'{}' is not a valid key. Keys must be \"\n            \"contained within the regex\".format(key)\n        )\n", "def validate_key(key):\n    if not re.match(REGEX, key):\n        raise ValidationError(\"Invalid key: '{}'\".format(key))\n", "def validate_key(key):\n    regex = _get_regex()\n    if not regex.match(key):\n        raise ValidationError('Invalid key: {}'.format(key))\n", "def validate_key(key):\n    if not re.match(REGEX, key):\n        raise ValidationError('Key \"%s\" is not valid.' % key)\n", "def validate_key(key):\n    if re.match(REGEX_KEY, key) is None:\n        raise ValidationError('invalid key')\n", "def validate_key(key):\n    if not RE_KEY.match(key):\n        raise ValidationError(\n            'Key \"{}\" is not a valid key for a user'.format(key))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_key(key):\n    regex = re.compile(KEY_REGEX_PATTERN)\n    if not regex.match(key):\n        raise ValidationError('Invalid key: {}'.format(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not isinstance(key, str):\n        raise ValidationError('Key must be a string')\n    if not re.match(REGEX, key):\n        raise ValidationError('Key does not match regex')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    try:\n        re.compile(key)\n    except re.error:\n        raise ValidationError('invalid key')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not _KEY_RE.match(key):\n        raise ValidationError('Key \"%s\" is not a valid key.' % key)", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if key is None:\n        return\n    regex = _get_regex()\n    if not regex.match(key):\n        raise ValidationError(\n            \"'{}' is not a valid key. Keys must be \"\n            \"contained within the regex\".format(key)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not re.match(REGEX, key):\n        raise ValidationError(\"Invalid key: '{}'\".format(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    regex = _get_regex()\n    if not regex.match(key):\n        raise ValidationError('Invalid key: {}'.format(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not re.match(REGEX, key):\n        raise ValidationError('Key \"%s\" is not valid.' % key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if re.match(REGEX_KEY, key) is None:\n        raise ValidationError('invalid key')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not RE_KEY.match(key):\n        raise ValidationError(\n            'Key \"{}\" is not a valid key for a user'.format(key))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "ques_id": "62b86a01b4d922cb0e688ccc", "code": ["def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    return generate_default_observer_schema(manifest_dict, first_level)\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    return _generate_default_observer_schema_dict(manifest_dict, first_level)\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    return generate_default_observer_schema(manifest_dict, first_level)\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    return generate_default_observer_schema_list(manifest_dict, first_level)\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    return generate_default_observer_schema_list(manifest_dict, first_level)\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    return generate_default_observer_schema(manifest_dict, first_level=first_level)\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    return generate_default_observer_schema_list(manifest_dict, first_level)\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    return generate_default_observer_schema_list(manifest_dict, first_level)", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    return generate_default_observer_schema_list(manifest_dict, first_level)\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    return generate_default_observer_schema_list(manifest_dict, first_level)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    return generate_default_observer_schema(manifest_dict, first_level)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    return _generate_default_observer_schema_dict(manifest_dict, first_level)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    return generate_default_observer_schema(manifest_dict, first_level)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    return generate_default_observer_schema_list(manifest_dict, first_level)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    return generate_default_observer_schema_list(manifest_dict, first_level)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    return generate_default_observer_schema(manifest_dict, first_level=first_level)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    return generate_default_observer_schema_list(manifest_dict, first_level)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    return generate_default_observer_schema_list(manifest_dict, first_level)", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    return generate_default_observer_schema_list(manifest_dict, first_level)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    return generate_default_observer_schema_list(manifest_dict, first_level)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869ebb4d922cb0e688cc6", "code": ["def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k in observer_schema:\n        if k not in last_applied_manifest:\n            last_applied_manifest[k] = response[k]\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field in response:\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest, field, response[field])\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for observer in observer_schema:\n        if observer not in last_applied_manifest:\n            last_applied_manifest.append(observer)\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest.append(field)\n    return response\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for observed_field in observer_schema:\n        if observed_field not in last_applied_manifest:\n            last_applied_manifest.append(observed_field)\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for last_applied_manifest_field in observer_schema:\n        if last_applied_manifest_field not in last_applied_manifest:\n            update_last_applied_manifest_from_resp(last_applied_manifest, response)\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in response:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = observer_schema[field]\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for manifest in response:\n        update_last_applied_manifest_from_resp(last_applied_manifest, manifest, observer_schema)"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k in observer_schema:\n        if k not in last_applied_manifest:\n            last_applied_manifest[k] = response[k]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field in response:\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest, field, response[field])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for observer in observer_schema:\n        if observer not in last_applied_manifest:\n            last_applied_manifest.append(observer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest.append(field)\n    return response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for observed_field in observer_schema:\n        if observed_field not in last_applied_manifest:\n            last_applied_manifest.append(observed_field)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for last_applied_manifest_field in observer_schema:\n        if last_applied_manifest_field not in last_applied_manifest:\n            update_last_applied_manifest_from_resp(last_applied_manifest, response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in response:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = observer_schema[field]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for manifest in response:\n        update_last_applied_manifest_from_resp(last_applied_manifest, manifest, observer_schema)", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869eab4d922cb0e688cc5", "code": ["def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k, v in response.items():\n        if k in observer_schema:\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest[k], observer_schema[k], v)\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k, v in response.items():\n        last_applied_manifest[k] = update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, v)\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for observed_field in observer_schema.keys():\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest[observed_field], response[observed_field])", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k, v in response.items():\n        if k not in last_applied_manifest:\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, v)\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for key, value in response.items():\n        if key not in last_applied_manifest:\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest, value)\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k, v in response.items():\n        if k not in observer_schema:\n            last_applied_manifest[k] = v", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest[field], response[field])\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for observed_field in observer_schema[\"fields\"]:\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest, observed_field, response)\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest[field], response[field])\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k, v in response.items():\n        last_applied_manifest[k] = update_last_applied_manifest_dict_from_resp(\n            last_applied_manifest, observer_schema, v\n    )\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k, v in response.items():\n        if k in observer_schema:\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest[k], observer_schema[k], v)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k, v in response.items():\n        last_applied_manifest[k] = update_last_applied_manifest_from_resp(last_applied_manifest, observer_schema, v)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for observed_field in observer_schema.keys():\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest[observed_field], response[observed_field])", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k, v in response.items():\n        if k not in last_applied_manifest:\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, v)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for key, value in response.items():\n        if key not in last_applied_manifest:\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest, value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k, v in response.items():\n        if k not in observer_schema:\n            last_applied_manifest[k] = v", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest[field], response[field])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for observed_field in observer_schema[\"fields\"]:\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest, observed_field, response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest[field], response[field])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k, v in response.items():\n        last_applied_manifest[k] = update_last_applied_manifest_dict_from_resp(\n            last_applied_manifest, observer_schema, v\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "ques_id": "62b869eab4d922cb0e688cbf", "code": ["def generate_default_observer_schema(app):\n    manifest = app.spec.manifest\n    for kubernetes_resource in manifest.spec.template.spec.resources:\n        if kubernetes_resource.custom_observer_schema:\n            manifest.spec.template.spec.resources.remove(kubernetes_resource)\n            manifest.spec.template.spec.resources.append(kubernetes_resource.custom_observer_schema)\n", "def generate_default_observer_schema(app):\n    generate_custom_observer_schema(app, KubernetesResourceSpec(\"observer\", \"observer.yaml\"))", "def generate_default_observer_schema(app):\n    for kubernetes_resource in app.spec.manifest.resources:\n        if kubernetes_resource.schema:\n            continue\n        try:\n            kubernetes_resource.generate_default_observer_schema()\n        except SchemaGenerationError:\n            pass\n", "def generate_default_observer_schema(app):\n    for resource_spec in app.spec.template.spec.resource_specs:\n        if resource_spec.kind == ResourceKind.custom:\n            resource_spec.resolve_default_value(app.spec)\n", "def generate_default_observer_schema(app):\n    for name in app.spec.manifest['observer']:\n        if name not in app.spec.custom:\n            yield name, app.spec.manifest['observer'][name]", "def generate_default_observer_schema(app):\n    manifest = app.get_manifest()\n    for resource in manifest.manifest.get('resources', []):\n        if resource.get('customObserverSchema'):\n            resource['customObserverSchema'] = _generate_custom_observer_schema(\n                resource['customObserverSchema'])\n", "def generate_default_observer_schema(app):\n    for resource in app.spec.manifest['resources']:\n        if 'observer' not in resource:\n            resource['observer'] = {}\n        generate_default_observer_schema_from_manifest(resource)\n", "def generate_default_observer_schema(app):\n    for manifest_dict in app.spec.manifest.get(\"observer\", []):\n        manifest_dict.setdefault(\"type\", \"object\")\n        manifest_dict.setdefault(\"properties\", {})\n", "def generate_default_observer_schema(app):\n    for resource in app.manifest.get(\"resources\", []):\n        if resource.get(\"custom_observer_schema\"):\n            resource.pop(\"custom_observer_schema\")\n\n        resource = app.api.generate_resource_schema(resource)\n        app.api.add_resource(resource, resource.get(\"path\"))\n", "def generate_default_observer_schema(app):\n    for manifest in app.manifest.values():\n        if manifest.custom_observer_schema is None:\n            manifest.custom_observer_schema = generate_custom_observer_schema(\n                manifest.api_version, manifest.api_name\n            )\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema(app):\n    manifest = app.spec.manifest\n    for kubernetes_resource in manifest.spec.template.spec.resources:\n        if kubernetes_resource.custom_observer_schema:\n            manifest.spec.template.spec.resources.remove(kubernetes_resource)\n            manifest.spec.template.spec.resources.append(kubernetes_resource.custom_observer_schema)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    generate_custom_observer_schema(app, KubernetesResourceSpec(\"observer\", \"observer.yaml\"))", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    for kubernetes_resource in app.spec.manifest.resources:\n        if kubernetes_resource.schema:\n            continue\n        try:\n            kubernetes_resource.generate_default_observer_schema()\n        except SchemaGenerationError:\n            pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    for resource_spec in app.spec.template.spec.resource_specs:\n        if resource_spec.kind == ResourceKind.custom:\n            resource_spec.resolve_default_value(app.spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    for name in app.spec.manifest['observer']:\n        if name not in app.spec.custom:\n            yield name, app.spec.manifest['observer'][name]", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest = app.get_manifest()\n    for resource in manifest.manifest.get('resources', []):\n        if resource.get('customObserverSchema'):\n            resource['customObserverSchema'] = _generate_custom_observer_schema(\n                resource['customObserverSchema'])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    for resource in app.spec.manifest['resources']:\n        if 'observer' not in resource:\n            resource['observer'] = {}\n        generate_default_observer_schema_from_manifest(resource)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    for manifest_dict in app.spec.manifest.get(\"observer\", []):\n        manifest_dict.setdefault(\"type\", \"object\")\n        manifest_dict.setdefault(\"properties\", {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    for resource in app.manifest.get(\"resources\", []):\n        if resource.get(\"custom_observer_schema\"):\n            resource.pop(\"custom_observer_schema\")\n\n        resource = app.api.generate_resource_schema(resource)\n        app.api.add_resource(resource, resource.get(\"path\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    for manifest in app.manifest.values():\n        if manifest.custom_observer_schema is None:\n            manifest.custom_observer_schema = generate_custom_observer_schema(\n                manifest.api_version, manifest.api_name\n            )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "ques_id": "62b43427903eeb48555d3ea5", "code": ["def format(\n\t\tself,\n\t\tsql: typing.Union[str, bytes],\nparams: typing.Mapping[str, int]\n) -> typing.Tuple[str, dict]:\npass", "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[str, int]\n) -> Tuple[bytes, Mapping[str, int]]:\npass", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Any]\n) -> Tuple[str, dict]:\npass", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\n*params: Mapping[str, int]\n) -> Tuple[str, Mapping[str, int]]:\npass", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Any, Any]\n) -> Tuple[str, Sequence]:\npass", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int]\n) -> Tuple[str, Mapping[str, int]]:\npass", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, Mapping[str, int]]:\npass", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int]\n) -> Tuple[str, Mapping[str, int]]:\npass", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = {}\n) -> Tuple[str, Mapping[str, int]]:\npass", "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, List[Any]]:\npass"], "level": "file_runnable", "generate_results": [{"generate_code": "def format(\n\t\tself,\n\t\tsql: typing.Union[str, bytes],\nparams: typing.Mapping[str, int]\n) -> typing.Tuple[str, dict]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[bytes, str],\nparams: Mapping[str, int]\n) -> Tuple[bytes, Mapping[str, int]]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Union[str, int], Any]\n) -> Tuple[str, dict]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\n*params: Mapping[str, int]\n) -> Tuple[str, Mapping[str, int]]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[Any, Any]\n) -> Tuple[str, Sequence]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int]\n) -> Tuple[str, Mapping[str, int]]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, Mapping[str, int]]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int]\n) -> Tuple[str, Mapping[str, int]]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = {}\n) -> Tuple[str, Mapping[str, int]]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, int] = None\n) -> Tuple[str, List[Any]]:\npass", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "ques_id": "62b43428903eeb48555d3eaa", "code": ["def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Iterable[Sequence[str]]\n) -> Tuple[str, List[dict]]:\npass", "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping,\n) -> tuple:\npass", "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping[str, int]\n) -> Tuple[str, List[dict]]:\npass", "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping[str, Any]\n) -> Tuple[str, list]:\npass", "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping,\n) -> Tuple[str, List[Mapping[str, Any]]]:\npass", "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, Any]\n) -> Tuple[str, List[Mapping[str, Any]]]:\npass", "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping[str, Any]\n) -> Tuple[str, List[dict]]:\npass", "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping[str, int]\n) -> tuple[str, list[dict]]:\npass", "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping[str, int]\n) -> Tuple[str, List[Mapping[str, int]]]:\npass", "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Iterable[Iterable[str]]\n) -> tuple:\npass"], "level": "project_runnable", "generate_results": [{"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Iterable[Sequence[str]]\n) -> Tuple[str, List[dict]]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping,\n) -> tuple:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping[str, int]\n) -> Tuple[str, List[dict]]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping[str, Any]\n) -> Tuple[str, list]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping,\n) -> Tuple[str, List[Mapping[str, Any]]]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: Union[str, bytes],\nparams: Mapping[str, Any]\n) -> Tuple[str, List[Mapping[str, Any]]]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping[str, Any]\n) -> Tuple[str, List[dict]]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping[str, int]\n) -> tuple[str, list[dict]]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Mapping[str, int]\n) -> Tuple[str, List[Mapping[str, int]]]:\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nparams: Iterable[Iterable[str]]\n) -> tuple:\npass", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "ques_id": "62b45df05108cfac7f2109ce", "code": ["def validate(self, path):\n    try:\n        self._fs.validate(path)\n        return True\n    except OSError as e:\n        if e.errno == errno.ENOENT:\n            return False\n        raise\n", "def validate(self, path):\n    return True", "def validate(self, path):\n    warnings.warn(\"validate is deprecated, use validate_all instead\", DeprecationWarning)\n    return validate_all(self, path)\n", "def validate(self, path):\n    return True", "def validate(self, path):\n    if self._fsroot is None:\n        self._fsroot = self._get_fsroot(path)\n    return self._fsroot.validate()\n", "def validate(self, path):\n    if not isinstance(path, str):\n        raise TypeError(\"path must be a string, not '%s'\" % type(path).__name__)\n\n    if not os.path.exists(path):\n        return True\n\n    return self._validate_filesystem(path)", "def validate(self, path):\n    return self._validate_root(path)", "def validate(self, path):\n    if not isinstance(path, str):\n        return False\n    if not self.fs_type:\n        return False\n    if path.startswith('.'):\n        return False\n    if not path.startswith(self.fs_path):\n        return False\n    if not self.fs_type.validate(path):\n        return False\n    return True\n", "def validate(self, path):\n    try:\n        self._validate(path)\n        return True\n    except OCFSFileException as e:\n        self.logger.warning(\"Could not validate %s: %s\" % (path, e))\n        return False\n", "def validate(self, path):\n    return self._validate(path) is not None"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, path):\n    try:\n        self._fs.validate(path)\n        return True\n    except OSError as e:\n        if e.errno == errno.ENOENT:\n            return False\n        raise\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    warnings.warn(\"validate is deprecated, use validate_all instead\", DeprecationWarning)\n    return validate_all(self, path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if self._fsroot is None:\n        self._fsroot = self._get_fsroot(path)\n    return self._fsroot.validate()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if not isinstance(path, str):\n        raise TypeError(\"path must be a string, not '%s'\" % type(path).__name__)\n\n    if not os.path.exists(path):\n        return True\n\n    return self._validate_filesystem(path)", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    return self._validate_root(path)", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if not isinstance(path, str):\n        return False\n    if not self.fs_type:\n        return False\n    if path.startswith('.'):\n        return False\n    if not path.startswith(self.fs_path):\n        return False\n    if not self.fs_type.validate(path):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    try:\n        self._validate(path)\n        return True\n    except OCFSFileException as e:\n        self.logger.warning(\"Could not validate %s: %s\" % (path, e))\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    return self._validate(path) is not None", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dc", "code": ["def status_str(self, prefix=''):\n    return''.join((prefix, self.status)) if prefix else self.status\n", "def status_str(self, prefix=''):\n    status = self.status\n    if status == 'valid':\n        return 'valid'\n    elif status == 'invalid':\n        return 'invalid'\n    elif status == 'no_valid':\n        return 'no_valid'\n    elif status == 'invalid_time':\n        return 'invalid_time'\n    else:\n        return '{} ({})'.format(status, prefix)\n", "def status_str(self, prefix=''):\n    if self.is_valid():\n        if prefix:\n            return prefix + self.status\n        else:\n            return self.status\n    else:\n        return \"invalid\"\n", "def status_str(self, prefix=''):\n    return (\"Validator {} ({})\".format(self.name, self.status)) + (\n        \" ({})\".format(self.validator_type) if self.validator_type else \"\")", "def status_str(self, prefix=''):\n    return '{}{}'.format(prefix, self.status)\n", "def status_str(self, prefix=''):\n    if self.status in VALIDATOR_STATUSES:\n        return \"{0}{1}\".format(prefix, self.status)\n    else:\n        return \"{0}{1}\".format('Invalid', self.status)\n", "def status_str(self, prefix=''):\n    return 'validator {}'.format(self.status) if prefix else self.status\n", "def status_str(self, prefix=''):\n    return '{0}{1}'.format(prefix, self.status)", "def status_str(self, prefix=''):\n    return''.join([\n        prefix + self.status_short,\n        self.status_long,\n    ])\n", "def status_str(self, prefix=''):\n    \n    \n    status = self.status\n    if status in ['aborted', 'running', 'pending', 'failed']:\n        return '%s[%s]' % (prefix, status)\n    elif status =='stopped':\n        return '%s - stopped' % prefix\n    else:\n        return '%s - unknown' % prefix\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n    return''.join((prefix, self.status)) if prefix else self.status\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    status = self.status\n    if status == 'valid':\n        return 'valid'\n    elif status == 'invalid':\n        return 'invalid'\n    elif status == 'no_valid':\n        return 'no_valid'\n    elif status == 'invalid_time':\n        return 'invalid_time'\n    else:\n        return '{} ({})'.format(status, prefix)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    if self.is_valid():\n        if prefix:\n            return prefix + self.status\n        else:\n            return self.status\n    else:\n        return \"invalid\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return (\"Validator {} ({})\".format(self.name, self.status)) + (\n        \" ({})\".format(self.validator_type) if self.validator_type else \"\")", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return '{}{}'.format(prefix, self.status)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    if self.status in VALIDATOR_STATUSES:\n        return \"{0}{1}\".format(prefix, self.status)\n    else:\n        return \"{0}{1}\".format('Invalid', self.status)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return 'validator {}'.format(self.status) if prefix else self.status\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return '{0}{1}'.format(prefix, self.status)", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return''.join([\n        prefix + self.status_short,\n        self.status_long,\n    ])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \n    \n    status = self.status\n    if status in ['aborted', 'running', 'pending', 'failed']:\n        return '%s[%s]' % (prefix, status)\n    elif status =='stopped':\n        return '%s - stopped' % prefix\n    else:\n        return '%s - unknown' % prefix\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dd", "code": ["def status_str(self, prefix=''):\n    \n    \n    if prefix:\n        return '[' + prefix + ']'+ self.status_str()\n    else:\n        return self.status_str()\n", "def status_str(self, prefix=''):\n    return \"{} {} {} {}\".format(self.id, self.name, self.status, prefix)\n", "def status_str(self, prefix=''):\n    if self.validation_failed():\n        return '%s %s: %s' % (prefix, self.name, self.message)\n    else:\n        return '%s %s: %s' % (prefix, self.name, self.message)\n", "def status_str(self, prefix=''):\n    return '\\n'.join(\n        [\n            '{}{}'.format(prefix, l)\n            for l in self.status_str_list()\n        ]\n    )\n", "def status_str(self, prefix=''):\n    s = ''\n    for k, v in self.status.items():\n        s += '%s%s: %s\\n' % (prefix, k, v)\n    return s\n", "def status_str(self, prefix=''):\n    return ''.join([prefix, 'Validation log: ', self.message])\n", "def status_str(self, prefix=''):\n    return '{} {} {}'.format(prefix, self.status, self.message)\n", "def status_str(self, prefix=''):\n    return '{}{}'.format(prefix, self.name)\n", "def status_str(self, prefix=''):\n    status_str = ''\n    for i, line in enumerate(self.validation_log):\n        if i > 0:\n            status_str += '\\n'\n        status_str += '%s%s' % (prefix, line)\n    return status_str\n", "def status_str(self, prefix=''):\n    return '%s%s' % (prefix,''.join(self.status_list()))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n    \n    \n    if prefix:\n        return '[' + prefix + ']'+ self.status_str()\n    else:\n        return self.status_str()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return \"{} {} {} {}\".format(self.id, self.name, self.status, prefix)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    if self.validation_failed():\n        return '%s %s: %s' % (prefix, self.name, self.message)\n    else:\n        return '%s %s: %s' % (prefix, self.name, self.message)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return '\\n'.join(\n        [\n            '{}{}'.format(prefix, l)\n            for l in self.status_str_list()\n        ]\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    for k, v in self.status.items():\n        s += '%s%s: %s\\n' % (prefix, k, v)\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return ''.join([prefix, 'Validation log: ', self.message])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return '{} {} {}'.format(prefix, self.status, self.message)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return '{}{}'.format(prefix, self.name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    status_str = ''\n    for i, line in enumerate(self.validation_log):\n        if i > 0:\n            status_str += '\\n'\n        status_str += '%s%s' % (prefix, line)\n    return status_str\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return '%s%s' % (prefix,''.join(self.status_list()))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "ques_id": "62b45e135108cfac7f2109f4", "code": ["def is_valid(self, identifier):\n\nreturn True", "def is_valid(self, identifier):\n    return True", "def is_valid(self, identifier):\nreturn True", "def is_valid(self, identifier):\n    return True", "def is_valid(self, identifier):\n    \n    \n    return True", "def is_valid(self, identifier):\n\nreturn True", "def is_valid(self, identifier):\nreturn True", "def is_valid(self, identifier):\nreturn True\n", "def is_valid(self, identifier):\nreturn True", "def is_valid(self, identifier):\nreturn True"], "level": "self_contained", "generate_results": [{"generate_code": "def is_valid(self, identifier):\n\nreturn True", "is_pass": false, "return_code": 1}, {"generate_code": "def is_valid(self, identifier):\n    return True", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\nreturn True", "is_pass": false, "return_code": 1}, {"generate_code": "def is_valid(self, identifier):\n    return True", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    \n    \n    return True", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n\nreturn True", "is_pass": false, "return_code": 1}, {"generate_code": "def is_valid(self, identifier):\nreturn True", "is_pass": false, "return_code": 1}, {"generate_code": "def is_valid(self, identifier):\nreturn True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_valid(self, identifier):\nreturn True", "is_pass": false, "return_code": 1}, {"generate_code": "def is_valid(self, identifier):\nreturn True", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "ques_id": "62b45e145108cfac7f210a07", "code": ["def validate(self, inventory, extract_spec_version=False):\n    raise NotImplementedError", "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        try:\n            inventory._spec_version\n        except AttributeError:\n            raise InventoryError(\"Inventory is not in a spec version attribute.\")\n        else:\n            inventory._spec_version = extract_spec_version\n    return inventory\n", "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        version = inventory.get_spec_version()\n        if not version:\n            raise Exception(\"No spec version found in inventory.\")\n        inventory.spec_version = version\n\n    if self.validator and not self.validator.validate(inventory):\n        raise Exception(\"Validation failed.\")\n\n    return inventory\n", "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        inventory = self._extract_specification_version(inventory)\n\n    self.validate_inventory(inventory)\n    self.validate_group_types(inventory)\n    self.validate_host_names(inventory)\n    self.validate_group_host_vars(inventory)\n    self.validate_group_vars(inventory)\n    self.validate_group_host_values(inventory)\n", "def validate(self, inventory, extract_spec_version=False):\n    self._validate(inventory, extract_spec_version=extract_spec_version)\n", "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        inventory.validate_version()\n\n    for host in inventory.hosts:\n        host.validate()\n", "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        inventory = self._extract_specification_version(inventory)\n    return self._validate(inventory)", "def validate(self, inventory, extract_spec_version=False):\n    self._validate_inventory(inventory, extract_spec_version)\n", "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        inventory = self._extract_spec_version(inventory)\n\n    return self.validate_inventory(inventory)\n", "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        type_value = inventory.get('type')\n        if type_value is None or type_value == '':\n            type_value = self.spec_version\n    else:\n        type_value = inventory.get('type')\n    validate_type(type_value, self.valid_types)\n    validate_value(inventory.get('value'), self.valid_values)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    raise NotImplementedError", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        try:\n            inventory._spec_version\n        except AttributeError:\n            raise InventoryError(\"Inventory is not in a spec version attribute.\")\n        else:\n            inventory._spec_version = extract_spec_version\n    return inventory\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        version = inventory.get_spec_version()\n        if not version:\n            raise Exception(\"No spec version found in inventory.\")\n        inventory.spec_version = version\n\n    if self.validator and not self.validator.validate(inventory):\n        raise Exception(\"Validation failed.\")\n\n    return inventory\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        inventory = self._extract_specification_version(inventory)\n\n    self.validate_inventory(inventory)\n    self.validate_group_types(inventory)\n    self.validate_host_names(inventory)\n    self.validate_group_host_vars(inventory)\n    self.validate_group_vars(inventory)\n    self.validate_group_host_values(inventory)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self._validate(inventory, extract_spec_version=extract_spec_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        inventory.validate_version()\n\n    for host in inventory.hosts:\n        host.validate()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        inventory = self._extract_specification_version(inventory)\n    return self._validate(inventory)", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self._validate_inventory(inventory, extract_spec_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        inventory = self._extract_spec_version(inventory)\n\n    return self.validate_inventory(inventory)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        type_value = inventory.get('type')\n        if type_value is None or type_value == '':\n            type_value = self.spec_version\n    else:\n        type_value = inventory.get('type')\n    validate_type(type_value, self.valid_types)\n    validate_value(inventory.get('value'), self.valid_values)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "ques_id": "62b45e145108cfac7f210a09", "code": ["def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if manifest_file.manifest_digest in digests_used:\n            self._warn_if_already_used(manifest_file)\n        else:\n            manifest_file.manifest_digest = digests_used.pop()\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    \n    for manifest_file in manifest_files:\n        for digest in digests_used:\n            if digest not in manifest_file:\n                self.assertTrue(False, '{} was missing from manifest.'.format(digest))\n                continue\n            self.assertTrue(True, '{} was found in manifest.'.format(digest))", "def check_digests_present_and_used(self, manifest_files, digests_used):\n\n    for digest in digests_used:\n        manifest = self.manifests[digest]\n        self.check_digest_present(manifest_files, digest, manifest)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    \n    return check_digests_present_and_used_in_manifest(\n        manifest_files, digests_used)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    \n    for digest in digests_used:\n        if digest not in manifest_files:\n            return False\n    return True\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    \n    for manifest_file in manifest_files:\n        manifest = self.load_manifest(manifest_file)\n        for digest in manifest.digests:\n            if digest.digest_id not in digests_used:\n                self.error(\"Digest %s not found in manifest\", digest.digest_id)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for fname in manifest_files:\n        if not self.check_digest_present(fname, digests_used):\n            return False\n    return True\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for file in manifest_files:\n        if not digests_used[file]:\n            logger.warning(\"Digest file %s is missing from manifest\" % file)\n            return False\n    return True\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        manifest = self._read_manifest_file(manifest_file)\n        for digest in manifest.digests:\n            if digest in digests_used:\n                return True\n    return False\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if not digests_used.has_key(manifest_file):\n            logging.error('No digest found for manifest file %s' % manifest_file)\n            return False\n        if digests_used[manifest_file] not in manifest_file:\n            logging.error('Digest %s not in manifest file %s' % (digests_used[manifest_file], manifest_file))\n            return False\n    return True"], "level": "class_runnable", "generate_results": [{"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if manifest_file.manifest_digest in digests_used:\n            self._warn_if_already_used(manifest_file)\n        else:\n            manifest_file.manifest_digest = digests_used.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    \n    for manifest_file in manifest_files:\n        for digest in digests_used:\n            if digest not in manifest_file:\n                self.assertTrue(False, '{} was missing from manifest.'.format(digest))\n                continue\n            self.assertTrue(True, '{} was found in manifest.'.format(digest))", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n\n    for digest in digests_used:\n        manifest = self.manifests[digest]\n        self.check_digest_present(manifest_files, digest, manifest)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    \n    return check_digests_present_and_used_in_manifest(\n        manifest_files, digests_used)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    \n    for digest in digests_used:\n        if digest not in manifest_files:\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    \n    for manifest_file in manifest_files:\n        manifest = self.load_manifest(manifest_file)\n        for digest in manifest.digests:\n            if digest.digest_id not in digests_used:\n                self.error(\"Digest %s not found in manifest\", digest.digest_id)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for fname in manifest_files:\n        if not self.check_digest_present(fname, digests_used):\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for file in manifest_files:\n        if not digests_used[file]:\n            logger.warning(\"Digest file %s is missing from manifest\" % file)\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        manifest = self._read_manifest_file(manifest_file)\n        for digest in manifest.digests:\n            if digest in digests_used:\n                return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if not digests_used.has_key(manifest_file):\n            logging.error('No digest found for manifest file %s' % manifest_file)\n            return False\n        if digests_used[manifest_file] not in manifest_file:\n            logging.error('Digest %s not in manifest file %s' % (digests_used[manifest_file], manifest_file))\n            return False\n    return True", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "ques_id": "62b45e165108cfac7f210a16", "code": ["def validate_as_prior_version(self, prior):\n    if not isinstance(prior, InventoryValidator):\n        raise ValueError('prior must be an InventoryValidator object')\n", "def validate_as_prior_version(self, prior):\n    if not isinstance(prior, InventoryValidator):\n        raise ValueError('prior must be an instance of InventoryValidator')\n    return prior\n", "def validate_as_prior_version(self, prior):\n    if not isinstance(prior, InventoryValidator):\n        raise ValueError('prior is not a valid InventoryValidator object.')\n    if prior.version > self.version:\n        raise ValueError('The input prior version ({0}) is greater than the current version ({1})'.format(prior.version, self.version))", "def validate_as_prior_version(self, prior):\n    return prior.is_valid_version(self)", "def validate_as_prior_version(self, prior):\n    if not isinstance(prior, InventoryValidator):\n        raise TypeError('The input of the prior must be an instance of '\n                        'the InventoryValidator class.')\n    if not prior.is_valid():\n        raise ValueError('The input of the prior must be valid.')", "def validate_as_prior_version(self, prior):\n    if not isinstance(prior, InventoryValidator):\n        raise InventoryValidationError('Invalid inventory prior type.')\n\n    return prior.validate(self)\n", "def validate_as_prior_version(self, prior):\n    if not isinstance(prior, InventoryValidator):\n        raise TypeError('Expected inventory validator object.')\n\n    if prior.name not in self.inventory_priors:\n        raise ValueError('Inventory %s is not a valid prior for %s'\n                         % (prior.name, self.name))\n", "def validate_as_prior_version(self, prior):\n    if not isinstance(prior, InventoryValidator):\n        raise ValueError(\"The given inventory object is not a valid prior version of the current inventory object.\")\n    return prior\n", "def validate_as_prior_version(self, prior):\n    if not isinstance(prior, InventoryValidator):\n        raise TypeError('Expected valid InventoryValidator object. Got {}'\n                       .format(prior))\n    if prior.version!= self.version:\n        raise ValueError('Expected inventory to have version {}, but got {}'\n                        .format(self.version, prior.version))", "def validate_as_prior_version(self, prior):\n    assert isinstance(prior, InventoryValidator)\n\n    if prior is not None and not prior.is_valid():\n        raise ValueError('Invalid prior version {} for {}'.format(prior, self))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_as_prior_version(self, prior):\n    if not isinstance(prior, InventoryValidator):\n        raise ValueError('prior must be an InventoryValidator object')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if not isinstance(prior, InventoryValidator):\n        raise ValueError('prior must be an instance of InventoryValidator')\n    return prior\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if not isinstance(prior, InventoryValidator):\n        raise ValueError('prior is not a valid InventoryValidator object.')\n    if prior.version > self.version:\n        raise ValueError('The input prior version ({0}) is greater than the current version ({1})'.format(prior.version, self.version))", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    return prior.is_valid_version(self)", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if not isinstance(prior, InventoryValidator):\n        raise TypeError('The input of the prior must be an instance of '\n                        'the InventoryValidator class.')\n    if not prior.is_valid():\n        raise ValueError('The input of the prior must be valid.')", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if not isinstance(prior, InventoryValidator):\n        raise InventoryValidationError('Invalid inventory prior type.')\n\n    return prior.validate(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if not isinstance(prior, InventoryValidator):\n        raise TypeError('Expected inventory validator object.')\n\n    if prior.name not in self.inventory_priors:\n        raise ValueError('Inventory %s is not a valid prior for %s'\n                         % (prior.name, self.name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if not isinstance(prior, InventoryValidator):\n        raise ValueError(\"The given inventory object is not a valid prior version of the current inventory object.\")\n    return prior\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if not isinstance(prior, InventoryValidator):\n        raise TypeError('Expected valid InventoryValidator object. Got {}'\n                       .format(prior))\n    if prior.version!= self.version:\n        raise ValueError('Expected inventory to have version {}, but got {}'\n                        .format(self.version, prior.version))", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    assert isinstance(prior, InventoryValidator)\n\n    if prior is not None and not prior.is_valid():\n        raise ValueError('Invalid prior version {} for {}'.format(prior, self))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "ques_id": "62b45e165108cfac7f210a17", "code": ["def get_logical_path_map(inventory, version):\n    return {\n        path_in_state(inventory, content_file): content_files\n        for content_files in get_content_files_in_state(inventory, version)\n    }\n", "def get_logical_path_map(inventory, version):\n    return get_state_map(inventory, version, 'logical_path')", "def get_logical_path_map(inventory, version):\n    return {\n        path\n        for path in inventory.get_inventory_paths(version)\n        if path not in inventory.get_logical_paths(version)\n    }\n", "def get_logical_path_map(inventory, version):\n    return _get_path_map(inventory, version, None)\n", "def get_logical_path_map(inventory, version):\n    return _get_path_map(inventory, version, lambda x: x['logical_path'])\n", "def get_logical_path_map(inventory, version):\n    return {\n        p: set(\n            content_files\n            for content_files in inventory[p]\n            if content_files.version == version\n        )\n    }\n", "def get_logical_path_map(inventory, version):\n    return dict((os.path.join(state, filename), set(content_files))\n                for state, content_files in inventory.items()\n                if os.path.join(state, filename) in inventory)\n", "def get_logical_path_map(inventory, version):\n    return {\n        path\n        for path in inventory.get_logical_paths(version)\n        if path not in inventory.get_duplicate_paths(version)\n    }\n", "def get_logical_path_map(inventory, version):\n    return _get_map(inventory, version, 'logical_path')\n", "def get_logical_path_map(inventory, version):\n    return _get_path_map(inventory, version, 'logical_path')\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        path_in_state(inventory, content_file): content_files\n        for content_files in get_content_files_in_state(inventory, version)\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return get_state_map(inventory, version, 'logical_path')", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        path\n        for path in inventory.get_inventory_paths(version)\n        if path not in inventory.get_logical_paths(version)\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return _get_path_map(inventory, version, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return _get_path_map(inventory, version, lambda x: x['logical_path'])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        p: set(\n            content_files\n            for content_files in inventory[p]\n            if content_files.version == version\n        )\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return dict((os.path.join(state, filename), set(content_files))\n                for state, content_files in inventory.items()\n                if os.path.join(state, filename) in inventory)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        path\n        for path in inventory.get_logical_paths(version)\n        if path not in inventory.get_duplicate_paths(version)\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return _get_map(inventory, version, 'logical_path')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return _get_path_map(inventory, version, 'logical_path')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "ques_id": "62b45e175108cfac7f210a19", "code": ["def validate_fixity(self, fixity, manifest_files):\n    self.validate_fixity_inventory(fixity, manifest_files)\n    self.validate_fixity_files(fixity, manifest_files)\n", "def validate_fixity(self, fixity, manifest_files):\n    return True", "def validate_fixity(self, fixity, manifest_files):\n    for f in manifest_files:\n        if f in fixity.files:\n            raise Exception(\"Fixity block '%s' is not referenced in manifest files '%s'\" %\n                            (f, manifest_files))", "def validate_fixity(self, fixity, manifest_files):\n    for file in fixity:\n        self.assertIn(file, manifest_files)", "def validate_fixity(self, fixity, manifest_files):\n    if fixity['source'] not in manifest_files:\n        raise Exception(\"Fixity block not listed in manifest files.\")", "def validate_fixity(self, fixity, manifest_files):\n    for file_name, file_content in fixity.items():\n        if file_name not in manifest_files:\n            raise ValueError('Fixity block {} is missing file {}'.format(\n                fixity, file_name))", "def validate_fixity(self, fixity, manifest_files):\n\n    if 'files' in fixity:\n        files = fixity['files']\n        for f in files:\n            if f not in manifest_files:\n                raise ValueError('Fixity block {} is not in manifest.'.format(f))\n", "def validate_fixity(self, fixity, manifest_files):\n    if fixity.files is None:\n        fixity.files = []\n    for file in fixity.files:\n        if file in manifest_files:\n            continue\n        raise FixityError('Fixity block file does not exist:'+ file)\n", "def validate_fixity(self, fixity, manifest_files):\n    return self.validate_fixity_inventory(fixity, manifest_files)\n", "def validate_fixity(self, fixity, manifest_files):\n\nif not self.check_fixity_block(fixity):\nreturn False\n\nif self.check_fixity_block(fixity) and not self.check_fixity_block(manifest_files):\nreturn False\n\nreturn True"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.validate_fixity_inventory(fixity, manifest_files)\n    self.validate_fixity_files(fixity, manifest_files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    for f in manifest_files:\n        if f in fixity.files:\n            raise Exception(\"Fixity block '%s' is not referenced in manifest files '%s'\" %\n                            (f, manifest_files))", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    for file in fixity:\n        self.assertIn(file, manifest_files)", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    if fixity['source'] not in manifest_files:\n        raise Exception(\"Fixity block not listed in manifest files.\")", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    for file_name, file_content in fixity.items():\n        if file_name not in manifest_files:\n            raise ValueError('Fixity block {} is missing file {}'.format(\n                fixity, file_name))", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n\n    if 'files' in fixity:\n        files = fixity['files']\n        for f in files:\n            if f not in manifest_files:\n                raise ValueError('Fixity block {} is not in manifest.'.format(f))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    if fixity.files is None:\n        fixity.files = []\n    for file in fixity.files:\n        if file in manifest_files:\n            continue\n        raise FixityError('Fixity block file does not exist:'+ file)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    return self.validate_fixity_inventory(fixity, manifest_files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n\nif not self.check_fixity_block(fixity):\nreturn False\n\nif self.check_fixity_block(fixity) and not self.check_fixity_block(manifest_files):\nreturn False\n\nreturn True", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "ques_id": "62b463153879012d19481498", "code": ["def files_list(path):\n    \n    \n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "def files_list(path):\n    return sorted([os.path.join(path, f) for f in os.listdir(path)])\n", "def files_list(path):\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]", "def files_list(path):\n    for filename in os.listdir(path):\n        if filename.endswith('.py'):\n            yield filename\n", "def files_list(path):\n    if not os.path.isdir(path):\n        return []\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "def files_list(path):\n    return sorted([os.path.join(path, f) for f in os.listdir(path)])\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list(path):\n    \n    \n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return sorted([os.path.join(path, f) for f in os.listdir(path)])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    for filename in os.listdir(path):\n        if filename.endswith('.py'):\n            yield filename\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    if not os.path.isdir(path):\n        return []\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return sorted([os.path.join(path, f) for f in os.listdir(path)])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "ques_id": "62b463153879012d1948149a", "code": ["def _group_files_by_xml_filename(source, xmls, files):\n    for xml_filename in xmls:\n        yield _group_files_by_xml_filename_in_folder(source, xml_filename, files)\n", "def _group_files_by_xml_filename(source, xmls, files):\n    xml_filenames = [xml_filename for xml_filename in xmls if xml_filename in files]\n    return {xml_filename: source.get_package(xml_filename) for xml_filename in xml_filenames}\n", "def _group_files_by_xml_filename(source, xmls, files):\n    xml_filenames = [xml for xml in xmls if xml.endswith('.xml')]\n    return _group_files_by_xml_filename_helper(source, xml_filenames, files)\n", "def _group_files_by_xml_filename(source, xmls, files):\n    results = {}\n    for xml in xmls:\n        results.setdefault(xml.basename, []).append(xml)\n    for file in files:\n        results.setdefault(file.basename, []).append(file)\n    return results\n", "def _group_files_by_xml_filename(source, xmls, files):\n    for xml in xmls:\n        for f in files:\n            if f.endswith(xml):\n                source[f] = source.get(f, 0) + 1\n    return source\n", "def _group_files_by_xml_filename(source, xmls, files):\n    xml_dict = {}\n    for filename in files:\n        xml = _extract_xml_from_file(source, filename)\n        if xml:\n            xml_dict[filename] = xml\n    return xml_dict\n", "def _group_files_by_xml_filename(source, xmls, files):\n\n    groups = {}\n    for xml_filename in xmls:\n        group_filename = xml_filename.split('.')[0]\n        groups[group_filename] = source[group_filename]\n    return groups\n", "def _group_files_by_xml_filename(source, xmls, files):\n    # type: (str, list, list) -> dict\n    result = {}\n    for xml_file in xmls:\n        result[xml_file] = _group_files_by_xml_filename_by_basename(source, files, xml_file)\n    return result\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml_file in xmls:\n        xml_basename = os.path.splitext(os.path.basename(xml_file))[0]\n        data[xml_basename] = _group_files_by_xml_filename_in_zip(source, xml_file, files)\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    xml_filenames = [os.path.basename(xml_file) for xml_file in xmls]\n    d = {}\n    for file in files:\n        xml_name = os.path.basename(file)\n        if xml_name in xml_filenames:\n            d[file] = source.packages[file]\n    return d\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    for xml_filename in xmls:\n        yield _group_files_by_xml_filename_in_folder(source, xml_filename, files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    xml_filenames = [xml_filename for xml_filename in xmls if xml_filename in files]\n    return {xml_filename: source.get_package(xml_filename) for xml_filename in xml_filenames}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    xml_filenames = [xml for xml in xmls if xml.endswith('.xml')]\n    return _group_files_by_xml_filename_helper(source, xml_filenames, files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    results = {}\n    for xml in xmls:\n        results.setdefault(xml.basename, []).append(xml)\n    for file in files:\n        results.setdefault(file.basename, []).append(file)\n    return results\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    for xml in xmls:\n        for f in files:\n            if f.endswith(xml):\n                source[f] = source.get(f, 0) + 1\n    return source\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    xml_dict = {}\n    for filename in files:\n        xml = _extract_xml_from_file(source, filename)\n        if xml:\n            xml_dict[filename] = xml\n    return xml_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n\n    groups = {}\n    for xml_filename in xmls:\n        group_filename = xml_filename.split('.')[0]\n        groups[group_filename] = source[group_filename]\n    return groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    # type: (str, list, list) -> dict\n    result = {}\n    for xml_file in xmls:\n        result[xml_file] = _group_files_by_xml_filename_by_basename(source, files, xml_file)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml_file in xmls:\n        xml_basename = os.path.splitext(os.path.basename(xml_file))[0]\n        data[xml_basename] = _group_files_by_xml_filename_in_zip(source, xml_file, files)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    xml_filenames = [os.path.basename(xml_file) for xml_file in xmls]\n    d = {}\n    for file in files:\n        xml_name = os.path.basename(file)\n        if xml_name in xml_filenames:\n            d[file] = source.packages[file]\n    return d\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "ques_id": "62b463153879012d1948149b", "code": ["def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    filename, ext = os.path.splitext(file_path)\n    return filename.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)", "def match_file_by_prefix(prefix, file_path):\n    if not os.path.isfile(file_path):\n        return False\n\n    if file_path.startswith(prefix):\n        return True\n\n    return False\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return match_file_by_extension(file_path, prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    filename, ext = os.path.splitext(file_path)\n    return filename.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    if not os.path.isfile(file_path):\n        return False\n\n    if file_path.startswith(prefix):\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return match_file_by_extension(file_path, prefix)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "ques_id": "62b463153879012d1948149c", "code": ["def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [os.path.join(prefix, file) for file in files]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    files_by_prefix = []\n    for f in files:\n        if f.startswith(prefix):\n            files_by_prefix.append(f)\n\n    return files_by_prefix\n", "def select_filenames_by_prefix(prefix, files):\n    filenames = []\n    for filename in files:\n        if prefix in filename:\n            filenames.append(filename)\n    return filenames\n", "def select_filenames_by_prefix(prefix, files):\n    return [os.path.basename(path) for path in files if path.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [os.path.join(prefix, file) for file in files]", "def select_filenames_by_prefix(prefix, files):\n    file_paths = []\n    for f in files:\n        if f.startswith(prefix):\n            file_paths.append(f)\n    return file_paths\n", "def select_filenames_by_prefix(prefix, files):\n    return [os.path.basename(f) for f in files if f.startswith(prefix)]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [os.path.join(prefix, file) for file in files]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    files_by_prefix = []\n    for f in files:\n        if f.startswith(prefix):\n            files_by_prefix.append(f)\n\n    return files_by_prefix\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    filenames = []\n    for filename in files:\n        if prefix in filename:\n            filenames.append(filename)\n    return filenames\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [os.path.basename(path) for path in files if path.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [os.path.join(prefix, file) for file in files]", "is_pass": false, "return_code": 1}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    file_paths = []\n    for f in files:\n        if f.startswith(prefix):\n            file_paths.append(f)\n    return file_paths\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [os.path.basename(f) for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149d", "code": ["def _explore_folder(folder):\n    xml_data = {}\n    for filename in os.listdir(folder):\n        if filename.endswith(\".xml\"):\n            basename = os.path.basename(filename)\n            xml_data[basename] = _explore_file(os.path.join(folder, filename))\n\n    return xml_data", "def _explore_folder(folder):\n    pkg_xml = {}\n    for filename in os.listdir(folder):\n        full_path = os.path.join(folder, filename)\n        if os.path.isdir(full_path):\n            pkg_xml[filename] = _explore_folder(full_path)\n        elif filename.endswith(\".xml\"):\n            pkg_xml[filename] = parse_xml(full_path)\n    return pkg_xml\n", "def _explore_folder(folder):\n    xml = _explore_folder_xml(folder)\n    return {\n        filename: _explore_folder_xml(os.path.join(folder, filename))\n        for filename in os.listdir(folder)\n        if filename.endswith('.xml') and filename!= '__init__.py'\n    }\n", "def _explore_folder(folder):\n\n    data = {}\n\n    for f in os.listdir(folder):\n        if not f.startswith('.'):\n            if f.endswith('.xml'):\n                f_name = os.path.splitext(f)[0]\n                data[f_name] = _explore_file(os.path.join(folder, f))\n\n    return data\n", "def _explore_folder(folder):\n    groups = {}\n    for filename in os.listdir(folder):\n        if os.path.isdir(os.path.join(folder, filename)):\n            groups[filename] = _explore_folder(os.path.join(folder, filename))\n        elif os.path.splitext(filename)[1] in ['.xml', '.xml.gz']:\n            groups[filename] = _explore_file(os.path.join(folder, filename))\n    return groups\n", "def _explore_folder(folder):\n    data = {}\n    for file in os.listdir(folder):\n        basename = os.path.splitext(file)[0]\n        if file.endswith('.xml'):\n            data[basename] = _explore_file(os.path.join(folder, file))\n    return data\n", "def _explore_folder(folder):\n    files = []\n    for file in os.listdir(folder):\n        if not file.startswith('_'):\n            files.append((file.replace('.xml', ''), os.path.join(folder, file)))\n    return dict(files)\n", "def _explore_folder(folder):\n    packages = {}\n    for xml_file in os.listdir(folder):\n        if xml_file.endswith(\".xml\"):\n            data = _explore_file(folder, xml_file)\n            if data:\n                packages[xml_file] = data\n    return packages\n", "def _explore_folder(folder):\n    # Get package data from folder\n    packages = {}\n    for filename in os.listdir(folder):\n        file_path = os.path.join(folder, filename)\n        package_data = _explore_file(file_path)\n        if package_data:\n            packages[filename] = package_data\n    return packages\n", "def _explore_folder(folder):\n    groups = _explore_folder_groups(folder)\n    data = {}\n    for group, group_data in groups.items():\n        for filename, data in group_data.items():\n            data[filename] = _explore_file(folder, filename)\n    return data\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_folder(folder):\n    xml_data = {}\n    for filename in os.listdir(folder):\n        if filename.endswith(\".xml\"):\n            basename = os.path.basename(filename)\n            xml_data[basename] = _explore_file(os.path.join(folder, filename))\n\n    return xml_data", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    pkg_xml = {}\n    for filename in os.listdir(folder):\n        full_path = os.path.join(folder, filename)\n        if os.path.isdir(full_path):\n            pkg_xml[filename] = _explore_folder(full_path)\n        elif filename.endswith(\".xml\"):\n            pkg_xml[filename] = parse_xml(full_path)\n    return pkg_xml\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    xml = _explore_folder_xml(folder)\n    return {\n        filename: _explore_folder_xml(os.path.join(folder, filename))\n        for filename in os.listdir(folder)\n        if filename.endswith('.xml') and filename!= '__init__.py'\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n\n    data = {}\n\n    for f in os.listdir(folder):\n        if not f.startswith('.'):\n            if f.endswith('.xml'):\n                f_name = os.path.splitext(f)[0]\n                data[f_name] = _explore_file(os.path.join(folder, f))\n\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    groups = {}\n    for filename in os.listdir(folder):\n        if os.path.isdir(os.path.join(folder, filename)):\n            groups[filename] = _explore_folder(os.path.join(folder, filename))\n        elif os.path.splitext(filename)[1] in ['.xml', '.xml.gz']:\n            groups[filename] = _explore_file(os.path.join(folder, filename))\n    return groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    data = {}\n    for file in os.listdir(folder):\n        basename = os.path.splitext(file)[0]\n        if file.endswith('.xml'):\n            data[basename] = _explore_file(os.path.join(folder, file))\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    files = []\n    for file in os.listdir(folder):\n        if not file.startswith('_'):\n            files.append((file.replace('.xml', ''), os.path.join(folder, file)))\n    return dict(files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    packages = {}\n    for xml_file in os.listdir(folder):\n        if xml_file.endswith(\".xml\"):\n            data = _explore_file(folder, xml_file)\n            if data:\n                packages[xml_file] = data\n    return packages\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    # Get package data from folder\n    packages = {}\n    for filename in os.listdir(folder):\n        file_path = os.path.join(folder, filename)\n        package_data = _explore_file(file_path)\n        if package_data:\n            packages[filename] = package_data\n    return packages\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    groups = _explore_folder_groups(folder)\n    data = {}\n    for group, group_data in groups.items():\n        for filename, data in group_data.items():\n            data[filename] = _explore_file(folder, filename)\n    return data\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149f", "code": ["def _eval_file(prefix, file_path):\n    # Assert filename is valid\n    _assert_valid_filename(file_path)\n\n    # Assert filename ends with.zip\n    _assert_zip_filename(file_path)\n\n    # Assert filename ends with.json\n    _assert_json_filename(file_path)\n\n    # Assert filename ends with.png\n    _assert_png_filename(file_path)\n\n    return {\n        \"packages\": [prefix + file_path]\n    }\n", "def _eval_file(prefix, file_path):\n\n    file_name = os.path.basename(file_path)\n    file_extension = os.path.splitext(file_name)[1]\n    if file_extension in ['.gz', '.gz.gz']:\n        return _eval_gzip_file(prefix, file_path)\n    else:\n        return _eval_asset_file(prefix, file_path)\n", "def _eval_file(prefix, file_path):\n    if 'asset' in file_path or'rendition' in file_path:\n        return {'packages': 'asset'}\n    elif '.' in file_path:\n        return {'packages': 'file'}\n    else:\n        return {'packages': 'none'}\n", "def _eval_file(prefix, file_path):\n\n    package = _get_package_from_file(file_path)\n    if package:\n        return {'package': package, 'file': file_path, 'file_folder': file_path.split('/')[-1]}\n\n    return {'file': file_path, 'file_folder': ''}\n", "def _eval_file(prefix, file_path):\n    file_name = os.path.basename(file_path)\n    file_name, ext = os.path.splitext(file_name)\n    if ext == '.json':\n        return _eval_file_json(prefix, file_path)\n    elif ext == '.txt':\n        return _eval_file_txt(prefix, file_path)\n", "def _eval_file(prefix, file_path):\n    _, ext = os.path.splitext(file_path)\n    if ext == '.py':\n        return _eval_file_py(prefix, file_path)\n    elif ext == '.pyc':\n        return _eval_file_pyc(prefix, file_path)\n    else:\n        return _eval_file_asset(prefix, file_path)\n", "def _eval_file(prefix, file_path):\n    return eval_file(file_path, prefix)\n", "def _eval_file(prefix, file_path):\n\n    if file_path.endswith('.asset'):\n        return _eval_asset(prefix, file_path)\n    elif file_path.endswith('.rendition'):\n        return _eval_rendition(prefix, file_path)\n    else:\n        raise ValueError('Invalid file path type: {}'.format(file_path))", "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    filename = os.path.splitext(filename)[0]\n    filename = os.path.split(filename)[1]\n    filename = filename.replace('.xml', '')\n    return {\n        'type': 'file',\n        'packages': [filename]\n    }\n", "def _eval_file(prefix, file_path):\n    if file_path.endswith('.xml'):\n        return _eval_file_xml(prefix, file_path)\n    elif file_path.endswith('.zip'):\n        return _eval_file_zip(prefix, file_path)\n    elif file_path.endswith('.json'):\n        return _eval_file_json(prefix, file_path)\n    else:\n        return None\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _eval_file(prefix, file_path):\n    # Assert filename is valid\n    _assert_valid_filename(file_path)\n\n    # Assert filename ends with.zip\n    _assert_zip_filename(file_path)\n\n    # Assert filename ends with.json\n    _assert_json_filename(file_path)\n\n    # Assert filename ends with.png\n    _assert_png_filename(file_path)\n\n    return {\n        \"packages\": [prefix + file_path]\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n\n    file_name = os.path.basename(file_path)\n    file_extension = os.path.splitext(file_name)[1]\n    if file_extension in ['.gz', '.gz.gz']:\n        return _eval_gzip_file(prefix, file_path)\n    else:\n        return _eval_asset_file(prefix, file_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    if 'asset' in file_path or'rendition' in file_path:\n        return {'packages': 'asset'}\n    elif '.' in file_path:\n        return {'packages': 'file'}\n    else:\n        return {'packages': 'none'}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n\n    package = _get_package_from_file(file_path)\n    if package:\n        return {'package': package, 'file': file_path, 'file_folder': file_path.split('/')[-1]}\n\n    return {'file': file_path, 'file_folder': ''}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    file_name = os.path.basename(file_path)\n    file_name, ext = os.path.splitext(file_name)\n    if ext == '.json':\n        return _eval_file_json(prefix, file_path)\n    elif ext == '.txt':\n        return _eval_file_txt(prefix, file_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    _, ext = os.path.splitext(file_path)\n    if ext == '.py':\n        return _eval_file_py(prefix, file_path)\n    elif ext == '.pyc':\n        return _eval_file_pyc(prefix, file_path)\n    else:\n        return _eval_file_asset(prefix, file_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    return eval_file(file_path, prefix)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n\n    if file_path.endswith('.asset'):\n        return _eval_asset(prefix, file_path)\n    elif file_path.endswith('.rendition'):\n        return _eval_rendition(prefix, file_path)\n    else:\n        raise ValueError('Invalid file path type: {}'.format(file_path))", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    filename = os.path.splitext(filename)[0]\n    filename = os.path.split(filename)[1]\n    filename = filename.replace('.xml', '')\n    return {\n        'type': 'file',\n        'packages': [filename]\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    if file_path.endswith('.xml'):\n        return _eval_file_xml(prefix, file_path)\n    elif file_path.endswith('.zip'):\n        return _eval_file_zip(prefix, file_path)\n    elif file_path.endswith('.json'):\n        return _eval_file_json(prefix, file_path)\n    else:\n        return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "ques_id": "62b463153879012d194814a1", "code": ["def add_rendition(self, lang, file_path):\n    \n    \n    if not lang:\n        return\n    if lang in self.renditions:\n        return\n    self.renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    \n    \n    return self.add_file_to_list(\n        lang,\n        file_path,\n       'renditions',\n       'media/',\n        self._encode_file_content(file_path)\n    )\n", "def add_rendition(self, lang, file_path):\n    file_url = self.get_file_url(lang, file_path)\n    if file_url:\n        rendition = self.get_rendition(lang, file_path)\n        if rendition:\n            self.renditions[lang][file_path] = rendition\n            return True\n    return False", "def add_rendition(self, lang, file_path):\n    \n    \n    if not self.renditions:\n        self.renditions = {}\n    self.renditions[lang] = file_path", "def add_rendition(self, lang, file_path):\n    \n    \n    return self.client.post(\n        reverse('upload-rendition'),\n        {'original': file_path, 'lang': lang, 'en': file_path},\n    )\n", "def add_rendition(self, lang, file_path):\n    if not file_path:\n        return\n\n    if not lang:\n        return\n\n    if not self.renditions:\n        self.renditions = {}\n\n    rendition = self.get_rendition(lang)\n    if not rendition:\n        self.renditions[lang] = {}\n\n    self.renditions[lang][file_path] = rendition", "def add_rendition(self, lang, file_path):\n    \n    \n    if not os.path.exists(file_path):\n        raise Exception(\"File not found: %s\" % file_path)\n\n    file_name = os.path.basename(file_path)\n    if not file_name.endswith('.pdf'):\n        raise Exception(\"File is not an pdf file\")\n\n    try:\n        r = requests.get(self.renditions_url % lang, stream=True)\n        with open(file_path, 'wb') as f:\n            for chunk in r.iter_content(chunk_size=1024):\n                if chunk:\n                    f.write(chunk)\n    except Exception as e:\n        print(e)\n", "def add_rendition(self, lang, file_path):\n    \n    \n    self.renditions[lang] = self.get_rendition(file_path)\n", "def add_rendition(self, lang, file_path):\n    \n    \n    if not os.path.exists(file_path):\n        raise ValueError(\"{} does not exist\".format(file_path))\n\n    if not lang:\n        raise ValueError(\"lang cannot be empty\")\n\n    if not file_path.endswith('.pdf'):\n        raise ValueError(\"file should be pdf\")\n\n    with open(file_path, 'rb') as file:\n        rendition = PdfFileReader(file)\n        self.pdf.addPage(rendition.getPage(0))\n\n        if lang in self.renditions:\n            raise ValueError(\"already exists {}\".format(lang))\n\n        self.renditions[lang] = {\"original\": file_path, \"en\": file_path}\n", "def add_rendition(self, lang, file_path):\n    \n    \n    if not lang:\n        raise Exception('Language is mandatory')\n    if not file_path:\n        raise Exception('File path is mandatory')\n    if not isinstance(file_path, str):\n        raise Exception('File path must be string type')\n\n    rendition = self._get_rendition(file_path)\n    self.renditions[lang] = rendition\n    return self\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_rendition(self, lang, file_path):\n    \n    \n    if not lang:\n        return\n    if lang in self.renditions:\n        return\n    self.renditions[lang] = file_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_rendition(self, lang, file_path):\n    \n    \n    return self.add_file_to_list(\n        lang,\n        file_path,\n       'renditions',\n       'media/',\n        self._encode_file_content(file_path)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_rendition(self, lang, file_path):\n    file_url = self.get_file_url(lang, file_path)\n    if file_url:\n        rendition = self.get_rendition(lang, file_path)\n        if rendition:\n            self.renditions[lang][file_path] = rendition\n            return True\n    return False", "is_pass": false, "return_code": 1}, {"generate_code": "def add_rendition(self, lang, file_path):\n    \n    \n    if not self.renditions:\n        self.renditions = {}\n    self.renditions[lang] = file_path", "is_pass": false, "return_code": 1}, {"generate_code": "def add_rendition(self, lang, file_path):\n    \n    \n    return self.client.post(\n        reverse('upload-rendition'),\n        {'original': file_path, 'lang': lang, 'en': file_path},\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_rendition(self, lang, file_path):\n    if not file_path:\n        return\n\n    if not lang:\n        return\n\n    if not self.renditions:\n        self.renditions = {}\n\n    rendition = self.get_rendition(lang)\n    if not rendition:\n        self.renditions[lang] = {}\n\n    self.renditions[lang][file_path] = rendition", "is_pass": false, "return_code": 1}, {"generate_code": "def add_rendition(self, lang, file_path):\n    \n    \n    if not os.path.exists(file_path):\n        raise Exception(\"File not found: %s\" % file_path)\n\n    file_name = os.path.basename(file_path)\n    if not file_name.endswith('.pdf'):\n        raise Exception(\"File is not an pdf file\")\n\n    try:\n        r = requests.get(self.renditions_url % lang, stream=True)\n        with open(file_path, 'wb') as f:\n            for chunk in r.iter_content(chunk_size=1024):\n                if chunk:\n                    f.write(chunk)\n    except Exception as e:\n        print(e)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_rendition(self, lang, file_path):\n    \n    \n    self.renditions[lang] = self.get_rendition(file_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_rendition(self, lang, file_path):\n    \n    \n    if not os.path.exists(file_path):\n        raise ValueError(\"{} does not exist\".format(file_path))\n\n    if not lang:\n        raise ValueError(\"lang cannot be empty\")\n\n    if not file_path.endswith('.pdf'):\n        raise ValueError(\"file should be pdf\")\n\n    with open(file_path, 'rb') as file:\n        rendition = PdfFileReader(file)\n        self.pdf.addPage(rendition.getPage(0))\n\n        if lang in self.renditions:\n            raise ValueError(\"already exists {}\".format(lang))\n\n        self.renditions[lang] = {\"original\": file_path, \"en\": file_path}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_rendition(self, lang, file_path):\n    \n    \n    if not lang:\n        raise Exception('Language is mandatory')\n    if not file_path:\n        raise Exception('File path is mandatory')\n    if not isinstance(file_path, str):\n        raise Exception('File path must be string type')\n\n    rendition = self._get_rendition(file_path)\n    self.renditions[lang] = rendition\n    return self\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "ques_id": "62b463163879012d194814a2", "code": ["def add_asset(self, basename, file_path):\n    self.assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n\n    for file in file_path:\n        if file.endswith(\".tiff\"):\n            self.__file_paths[basename] = file\n\n        if file.endswith(\".jpg\"):\n            self.__file_paths[basename] = file\n\n        if file.endswith(\".png\"):\n            self.__file_paths[basename] = file\n", "def add_asset(self, basename, file_path):\n    asset_file = self.get_asset_path(basename)\n    file_path = os.path.abspath(file_path)\n\n    if not os.path.exists(asset_file):\n        open(asset_file, \"w\").close()\n\n    self.assets[asset_file] = file_path\n", "def add_asset(self, basename, file_path):\n    # TODO: add assets to the file_path\n    asset_path = os.path.join(self.assets_path, basename)\n    if not os.path.exists(asset_path):\n        raise Exception(\"Asset path doesn't exist: {}\".format(asset_path))\n    with open(asset_path, 'rb') as f:\n        content = f.read()\n    with open(file_path, 'wb') as f:\n        f.write(content)\n", "def add_asset(self, basename, file_path):\n    assets = self.assets.setdefault(basename, [])\n    if file_path not in assets:\n        assets.append(file_path)\n", "def add_asset(self, basename, file_path):\n    if not basename:\n        raise ValueError('Basename can not be empty!')\n    path = os.path.join(self.path, basename)\n    if not os.path.exists(path):\n        os.mkdir(path)\n    self.assets[basename] = file_path\n    return basename", "def add_asset(self, basename, file_path):\n    assets = self.assets\n    if basename in assets:\n        raise Exception(\"Asset name '{}' already exists.\".format(basename))\n    else:\n        assets[basename] = file_path\n        self.assets = assets\n        self.write()\n        return True", "def add_asset(self, basename, file_path):\n    try:\n        img = Image.open(file_path)\n        img.save(basename)\n        return True\n    except:\n        return False", "def add_asset(self, basename, file_path):\n    if basename not in self.assets:\n        self.assets[basename] = []\n\n    self.assets[basename].append(file_path)\n", "def add_asset(self, basename, file_path):\n    basename = os.path.basename(basename)\n    self.assets[basename] = file_path\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_asset(self, basename, file_path):\n    self.assets[basename] = file_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n\n    for file in file_path:\n        if file.endswith(\".tiff\"):\n            self.__file_paths[basename] = file\n\n        if file.endswith(\".jpg\"):\n            self.__file_paths[basename] = file\n\n        if file.endswith(\".png\"):\n            self.__file_paths[basename] = file\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset_file = self.get_asset_path(basename)\n    file_path = os.path.abspath(file_path)\n\n    if not os.path.exists(asset_file):\n        open(asset_file, \"w\").close()\n\n    self.assets[asset_file] = file_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    # TODO: add assets to the file_path\n    asset_path = os.path.join(self.assets_path, basename)\n    if not os.path.exists(asset_path):\n        raise Exception(\"Asset path doesn't exist: {}\".format(asset_path))\n    with open(asset_path, 'rb') as f:\n        content = f.read()\n    with open(file_path, 'wb') as f:\n        f.write(content)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    assets = self.assets.setdefault(basename, [])\n    if file_path not in assets:\n        assets.append(file_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    if not basename:\n        raise ValueError('Basename can not be empty!')\n    path = os.path.join(self.path, basename)\n    if not os.path.exists(path):\n        os.mkdir(path)\n    self.assets[basename] = file_path\n    return basename", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    assets = self.assets\n    if basename in assets:\n        raise Exception(\"Asset name '{}' already exists.\".format(basename))\n    else:\n        assets[basename] = file_path\n        self.assets = assets\n        self.write()\n        return True", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    try:\n        img = Image.open(file_path)\n        img.save(basename)\n        return True\n    except:\n        return False", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    if basename not in self.assets:\n        self.assets[basename] = []\n\n    self.assets[basename].append(file_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    basename = os.path.basename(basename)\n    self.assets[basename] = file_path\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "ques_id": "62b463163879012d194814a4", "code": ["def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip:\n        files = zip.namelist()\n        data = {}\n        for f in files:\n            data[f.split('/')[-1]] = zip.read(f)\n    return data\n", "def _explore_zipfile(zip_path):\n    # Get data\n    with zipfile.ZipFile(zip_path) as zip_obj:\n        data = {}\n        for name in zip_obj.namelist():\n            data[name] = zip_obj.read(name)\n    return data\n", "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path, 'r') as zip:\n        files = [f for f in zip.namelist() if not f.startswith('.')]\n        return dict(zip(files, zip.read(files)))\n", "def _explore_zipfile(zip_path):\n    # type: (str) -> Dict\n    with ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall('data/')\n        data = {}\n        for filename in zip_ref.namelist():\n            if filename.endswith('.xml'):\n                data[filename] = _read_xml(zip_path, filename)\n    return data\n", "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip_file:\n        zip_file.extractall(path='/tmp')\n        files = [f for f in zip_file.namelist() if '.xml' in f]\n        return dict([(os.path.splitext(f)[0], zip_file.read(f)) for f in files])\n", "def _explore_zipfile(zip_path):\n    file_names = zipfile.ZipFile(zip_path).namelist()\n    file_names.sort()\n    data = {}\n    for file_name in file_names:\n        data[file_name] = _explore_file(zip_path, file_name)\n    return data\n", "def _explore_zipfile(zip_path):\n    data = {}\n    with zipfile.ZipFile(zip_path) as zf:\n        for name in zf.namelist():\n            if name.endswith(\".xml\"):\n                data[name[:-5]] = zf.read(name)\n    return data\n", "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        for name in zf.namelist():\n            if name.endswith('/'):\n                continue\n            elif name.endswith('.xml'):\n                filename = name.replace('.xml', '')\n                result = {filename: zf.read(name)}\n                return result\n", "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path, \"r\") as zip_file:\n        zip_file.extractall(path=os.path.dirname(zip_path))\n        return {\n            xml_basename(zip_file.open(xml_basename(xml_file)).read(\n                xml_basename(xml_file)).decode(\"utf-8\")):\n            xml_basename(xml_file)\n            for xml_file in zip_file.namelist()\n        }\n", "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall('.')\n        return {\n            os.path.basename(path).replace('.xml', ''): read_xml_file(path)\n            for path in zip_ref.namelist()\n        }\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip:\n        files = zip.namelist()\n        data = {}\n        for f in files:\n            data[f.split('/')[-1]] = zip.read(f)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    # Get data\n    with zipfile.ZipFile(zip_path) as zip_obj:\n        data = {}\n        for name in zip_obj.namelist():\n            data[name] = zip_obj.read(name)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path, 'r') as zip:\n        files = [f for f in zip.namelist() if not f.startswith('.')]\n        return dict(zip(files, zip.read(files)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    # type: (str) -> Dict\n    with ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall('data/')\n        data = {}\n        for filename in zip_ref.namelist():\n            if filename.endswith('.xml'):\n                data[filename] = _read_xml(zip_path, filename)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip_file:\n        zip_file.extractall(path='/tmp')\n        files = [f for f in zip_file.namelist() if '.xml' in f]\n        return dict([(os.path.splitext(f)[0], zip_file.read(f)) for f in files])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    file_names = zipfile.ZipFile(zip_path).namelist()\n    file_names.sort()\n    data = {}\n    for file_name in file_names:\n        data[file_name] = _explore_file(zip_path, file_name)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    data = {}\n    with zipfile.ZipFile(zip_path) as zf:\n        for name in zf.namelist():\n            if name.endswith(\".xml\"):\n                data[name[:-5]] = zf.read(name)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        for name in zf.namelist():\n            if name.endswith('/'):\n                continue\n            elif name.endswith('.xml'):\n                filename = name.replace('.xml', '')\n                result = {filename: zf.read(name)}\n                return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path, \"r\") as zip_file:\n        zip_file.extractall(path=os.path.dirname(zip_path))\n        return {\n            xml_basename(zip_file.open(xml_basename(xml_file)).read(\n                xml_basename(xml_file)).decode(\"utf-8\")):\n            xml_basename(xml_file)\n            for xml_file in zip_file.namelist()\n        }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall('.')\n        return {\n            os.path.basename(path).replace('.xml', ''): read_xml_file(path)\n            for path in zip_ref.namelist()\n        }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "ques_id": "62b463163879012d194814a6", "code": ["def files_list_from_zipfile(zip_path):\n    return [x for x in files_list(zip_path)]\n", "def files_list_from_zipfile(zip_path):\n    return [fname for fname in os.listdir(zip_path) if fname.endswith('.tif')]", "def files_list_from_zipfile(zip_path):\n    return [f for f in zip_path.iterdir() if f.is_file()]\n", "def files_list_from_zipfile(zip_path):\n    return files_list_from_zipfiles([zip_path])\n", "def files_list_from_zipfile(zip_path):\n    return files_list_from_zip(zip_path)\n", "def files_list_from_zipfile(zip_path):\n    return [f for f in os.listdir(zip_path) if f.endswith('.tif')]", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip:\n        return [f.filename for f in zip.filelist]\n", "def files_list_from_zipfile(zip_path):\n    files_list = [f for f in os.listdir(zip_path) if is_file_in_zip(zip_path, f)]\n    return files_list\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path, 'r') as zip_file:\n        return zip_file.namelist()\n", "def files_list_from_zipfile(zip_path):\n    return [f for f in os.listdir(zip_path) if is_file_in_zip(f)]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list_from_zipfile(zip_path):\n    return [x for x in files_list(zip_path)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    return [fname for fname in os.listdir(zip_path) if fname.endswith('.tif')]", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    return [f for f in zip_path.iterdir() if f.is_file()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    return files_list_from_zipfiles([zip_path])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    return files_list_from_zip(zip_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    return [f for f in os.listdir(zip_path) if f.endswith('.tif')]", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zip:\n        return [f.filename for f in zip.filelist]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    files_list = [f for f in os.listdir(zip_path) if is_file_in_zip(zip_path, f)]\n    return files_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path, 'r') as zip_file:\n        return zip_file.namelist()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    return [f for f in os.listdir(zip_path) if is_file_in_zip(f)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "ques_id": "62b4631b3879012d194814dd", "code": ["def fix_namespace_prefix_w(content):\n    return content.replace('w:st=\"', 'w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'w:st=\"', 'w-st=\"', content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'w:st=\"', r'w-st=\"', content)\n", "def fix_namespace_prefix_w(content):\n    \n    \n    return re.sub(r'w:st=\"(.*)\"', r'w-st=\"\\1\"', content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s*w:st=\"(.*?)\"', r'w-st=\"\\1\"', content)\n", "def fix_namespace_prefix_w(content):\n    return content.replace('w:st=\"', 'w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'(?<!w:)(?=:)', r'-st=\"\\1\"', content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'w:([^\\s]+):st=\"', r'w-st=\"', content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'w:(\\w+):st=\"', r'w-st=\"', content)\n", "def fix_namespace_prefix_w(content):\n    \n    \n    return re.sub(r'w:st=\"(.*?)\"', r'w-st=\"\\1\"', content)"], "level": "slib_runnable", "generate_results": [{"generate_code": "def fix_namespace_prefix_w(content):\n    return content.replace('w:st=\"', 'w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'w:st=\"', 'w-st=\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'w:st=\"', r'w-st=\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    \n    \n    return re.sub(r'w:st=\"(.*)\"', r'w-st=\"\\1\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s*w:st=\"(.*?)\"', r'w-st=\"\\1\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return content.replace('w:st=\"', 'w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'(?<!w:)(?=:)', r'-st=\"\\1\"', content)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'w:([^\\s]+):st=\"', r'w-st=\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'w:(\\w+):st=\"', r'w-st=\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    \n    \n    return re.sub(r'w:st=\"(.*?)\"', r'w-st=\"\\1\"', content)", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "ques_id": "62b463283879012d1948153d", "code": ["def match_pubdate(node, pubdate_xpaths):\n    \n    \n    return node.xpath(pubdate_xpaths[0]).extract_first()", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.xpath(pubdate_xpath)\n        if pubdate:\n            return pubdate[0]\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.xpath(pubdate_xpath)[0].text\n        if pubdate:\n            return pubdate\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.xpath(pubdate_xpath)[0].text\n        if pubdate:\n            return pubdate\n    return None", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.xpath(pubdate_xpath)[0].text\n        if pubdate:\n            return pubdate\n", "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    for pubdate_xpath in pubdate_xpaths:\n        pubdate_node = node.xpath(pubdate_xpath)\n        if pubdate_node:\n            return pubdate_node[0]\n    return None\n", "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    for pubdate_xpath in pubdate_xpaths:\n        match = node.xpath(pubdate_xpath)\n        if match:\n            return match[0]\n    return None\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.xpath(pubdate_xpath)\n        if pubdate:\n            return pubdate[0]\n    return None\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate_el = node.xpath(pubdate_xpath)\n        if pubdate_el:\n            return pubdate_el[0].text\n"], "level": "self_contained", "generate_results": [{"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    return node.xpath(pubdate_xpaths[0]).extract_first()", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.xpath(pubdate_xpath)\n        if pubdate:\n            return pubdate[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.xpath(pubdate_xpath)[0].text\n        if pubdate:\n            return pubdate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.xpath(pubdate_xpath)[0].text\n        if pubdate:\n            return pubdate\n    return None", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node)), None)", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.xpath(pubdate_xpath)[0].text\n        if pubdate:\n            return pubdate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    for pubdate_xpath in pubdate_xpaths:\n        pubdate_node = node.xpath(pubdate_xpath)\n        if pubdate_node:\n            return pubdate_node[0]\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    for pubdate_xpath in pubdate_xpaths:\n        match = node.xpath(pubdate_xpath)\n        if match:\n            return match[0]\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.xpath(pubdate_xpath)\n        if pubdate:\n            return pubdate[0]\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        pubdate_el = node.xpath(pubdate_xpath)\n        if pubdate_el:\n            return pubdate_el[0].text\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "ques_id": "62b463303879012d19481579", "code": ["def _extract_number_and_supplment_from_issue_element(issue):\n    \n    \n    number_element = issue.find('number')\n    if number_element is None:\n        raise ValueError(\"issue not found: %s\" % issue)\n    number = number_element.text\n    suppl = number_element.getnext()\n    if suppl is None:\n        raise ValueError(\"issue not found: %s\" % issue)\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('.//number').text\n    suppl = issue.find('.//suppl').text\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    return issue.find('.//number').text, issue.find('.//suppl').text\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    return {\n        \"number\": issue.find(\"number\").text,\n        \"suppl\": issue.find(\"suppl\").text,\n    }\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    return (issue.find('number').text, issue.find('suppl').text)\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('.//{http://purl.org/dc/elements/1.1/}number')\n    number = number.text\n    suppl = issue.find('.//{http://purl.org/dc/elements/1.1/}suppl')\n    suppl = suppl.text\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number_and_suppl = issue.find('.//{' + NS + '}number').text\n    number_and_suppl = number_and_suppl.strip()\n    if number_and_suppl == '':\n        number_and_suppl = issue.find('.//{' + NS + '}suppl').text\n        number_and_suppl = number_and_suppl.strip()\n    return number_and_suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    \n    \n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('.//number').text\n    suppl = issue.find('.//suppl').text\n    return number, suppl\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    \n    \n    number_element = issue.find('number')\n    if number_element is None:\n        raise ValueError(\"issue not found: %s\" % issue)\n    number = number_element.text\n    suppl = number_element.getnext()\n    if suppl is None:\n        raise ValueError(\"issue not found: %s\" % issue)\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('.//number').text\n    suppl = issue.find('.//suppl').text\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    return issue.find('.//number').text, issue.find('.//suppl').text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    return {\n        \"number\": issue.find(\"number\").text,\n        \"suppl\": issue.find(\"suppl\").text,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    return (issue.find('number').text, issue.find('suppl').text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('.//{http://purl.org/dc/elements/1.1/}number')\n    number = number.text\n    suppl = issue.find('.//{http://purl.org/dc/elements/1.1/}suppl')\n    suppl = suppl.text\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number_and_suppl = issue.find('.//{' + NS + '}number').text\n    number_and_suppl = number_and_suppl.strip()\n    if number_and_suppl == '':\n        number_and_suppl = issue.find('.//{' + NS + '}suppl').text\n        number_and_suppl = number_and_suppl.strip()\n    return number_and_suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    \n    \n    number = issue.find('number').text\n    suppl = issue.find('suppl').text\n\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('.//number').text\n    suppl = issue.find('.//suppl').text\n    return number, suppl\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "ques_id": "62b46740d2f69a53b466171a", "code": ["def pretty(self, indent=0, debug=False):\n    return ''.join((self.__class__.__name__, '(', str(indent), ')'))\n", "def pretty(self, indent=0, debug=False):\n    \n    \n    return self._pretty(indent=indent, debug=debug, indent_first=True)", "def pretty(self, indent=0, debug=False):\n    \n    \n    indent_str = \" \" * indent\n    lines = []\n    for k, v in self.items():\n        if isinstance(v, dict):\n            lines.append(indent_str + k + \": \" + pformat(v, indent))\n        else:\n            lines.append(indent_str + k + \": \" + pformat(v, indent))\n    return \"\\n\".join(lines)\n", "def pretty(self, indent=0, debug=False):\n    \n    \n    return '\\n'.join([indent *''+ line for line in self.pretty_lines(indent)])", "def pretty(self, indent=0, debug=False):\n    if debug:\n        return \"{}{}\".format(\"    \" * indent, self.__class__.__name__)\n    return \"{}{}\".format(\"    \" * indent, self.__class__.__name__)\n", "def pretty(self, indent=0, debug=False):\n    return \"{0}{1} {2}\".format(\" \" * indent, self.__class__.__name__, self)\n", "def pretty(self, indent=0, debug=False):\n    lines = []\n    for item in self:\n        if debug:\n            lines.append(' '*indent + repr(item))\n        else:\n            lines.append(repr(item))\n    return '\\n'.join(lines)\n\n\n# ------------------------------------------------------------------------------\n# Local Variables:\n# mode:python\n# py-indent-offset:2\n# tab-width:2\n# fill-column:80\n# End:", "def pretty(self, indent=0, debug=False):\n    out = \"\"\n    for i in range(indent):\n        out += \"  \"\n    out += self.name\n    out += \"(\"\n    for i in range(indent + 1):\n        out += \" \" + str(self.children[i])\n        if i < indent + 1:\n            out += \", \"\n    out += \")\"\n    if debug:\n        print(out)\n    return out\n", "def pretty(self, indent=0, debug=False):\n    indent = \" \" * indent\n    return \"%s%s\\n%s\\n\" % (indent, self.__class__.__name__, indent)\n", "def pretty(self, indent=0, debug=False):\n    return \" \" * indent + \"/* \" + self.name + \" */\\n\"\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pretty(self, indent=0, debug=False):\n    return ''.join((self.__class__.__name__, '(', str(indent), ')'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \n    \n    return self._pretty(indent=indent, debug=debug, indent_first=True)", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \n    \n    indent_str = \" \" * indent\n    lines = []\n    for k, v in self.items():\n        if isinstance(v, dict):\n            lines.append(indent_str + k + \": \" + pformat(v, indent))\n        else:\n            lines.append(indent_str + k + \": \" + pformat(v, indent))\n    return \"\\n\".join(lines)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \n    \n    return '\\n'.join([indent *''+ line for line in self.pretty_lines(indent)])", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    if debug:\n        return \"{}{}\".format(\"    \" * indent, self.__class__.__name__)\n    return \"{}{}\".format(\"    \" * indent, self.__class__.__name__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    return \"{0}{1} {2}\".format(\" \" * indent, self.__class__.__name__, self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    lines = []\n    for item in self:\n        if debug:\n            lines.append(' '*indent + repr(item))\n        else:\n            lines.append(repr(item))\n    return '\\n'.join(lines)\n\n\n# ------------------------------------------------------------------------------\n# Local Variables:\n# mode:python\n# py-indent-offset:2\n# tab-width:2\n# fill-column:80\n# End:", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    out = \"\"\n    for i in range(indent):\n        out += \"  \"\n    out += self.name\n    out += \"(\"\n    for i in range(indent + 1):\n        out += \" \" + str(self.children[i])\n        if i < indent + 1:\n            out += \", \"\n    out += \")\"\n    if debug:\n        print(out)\n    return out\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    indent = \" \" * indent\n    return \"%s%s\\n%s\\n\" % (indent, self.__class__.__name__, indent)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    return \" \" * indent + \"/* \" + self.name + \" */\\n\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "ques_id": "62b46746d2f69a53b4661722", "code": ["def absorb(self, args):\n    new_args = []\n    for arg in args:\n        if arg is not None:\n            new_args.append(self.absorb_term(arg))\n        else:\n            new_args.append(None)\n    return new_args\n", "def absorb(self, args):\n    absorptions = []\n    negatives = []\n    for arg in args:\n        absorptions.append(self.absorption(arg))\n        negatives.append(~self.absorption(arg))\n    return absorptions + negatives", "def absorb(self, args):\n    return self.assign(*args).negate()\n", "def absorb(self, args):\n    return [self.absorb_expr(arg) for arg in args]\n", "def absorb(self, args):\n    return self._absorb(args, True)", "def absorb(self, args):\n    return [arg | (~arg) for arg in args]", "def absorb(self, args):\n\n    return [arg | (~arg & ~arg) for arg in args]\n", "def absorb(self, args):\n    return [self.absorb_op(arg) for arg in args]", "def absorb(self, args):\n    absorptions = []\n    negatives = []\n\n    for arg in args:\n        absorptions.append(arg.absorb())\n\n    for arg in args:\n        if arg.is_negated:\n            negatives.append(arg)\n        else:\n            absorptions.append(arg)\n\n    return absorptions + negatives\n", "def absorb(self, args):\n    return [self.apply_absorption(arg) for arg in args]"], "level": "class_runnable", "generate_results": [{"generate_code": "def absorb(self, args):\n    new_args = []\n    for arg in args:\n        if arg is not None:\n            new_args.append(self.absorb_term(arg))\n        else:\n            new_args.append(None)\n    return new_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    absorptions = []\n    negatives = []\n    for arg in args:\n        absorptions.append(self.absorption(arg))\n        negatives.append(~self.absorption(arg))\n    return absorptions + negatives", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return self.assign(*args).negate()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [self.absorb_expr(arg) for arg in args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return self._absorb(args, True)", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [arg | (~arg) for arg in args]", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n\n    return [arg | (~arg & ~arg) for arg in args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [self.absorb_op(arg) for arg in args]", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    absorptions = []\n    negatives = []\n\n    for arg in args:\n        absorptions.append(arg.absorb())\n\n    for arg in args:\n        if arg.is_negated:\n            negatives.append(arg)\n        else:\n            absorptions.append(arg)\n\n    return absorptions + negatives\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [self.apply_absorption(arg) for arg in args]", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "ques_id": "62b86707b4d922cb0e688c2a", "code": ["def on(self, hook):\n\n    def register(func):\n        self.register_listener(hook, func)\n        return func\n\n    return register\n", "def on(self, hook):\n\n    def _decorator(func):\n        self.register(hook, func)\n        return func\n\n    return _decorator", "def on(self, hook):\n    def decorator(f):\n        self.add_listener(hook, f)\n        return f\n    return decorator\n", "def on(self, hook):\n    def decorator(function):\n        self.register(hook, function)\n        return function\n    return decorator\n", "def on(self, hook):\n    def decorator(f):\n        self.add_listener(hook, f)\n        return f\n    return decorator\n", "def on(self, hook):\n\n    def decorator(f):\n        self._registry[hook].append(f)\n        return f\n\n    return decorator\n", "def on(self, hook):\n\n    def decorator(f):\n        self._register(hook, f)\n        return f\n\n    return decorator\n", "def on(self, hook):\n    def decorator(f):\n        self._registry[hook] = f\n        return f\n\n    return decorator\n", "def on(self, hook):\n\n    def decorator(f):\n        self._registry[hook].append(f)\n        return f\n\n    return decorator\n", "def on(self, hook):\n\n    def decorator(fn):\n        self.register_listener(hook, fn)\n        return fn\n\n    return decorator"], "level": "class_runnable", "generate_results": [{"generate_code": "def on(self, hook):\n\n    def register(func):\n        self.register_listener(hook, func)\n        return func\n\n    return register\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def _decorator(func):\n        self.register(hook, func)\n        return func\n\n    return _decorator", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(f):\n        self.add_listener(hook, f)\n        return f\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(function):\n        self.register(hook, function)\n        return function\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(f):\n        self.add_listener(hook, f)\n        return f\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def decorator(f):\n        self._registry[hook].append(f)\n        return f\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def decorator(f):\n        self._register(hook, f)\n        return f\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(f):\n        self._registry[hook] = f\n        return f\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def decorator(f):\n        self._registry[hook].append(f)\n        return f\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def decorator(fn):\n        self.register_listener(hook, fn)\n        return fn\n\n    return decorator", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "ques_id": "62b86729b4d922cb0e688c2f", "code": ["def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"etcd_auth\": \"user\",\n        \"etcd_auth_key\": \"secret\",\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\"user\": user, \"etcd_host\": etcd_host, \"etcd_port\": etcd_port}\n    return config\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"etcd\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n            \"user\": user,\n            \"password\": None,\n        }\n    }\n    return config\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\"user\": user, \"etcd_host\": etcd_host, \"etcd_port\": etcd_port}\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n    }", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"auth\": {\n            \"type\": \"basic\",\n            \"user\": user,\n            \"password\": \"password\",\n            \"options\": {},\n        },\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\"user\": user, \"etcd_host\": etcd_host, \"etcd_port\": etcd_port}\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"etcd_prefix\": \"\"\n    }\n"], "level": "self_contained", "generate_results": [{"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"etcd_auth\": \"user\",\n        \"etcd_auth_key\": \"secret\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\"user\": user, \"etcd_host\": etcd_host, \"etcd_port\": etcd_port}\n    return config\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"etcd\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n            \"user\": user,\n            \"password\": None,\n        }\n    }\n    return config\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\"user\": user, \"etcd_host\": etcd_host, \"etcd_port\": etcd_port}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n    }", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"auth\": {\n            \"type\": \"basic\",\n            \"user\": user,\n            \"password\": \"password\",\n            \"options\": {},\n        },\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\"user\": user, \"etcd_host\": etcd_host, \"etcd_port\": etcd_port}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"etcd_prefix\": \"\"\n    }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d2", "code": ["def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise TypeError(\"Can't convert {} to a timezone-aware datetime.\".format(dt))\n    else:\n        return dt.astimezone(self)\n", "def _fromutc(self, dt):\n    return dt.replace(tzinfo=self.tzinfo)\n", "def _fromutc(self, dt):\n    return dt.astimezone(self.tzinfo)", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise ValueError('Datetime object is no longer a timezone aware '\n                         'datetime.')\n    return dt.astimezone(self)\n", "def _fromutc(self, dt):\n    # type: (datetime) -> datetime\n    if dt.tzinfo is None:\n        raise ValueError(\"Can't fromutc a naive datetime\")\n    return dt.astimezone(self.tz)\n", "def _fromutc(self, dt):\n    return dt.replace(tzinfo=self)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is not None and dt.tzinfo.utcoffset(dt) is None:\n        return dt.replace(tzinfo=None)\n    else:\n        return dt\n", "def _fromutc(self, dt):\n    if self._ambiguous(dt):\n        return dt.astimezone(self._tzinfo)\n    else:\n        return dt", "def _fromutc(self, dt):\n    # type: (datetime.datetime) -> datetime.datetime\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=self._tzinfo)\n    else:\n        return dt.astimezone(self._tzinfo)\n", "def _fromutc(self, dt):\n    return dt.astimezone(self.tz)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise TypeError(\"Can't convert {} to a timezone-aware datetime.\".format(dt))\n    else:\n        return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    return dt.replace(tzinfo=self.tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    return dt.astimezone(self.tzinfo)", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise ValueError('Datetime object is no longer a timezone aware '\n                         'datetime.')\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    # type: (datetime) -> datetime\n    if dt.tzinfo is None:\n        raise ValueError(\"Can't fromutc a naive datetime\")\n    return dt.astimezone(self.tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    return dt.replace(tzinfo=self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is not None and dt.tzinfo.utcoffset(dt) is None:\n        return dt.replace(tzinfo=None)\n    else:\n        return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if self._ambiguous(dt):\n        return dt.astimezone(self._tzinfo)\n    else:\n        return dt", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    # type: (datetime.datetime) -> datetime.datetime\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=self._tzinfo)\n    else:\n        return dt.astimezone(self._tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    return dt.astimezone(self.tz)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "ques_id": "62b8982f755ee91dce50a241", "code": ["def normalized(self):\n    return relativedelta(**dict(self.__dict__))\n", "def normalized(self):\n    return relativedelta(**dict(self.__dict__))\n", "def normalized(self):\n    return relativedelta(**{k: int(v) for k, v in self.items()})\n", "def normalized(self):\n    return relativedelta(days=self.days, hours=self.hours)\n", "def normalized(self):\n    return relativedelta(**dict((k, v) for k, v in self.__dict__.items()\n                                if not k.startswith('_')))\n", "def normalized(self):\n    return relativedelta(**dict((k, int(v)) for k, v in self.__dict__.items()\n                                  if not k.startswith('_')))\n", "def normalized(self):\n    return relativedelta(**{k: int(v) for k, v in self.__dict__.items() if k.isdigit()})\n", "def normalized(self):\n    return relativedelta(**{k: getattr(self, k) for k in self.__relative_keys__()})\n", "def normalized(self):\n    return relativedelta(**dict(self))", "def normalized(self):\n    return relativedelta(**self.__dict__)"], "level": "class_runnable", "generate_results": [{"generate_code": "def normalized(self):\n    return relativedelta(**dict(self.__dict__))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(**dict(self.__dict__))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(**{k: int(v) for k, v in self.items()})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(days=self.days, hours=self.hours)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(**dict((k, v) for k, v in self.__dict__.items()\n                                if not k.startswith('_')))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(**dict((k, int(v)) for k, v in self.__dict__.items()\n                                  if not k.startswith('_')))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(**{k: int(v) for k, v in self.__dict__.items() if k.isdigit()})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(**{k: getattr(self, k) for k in self.__relative_keys__()})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(**dict(self))", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return relativedelta(**self.__dict__)", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "ques_id": "62b89640755ee91dce50a114", "code": ["def tzname_in_python2(namefunc):\n    if sys.version_info < (3, 0):\n        return namefunc\n    else:\n        return namefunc.encode('utf-8')\n", "def tzname_in_python2(namefunc):\n\n    def decorator(cls):\n        for k, v in cls.__dict__.items():\n            if isinstance(v, bytes):\n                cls.__dict__[k] = v.decode('utf-8')\n        return cls\n\n    return decorator(namefunc)\n", "def tzname_in_python2(namefunc):\n    def inner(self):\n        return tzname(namefunc(self))\n    return inner\n", "def tzname_in_python2(namefunc):\n    def _tzname(self):\n        return namefunc(self).encode('utf-8')\n    _tzname.__name__ = namefunc.__name__\n    return _tzname\n", "def tzname_in_python2(namefunc):\n    def inner(self):\n        return namefunc(self).encode(\"utf-8\")\n    return inner\n", "def tzname_in_python2(namefunc):\n    return lambda x: namefunc(x.encode('utf-8'))\n", "def tzname_in_python2(namefunc):\n    if sys.version_info[0] < 3:\n        return namefunc\n    else:\n        return namefunc.encode('utf-8')\n", "def tzname_in_python2(namefunc):\n\n    def wrapper(self, dt):\n        if not isinstance(dt, datetime.datetime):\n            raise ValueError('datetime expected')\n        if dt.tzinfo is None:\n            dt = dt.replace(tzinfo=pytz.utc)\n        return namefunc(self, dt)\n\n    return wrapper\n", "def tzname_in_python2(namefunc):\n    return _tzname_in_python2(namefunc)\n", "def tzname_in_python2(namefunc):\n\n    def wrapper(self, tz):\n        if six.PY3:\n            return namefunc(self, tz)\n        else:\n            return namefunc(self.replace(tzinfo=tz), tz)\n\n    wrapper.__name__ = namefunc.__name__\n    wrapper.__doc__ = namefunc.__doc__\n    return wrapper\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def tzname_in_python2(namefunc):\n    if sys.version_info < (3, 0):\n        return namefunc\n    else:\n        return namefunc.encode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    def decorator(cls):\n        for k, v in cls.__dict__.items():\n            if isinstance(v, bytes):\n                cls.__dict__[k] = v.decode('utf-8')\n        return cls\n\n    return decorator(namefunc)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def tzname_in_python2(namefunc):\n    def inner(self):\n        return tzname(namefunc(self))\n    return inner\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    def _tzname(self):\n        return namefunc(self).encode('utf-8')\n    _tzname.__name__ = namefunc.__name__\n    return _tzname\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    def inner(self):\n        return namefunc(self).encode(\"utf-8\")\n    return inner\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    return lambda x: namefunc(x.encode('utf-8'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    if sys.version_info[0] < 3:\n        return namefunc\n    else:\n        return namefunc.encode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    def wrapper(self, dt):\n        if not isinstance(dt, datetime.datetime):\n            raise ValueError('datetime expected')\n        if dt.tzinfo is None:\n            dt = dt.replace(tzinfo=pytz.utc)\n        return namefunc(self, dt)\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    return _tzname_in_python2(namefunc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    def wrapper(self, tz):\n        if six.PY3:\n            return namefunc(self, tz)\n        else:\n            return namefunc(self.replace(tzinfo=tz), tz)\n\n    wrapper.__name__ = namefunc.__name__\n    wrapper.__doc__ = namefunc.__doc__\n    return wrapper\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "ques_id": "62b87d24d292efb640a55670", "code": ["def get_versions():\n    try:\n        return get_versions_dict()\n    except Exception:\n        return get_versions_dict(default=DEFAULT_VERSION)\n", "def get_versions():\n    try:\n        from.versions import __version__\n    except ImportError:\n        return {}\n    else:\n        return __version__\n", "def get_versions():\n    try:\n        from.version import __version__\n    except ImportError:\n        __version__ = '0.0.0'\n    return __version__\n", "def get_versions():\n    try:\n        from pkg_resources import get_distribution\n    except ImportError:\n        from pkg_resources import DistributionNotFound\n\n        raise DistributionNotFound(\n            'This is a version of the Python package `%s`, which is not '\n            'installed. Please install it manually.' % __name__)\n\n    versions = get_distribution(\"scipy-numpy\").version\n    if versions:\n        return versions\n    else:\n        return __version__\n", "def get_versions():\n    try:\n        return get_version_info()\n    except Exception:\n        return {}\n", "def get_versions():\n    \n    \n    try:\n        from.version import __version__\n        return [__version__]\n    except ImportError:\n        return [\"unknown\"]\n", "def get_versions():\n    if VERSION is None:\n        return DEFAULT_VERSIONS\n    return VERSION\n", "def get_versions():\n    \n    \n    try:\n        import django\n    except ImportError:\n        return {}\n    else:\n        try:\n            from django.VERSION import VERSION as VERSION_LIST\n        except ImportError:\n            return {}\n        else:\n            return VERSION_LIST\n", "def get_versions():\n    try:\n        return __version__\n    except NameError:\n        return '{0}.{1}.{2}'.format(*get_version())\n", "def get_versions():\n    try:\n        from aws_ml_helper.version import __version__\n    except ImportError:\n        return ['0.0']\n    else:\n        return [str(__version__)]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_versions():\n    try:\n        return get_versions_dict()\n    except Exception:\n        return get_versions_dict(default=DEFAULT_VERSION)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        from.versions import __version__\n    except ImportError:\n        return {}\n    else:\n        return __version__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        from.version import __version__\n    except ImportError:\n        __version__ = '0.0.0'\n    return __version__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        from pkg_resources import get_distribution\n    except ImportError:\n        from pkg_resources import DistributionNotFound\n\n        raise DistributionNotFound(\n            'This is a version of the Python package `%s`, which is not '\n            'installed. Please install it manually.' % __name__)\n\n    versions = get_distribution(\"scipy-numpy\").version\n    if versions:\n        return versions\n    else:\n        return __version__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return get_version_info()\n    except Exception:\n        return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    \n    \n    try:\n        from.version import __version__\n        return [__version__]\n    except ImportError:\n        return [\"unknown\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    if VERSION is None:\n        return DEFAULT_VERSIONS\n    return VERSION\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    \n    \n    try:\n        import django\n    except ImportError:\n        return {}\n    else:\n        try:\n            from django.VERSION import VERSION as VERSION_LIST\n        except ImportError:\n            return {}\n        else:\n            return VERSION_LIST\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return __version__\n    except NameError:\n        return '{0}.{1}.{2}'.format(*get_version())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        from aws_ml_helper.version import __version__\n    except ImportError:\n        return ['0.0']\n    else:\n        return [str(__version__)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "ques_id": "62b87d24d292efb640a5566f", "code": ["def render(pieces, style):\n    return \"\\n\".join([style % piece for piece in pieces])\n", "def render(pieces, style):\n    \n    \n    return '\\n'.join(\n        [render_piece(piece, style) for piece in pieces])\n", "def render(pieces, style):\n    \n    \n    return render_to_string(style, pieces)\n", "def render(pieces, style):\n    \n    \n    styles = {\n       'sphinx': '/usr/share/sphinx/theme/',\n        'latex': '/usr/share/latex/',\n    }\n    if style not in styles:\n        raise ValueError(\"Unknown style: %s\" % style)\n    return render_template(pieces, styles[style])\n", "def render(pieces, style):\n    for piece in pieces:\n        if piece.type == \"image\":\n            piece.render(style)\n        elif piece.type == \"link\":\n            link(piece, style)\n", "def render(pieces, style):\n    if style == 'full':\n        return full_render(pieces)\n    if style =='minimal':\n        return minimal_render(pieces)\n    if style =='relative':\n        return relative_render(pieces)\n    if style == 'full_relative':\n        return full_relative_render(pieces)\n    if style == 'full_relative_relative':\n        return full_relative_relative_render(pieces)\n    if style =='simple':\n        return simple_render(pieces)\n    if style == 'full_simple':\n        return full_simple_render(pieces)\n", "def render(pieces, style):\n    return _render(pieces, style, _get_template(style))\n", "def render(pieces, style):\n    \n    \n    return render_style(style, pieces)\n", "def render(pieces, style):\n    \n    \n    return \"\".join([style[p] for p in pieces])\n", "def render(pieces, style):\n    return '\\n'.join(render_piece(piece, style) for piece in pieces)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def render(pieces, style):\n    return \"\\n\".join([style % piece for piece in pieces])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    \n    \n    return '\\n'.join(\n        [render_piece(piece, style) for piece in pieces])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    \n    \n    return render_to_string(style, pieces)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    \n    \n    styles = {\n       'sphinx': '/usr/share/sphinx/theme/',\n        'latex': '/usr/share/latex/',\n    }\n    if style not in styles:\n        raise ValueError(\"Unknown style: %s\" % style)\n    return render_template(pieces, styles[style])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    for piece in pieces:\n        if piece.type == \"image\":\n            piece.render(style)\n        elif piece.type == \"link\":\n            link(piece, style)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if style == 'full':\n        return full_render(pieces)\n    if style =='minimal':\n        return minimal_render(pieces)\n    if style =='relative':\n        return relative_render(pieces)\n    if style == 'full_relative':\n        return full_relative_render(pieces)\n    if style == 'full_relative_relative':\n        return full_relative_relative_render(pieces)\n    if style =='simple':\n        return simple_render(pieces)\n    if style == 'full_simple':\n        return full_simple_render(pieces)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    return _render(pieces, style, _get_template(style))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    \n    \n    return render_style(style, pieces)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    \n    \n    return \"\".join([style[p] for p in pieces])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    return '\\n'.join(render_piece(piece, style) for piece in pieces)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "ques_id": "62b87d24d292efb640a5566d", "code": ["def plus_or_dot(pieces):\n    return (\"+\" if len(pieces) == 1 else \".\").join(pieces)\n", "def plus_or_dot(pieces):\n    if not pieces:\n        return \". \"\n    return \"+ {}\".format(pieces[0])\n", "def plus_or_dot(pieces):\n    if len(pieces) > 1:\n        return '+' + pieces[0]\n    return pieces[0]\n", "def plus_or_dot(pieces):\n    if not pieces:\n        return '+'\n    return '.'\n", "def plus_or_dot(pieces):\n    if len(pieces) == 1:\n        return '+'\n    else:\n        return '.'\n", "def plus_or_dot(pieces):\n    if not pieces:\n        return '+'\n    return '.'", "def plus_or_dot(pieces):\n    if len(pieces) == 0:\n        return '+'\n    return '.'\n", "def plus_or_dot(pieces):\n    return ''.join(pieces) if pieces else '.'\n", "def plus_or_dot(pieces):\n    return '.' if len(pieces) == 1 else '+'\n", "def plus_or_dot(pieces):\n    return '+' if len(pieces) == 1 else '.'\n"], "level": "self_contained", "generate_results": [{"generate_code": "def plus_or_dot(pieces):\n    return (\"+\" if len(pieces) == 1 else \".\").join(pieces)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    if not pieces:\n        return \". \"\n    return \"+ {}\".format(pieces[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    if len(pieces) > 1:\n        return '+' + pieces[0]\n    return pieces[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    if not pieces:\n        return '+'\n    return '.'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    if len(pieces) == 1:\n        return '+'\n    else:\n        return '.'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    if not pieces:\n        return '+'\n    return '.'", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    if len(pieces) == 0:\n        return '+'\n    return '.'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    return ''.join(pieces) if pieces else '.'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    return '.' if len(pieces) == 1 else '+'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    return '+' if len(pieces) == 1 else '.'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62b87d23d292efb640a5566b", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    env = env or {}\n\n    with hide('running','stdout','stderr', 'warnings'), hide('everything'):\n        if not isinstance(commands, (list, tuple)):\n            commands = [commands]\n\n        if args is None:\n            args = []\n\n        for cmd in commands:\n            result = run(cmd, args=args, cwd=cwd, check=True, verbose=verbose, env=env)\n            if result.return_code!= 0:\n                raise AnsibleError('command failed: %s' % result.stdout)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not isinstance(commands, list):\n        commands = [commands]\n    if args:\n        args = [\"--\"] + args\n    _run_command(commands, args, cwd, verbose, hide_stderr, env)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not env:\n        env = {}\n    if verbose:\n        env['PYTHON_VERBOSE'] = '1'\n    if hide_stderr:\n        env['PYTHON_SHOW_STDERR'] = '1'\n    if isinstance(commands, six.string_types):\n        commands = [commands]\n    for command in commands:\n        subprocess.check_call(command, env=env, cwd=cwd, stdout=subprocess.DEVNULL,\n                              stderr=subprocess.DEVNULL)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not isinstance(commands, list):\n        commands = [commands]\n\n    if cwd is None:\n        cwd = os.getcwd()\n\n    for command in commands:\n        if verbose:\n            print(\"Running command: %s\" % command)\n        subprocess.call(command, cwd=cwd, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if isinstance(commands, str):\n        commands = commands.split()\n    for cmd in commands:\n        cmd = cmd.strip()\n        if verbose:\n            print(\"Running: {}\".format(cmd))\n        subprocess.check_call(cmd, cwd=cwd, env=env, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n    if not hide_stderr:\n        sys.stderr.write(\"\\n\")\n    if args is not None:\n        subprocess.check_call(args, cwd=cwd, env=env, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    for cmd in commands:\n        if verbose:\n            print(cmd)\n        if not hide_stderr:\n            subprocess.run(cmd, check=True, env=env, cwd=cwd, check_returncode=True)\n        else:\n            subprocess.run(cmd, check=True, env=env, cwd=cwd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    for command in commands:\n        print('Running:', command, file=sys.stderr)\n        if env is None:\n            env = os.environ\n        if verbose:\n            print('$ {}'.format(os.environ.get('COMSPEC', '')), file=sys.stderr)\n        subprocess.call(command, env=env, cwd=cwd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    for command in commands:\n        if isinstance(command, str):\n            command = command.split()\n        args = command + args\n        run(args, cwd=cwd, verbose=verbose, hide_stderr=hide_stderr, env=env)", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    for command in commands:\n        run_command_in_container(command, args, cwd=cwd, verbose=verbose,\n                                 hide_stderr=hide_stderr, env=env)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if isinstance(commands, basestring):\n        commands = [commands]\n\n    with _build_log(verbose, hide_stderr) as log:\n        for cmd in commands:\n            cmd = cmd.format(**env)\n            _run_command(cmd, args, cwd, log, verbose, hide_stderr)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    env = env or {}\n\n    with hide('running','stdout','stderr', 'warnings'), hide('everything'):\n        if not isinstance(commands, (list, tuple)):\n            commands = [commands]\n\n        if args is None:\n            args = []\n\n        for cmd in commands:\n            result = run(cmd, args=args, cwd=cwd, check=True, verbose=verbose, env=env)\n            if result.return_code!= 0:\n                raise AnsibleError('command failed: %s' % result.stdout)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not isinstance(commands, list):\n        commands = [commands]\n    if args:\n        args = [\"--\"] + args\n    _run_command(commands, args, cwd, verbose, hide_stderr, env)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not env:\n        env = {}\n    if verbose:\n        env['PYTHON_VERBOSE'] = '1'\n    if hide_stderr:\n        env['PYTHON_SHOW_STDERR'] = '1'\n    if isinstance(commands, six.string_types):\n        commands = [commands]\n    for command in commands:\n        subprocess.check_call(command, env=env, cwd=cwd, stdout=subprocess.DEVNULL,\n                              stderr=subprocess.DEVNULL)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not isinstance(commands, list):\n        commands = [commands]\n\n    if cwd is None:\n        cwd = os.getcwd()\n\n    for command in commands:\n        if verbose:\n            print(\"Running command: %s\" % command)\n        subprocess.call(command, cwd=cwd, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if isinstance(commands, str):\n        commands = commands.split()\n    for cmd in commands:\n        cmd = cmd.strip()\n        if verbose:\n            print(\"Running: {}\".format(cmd))\n        subprocess.check_call(cmd, cwd=cwd, env=env, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n    if not hide_stderr:\n        sys.stderr.write(\"\\n\")\n    if args is not None:\n        subprocess.check_call(args, cwd=cwd, env=env, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    for cmd in commands:\n        if verbose:\n            print(cmd)\n        if not hide_stderr:\n            subprocess.run(cmd, check=True, env=env, cwd=cwd, check_returncode=True)\n        else:\n            subprocess.run(cmd, check=True, env=env, cwd=cwd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    for command in commands:\n        print('Running:', command, file=sys.stderr)\n        if env is None:\n            env = os.environ\n        if verbose:\n            print('$ {}'.format(os.environ.get('COMSPEC', '')), file=sys.stderr)\n        subprocess.call(command, env=env, cwd=cwd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    for command in commands:\n        if isinstance(command, str):\n            command = command.split()\n        args = command + args\n        run(args, cwd=cwd, verbose=verbose, hide_stderr=hide_stderr, env=env)", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    for command in commands:\n        run_command_in_container(command, args, cwd=cwd, verbose=verbose,\n                                 hide_stderr=hide_stderr, env=env)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if isinstance(commands, basestring):\n        commands = [commands]\n\n    with _build_log(verbose, hide_stderr) as log:\n        for cmd in commands:\n            cmd = cmd.format(**env)\n            _run_command(cmd, args, cwd, log, verbose, hide_stderr)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "ques_id": "62b87d23d292efb640a55668", "code": ["def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"tcdlib/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/idl/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"tea/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/asyncio/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"\"\n    cfg.versionfile_source = \"espresso/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/dst/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"maas/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"taurus/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"talos/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/nextgen/_version.py\"\n    cfg.verbose = False\n    return cfg\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"tcdlib/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/idl/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"tea/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/asyncio/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"\"\n    cfg.versionfile_source = \"espresso/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/dst/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"maas/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"taurus/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"talos/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/nextgen/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "ques_id": "62b87d23d292efb640a55667", "code": ["def register_vcs_handler(vcs, method):\n    \n    \n    def decorator(f):\n        f.vcs = vcs\n        f.method = method\n        return f\n    return decorator\n", "def register_vcs_handler(vcs, method):\n    \n    \n    def decorator(f):\n        vcs.handlers[method] = f\n        return f\n    return decorator", "def register_vcs_handler(vcs, method):\n    \n    \n    def register(f):\n        \"\"\"\n        Mark a method as the handler of a VCS as being a method of a VCS.\n        \"\"\"\n        vcs.register_handler(method, f)\n        return f\n    return register\n", "def register_vcs_handler(vcs, method):\n    def decorator(f):\n        if not hasattr(f, '__vcs_handlers__'):\n            f.__vcs_handlers__ = {}\n        f.__vcs_handlers__[vcs] = method\n        return f\n    return decorator\n", "def register_vcs_handler(vcs, method):\n    def decorator(func):\n        vcs.handlers[method] = func\n        return func\n    return decorator\n", "def register_vcs_handler(vcs, method):\n    \n    \n    def register(f):\n        assert hasattr(f, '_vcs_handler'), 'Expected function {} to have an attribute _vcs_handler'.format(f)\n        f._vcs_handler = method\n        return f\n    return register\n", "def register_vcs_handler(vcs, method):\n    \n    \n    def decorator(f):\n        if vcs not in _VCS_HANDLERS:\n            _VCS_HANDLERS[vcs] = {}\n        _VCS_HANDLERS[vcs][method.__name__] = f\n        return f\n    return decorator\n", "def register_vcs_handler(vcs, method):\n    if vcs not in _VCS_HANDLERS:\n        _VCS_HANDLERS[vcs] = {}\n    if method not in _VCS_HANDLERS[vcs]:\n        _VCS_HANDLERS[vcs][method] = set()\n    _VCS_HANDLERS[vcs][method].add(method)", "def register_vcs_handler(vcs, method):\n    def _register_vcs_handler(method):\n        if vcs in _vcs_handlers:\n            raise ValueError('Handler already registered for VCS \"{}\".'.format(vcs))\n        _vcs_handlers[vcs] = method\n        return method\n    return _register_vcs_handler\n", "def register_vcs_handler(vcs, method):\n    def decorator(func):\n        setattr(vcs, method, func)\n        return func\n    return decorator"], "level": "self_contained", "generate_results": [{"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    def decorator(f):\n        f.vcs = vcs\n        f.method = method\n        return f\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    def decorator(f):\n        vcs.handlers[method] = f\n        return f\n    return decorator", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    def register(f):\n        \"\"\"\n        Mark a method as the handler of a VCS as being a method of a VCS.\n        \"\"\"\n        vcs.register_handler(method, f)\n        return f\n    return register\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    def decorator(f):\n        if not hasattr(f, '__vcs_handlers__'):\n            f.__vcs_handlers__ = {}\n        f.__vcs_handlers__[vcs] = method\n        return f\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    def decorator(func):\n        vcs.handlers[method] = func\n        return func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    def register(f):\n        assert hasattr(f, '_vcs_handler'), 'Expected function {} to have an attribute _vcs_handler'.format(f)\n        f._vcs_handler = method\n        return f\n    return register\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    def decorator(f):\n        if vcs not in _VCS_HANDLERS:\n            _VCS_HANDLERS[vcs] = {}\n        _VCS_HANDLERS[vcs][method.__name__] = f\n        return f\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    if vcs not in _VCS_HANDLERS:\n        _VCS_HANDLERS[vcs] = {}\n    if method not in _VCS_HANDLERS[vcs]:\n        _VCS_HANDLERS[vcs][method] = set()\n    _VCS_HANDLERS[vcs][method].add(method)", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    def _register_vcs_handler(method):\n        if vcs in _vcs_handlers:\n            raise ValueError('Handler already registered for VCS \"{}\".'.format(vcs))\n        _vcs_handlers[vcs] = method\n        return method\n    return _register_vcs_handler\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    def decorator(func):\n        setattr(vcs, method, func)\n        return func\n    return decorator", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "ques_id": "62b45e945108cfac7f210a4a", "code": ["def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects, good_objects = 0, 0\n    for store in self.stores:\n        if validate_objects:\n            good_objects += store.validate_objects(check_digests=check_digests, show_warnings=show_warnings)\n        if check_digests:\n            num_objects += store.validate_digests(show_warnings=show_warnings)\n    return num_objects, good_objects", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if validate_objects:\n        self.validate_objects(show_warnings)\n\n    if check_digests:\n        self.validate_digests()\n\n    return len(self._objects), len(self._objects_to_check)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.validate_objects(validate_objects)\n    self.validate_digests(check_digests)\n    self.validate_warnings(show_warnings)\n    return len(self.objects), len(self.objects) - self.valid_objects", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n\nnum_objects = 0\nchecked_good_objects = 0\nif validate_objects:\nnum_objects = self.validate_objects()\nchecked_good_objects = self.validate_good_objects()\nif check_digests:\nnum_objects = self.validate_digests()\nchecked_good_objects += self.validate_digests_in_hierarchy()\nif show_warnings:\nwarnings.warn(\"Unexpected object digests found in storage root hierarchy.\", category=UserWarning)\nreturn num_objects, checked_good_objects", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    return self._validate(validate_objects=validate_objects, check_digests=check_digests, show_warnings=show_warnings)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    # Return the number of objects and checked good objects\n    return self.num_objects, self.checked_good_objects\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    good_objects = 0\n    for item in self.objects:\n        if item.validate(validate_objects=validate_objects, check_digests=check_digests, show_warnings=show_warnings):\n            num_objects += 1\n        else:\n            good_objects += 1\n    return num_objects, good_objects\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validate_objects = validate_objects or self.validate_objects\n    check_digests = check_digests or self.check_digests\n    show_warnings = show_warnings or self.show_warnings\n    return len(self.storage.object_store), len(self.storage.checked_objects), validate_objects, check_digests, show_warnings", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n\n    storage = self.storage\n    root = storage.root_dir\n    num_objects = len(storage.list_dirs(root))\n    good_objects = len(storage.list_dirs(root, ignore_hidden=True))\n\n    if validate_objects:\n        self.validate_objects(root)\n\n    if check_digests:\n        self.check_digests(root)\n\n    if show_warnings:\n        self.__print_warnings(storage)\n\n    return num_objects, good_objects", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if validate_objects:\n        self.validate_objects()\n    if check_digests:\n        self.validate_digests()\n    return self.validate_root_objects(show_warnings)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects, good_objects = 0, 0\n    for store in self.stores:\n        if validate_objects:\n            good_objects += store.validate_objects(check_digests=check_digests, show_warnings=show_warnings)\n        if check_digests:\n            num_objects += store.validate_digests(show_warnings=show_warnings)\n    return num_objects, good_objects", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if validate_objects:\n        self.validate_objects(show_warnings)\n\n    if check_digests:\n        self.validate_digests()\n\n    return len(self._objects), len(self._objects_to_check)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.validate_objects(validate_objects)\n    self.validate_digests(check_digests)\n    self.validate_warnings(show_warnings)\n    return len(self.objects), len(self.objects) - self.valid_objects", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n\nnum_objects = 0\nchecked_good_objects = 0\nif validate_objects:\nnum_objects = self.validate_objects()\nchecked_good_objects = self.validate_good_objects()\nif check_digests:\nnum_objects = self.validate_digests()\nchecked_good_objects += self.validate_digests_in_hierarchy()\nif show_warnings:\nwarnings.warn(\"Unexpected object digests found in storage root hierarchy.\", category=UserWarning)\nreturn num_objects, checked_good_objects", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    return self._validate(validate_objects=validate_objects, check_digests=check_digests, show_warnings=show_warnings)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    # Return the number of objects and checked good objects\n    return self.num_objects, self.checked_good_objects\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    good_objects = 0\n    for item in self.objects:\n        if item.validate(validate_objects=validate_objects, check_digests=check_digests, show_warnings=show_warnings):\n            num_objects += 1\n        else:\n            good_objects += 1\n    return num_objects, good_objects\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validate_objects = validate_objects or self.validate_objects\n    check_digests = check_digests or self.check_digests\n    show_warnings = show_warnings or self.show_warnings\n    return len(self.storage.object_store), len(self.storage.checked_objects), validate_objects, check_digests, show_warnings", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n\n    storage = self.storage\n    root = storage.root_dir\n    num_objects = len(storage.list_dirs(root))\n    good_objects = len(storage.list_dirs(root, ignore_hidden=True))\n\n    if validate_objects:\n        self.validate_objects(root)\n\n    if check_digests:\n        self.check_digests(root)\n\n    if show_warnings:\n        self.__print_warnings(storage)\n\n    return num_objects, good_objects", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if validate_objects:\n        self.validate_objects()\n    if check_digests:\n        self.validate_digests()\n    return self.validate_root_objects(show_warnings)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "ques_id": "62b45e515108cfac7f210a3c", "code": ["def initialize(self):\n    \n    \n    return self._init_with_defaults()", "def initialize(self):\n    \n    \n    self._ocfl_root = self._ocfl.new_ocfl_root()\n", "def initialize(self):\n    \n    \n    self._storage_root = OCFLStorageRoot(self)\n    self._storage_root.initialize()\n    self._storage_root.initialize_data()\n    self._storage_root.initialize_cache()\n    self._storage_root.initialize_cache_storage()\n    self._storage_root.initialize_cache_data_storage()\n    self._storage_root.initialize_cache_cache_storage()", "def initialize(self):\n    \n    \n    self.__init__(self.__storage_root__)\n", "def initialize(self):\n    \n    \n    if not self._initialized:\n        self._initialized = True\n        self._storage_root_path = self._storage_root.create()", "def initialize(self):\n    \n    \n    OCFL_STORAGE_ROOT = self._get_config()['OCFL_STORAGE_ROOT']\n    self._init_from_config(OCFL_STORAGE_ROOT)\n", "def initialize(self):\n    \n    \n    pass", "def initialize(self):\n    \n    \n    return ocfl_storage_root()", "def initialize(self):\n    \n    \n    self.__init__()", "def initialize(self):\n    \n    \n    return ocfl_storage_root()"], "level": "file_runnable", "generate_results": [{"generate_code": "def initialize(self):\n    \n    \n    return self._init_with_defaults()", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \n    \n    self._ocfl_root = self._ocfl.new_ocfl_root()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \n    \n    self._storage_root = OCFLStorageRoot(self)\n    self._storage_root.initialize()\n    self._storage_root.initialize_data()\n    self._storage_root.initialize_cache()\n    self._storage_root.initialize_cache_storage()\n    self._storage_root.initialize_cache_data_storage()\n    self._storage_root.initialize_cache_cache_storage()", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \n    \n    self.__init__(self.__storage_root__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \n    \n    if not self._initialized:\n        self._initialized = True\n        self._storage_root_path = self._storage_root.create()", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \n    \n    OCFL_STORAGE_ROOT = self._get_config()['OCFL_STORAGE_ROOT']\n    self._init_from_config(OCFL_STORAGE_ROOT)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \n    \n    pass", "is_pass": true, "return_code": 0}, {"generate_code": "def initialize(self):\n    \n    \n    return ocfl_storage_root()", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \n    \n    self.__init__()", "is_pass": true, "return_code": 0}, {"generate_code": "def initialize(self):\n    \n    \n    return ocfl_storage_root()", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "ques_id": "62b45e2eb89c9fd354170232", "code": ["def next_version(version):\n    if version == 0:\n        return 1\n    return version + 1", "def next_version(version):\n    if version == 0:\n        return 0\n    if version < 1:\n        return version + 1\n    return version\n", "def next_version(version):\n    if version.startswith('0'):\n        return version\n    return '0' + version\n", "def next_version(version):\n    return version + 1 if version and version[0] == '0' else version\n", "def next_version(version):\n    if version == 0:\n        return None\n    return int(version) + 1\n", "def next_version(version):\n    if version == 0:\n        return 0\n    else:\n        return version + 1\n", "def next_version(version):\n    return version[:2]\n", "def next_version(version):\n    prefix, version = version.split('.', 1)\n    if prefix == '0':\n        return version\n    else:\n        return '{}.0'.format(version)\n", "def next_version(version):\n    return '%s-%s' % (version[:2], version[3:])\n", "def next_version(version):\n    pattern = r'^(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)$'\n    m = re.match(pattern, version)\n    if m is None:\n        raise ValueError('Invalid version %s' % version)\n    return m.group('major'), m.group('minor'), m.group('patch')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def next_version(version):\n    if version == 0:\n        return 1\n    return version + 1", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version == 0:\n        return 0\n    if version < 1:\n        return version + 1\n    return version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version.startswith('0'):\n        return version\n    return '0' + version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    return version + 1 if version and version[0] == '0' else version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version == 0:\n        return None\n    return int(version) + 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version == 0:\n        return 0\n    else:\n        return version + 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    return version[:2]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    prefix, version = version.split('.', 1)\n    if prefix == '0':\n        return version\n    else:\n        return '{}.0'.format(version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    return '%s-%s' % (version[:2], version[3:])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    pattern = r'^(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)$'\n    m = re.match(pattern, version)\n    if m is None:\n        raise ValueError('Invalid version %s' % version)\n    return m.group('major'), m.group('minor'), m.group('patch')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "ques_id": "62b45e23e0d4551b0392c90a", "code": ["def validate_version_inventories(self, version_dirs):\n    if version_dirs is None:\n        return\n\n    for version_dir in version_dirs:\n        if not self.inventory.has_version_dir(version_dir):\n            raise InventoryException(\n                'Version {} in inventory does not exist'.format(version_dir))", "def validate_version_inventories(self, version_dirs):\n    pass\n", "def validate_version_inventories(self, version_dirs):\n    pass", "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError", "def validate_version_inventories(self, version_dirs):\n    pass\n", "def validate_version_inventories(self, version_dirs):\n    if len(version_dirs) > 1:\n        raise ValueError('Version inventory must have only one version directory name.')\n    if version_dirs[0]!= 'content':\n        raise ValueError('Version inventory must be a content version.')\n", "def validate_version_inventories(self, version_dirs):\n    for version_dir in version_dirs:\n        self.inventory_dirs.add(version_dir)\n        for path in self._find_inventory_paths(version_dir):\n            self._load_inventory(path, version_dir)\n            self._validate_inventory(version_dir)", "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError(\"validate_version_inventories\")\n", "def validate_version_inventories(self, version_dirs):\n    pass", "def validate_version_inventories(self, version_dirs):\n    pass"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_version_inventories(self, version_dirs):\n    if version_dirs is None:\n        return\n\n    for version_dir in version_dirs:\n        if not self.inventory.has_version_dir(version_dir):\n            raise InventoryException(\n                'Version {} in inventory does not exist'.format(version_dir))", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    if len(version_dirs) > 1:\n        raise ValueError('Version inventory must have only one version directory name.')\n    if version_dirs[0]!= 'content':\n        raise ValueError('Version inventory must be a content version.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    for version_dir in version_dirs:\n        self.inventory_dirs.add(version_dir)\n        for path in self._find_inventory_paths(version_dir):\n            self._load_inventory(path, version_dir)\n            self._validate_inventory(version_dir)", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    raise NotImplementedError(\"validate_version_inventories\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "ques_id": "62b45e21e0d4551b0392c8ed", "code": ["def find_path_type(path):\n    if os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'directory'\n    elif os.path.islink(path):\n        return 'link'\n    elif os.path.islink(os.path.join(path, '0=*')):\n        return 'link'\n    elif os.path.isdir(os.path.join(path, '0=*')):\n        return 'root'\n    else:\n        return 'object'\n", "def find_path_type(path):\n    path = os.path.abspath(path)\n    if not os.path.exists(path):\n        return 'root'\n    elif os.path.isdir(path):\n        return 'object'\n    elif os.path.isfile(path):\n        return 'file'\n    else:\n        return '*'\n", "def find_path_type(path):\n    if '*' in path:\n        return 'root'\n    elif '/' in path:\n        return 'object'\n    elif '\\\\' in path:\n        return 'file'\n    else:\n        return 'unknown'\n", "def find_path_type(path):\n    if '*' in path:\n        return 'root'\n    elif '/' in path:\n        return 'object'\n    elif '\\\\' in path:\n        return 'file'\n    else:\n        raise ValueError('Could not determine type of %s' % path)\n", "def find_path_type(path):\n\n    if os.path.isfile(path):\n        return \"file\"\n    elif os.path.isdir(path):\n        return \"root\"\n    else:\n        return \"object\"", "def find_path_type(path):\n    for item in path.split('/'):\n        if item == '0=*':\n            return 'root'\n        elif item in ('object', 'file'):\n            return 'object'\n        elif item.startswith('0='):\n            return 'file'\n    return 'file'", "def find_path_type(path):\n    if path.startswith(\"0:\"):\n        return \"root\"\n    elif path.startswith(\"1:\"):\n        return \"object\"\n    elif path.startswith(\"2:\"):\n        return \"file\"\n    else:\n        raise ValueError(\"Could not determine path type for path %s\" % path)\n", "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'root'\n    elif os.path.isfile(path):\n        return 'object'\n    elif os.path.isdir(path):\n        return 'file'\n    else:\n        return 'error'", "def find_path_type(path):\n    path = path.replace('\\\\', '/')\n    if path.startswith('0='):\n        return 'root'\n    elif os.path.isfile(path):\n        return 'object'\n    elif os.path.isdir(path):\n        return 'file'\n    else:\n        raise OCFLException(\"Cannot determine type of %s\" % path)", "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'root'\n    elif os.path.isfile(path):\n        return 'object'\n    else:\n        return 'file'"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_path_type(path):\n    if os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'directory'\n    elif os.path.islink(path):\n        return 'link'\n    elif os.path.islink(os.path.join(path, '0=*')):\n        return 'link'\n    elif os.path.isdir(os.path.join(path, '0=*')):\n        return 'root'\n    else:\n        return 'object'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    path = os.path.abspath(path)\n    if not os.path.exists(path):\n        return 'root'\n    elif os.path.isdir(path):\n        return 'object'\n    elif os.path.isfile(path):\n        return 'file'\n    else:\n        return '*'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if '*' in path:\n        return 'root'\n    elif '/' in path:\n        return 'object'\n    elif '\\\\' in path:\n        return 'file'\n    else:\n        return 'unknown'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if '*' in path:\n        return 'root'\n    elif '/' in path:\n        return 'object'\n    elif '\\\\' in path:\n        return 'file'\n    else:\n        raise ValueError('Could not determine type of %s' % path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n\n    if os.path.isfile(path):\n        return \"file\"\n    elif os.path.isdir(path):\n        return \"root\"\n    else:\n        return \"object\"", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    for item in path.split('/'):\n        if item == '0=*':\n            return 'root'\n        elif item in ('object', 'file'):\n            return 'object'\n        elif item.startswith('0='):\n            return 'file'\n    return 'file'", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if path.startswith(\"0:\"):\n        return \"root\"\n    elif path.startswith(\"1:\"):\n        return \"object\"\n    elif path.startswith(\"2:\"):\n        return \"file\"\n    else:\n        raise ValueError(\"Could not determine path type for path %s\" % path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'root'\n    elif os.path.isfile(path):\n        return 'object'\n    elif os.path.isdir(path):\n        return 'file'\n    else:\n        return 'error'", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    path = path.replace('\\\\', '/')\n    if path.startswith('0='):\n        return 'root'\n    elif os.path.isfile(path):\n        return 'object'\n    elif os.path.isdir(path):\n        return 'file'\n    else:\n        raise OCFLException(\"Cannot determine type of %s\" % path)", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'root'\n    elif os.path.isfile(path):\n        return 'object'\n    else:\n        return 'file'", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "ques_id": "62b45b396decaeff903e1001", "code": ["def amend_bzparams(self, params, bug_ids):\n    \n    \n    params[\"ids\"] = bug_ids\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    \n    \n    params['bug_ids'] = ','.join(bug_ids)\n    return params", "def amend_bzparams(self, params, bug_ids):\n    for bug_id in bug_ids:\n        params['id'] = bug_id\n        params['status'] = 'Open'\n        params['difficulty'] = 'Normal'\n        params['comment'] = ''\n        params['bug_type'] = 'Bug'\n        params['resolution'] = ''\n        params['importance'] = ''\n        params['priority'] = ''\n        params['severity'] = ''\n        params['status_change_date'] = ''\n        params['status_change_reason'] = ''\n        params['created_date'] = ''\n        params['updated_date'] = ''\n        params['version'] = ''", "def amend_bzparams(self, params, bug_ids):\n    for bz in bug_ids:\n        params['bz_id'] = bz\n        params['severity'] = 'INFO'\n        params['status'] = 'QUEUED'\n        params['bug_id'] = bz\n        params['description'] = ''\n        params['bug_id'] = bz\n        params['action'] = 'NEW'\n        params['status'] = 'QUEUED'\n        params['resolution'] = ''\n        params['status'] = 'CLOSED'\n        params['status'] = 'CLOSED'\n        params['status'] = 'CLOSED'\n        params['status'] = 'CLOSED'\n        params['status'] = 'CLOSED'", "def amend_bzparams(self, params, bug_ids):\n    \n    \n    if not bug_ids:\n        return params\n\n    if not isinstance(bug_ids, list):\n        bug_ids = [bug_ids]\n\n    params['bug_id'] = ','.join([str(i) for i in bug_ids])\n    return params", "def amend_bzparams(self, params, bug_ids):\n    \n    \n    params.update({\n        'bug_ids': bug_ids,\n    })\n    return params", "def amend_bzparams(self, params, bug_ids):\n    if bug_ids:\n        params['bug_ids'] = bug_ids\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    \n    \n    params['bug_ids'] = bug_ids\n    params['update'] = 'true'\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    params['bz_bug_ids'] = ','.join(bug_ids)\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    \n    \n    params['bug_ids'] = ','.join(bug_ids)\n    return params"], "level": "class_runnable", "generate_results": [{"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \n    \n    params[\"ids\"] = bug_ids\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \n    \n    params['bug_ids'] = ','.join(bug_ids)\n    return params", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    for bug_id in bug_ids:\n        params['id'] = bug_id\n        params['status'] = 'Open'\n        params['difficulty'] = 'Normal'\n        params['comment'] = ''\n        params['bug_type'] = 'Bug'\n        params['resolution'] = ''\n        params['importance'] = ''\n        params['priority'] = ''\n        params['severity'] = ''\n        params['status_change_date'] = ''\n        params['status_change_reason'] = ''\n        params['created_date'] = ''\n        params['updated_date'] = ''\n        params['version'] = ''", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    for bz in bug_ids:\n        params['bz_id'] = bz\n        params['severity'] = 'INFO'\n        params['status'] = 'QUEUED'\n        params['bug_id'] = bz\n        params['description'] = ''\n        params['bug_id'] = bz\n        params['action'] = 'NEW'\n        params['status'] = 'QUEUED'\n        params['resolution'] = ''\n        params['status'] = 'CLOSED'\n        params['status'] = 'CLOSED'\n        params['status'] = 'CLOSED'\n        params['status'] = 'CLOSED'\n        params['status'] = 'CLOSED'", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \n    \n    if not bug_ids:\n        return params\n\n    if not isinstance(bug_ids, list):\n        bug_ids = [bug_ids]\n\n    params['bug_id'] = ','.join([str(i) for i in bug_ids])\n    return params", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \n    \n    params.update({\n        'bug_ids': bug_ids,\n    })\n    return params", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if bug_ids:\n        params['bug_ids'] = bug_ids\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \n    \n    params['bug_ids'] = bug_ids\n    params['update'] = 'true'\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    params['bz_bug_ids'] = ','.join(bug_ids)\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \n    \n    params['bug_ids'] = ','.join(bug_ids)\n    return params", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b4567ed7d32e5b55cc83d9", "code": ["def deep_merge_nodes(nodes):')))))]))])]\n ]", "def deep_merge_nodes(nodes): )))))])]).])]\n returns", "def deep_merge_nodes(nodes):deep))))])])])]\n )", "def deep_merge_nodes(nodes):de))))])])]).", "def deep_merge_nodes(nodes):re))))])]).", "def deep_merge_nodes(nodes):')))])])])])]\n...", "def deep_merge_nodes(nodes):)))])])])]", "def deep_merge_nodes(nodes):deep)))])]).]).\n ))", "def deep_merge_nodes(nodes):)))))])])]).", "def deep_merge_nodes(nodes):deep))))])])])."], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):')))))]))])]\n ]", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes): )))))])]).])]\n returns", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):deep))))])])])]\n )", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):de))))])])]).", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):re))))])]).", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):')))])])])])]\n...", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):)))])])])]", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):deep)))])]).]).\n ))", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):)))))])])]).", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):deep))))])])]).", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b4567ad7d32e5b55cc83af", "code": ["def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        '--debug',\n        action='store_true',\n        help='enable debugging output',\n    )\n    return parser.parse_args(arguments)\n", "def parse_arguments(*arguments):\n    parser = ArgumentParser()\n\n    # Add all the arguments that were provided\n    for argument in arguments:\n        parser.add_argument(argument)\n\n    # Parse the arguments and return them as a argparse instance\n    return parser.parse_args()\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description=__doc__)\n    return parser.parse_args(arguments)", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        Generates a JSON list of all of the assets in the database.\n        \"\"\"\n    )\n    parser.add_argument(\n        \"--file\",\n        dest=\"file\",\n        required=True,\n        help=\"The path to the file with the assets in the database.\",\n    )\n    return parser.parse_args(arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\\\n        Simulates a simulation of a single population of samples from a\n        given population of samples.\n        \"\"\"\n    )\n    return parser.parse_args(arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--data-dir', default='./data', help='data directory')\n    parser.add_argument('--model-dir', default='./model', help='model directory')\n    parser.add_argument('--save-dir', default='./save', help='save directory')\n    parser.add_argument('--exp-name', default='default', help='experiment name')\n    return parser.parse_args(*arguments)", "def parse_arguments(*arguments):\n    parser = ArgumentParser(\n        description=__doc__,\n        formatter_class=RawDescriptionHelpFormatter,\n        epilog=EXAMPLE_EXAMPLE,\n        formatter_description='A simple example usage example.')\n    parser.add_argument(\n        '--cache', '-c',\n        help='The cache directory.',\n        default='.',\n        type=str,\n        metavar='DIR',\n        dest='cache')\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--version', action='version', version='%(prog)s'+ __version__)\n    parser.add_argument('--debug', action='store_true', default=False, help='Debug mode')\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description=__doc__)\n    parser.add_argument(\"--config\", action=\"store\", default=\"config.yaml\",\n                        help=\"Path to configuration file\")\n    parser.add_argument(\"--input\", action=\"store\", default=\"input.csv\",\n                        help=\"Path to input file\")\n    parser.add_argument(\"--output\", action=\"store\", default=\"output.csv\",\n                        help=\"Path to output file\")\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description='')\n    parser.add_argument('-v', '--verbose', action='store_true',\n                        help='Show debug messages')\n    parser.add_argument('-d', '--debug', action='store_true',\n                        help='Show debug messages')\n    parser.add_argument('-o', '--output', help='Output file')\n\n    return parser.parse_args(arguments)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        '--debug',\n        action='store_true',\n        help='enable debugging output',\n    )\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = ArgumentParser()\n\n    # Add all the arguments that were provided\n    for argument in arguments:\n        parser.add_argument(argument)\n\n    # Parse the arguments and return them as a argparse instance\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description=__doc__)\n    return parser.parse_args(arguments)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        Generates a JSON list of all of the assets in the database.\n        \"\"\"\n    )\n    parser.add_argument(\n        \"--file\",\n        dest=\"file\",\n        required=True,\n        help=\"The path to the file with the assets in the database.\",\n    )\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\\\n        Simulates a simulation of a single population of samples from a\n        given population of samples.\n        \"\"\"\n    )\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--data-dir', default='./data', help='data directory')\n    parser.add_argument('--model-dir', default='./model', help='model directory')\n    parser.add_argument('--save-dir', default='./save', help='save directory')\n    parser.add_argument('--exp-name', default='default', help='experiment name')\n    return parser.parse_args(*arguments)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = ArgumentParser(\n        description=__doc__,\n        formatter_class=RawDescriptionHelpFormatter,\n        epilog=EXAMPLE_EXAMPLE,\n        formatter_description='A simple example usage example.')\n    parser.add_argument(\n        '--cache', '-c',\n        help='The cache directory.',\n        default='.',\n        type=str,\n        metavar='DIR',\n        dest='cache')\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--version', action='version', version='%(prog)s'+ __version__)\n    parser.add_argument('--debug', action='store_true', default=False, help='Debug mode')\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description=__doc__)\n    parser.add_argument(\"--config\", action=\"store\", default=\"config.yaml\",\n                        help=\"Path to configuration file\")\n    parser.add_argument(\"--input\", action=\"store\", default=\"input.csv\",\n                        help=\"Path to input file\")\n    parser.add_argument(\"--output\", action=\"store\", default=\"output.csv\",\n                        help=\"Path to output file\")\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description='')\n    parser.add_argument('-v', '--verbose', action='store_true',\n                        help='Show debug messages')\n    parser.add_argument('-d', '--debug', action='store_true',\n                        help='Show debug messages')\n    parser.add_argument('-o', '--output', help='Output file')\n\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b45679d7d32e5b55cc83a9", "code": ["def parser_flags(parser):\n    return''.join(flag.value for flag in parser._actions)\n", "def parser_flags(parser):\n    return''.join([flag.name for flag in parser._actions if flag.nargs == 0])\n", "def parser_flags(parser):\n    return parser.format_help().replace('-h', '--help')\n", "def parser_flags(parser):\n    return''.join(parser._actions)\n", "def parser_flags(parser):\n    return''.join([str(f) for f in parser._get_flags()])", "def parser_flags(parser):\n    return''.join(parser._actions)", "def parser_flags(parser):\n    flags = []\n    for flag in parser._actions:\n        if isinstance(flag, argparse._StoreAction):\n            flags.append(flag.dest)\n        else:\n            flags.append(flag.default)\n    return''.join(flags)\n", "def parser_flags(parser):\n    return''.join('--{0}'.format(f) for f in parser._flags)\n", "def parser_flags(parser):\n    return \" \".join(parser.flags._flags)", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if getattr(arg, 'dest', None) is None:\n            flags.append('--%s' % arg.dest)\n        else:\n            flags.append('--%s=%s' % (arg.dest, arg.help or ''))\n    return''.join(flags)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    return''.join(flag.value for flag in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([flag.name for flag in parser._actions if flag.nargs == 0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return parser.format_help().replace('-h', '--help')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([str(f) for f in parser._get_flags()])", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(parser._actions)", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for flag in parser._actions:\n        if isinstance(flag, argparse._StoreAction):\n            flags.append(flag.dest)\n        else:\n            flags.append(flag.default)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join('--{0}'.format(f) for f in parser._flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return \" \".join(parser.flags._flags)", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if getattr(arg, 'dest', None) is None:\n            flags.append('--%s' % arg.dest)\n        else:\n            flags.append('--%s=%s' % (arg.dest, arg.help or ''))\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b45665d7d32e5b55cc8365", "code": ["def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(prog=\"sip-check\")\n    parser.add_argument(\"--version\", action=\"version\",\n                        version=\"%(prog)s {}\".format(__version__))\n    return vars(parser.parse_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--test_input_file\", help=\"Path to test input file\")\n    return parser.parse_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for arg in unparsed_arguments:\n        parser.add_argument(*arg.args, **arg.kwargs)\n\n    return parser.parse_args()\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Just a simple example\",\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n    )\n    return parser.parse_args(unparsed_arguments)", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for arg in unparsed_arguments:\n        parser.add_argument(*arg.args, **arg.kwargs)\n    return vars(parser.parse_args())\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--version\", \"-v\", action=\"version\", version=VERSION)\n    parser.add_argument(\n        \"--config\", \"-c\", default=None, type=str, help=\"Configuration file\"\n    )\n    return vars(parser.parse_args(*unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(dest=\"subcommand\")\n    for subcommand in __subcommands__:\n        subparser = subparsers.add_parser(subcommand)\n        for name, value in getattr(subcommand, \"__args__\", {}).items():\n            subparser.add_argument(name, **value)\n    for arg in unparsed_arguments:\n        subparser.add_argument(*arg.args, **arg.kwargs)\n    return vars(parser.parse_args())\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(*unparsed_arguments)\n    parser.add_argument(\n        '--config', '-c', default=DEFAULT_CONFIG_PATH, help='path to the configuration file'\n    )\n    parser.add_argument('--log-level', '-l', default=DEFAULT_LOG_LEVEL, help='log level')\n    return vars(parser.parse_args())\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(\n        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)\n    parser.add_argument(\n        \"--config-file\", required=True, help=\"Path to the configuration file\")\n    return parser.parse_known_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config', type=str, help='The path to the config file', required=True)\n    parser.add_argument('--log-level', type=str, help='The logging level to use (e.g. ERROR)', required=False,\n                        choices=['ERROR', 'WARNING', 'INFO', 'DEBUG'])\n    return vars(parser.parse_args(unparsed_arguments))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(prog=\"sip-check\")\n    parser.add_argument(\"--version\", action=\"version\",\n                        version=\"%(prog)s {}\".format(__version__))\n    return vars(parser.parse_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--test_input_file\", help=\"Path to test input file\")\n    return parser.parse_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for arg in unparsed_arguments:\n        parser.add_argument(*arg.args, **arg.kwargs)\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Just a simple example\",\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n    )\n    return parser.parse_args(unparsed_arguments)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for arg in unparsed_arguments:\n        parser.add_argument(*arg.args, **arg.kwargs)\n    return vars(parser.parse_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--version\", \"-v\", action=\"version\", version=VERSION)\n    parser.add_argument(\n        \"--config\", \"-c\", default=None, type=str, help=\"Configuration file\"\n    )\n    return vars(parser.parse_args(*unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(dest=\"subcommand\")\n    for subcommand in __subcommands__:\n        subparser = subparsers.add_parser(subcommand)\n        for name, value in getattr(subcommand, \"__args__\", {}).items():\n            subparser.add_argument(name, **value)\n    for arg in unparsed_arguments:\n        subparser.add_argument(*arg.args, **arg.kwargs)\n    return vars(parser.parse_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(*unparsed_arguments)\n    parser.add_argument(\n        '--config', '-c', default=DEFAULT_CONFIG_PATH, help='path to the configuration file'\n    )\n    parser.add_argument('--log-level', '-l', default=DEFAULT_LOG_LEVEL, help='log level')\n    return vars(parser.parse_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(\n        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)\n    parser.add_argument(\n        \"--config-file\", required=True, help=\"Path to the configuration file\")\n    return parser.parse_known_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config', type=str, help='The path to the config file', required=True)\n    parser.add_argument('--log-level', type=str, help='The logging level to use (e.g. ERROR)', required=False,\n                        choices=['ERROR', 'WARNING', 'INFO', 'DEBUG'])\n    return vars(parser.parse_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b45665d7d32e5b55cc8364", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    for subparser in subparsers.values():\n        parsed_arguments = subparser.parse_args(unparsed_arguments)\n        unparsed_arguments = unparsed_arguments.update(parsed_arguments)\n    return parsed_arguments, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    return {name: parse_argument_parser(argument, subparsers) for name, argument in unparsed_arguments.items()}\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser in subparsers.items():\n        result[subparser_name] = subparser.parse_known_args(unparsed_arguments)\n    return result, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    for subparser_name, subparser in subparsers.items():\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n    return parsed_arguments, subparsers.keys()\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for arg in unparsed_arguments:\n        arg = arg.replace('--', '')\n        arg = arg.replace('-', '_')\n        result[arg] = parse_subparser_argument(subparsers[arg], arg)\n    return result, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for action in subparsers.choices:\n        args, remaining = action.parse_known_args(unparsed_arguments)\n        parsed_arguments.update(args)\n        remaining_arguments += remaining\n    return parsed_arguments, remaining_arguments", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining = []\n    for name, parsed_argument in unparsed_arguments.items():\n        arguments[name] = parse_argument(parsed_argument, subparsers)\n        remaining.append(name)\n    return arguments, remaining\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for name, parser in subparsers.items():\n        result[name] = parser.parse_args(unparsed_arguments)\n    return result, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    for subparser_name, subparser in subparsers.items():\n        parsed_arguments[subparser_name] = subparser.parse_known_args(unparsed_arguments)\n    return parsed_arguments, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    return parse_arguments(unparsed_arguments, subparsers, [])\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    for subparser in subparsers.values():\n        parsed_arguments = subparser.parse_args(unparsed_arguments)\n        unparsed_arguments = unparsed_arguments.update(parsed_arguments)\n    return parsed_arguments, unparsed_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    return {name: parse_argument_parser(argument, subparsers) for name, argument in unparsed_arguments.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser in subparsers.items():\n        result[subparser_name] = subparser.parse_known_args(unparsed_arguments)\n    return result, unparsed_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    for subparser_name, subparser in subparsers.items():\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n    return parsed_arguments, subparsers.keys()\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for arg in unparsed_arguments:\n        arg = arg.replace('--', '')\n        arg = arg.replace('-', '_')\n        result[arg] = parse_subparser_argument(subparsers[arg], arg)\n    return result, unparsed_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for action in subparsers.choices:\n        args, remaining = action.parse_known_args(unparsed_arguments)\n        parsed_arguments.update(args)\n        remaining_arguments += remaining\n    return parsed_arguments, remaining_arguments", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining = []\n    for name, parsed_argument in unparsed_arguments.items():\n        arguments[name] = parse_argument(parsed_argument, subparsers)\n        remaining.append(name)\n    return arguments, remaining\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for name, parser in subparsers.items():\n        result[name] = parser.parse_args(unparsed_arguments)\n    return result, unparsed_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    for subparser_name, subparser in subparsers.items():\n        parsed_arguments[subparser_name] = subparser.parse_known_args(unparsed_arguments)\n    return parsed_arguments, unparsed_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    return parse_arguments(unparsed_arguments, subparsers, [])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b45665d7d32e5b55cc8363", "code": ["def make_parsers():\n    parser = argparse.ArgumentParser(description='Extract data from an unpacked archive')\n    subparsers = parser.add_subparsers(dest='subcommand')\n    for subcommand in _get_subcommands():\n        subcommand.add_parser(subparsers)\n    return parser, subparsers", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(help='Subcommands')\n    build_parser(subparsers)\n    return parser, subparsers", "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"Test the results of a test.\")\n    subparsers = parser.add_subparsers(dest=\"test_command\")\n    test_command_parser = subparsers.add_parser(\"test_command\")\n    test_command_parser.set_defaults(func=main)\n    return parser, subparsers", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n    add_common_parsers(subparsers)\n    return parser, subparsers", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test a remote git repository.')\n\n    subparsers = parser.add_subparsers(\n        title='Commands',\n        dest='command',\n        metavar='COMMAND',\n        help='Command to run on a remote repository.')\n\n    for command in ['install', 'list', 'uninstall']:\n        subparser = subparsers.add_parser(\n            command,\n            help='Run a command in a remote repository.')\n        subparser.set_defaults(command=command)\n        setattr(subparser, 'func', run)\n\n    return parser, subparsers\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Install the given packages with pip')\n    subparsers = parser.add_subparsers(dest='subcommand')\n    install_packages(subparsers)\n    return parser, subparsers\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description='File validator')\n    subparsers = parser.add_subparsers()\n    add_file_parser(subparsers)\n    add_arguments(subparsers)\n    return (parser, subparsers)", "def make_parsers():\n    parser = argparse.ArgumentParser(prog='generate_summary_parser', description='Build a summary parser')\n    subparsers = parser.add_subparsers(title='Subcommands', dest='subcommand')\n    for subcommand in SUBCOMMANDS:\n        subcommand.add_parser(subparsers)\n    return parser, subparsers\n", "def make_parsers():\n    parser = ArgumentParser(description='testing parser')\n    parser.add_argument('--foo', action='store_true', default=False)\n    subparsers = parser.add_subparsers(title='subcommands')\n    return parser, subparsers\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description='Convert a.csv file to a.json file.')\n    parser.add_argument('input_file', help='The input.csv file.')\n    parser.add_argument('output_file', help='The output.json file.')\n    return parser.parse_args()"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description='Extract data from an unpacked archive')\n    subparsers = parser.add_subparsers(dest='subcommand')\n    for subcommand in _get_subcommands():\n        subcommand.add_parser(subparsers)\n    return parser, subparsers", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(help='Subcommands')\n    build_parser(subparsers)\n    return parser, subparsers", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"Test the results of a test.\")\n    subparsers = parser.add_subparsers(dest=\"test_command\")\n    test_command_parser = subparsers.add_parser(\"test_command\")\n    test_command_parser.set_defaults(func=main)\n    return parser, subparsers", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n    add_common_parsers(subparsers)\n    return parser, subparsers", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test a remote git repository.')\n\n    subparsers = parser.add_subparsers(\n        title='Commands',\n        dest='command',\n        metavar='COMMAND',\n        help='Command to run on a remote repository.')\n\n    for command in ['install', 'list', 'uninstall']:\n        subparser = subparsers.add_parser(\n            command,\n            help='Run a command in a remote repository.')\n        subparser.set_defaults(command=command)\n        setattr(subparser, 'func', run)\n\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Install the given packages with pip')\n    subparsers = parser.add_subparsers(dest='subcommand')\n    install_packages(subparsers)\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description='File validator')\n    subparsers = parser.add_subparsers()\n    add_file_parser(subparsers)\n    add_arguments(subparsers)\n    return (parser, subparsers)", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(prog='generate_summary_parser', description='Build a summary parser')\n    subparsers = parser.add_subparsers(title='Subcommands', dest='subcommand')\n    for subcommand in SUBCOMMANDS:\n        subcommand.add_parser(subparsers)\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = ArgumentParser(description='testing parser')\n    parser.add_argument('--foo', action='store_true', default=False)\n    subparsers = parser.add_subparsers(title='subcommands')\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description='Convert a.csv file to a.json file.')\n    parser.add_argument('input_file', help='The input.csv file.')\n    parser.add_argument('output_file', help='The output.json file.')\n    return parser.parse_args()", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b438ba66fea644fe22cca2", "code": ["def deep_merge_nodes(nodes):deep))))])])])])])\n returns", "def deep_merge_nodes(nodes):))))])])])..", "def deep_merge_nodes(nodes):))))])]).]).\n...]\n    returnso.", "def deep_merge_nodes(nodes):deep)))))])])].\n )\n returns is as a a a s a return a return.", "def deep_merge_nodes(nodes):f)))))])]).])]", "def deep_merge_nodes(nodes):)))))])])]).\n... ...", "def deep_merge_nodes(nodes):))))])])]).\n...", "def deep_merge_nodes(nodes):'))))]))]).", "def deep_merge_nodes(nodes):'))))])])])]).", "def deep_merge_nodes(nodes):f_node)))]))]).]).\n  )"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):deep))))])])])])])\n returns", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):))))])])])..", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):))))])]).]).\n...]\n    returnso.", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):deep)))))])])].\n )\n returns is as a a a s a return a return.", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):f)))))])]).])]", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):)))))])])]).\n... ...", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):))))])])]).\n...", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):'))))]))]).", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):'))))])])])]).", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):f_node)))]))]).]).\n  )", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b438b666fea644fe22cc78", "code": ["def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--config\", dest=\"config\",\n                        help=\"The configuration file to use when running the script.\")\n    parser.add_argument(\"--test\", dest=\"test\",\n                        help=\"The test file to use when running the script.\")\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = ArgumentParser()\n\n    for arg in arguments:\n        parser.add_argument(arg)\n\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--version', action='version', version='%(prog)s'+ VERSION)\n    parser.add_argument('--config', default='./config.ini', help='configuration file for the database')\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description='Run the script')\n\n    # Required arguments\n    parser.add_argument(\n        '--input_file',\n        dest='input_file',\n        type=str,\n        required=True,\n        help='Path to the input file')\n    parser.add_argument(\n        '--output_file',\n        dest='output_file',\n        type=str,\n        required=True,\n        help='Path to the output file')\n\n    return parser.parse_args(arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--fname', help='The file to read from')\n    parser.add_argument('--output', help='The file to write to')\n    parser.add_argument('--separator', help='The separator to use',\n                        default='\\t')\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser(description=\"\"\"\n    This script will run the given command-line arguments and return the results\n    as an ArgumentParser instance.\n\n    \"\"\")\n\n    parser.add_argument(\"-d\", \"--directory\", help=\"\"\"\n    The directory in which to store the generated csv files.\n\n    \"\"\", type=str, required=True)\n\n    return parser.parse_args(arguments)\n", "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser(\n        description='Create a Git branch for a Repo'\n    )\n    parser.add_argument(\n        '--branch-name', '-b', required=True, help='The name of the branch'\n    )\n\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description='Find the most important node in a graph')\n    parser.add_argument('--save_dir', type=str, default='./', help='Path to the directory where the data is saved')\n    parser.add_argument('--output_file', type=str, default='./', help='Path to the file where the nodes are saved')\n    parser.add_argument('--top_k', type=int, default=1, help='The top k nodes to output')\n    return parser.parse_args(arguments)\n", "def parse_arguments(*arguments):\n    parser = ArgumentParser(*arguments)\n    return parser.parse_args()", "def parse_arguments(*arguments):\n    parser = ArgumentParser(\n        description=\"Generate a hash of the passwords in the specified files\"\n    )\n    return parser.parse_args(arguments)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--config\", dest=\"config\",\n                        help=\"The configuration file to use when running the script.\")\n    parser.add_argument(\"--test\", dest=\"test\",\n                        help=\"The test file to use when running the script.\")\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = ArgumentParser()\n\n    for arg in arguments:\n        parser.add_argument(arg)\n\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--version', action='version', version='%(prog)s'+ VERSION)\n    parser.add_argument('--config', default='./config.ini', help='configuration file for the database')\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description='Run the script')\n\n    # Required arguments\n    parser.add_argument(\n        '--input_file',\n        dest='input_file',\n        type=str,\n        required=True,\n        help='Path to the input file')\n    parser.add_argument(\n        '--output_file',\n        dest='output_file',\n        type=str,\n        required=True,\n        help='Path to the output file')\n\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--fname', help='The file to read from')\n    parser.add_argument('--output', help='The file to write to')\n    parser.add_argument('--separator', help='The separator to use',\n                        default='\\t')\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser(description=\"\"\"\n    This script will run the given command-line arguments and return the results\n    as an ArgumentParser instance.\n\n    \"\"\")\n\n    parser.add_argument(\"-d\", \"--directory\", help=\"\"\"\n    The directory in which to store the generated csv files.\n\n    \"\"\", type=str, required=True)\n\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser(\n        description='Create a Git branch for a Repo'\n    )\n    parser.add_argument(\n        '--branch-name', '-b', required=True, help='The name of the branch'\n    )\n\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description='Find the most important node in a graph')\n    parser.add_argument('--save_dir', type=str, default='./', help='Path to the directory where the data is saved')\n    parser.add_argument('--output_file', type=str, default='./', help='Path to the file where the nodes are saved')\n    parser.add_argument('--top_k', type=int, default=1, help='The top k nodes to output')\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = ArgumentParser(*arguments)\n    return parser.parse_args()", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = ArgumentParser(\n        description=\"Generate a hash of the passwords in the specified files\"\n    )\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b438b666fea644fe22cc72", "code": ["def parser_flags(parser):\n    return''.join(['--%s' % a for a in parser._actions])\n", "def parser_flags(parser):\n    return''.join([\n        str(arg) for arg in parser.parse_args()\n    ])\n", "def parser_flags(parser):\n    return''.join(parser._action_groups)\n", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if hasattr(arg, 'dest'):\n            flags.append('--{}'.format(arg.dest))\n        elif hasattr(arg, 'flags'):\n            flags.extend(parser_flags(arg))\n    return''.join(flags)\n", "def parser_flags(parser):\n    return''.join(flag for flag in parser._get_flags() if flag.startswith('-'))\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        flags +='{}'.format(arg.dest)\n    return flags\n", "def parser_flags(parser):\n    return parser._get_flags()", "def parser_flags(parser):\n    return''.join(['--' + flag for flag in parser._actions])\n", "def parser_flags(parser):\n    return \" \".join([\"--{}\".format(f) for f in parser.flags])\n", "def parser_flags(parser):\n    return''.join([x.name for x in parser._actions])\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    return''.join(['--%s' % a for a in parser._actions])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([\n        str(arg) for arg in parser.parse_args()\n    ])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(parser._action_groups)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if hasattr(arg, 'dest'):\n            flags.append('--{}'.format(arg.dest))\n        elif hasattr(arg, 'flags'):\n            flags.extend(parser_flags(arg))\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(flag for flag in parser._get_flags() if flag.startswith('-'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        flags +='{}'.format(arg.dest)\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return parser._get_flags()", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(['--' + flag for flag in parser._actions])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return \" \".join([\"--{}\".format(f) for f in parser.flags])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([x.name for x in parser._actions])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "ques_id": "62b438b566fea644fe22cc70", "code": ["def bash_completion():\n    return \"\\n\".join(\n        \"    %s %s %s\"\n        % (\n            arg.lstrip().replace(\"-\", \"_\"),\n            command,\n            \" \".join(\n                [\n                    \"--%s\" % key.lstrip().replace(\"-\", \"_\")\n                    for key in argv\n                ]\n            ),\n        )\n        for arg in sys.argv\n    )\n", "def bash_completion():\n    parser = argparse.ArgumentParser(description=__doc__)\n    parser.add_argument('command', help='The command to run.')\n    argcomplete.autocomplete(parser)\n    args = parser.parse_args()\n    return''.join(args.command)", "def bash_completion():\n    parser = argparse.ArgumentParser(\n        description='A completion script for the borgmatic command.')\n    subparsers = parser.add_subparsers(\n        dest='command', metavar='COMMAND', required=True)\n\n    _add_command_args(subparsers)\n\n    return parser.format_help()\n", "def bash_completion():\n    return '\\n'.join(['    --command=%s' % arg for arg in bash_command_args()])\n", "def bash_completion():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"command\", nargs='?', help=\"The command to complete.\")\n    return parser.parse_args()[0]\n", "def bash_completion():\n    return \"\"\"\\\n        bash -c \"import borgmatic; print(\" \".join(borgmatic.__doc__.split())); \"\"\"\n", "def bash_completion():\n    return \"\\n\".join(_bash_completion)\n", "def bash_completion():\n    return \"\\n\".join(\n        \"    --bash-completion {}\".format(arg)\n        for arg in sorted(Borgmatic.bash_completion_options)\n    )\n", "def bash_completion():\n    return '\\n'.join(\n       '   {0} {1}'.format(name, value)\n        for name, value in bash_completion_map().items()\n    )\n", "def bash_completion():\n    return '\\n'.join(' '.join(comp.split()) for comp in bash_command_completions())\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def bash_completion():\n    return \"\\n\".join(\n        \"    %s %s %s\"\n        % (\n            arg.lstrip().replace(\"-\", \"_\"),\n            command,\n            \" \".join(\n                [\n                    \"--%s\" % key.lstrip().replace(\"-\", \"_\")\n                    for key in argv\n                ]\n            ),\n        )\n        for arg in sys.argv\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = argparse.ArgumentParser(description=__doc__)\n    parser.add_argument('command', help='The command to run.')\n    argcomplete.autocomplete(parser)\n    args = parser.parse_args()\n    return''.join(args.command)", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = argparse.ArgumentParser(\n        description='A completion script for the borgmatic command.')\n    subparsers = parser.add_subparsers(\n        dest='command', metavar='COMMAND', required=True)\n\n    _add_command_args(subparsers)\n\n    return parser.format_help()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return '\\n'.join(['    --command=%s' % arg for arg in bash_command_args()])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"command\", nargs='?', help=\"The command to complete.\")\n    return parser.parse_args()[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return \"\"\"\\\n        bash -c \"import borgmatic; print(\" \".join(borgmatic.__doc__.split())); \"\"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return \"\\n\".join(_bash_completion)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return \"\\n\".join(\n        \"    --bash-completion {}\".format(arg)\n        for arg in sorted(Borgmatic.bash_completion_options)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return '\\n'.join(\n       '   {0} {1}'.format(name, value)\n        for name, value in bash_completion_map().items()\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return '\\n'.join(' '.join(comp.split()) for comp in bash_command_completions())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b438a266fea644fe22cc2e", "code": ["def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n\n    # Add the arguments from the command-line\n    for name, argument in unparsed_arguments:\n        parser.add_argument(name, **argument.kwargs)\n\n    return vars(parser.parse_args())\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for argument in unparsed_arguments:\n        parser.add_argument(argument.name, **argument.kwargs)\n    return vars(parser.parse_args())\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for name, args in unparsed_arguments:\n        parser.add_argument(name, **args)\n    return vars(parser.parse_args())\n", "def parse_arguments(*unparsed_arguments):\n    parser = get_parser()\n    return parser.parse_args(unparsed_arguments)", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    add_subparsers(parser)\n    return vars(parser.parse_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = create_parser()\n    return parse_known_args(parser, *unparsed_arguments)", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    return parser.parse_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(\n        description='Script to collect and parse input data from a serial '\n                    'device.')\n\n    parser.add_argument('--version', action='version', version='%(prog)s'+\n                        __version__)\n    parser.add_argument('--csv', action='store_true', help='Parse CSV instead of '\n                        'JSON.')\n\n    return vars(parser.parse_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    return parse_command_line_arguments(*unparsed_arguments)[0]", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for arg in unparsed_arguments:\n        parser.add_argument(*arg.args, **arg.kwargs)\n    return vars(parser.parse_args())\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n\n    # Add the arguments from the command-line\n    for name, argument in unparsed_arguments:\n        parser.add_argument(name, **argument.kwargs)\n\n    return vars(parser.parse_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for argument in unparsed_arguments:\n        parser.add_argument(argument.name, **argument.kwargs)\n    return vars(parser.parse_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for name, args in unparsed_arguments:\n        parser.add_argument(name, **args)\n    return vars(parser.parse_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = get_parser()\n    return parser.parse_args(unparsed_arguments)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    add_subparsers(parser)\n    return vars(parser.parse_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = create_parser()\n    return parse_known_args(parser, *unparsed_arguments)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    return parser.parse_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(\n        description='Script to collect and parse input data from a serial '\n                    'device.')\n\n    parser.add_argument('--version', action='version', version='%(prog)s'+\n                        __version__)\n    parser.add_argument('--csv', action='store_true', help='Parse CSV instead of '\n                        'JSON.')\n\n    return vars(parser.parse_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return parse_command_line_arguments(*unparsed_arguments)[0]", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for arg in unparsed_arguments:\n        parser.add_argument(*arg.args, **arg.kwargs)\n    return vars(parser.parse_args())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b438a266fea644fe22cc2d", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    subparsers_by_name = {}\n    for subparser_name, subparser in subparsers.iteritems():\n        subparsers_by_name[subparser_name] = subparser\n\n    return parse_subparser_arguments_from_namespaces(unparsed_arguments, subparsers_by_name)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for arg in unparsed_arguments:\n        parsed_arguments[arg.name] = arg.parse(subparsers)\n        remaining_arguments.append(arg)\n    return parsed_arguments, remaining_arguments", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    args = dict()\n    for arg in unparsed_arguments:\n        args.update(parse_subparser_argument(arg, subparsers))\n    return args, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser in subparsers.items():\n        result[subparser_name] = subparser.parse_args(unparsed_arguments)\n    return result, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    args = {}\n    remaining_args = []\n    for arg in unparsed_arguments:\n        args[arg.name] = arg\n        remaining_args.append(arg)\n    return args, remaining_args\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    for subparser_name in unparsed_arguments:\n        subparser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments[subparser_name])\n    return parsed_arguments, subparser.remaining_args()\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser in subparsers.items():\n        result[subparser_name] = subparser.parse_args(unparsed_arguments)\n    return result, unparsed_arguments", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    for subparser_name, subparser in subparsers.items():\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n    return parsed_arguments, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for arg in unparsed_arguments:\n        parsed_arguments[arg.name] = arg\n        remaining_arguments.append(arg)\n    return parsed_arguments, remaining_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    unparsed_arguments = [\n        arg for arg in unparsed_arguments if arg is not None]\n    return parse_arguments(unparsed_arguments, subparsers)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    subparsers_by_name = {}\n    for subparser_name, subparser in subparsers.iteritems():\n        subparsers_by_name[subparser_name] = subparser\n\n    return parse_subparser_arguments_from_namespaces(unparsed_arguments, subparsers_by_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for arg in unparsed_arguments:\n        parsed_arguments[arg.name] = arg.parse(subparsers)\n        remaining_arguments.append(arg)\n    return parsed_arguments, remaining_arguments", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    args = dict()\n    for arg in unparsed_arguments:\n        args.update(parse_subparser_argument(arg, subparsers))\n    return args, unparsed_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser in subparsers.items():\n        result[subparser_name] = subparser.parse_args(unparsed_arguments)\n    return result, unparsed_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    args = {}\n    remaining_args = []\n    for arg in unparsed_arguments:\n        args[arg.name] = arg\n        remaining_args.append(arg)\n    return args, remaining_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    for subparser_name in unparsed_arguments:\n        subparser = subparsers[subparser_name]\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments[subparser_name])\n    return parsed_arguments, subparser.remaining_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser in subparsers.items():\n        result[subparser_name] = subparser.parse_args(unparsed_arguments)\n    return result, unparsed_arguments", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    for subparser_name, subparser in subparsers.items():\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n    return parsed_arguments, unparsed_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for arg in unparsed_arguments:\n        parsed_arguments[arg.name] = arg\n        remaining_arguments.append(arg)\n    return parsed_arguments, remaining_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    unparsed_arguments = [\n        arg for arg in unparsed_arguments if arg is not None]\n    return parse_arguments(unparsed_arguments, subparsers)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b438a266fea644fe22cc2c", "code": ["def make_parsers():\n    parser = make_parser()\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description='Scrape Web Analytics data from the website.')\n    subparsers = parser.add_subparsers(help='Sub-command help.')\n    return parser, subparsers\n", "def make_parsers():\n    parser = ArgumentParser()\n    subparsers = parser.add_subparsers()\n\n    # Build the top-level command parser.\n    build_command_parser(subparsers)\n\n    return parser, subparsers\n", "def make_parsers():\n    parser = make_argparser()\n    subparsers = parser.add_subparsers(title='subcommands')\n    return parser, subparsers\n", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n    return parser, subparsers\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description='A tool to extract eclipse scans')\n    subparsers = parser.add_subparsers(title='Sub-commands')\n\n    extract_parser = subparsers.add_parser('extract', help='Extract eclipse scans')\n    extract_parser.add_argument('-f', '--file', help='The input file', required=True)\n    extract_parser.add_argument('-o', '--output', help='The output file', required=True)\n    extract_parser.set_defaults(func=extract)\n\n    return (parser, subparsers)\n", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n    subparsers.required = True\n    return parser, subparsers\n", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(help='Commands to manage', dest='cmd')\n    return (parser, subparsers)\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description='Simple Python Parser')\n    subparsers = parser.add_subparsers()\n    for sub_parser in [\n            'list',\n            'create',\n            'delete',\n            'help',\n           'version',\n            'exit'\n            ]:\n        subparser = subparsers.add_parser(sub_parser)\n        subparser.set_defaults(func=main)\n    return parser, subparsers\n", "def make_parsers():\n    parser = ArgumentParser(\n        description='Fetch the latest data from ISO 3166-1 codes',\n        formatter_class=ArgumentDefaultsHelpFormatter,\n    )\n    parser.add_argument(\n        '--force', action='store_true',\n        help='Force the download of the data.  You can only download a new version if you are updating a new version.'\n    )\n    return parser.parse_args()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    parser = make_parser()\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description='Scrape Web Analytics data from the website.')\n    subparsers = parser.add_subparsers(help='Sub-command help.')\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = ArgumentParser()\n    subparsers = parser.add_subparsers()\n\n    # Build the top-level command parser.\n    build_command_parser(subparsers)\n\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = make_argparser()\n    subparsers = parser.add_subparsers(title='subcommands')\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description='A tool to extract eclipse scans')\n    subparsers = parser.add_subparsers(title='Sub-commands')\n\n    extract_parser = subparsers.add_parser('extract', help='Extract eclipse scans')\n    extract_parser.add_argument('-f', '--file', help='The input file', required=True)\n    extract_parser.add_argument('-o', '--output', help='The output file', required=True)\n    extract_parser.set_defaults(func=extract)\n\n    return (parser, subparsers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n    subparsers.required = True\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(help='Commands to manage', dest='cmd')\n    return (parser, subparsers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description='Simple Python Parser')\n    subparsers = parser.add_subparsers()\n    for sub_parser in [\n            'list',\n            'create',\n            'delete',\n            'help',\n           'version',\n            'exit'\n            ]:\n        subparser = subparsers.add_parser(sub_parser)\n        subparser.set_defaults(func=main)\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = ArgumentParser(\n        description='Fetch the latest data from ISO 3166-1 codes',\n        formatter_class=ArgumentDefaultsHelpFormatter,\n    )\n    parser.add_argument(\n        '--force', action='store_true',\n        help='Force the download of the data.  You can only download a new version if you are updating a new version.'\n    )\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_10.py", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "ques_id": "62ece4982e6aefcf4aabbd5f", "code": ["def paging(response, max_results):\n    for i in range(0, len(response), max_results):\n        yield response[i:i + max_results]", "def paging(response, max_results):\n    for i in range(0, len(response), max_results):\n        yield response[i:i + max_results]\n", "def paging(response, max_results):\n    page = 0\n    while page <= max_results:\n        yield response[page]\n        page += 1\n", "def paging(response, max_results):\n\n    page = 1\n    while page <= max_results:\n        for result in response[page - 1]:\n            yield result\n        page += 1\n", "def paging(response, max_results):\n    if max_results > len(response):\n        max_results = len(response)\n    return (response[i:i + max_results] for i in range(0, len(response), max_results))\n", "def paging(response, max_results):\n    while len(response) > max_results:\n        response = response[:max_results]\n        yield response\n", "def paging(response, max_results):\n    page = 1\n    while page <= max_results:\n        yield response[page * max_results:(page + 1) * max_results]\n        page += 1\n", "def paging(response, max_results):\n    for page in range(1, max_results + 1):\n        for page_number in range(1, page + 1):\n            yield response[page_number * max_results:page_number * max_results + max_results]\n", "def paging(response, max_results):\n    return itertools.islice(response, 0, max_results)\n", "def paging(response, max_results):\n    for page in range(1, max_results + 1):\n        for item in response:\n            yield item\n        if page == max_results:\n            break\n"], "level": "self_contained", "generate_results": [{"generate_code": "def paging(response, max_results):\n    for i in range(0, len(response), max_results):\n        yield response[i:i + max_results]", "is_pass": true, "return_code": 0}, {"generate_code": "def paging(response, max_results):\n    for i in range(0, len(response), max_results):\n        yield response[i:i + max_results]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def paging(response, max_results):\n    page = 0\n    while page <= max_results:\n        yield response[page]\n        page += 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n\n    page = 1\n    while page <= max_results:\n        for result in response[page - 1]:\n            yield result\n        page += 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    if max_results > len(response):\n        max_results = len(response)\n    return (response[i:i + max_results] for i in range(0, len(response), max_results))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def paging(response, max_results):\n    while len(response) > max_results:\n        response = response[:max_results]\n        yield response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    page = 1\n    while page <= max_results:\n        yield response[page * max_results:(page + 1) * max_results]\n        page += 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    for page in range(1, max_results + 1):\n        for page_number in range(1, page + 1):\n            yield response[page_number * max_results:page_number * max_results + max_results]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    return itertools.islice(response, 0, max_results)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    for page in range(1, max_results + 1):\n        for item in response:\n            yield item\n        if page == max_results:\n            break\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_20.py", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "ques_id": "62ece4982e6aefcf4aabbd60", "code": ["def size_to_bytes(size: str) -> int:\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"]:\n        if size.endswith(unit):\n            return int(float(size[:-len(unit)]))\n    raise ValueError(\"Couldn't convert size to bytes: {}\".format(size))\n", "def size_to_bytes(size: str) -> int:\n    if isinstance(size, float):\n        return int(size)\n\n    size = size.lower()\n    if size.endswith(\"g\"):\n        size = size[:-1]\n    if size.endswith(\"m\"):\n        size = size[:-1]\n\n    return int(round(float(size) * 1024 ** 3))\n", "def size_to_bytes(size: str) -> int:\n    return int(size)\n", "def size_to_bytes(size: str) -> int:\n    return int(round(Decimal(size).quantize(Decimal('0.001'), rounding=ROUND_HALF_UP)))\n", "def size_to_bytes(size: str) -> int:\n    if size is None or size.strip() == '':\n        return 0\n\n    return int(round(float(size) / 1024.0, 0))\n", "def size_to_bytes(size: str) -> int:\n    size = size.strip().upper()\n    if size == \"B\":\n        return 1\n    elif size == \"K\":\n        return 1000\n    elif size == \"M\":\n        return 1000000\n    elif size == \"G\":\n        return 1000000000\n    elif size == \"T\":\n        return 1000000000000\n    else:\n        raise ValueError(\"Invalid size: \" + size)\n", "def size_to_bytes(size: str) -> int:\n    try:\n        return int(size) * 1024\n    except ValueError:\n        raise ValueError(f\"Invalid file size: {size}\")", "def size_to_bytes(size: str) -> int:\n    for unit in (\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"):\n        if size.endswith(unit):\n            size = size[:-len(unit)]\n            return int(float(size) * 1024 ** 3)\n    raise ValueError(\"Invalid size string: %s\" % size)\n", "def size_to_bytes(size: str) -> int:\n    size_map = {\"M\": 1000, \"G\": 1000000, \"T\": 1000000000}\n    try:\n        return int(size) * size_map[size.upper()]\n    except KeyError:\n        raise ValueError(\"Not a valid file size\")\n", "def size_to_bytes(size: str) -> int:\n    try:\n        return int(size)\n    except ValueError:\n        pass\n\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\"]:\n        if size.endswith(unit):\n            size = size[:-len(unit)]\n            return int(size)\n\n    raise ValueError(\"Couldn't parse file size\")\n"], "level": "self_contained", "generate_results": [{"generate_code": "def size_to_bytes(size: str) -> int:\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"]:\n        if size.endswith(unit):\n            return int(float(size[:-len(unit)]))\n    raise ValueError(\"Couldn't convert size to bytes: {}\".format(size))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    if isinstance(size, float):\n        return int(size)\n\n    size = size.lower()\n    if size.endswith(\"g\"):\n        size = size[:-1]\n    if size.endswith(\"m\"):\n        size = size[:-1]\n\n    return int(round(float(size) * 1024 ** 3))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    return int(size)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    return int(round(Decimal(size).quantize(Decimal('0.001'), rounding=ROUND_HALF_UP)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    if size is None or size.strip() == '':\n        return 0\n\n    return int(round(float(size) / 1024.0, 0))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    size = size.strip().upper()\n    if size == \"B\":\n        return 1\n    elif size == \"K\":\n        return 1000\n    elif size == \"M\":\n        return 1000000\n    elif size == \"G\":\n        return 1000000000\n    elif size == \"T\":\n        return 1000000000000\n    else:\n        raise ValueError(\"Invalid size: \" + size)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    try:\n        return int(size) * 1024\n    except ValueError:\n        raise ValueError(f\"Invalid file size: {size}\")", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for unit in (\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"):\n        if size.endswith(unit):\n            size = size[:-len(unit)]\n            return int(float(size) * 1024 ** 3)\n    raise ValueError(\"Invalid size string: %s\" % size)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    size_map = {\"M\": 1000, \"G\": 1000000, \"T\": 1000000000}\n    try:\n        return int(size) * size_map[size.upper()]\n    except KeyError:\n        raise ValueError(\"Not a valid file size\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    try:\n        return int(size)\n    except ValueError:\n        pass\n\n    for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\"]:\n        if size.endswith(unit):\n            size = size[:-len(unit)]\n            return int(size)\n\n    raise ValueError(\"Couldn't parse file size\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_14.py", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "ques_id": "62ece4982e6aefcf4aabbd61", "code": ["def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "def _dictsum(dicts):\n    return dict((k, sum(v)) for k, v in dicts)\n", "def _dictsum(dicts):\n    result = {}\n    for d in dicts:\n        result.update(d)\n    return result", "def _dictsum(dicts):\n    return dict((k, sum(v)) for k, v in dicts)", "def _dictsum(dicts):\n    return dict(sum(((dict((d.items() if hasattr(d, 'items') else d)) if hasattr(d, 'items') else d),) if hasattr(d, 'items') else () for d in dicts),)\n", "def _dictsum(dicts):\n    return _dict(reduce(operator.add, map(_dict, dicts)))\n", "def _dictsum(dicts):\n    return reduce(lambda d, k: d.update({k: d.get(k) + d.get(k)}) or d, dicts, {})\n", "def _dictsum(dicts):\n    return reduce(operator.add, (dicts[0][k] for k in dicts[0].keys()), {})\n", "def _dictsum(dicts):\n    return dict(reduce(lambda x, y: x.__add__(y), dicts, {}))\n", "def _dictsum(dicts):\n    return {k: sum(v) for k, v in dicts}\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _dictsum(dicts):\n    return dict(sum(d.items(), ()) for d in dicts)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict((k, sum(v)) for k, v in dicts)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    result = {}\n    for d in dicts:\n        result.update(d)\n    return result", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict((k, sum(v)) for k, v in dicts)", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(sum(((dict((d.items() if hasattr(d, 'items') else d)) if hasattr(d, 'items') else d),) if hasattr(d, 'items') else () for d in dicts),)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return _dict(reduce(operator.add, map(_dict, dicts)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return reduce(lambda d, k: d.update({k: d.get(k) + d.get(k)}) or d, dicts, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return reduce(operator.add, (dicts[0][k] for k in dicts[0].keys()), {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return dict(reduce(lambda x, y: x.__add__(y), dicts, {}))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return {k: sum(v) for k, v in dicts}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_15.py", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "ques_id": "62ece4982e6aefcf4aabbd62", "code": ["def _replace_url_args(url, url_args):\n    return url.format(**url_args)\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.iteritems():\n        url = url.replace('{' + key + '}', value)\n    return url\n", "def _replace_url_args(url, url_args):\n    \n    \n    for arg in url_args:\n        url = url.replace(arg, url_args[arg])\n    return url\n", "def _replace_url_args(url, url_args):\n    return url.format(**url_args)", "def _replace_url_args(url, url_args):\n    \n    \n    for arg in url_args:\n        if isinstance(url_args[arg], six.string_types):\n            url = url.replace(arg, url_args[arg])\n    return url\n", "def _replace_url_args(url, url_args):\n    \n    \n    return url.format(**url_args)\n", "def _replace_url_args(url, url_args):\n    for k, v in url_args.items():\n        if isinstance(v, str):\n            url = url.replace(\"{\" + k + \"}\", v)\n        else:\n            url = url.replace(\"{\" + k + \"}\", str(v))\n    return url\n", "def _replace_url_args(url, url_args):\n    for k, v in url_args.items():\n        url = url.replace(\"{{{}}}\".format(k), str(v))\n    return url\n", "def _replace_url_args(url, url_args):\n    return url.format(**url_args)\n", "def _replace_url_args(url, url_args):\n    \n    \n    return url.format(**url_args)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_url_args(url, url_args):\n    return url.format(**url_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.iteritems():\n        url = url.replace('{' + key + '}', value)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    \n    \n    for arg in url_args:\n        url = url.replace(arg, url_args[arg])\n    return url\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _replace_url_args(url, url_args):\n    return url.format(**url_args)", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    \n    \n    for arg in url_args:\n        if isinstance(url_args[arg], six.string_types):\n            url = url.replace(arg, url_args[arg])\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    \n    \n    return url.format(**url_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for k, v in url_args.items():\n        if isinstance(v, str):\n            url = url.replace(\"{\" + k + \"}\", v)\n        else:\n            url = url.replace(\"{\" + k + \"}\", str(v))\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for k, v in url_args.items():\n        url = url.replace(\"{{{}}}\".format(k), str(v))\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    return url.format(**url_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    \n    \n    return url.format(**url_args)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_5.py", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "ques_id": "62ece4982e6aefcf4aabbd63", "code": ["def is_none_string(val: str) -> bool:\n    return val == \"None\"\n", "def is_none_string(val: Any) -> bool:\n    return val is None\n", "def is_none_string(val: str) -> bool:\n    return val == 'None'\n", "def is_none_string(val: str) -> bool:\n    return val.lower() == \"none\"\n", "def is_none_string(val: str) -> bool:\n    return val.lower() == 'none'\n", "def is_none_string(val: str) -> bool:\n    return val in (\"\", \"None\", \"none\")\n", "def is_none_string(val: str) -> bool:\n    return val in ('None', 'None None')\n", "def is_none_string(val: str) -> bool:\n    \n    \n    return val.strip() == \"\"\n", "def is_none_string(val: str) -> bool:\n    return val in (\"\", None, \"none\", \"None\", \"none\", \"\", \"none\")\n", "def is_none_string(val: str) -> bool:\n    return val.lower() in (\"none\", \"none or empty\", \"none or empty or empty\")\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_none_string(val: str) -> bool:\n    return val == \"None\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: Any) -> bool:\n    return val is None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val == 'None'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val.lower() == \"none\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val.lower() == 'none'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val in (\"\", \"None\", \"none\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val in ('None', 'None None')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    \n    \n    return val.strip() == \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val in (\"\", None, \"none\", \"None\", \"none\", \"\", \"none\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val.lower() in (\"none\", \"none or empty\", \"none or empty or empty\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_1.py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "ques_id": "62ece4982e6aefcf4aabbd64", "code": ["def strip_root(path, root):\n    if root == \"/\":\n        return path\n    else:\n        if root == \"//\":\n            return path\n        else:\n            return path + \"/\" + root\n", "def strip_root(path, root):\n    if path.startswith(root):\n        return path[len(root):]\n    else:\n        raise ValueError(\"{} is not in {}\".format(path, root))\n", "def strip_root(path, root):\n    if path == root:\n        return path\n    if path == \"/\":\n        return root\n    if path.startswith(root + \"/\"):\n        return path[len(root) + 1 :]\n    raise ValueError(\"%s is not a valid root\" % path)\n", "def strip_root(path, root):\n    if not path:\n        return path\n    elif path == root:\n        return path\n    else:\n        return path.replace(root, '')\n", "def strip_root(path, root):\n    if path.startswith(root):\n        path = path[len(root):]\n    return path\n", "def strip_root(path, root):\n    if root in path:\n        return path.replace(root, '')\n    return path\n", "def strip_root(path, root):\n    if path == root:\n        return path\n    if path.startswith(root):\n        return path[len(root):]\n    return path\n", "def strip_root(path, root):\n    if not os.path.isabs(path):\n        raise Exception(\"Path not absolute: %s\" % path)\n    if path == root:\n        return path\n    if path.startswith(root):\n        return path[len(root):]\n    raise Exception(\"Path is not under root: %s\" % path)", "def strip_root(path, root):\n    \n    \n    if not root:\n        return path\n    if path.startswith(root):\n        return path[len(root):]\n    return path\n", "def strip_root(path, root):\n    if not path.startswith(root):\n        raise ValueError(\"Not root {}\".format(root))\n    path = path[len(root):]\n    return path\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def strip_root(path, root):\n    if root == \"/\":\n        return path\n    else:\n        if root == \"//\":\n            return path\n        else:\n            return path + \"/\" + root\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path.startswith(root):\n        return path[len(root):]\n    else:\n        raise ValueError(\"{} is not in {}\".format(path, root))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == root:\n        return path\n    if path == \"/\":\n        return root\n    if path.startswith(root + \"/\"):\n        return path[len(root) + 1 :]\n    raise ValueError(\"%s is not a valid root\" % path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not path:\n        return path\n    elif path == root:\n        return path\n    else:\n        return path.replace(root, '')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path.startswith(root):\n        path = path[len(root):]\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if root in path:\n        return path.replace(root, '')\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == root:\n        return path\n    if path.startswith(root):\n        return path[len(root):]\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not os.path.isabs(path):\n        raise Exception(\"Path not absolute: %s\" % path)\n    if path == root:\n        return path\n    if path.startswith(root):\n        return path[len(root):]\n    raise Exception(\"Path is not under root: %s\" % path)", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    \n    \n    if not root:\n        return path\n    if path.startswith(root):\n        return path[len(root):]\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not path.startswith(root):\n        raise ValueError(\"Not root {}\".format(root))\n    path = path[len(root):]\n    return path\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_8.py", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62ece4982e6aefcf4aabbd65", "code": ["def parser_flags(parser):\n    return''.join(parser._flags)\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.dest == '--':\n            continue\n        flags +='' + arg.dest\n    return flags\n", "def parser_flags(parser):\n    return''.join(['--{}'.format(a.replace('_', '-')) for a in parser._actions])\n", "def parser_flags(parser):\n    flags = []\n    for flag in parser._actions:\n        if isinstance(flag, argparse._StoreAction):\n            flags.append(flag.dest)\n        elif isinstance(flag, argparse._StoreFlag):\n            flags.append(flag.dest)\n        else:\n            flags.append('--' + flag.dest)\n    return''.join(flags)\n", "def parser_flags(parser):\n    return''.join(f.name for f in parser._actions)\n", "def parser_flags(parser):\n    return''.join(parser._flags)\n", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if hasattr(arg, 'dest'):\n            flags.append('--' + arg.dest.replace('_', '-'))\n        else:\n            flags.append(arg.action)\n    return''.join(flags)\n", "def parser_flags(parser):\n    return''.join(flag for flag in parser._get_args())\n", "def parser_flags(parser):\n    return''.join(parser._actions)\n", "def parser_flags(parser):\n    return \" \".join([str(f) for f in parser.flags])\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    return''.join(parser._flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.dest == '--':\n            continue\n        flags +='' + arg.dest\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(['--{}'.format(a.replace('_', '-')) for a in parser._actions])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for flag in parser._actions:\n        if isinstance(flag, argparse._StoreAction):\n            flags.append(flag.dest)\n        elif isinstance(flag, argparse._StoreFlag):\n            flags.append(flag.dest)\n        else:\n            flags.append('--' + flag.dest)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(f.name for f in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(parser._flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if hasattr(arg, 'dest'):\n            flags.append('--' + arg.dest.replace('_', '-'))\n        else:\n            flags.append(arg.action)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(flag for flag in parser._get_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return \" \".join([str(f) for f in parser.flags])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_19.py", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "ques_id": "62ece4982e6aefcf4aabbd66", "code": ["def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n\n    processed.add(path_name)\n    if verbose:\n        print(\"Adding {} to processed set\".format(path_name))\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print('[!] {} already processed'.format(path_name))\n        return True\n    processed.add(path_name)\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if verbose:\n        print('Checking if {} already processed in {}.'.format(path_name, processed))\n    return path_name in processed\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Skipping {}, already processed\".format(path_name))\n        return True\n    processed.add(path_name)\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n    else:\n        processed.add(path_name)\n        return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print('Added pathname:'+ path_name)\n        return False\n", "def was_processed(processed, path_name, verbose):\n    if verbose:\n        print(\"checking for {} in the set\".format(path_name))\n    if path_name in processed:\n        return True\n    processed.add(path_name)\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n\n    processed.add(path_name)\n    if verbose:\n        print(\"adding {} to processed set\".format(path_name))\n\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n    processed.add(path_name)\n    if verbose:\n        print('        {} is already in the set'.format(path_name))\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n    processed.add(path_name)\n    if verbose:\n        print(\"Processed {}\".format(path_name))\n    return False\n"], "level": "self_contained", "generate_results": [{"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n\n    processed.add(path_name)\n    if verbose:\n        print(\"Adding {} to processed set\".format(path_name))\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print('[!] {} already processed'.format(path_name))\n        return True\n    processed.add(path_name)\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if verbose:\n        print('Checking if {} already processed in {}.'.format(path_name, processed))\n    return path_name in processed\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Skipping {}, already processed\".format(path_name))\n        return True\n    processed.add(path_name)\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n    else:\n        processed.add(path_name)\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print('Added pathname:'+ path_name)\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if verbose:\n        print(\"checking for {} in the set\".format(path_name))\n    if path_name in processed:\n        return True\n    processed.add(path_name)\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n\n    processed.add(path_name)\n    if verbose:\n        print(\"adding {} to processed set\".format(path_name))\n\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n    processed.add(path_name)\n    if verbose:\n        print('        {} is already in the set'.format(path_name))\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        return True\n    processed.add(path_name)\n    if verbose:\n        print(\"Processed {}\".format(path_name))\n    return False\n", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_9.py", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "ques_id": "62ece4982e6aefcf4aabbd67", "code": ["def vertex3tuple(vertices):\n    # return [(x,y) for (x,y) in vertices]\n    return [(vertices[0], vertices[1]), (vertices[2], vertices[3])]\n", "def vertex3tuple(vertices):\n    return tuple([vertices[i] for i in range(1, len(vertices))])\n", "def vertex3tuple(vertices):\n    return tuple(vertex3tuple_iter(vertices))", "def vertex3tuple(vertices):\n    return tuple([vertices[i] for i in range(0, 3)])\n", "def vertex3tuple(vertices):\n    return tuple((v, v+1, v+2) for v in vertices)", "def vertex3tuple(vertices):\n    return tuple((vertices[i], vertices[i+1], vertices[i+2]) for i in range(len(vertices)-1))", "def vertex3tuple(vertices):\n    pts = []\n    for i in range(len(vertices) - 1):\n        pts.append(vertices[i])\n        pts.append(vertices[i + 1])\n    return tuple(pts)\n", "def vertex3tuple(vertices):\n    return tuple([vertices[0], vertices[1], vertices[2]])\n", "def vertex3tuple(vertices):\n    return tuple(map(tuple, zip(vertices[0::3], vertices[1::3], vertices[2::3])))\n", "def vertex3tuple(vertices):\n    return tuple(zip(vertices[0::3], vertices[1::3], vertices[2::3]))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def vertex3tuple(vertices):\n    # return [(x,y) for (x,y) in vertices]\n    return [(vertices[0], vertices[1]), (vertices[2], vertices[3])]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple([vertices[i] for i in range(1, len(vertices))])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple(vertex3tuple_iter(vertices))", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple([vertices[i] for i in range(0, 3)])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple((v, v+1, v+2) for v in vertices)", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple((vertices[i], vertices[i+1], vertices[i+2]) for i in range(len(vertices)-1))", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    pts = []\n    for i in range(len(vertices) - 1):\n        pts.append(vertices[i])\n        pts.append(vertices[i + 1])\n    return tuple(pts)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple([vertices[0], vertices[1], vertices[2]])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple(map(tuple, zip(vertices[0::3], vertices[1::3], vertices[2::3])))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple(zip(vertices[0::3], vertices[1::3], vertices[2::3]))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_6.py", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd68", "code": ["def int_to_string(number: int, alphabet: List[int]) -> str:\n    result = ''\n    while number > 0:\n        result = alphabet[number % len(alphabet)] + result\n        number //= len(alphabet)\n    return result\n", "def int_to_string(number: int, alphabet: str) -> str:\n    return alphabet[number]\n", "def int_to_string(number: int, alphabet: str) -> str:\n    if number == 0:\n        return '0'\n    result = []\n    while number:\n        result.append(alphabet[number % len(alphabet)])\n        number //= len(alphabet)\n    result.reverse()\n    return ''.join(result)\n", "def int_to_string(number: int, alphabet: str) -> str:\n    return alphabet[number]", "def int_to_string(number: int, alphabet: str) -> str:\n    return alphabet[number % len(alphabet)]\n", "def int_to_string(number: int, alphabet: str = \"0123456789ABCDEF\") -> str:\n    return str(number).zfill(len(alphabet))\n", "def int_to_string(number: int, alphabet: str) -> str:\n    if number < 0:\n        raise ValueError(\"Input value must be non-negative\")\n    return alphabet[number]\n", "def int_to_string(number: int, alphabet: str) -> str:\n    return ''.join([alphabet[int(c)] for c in str(number)])\n", "def int_to_string(number: int, alphabet: str = '0123456789') -> str:\n    if number < 0:\n        raise ValueError('Number must be non-negative.')\n    result = []\n    while number > 0:\n        result.append(alphabet[number % len(alphabet)])\n        number //= len(alphabet)\n    result.reverse()\n    return ''.join(result)\n", "def int_to_string(number: int, alphabet: str = '0123456789') -> str:\n    return alphabet[number]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def int_to_string(number: int, alphabet: List[int]) -> str:\n    result = ''\n    while number > 0:\n        result = alphabet[number % len(alphabet)] + result\n        number //= len(alphabet)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    return alphabet[number]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    if number == 0:\n        return '0'\n    result = []\n    while number:\n        result.append(alphabet[number % len(alphabet)])\n        number //= len(alphabet)\n    result.reverse()\n    return ''.join(result)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    return alphabet[number]", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    return alphabet[number % len(alphabet)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str = \"0123456789ABCDEF\") -> str:\n    return str(number).zfill(len(alphabet))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    if number < 0:\n        raise ValueError(\"Input value must be non-negative\")\n    return alphabet[number]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str) -> str:\n    return ''.join([alphabet[int(c)] for c in str(number)])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str = '0123456789') -> str:\n    if number < 0:\n        raise ValueError('Number must be non-negative.')\n    result = []\n    while number > 0:\n        result.append(alphabet[number % len(alphabet)])\n        number //= len(alphabet)\n    result.reverse()\n    return ''.join(result)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: str = '0123456789') -> str:\n    return alphabet[number]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_12.py", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "ques_id": "62ece4982e6aefcf4aabbd69", "code": ["def _replace_register(flow_params, register_number, register_value):\n    for k, v in flow_params.items():\n        if k == \"flows\":\n            flow_params[k][register_number] = v\n        elif k == \"register_value\":\n            flow_params[k][register_number] = register_value\n", "def _replace_register(flow_params, register_number, register_value):\n    for key in flow_params.keys():\n        if key == \"register_value\":\n            flow_params[key] = flow_params[key].replace(register_number, register_value)\n        else:\n            flow_params[key] = flow_params[key].replace(register_value, \"\")\n", "def _replace_register(flow_params, register_number, register_value):\n    for key, flow_dict in flow_params.items():\n        if key == 'flows':\n            flow_params[key] = flow_dict['flows'][register_number]\n        elif key == 'parameters':\n            flow_params[key] = flow_dict['parameters'][register_number]\n        else:\n            flow_params[key] = flow_dict[register_number][key]\n", "def _replace_register(flow_params, register_number, register_value):\n    if not isinstance(flow_params, dict):\n        raise ValueError(\"flow_params is not a dictionary\")\n\n    if register_value in flow_params:\n        flow_params[register_number] = flow_params[register_value]\n        del flow_params[register_value]\n", "def _replace_register(flow_params, register_number, register_value):\n    for k, v in flow_params.items():\n        if v['register_number'] == register_number:\n            flow_params[k]['register_value'] = register_value\n            break\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_number in flow_params:\n        flow_params[register_number] = flow_params[register_number].replace(\n            flow_params[register_value], register_value)\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params[\"registers\"]:\n        flow_params[\"registers\"][register_value] = flow_params[\"registers\"][register_number]\n        del flow_params[\"registers\"][register_number]\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params['registers']:\n        flow_params['registers'][register_value] = flow_params['registers'][register_value]\n        del flow_params['registers'][register_value]\n", "def _replace_register(flow_params, register_number, register_value):\n    for flow_param in flow_params:\n        if flow_param[\"request_name\"] == \"register\":\n            if flow_param[\"register_number\"] == register_number:\n                flow_param[\"register_value\"] = register_value\n                break\n", "def _replace_register(flow_params, register_number, register_value):\n    for key, value in flow_params.items():\n        if key == register_number:\n            flow_params[key] = value\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for k, v in flow_params.items():\n        if k == \"flows\":\n            flow_params[k][register_number] = v\n        elif k == \"register_value\":\n            flow_params[k][register_number] = register_value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for key in flow_params.keys():\n        if key == \"register_value\":\n            flow_params[key] = flow_params[key].replace(register_number, register_value)\n        else:\n            flow_params[key] = flow_params[key].replace(register_value, \"\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for key, flow_dict in flow_params.items():\n        if key == 'flows':\n            flow_params[key] = flow_dict['flows'][register_number]\n        elif key == 'parameters':\n            flow_params[key] = flow_dict['parameters'][register_number]\n        else:\n            flow_params[key] = flow_dict[register_number][key]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if not isinstance(flow_params, dict):\n        raise ValueError(\"flow_params is not a dictionary\")\n\n    if register_value in flow_params:\n        flow_params[register_number] = flow_params[register_value]\n        del flow_params[register_value]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for k, v in flow_params.items():\n        if v['register_number'] == register_number:\n            flow_params[k]['register_value'] = register_value\n            break\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_number in flow_params:\n        flow_params[register_number] = flow_params[register_number].replace(\n            flow_params[register_value], register_value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params[\"registers\"]:\n        flow_params[\"registers\"][register_value] = flow_params[\"registers\"][register_number]\n        del flow_params[\"registers\"][register_number]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params['registers']:\n        flow_params['registers'][register_value] = flow_params['registers'][register_value]\n        del flow_params['registers'][register_value]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for flow_param in flow_params:\n        if flow_param[\"request_name\"] == \"register\":\n            if flow_param[\"register_number\"] == register_number:\n                flow_param[\"register_value\"] = register_value\n                break\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for key, value in flow_params.items():\n        if key == register_number:\n            flow_params[key] = value\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_2.py", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "ques_id": "62ece4982e6aefcf4aabbd6a", "code": ["def replace_dots(value, arg):\n    \n    \n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return re.sub('\\.', arg, value)", "def replace_dots(value, arg):\n    \n    \n    return value.replace('.', arg)", "def replace_dots(value, arg):\n    return value.replace('.', arg)", "def replace_dots(value, arg):\n    \n    \n    return value.replace(\".\", arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)", "def replace_dots(value, arg):\n    return value.replace('.', arg)", "def replace_dots(value, arg):\n    \n    \n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def replace_dots(value, arg):\n    \n    \n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return re.sub('\\.', arg, value)", "is_pass": false, "return_code": 1}, {"generate_code": "def replace_dots(value, arg):\n    \n    \n    return value.replace('.', arg)", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    \n    \n    return value.replace(\".\", arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    \n    \n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_3.py", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "ques_id": "62ece4982e6aefcf4aabbd6b", "code": ["def subclasses(cls):\n    \n    \n    if not issubclass(cls, object):\n        return []\n\n    return [cls] + [subclasses(cls) for c in cls.__subclasses__()]\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    \n    \n    if not issubclass(cls, type):\n        raise TypeError(\"Can only call subclasses() on classes\")\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]", "def subclasses(cls):\n    return [subclass for subclass in cls.__subclasses__() if not subclass.__name__.startswith('_')]\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    \n    \n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    return [s for s in cls.__subclasses__() if not s.__bases__ == (object,)]\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def subclasses(cls):\n    \n    \n    if not issubclass(cls, object):\n        return []\n\n    return [cls] + [subclasses(cls) for c in cls.__subclasses__()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    \n    \n    if not issubclass(cls, type):\n        raise TypeError(\"Can only call subclasses() on classes\")\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return [subclass for subclass in cls.__subclasses__() if not subclass.__name__.startswith('_')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    \n    \n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return [s for s in cls.__subclasses__() if not s.__bases__ == (object,)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_7.py", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd6d", "code": ["def string_to_int(string: str, alphabet: str) -> int:\n    return sum(map(lambda c: alphabet.index(c) if c in alphabet else 0, string))", "def string_to_int(string: str, alphabet: str = ALPHABET) -> int:\n    return int(''.join([alphabet[i] for i in string]))\n", "def string_to_int(string: str, alphabet: str) -> int:\n    return sum((alphabet.index(x) for x in string))\n", "def string_to_int(string: str, alphabet: str = string.ascii_uppercase) -> int:\n    return sum(alphabet.index(c) * (26 ** idx) for idx, c in enumerate(string))\n", "def string_to_int(string: str, alphabet: str) -> int:\n    return int(string, 0)\n", "def string_to_int(string: str, alphabet: str = ALPHABET) -> int:\n    return sum((alphabet.index(char) for char in string))\n", "def string_to_int(string: str, alphabet: str) -> int:\n    return int(string, base=alphabet.index(string[0]))\n", "def string_to_int(string: str, alphabet: str = '0123456789') -> int:\n    string = string.replace(' ', '')\n    if not string:\n        return 0\n    result = 0\n    for s in string:\n        result = result * len(alphabet) + alphabet.index(s)\n    return result\n", "def string_to_int(string: str, alphabet: str) -> int:\n    return sum([(alphabet.index(char) + 1) * (len(alphabet) - (alphabet.index(char) + 1))\n                for char in string])\n", "def string_to_int(string: str, alphabet: str) -> int:\n    return int(string) - (string[-1] == '1') * (alphabet.index(string[-1]) + 1)"], "level": "self_contained", "generate_results": [{"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    return sum(map(lambda c: alphabet.index(c) if c in alphabet else 0, string))", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: str = ALPHABET) -> int:\n    return int(''.join([alphabet[i] for i in string]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    return sum((alphabet.index(x) for x in string))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: str = string.ascii_uppercase) -> int:\n    return sum(alphabet.index(c) * (26 ** idx) for idx, c in enumerate(string))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    return int(string, 0)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str = ALPHABET) -> int:\n    return sum((alphabet.index(char) for char in string))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    return int(string, base=alphabet.index(string[0]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str = '0123456789') -> int:\n    string = string.replace(' ', '')\n    if not string:\n        return 0\n    result = 0\n    for s in string:\n        result = result * len(alphabet) + alphabet.index(s)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    return sum([(alphabet.index(char) + 1) * (len(alphabet) - (alphabet.index(char) + 1))\n                for char in string])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: str) -> int:\n    return int(string) - (string[-1] == '1') * (alphabet.index(string[-1]) + 1)", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_24.py", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "ques_id": "62ece4982e6aefcf4aabbd6f", "code": ["def get_repo_archive(url: str, destination_path: Path) -> Path:\n    if url.endswith('.tar.gz'):\n        return get_repo_archive_tar(url, destination_path)\n    return get_repo_archive_tar(url, destination_path)\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    with tarfile.open(str(destination_path), \"r:gz\") as tar:\n        tar.extractall(path=str(destination_path))\n\n    return Path(destination_path)\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    # TODO: Add support for other paths.\n    return destination_path / f\"{url.split(\"/\")[-1]}.tar.gz\"\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_path = destination_path / Path(\"desc\")\n    if not archive_path.exists():\n        _download_tarball(url, destination_path)\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive = urllib.request.urlopen(url)\n    with tarfile.open(fileobj=archive) as tar:\n        tar.extractall(destination_path)\n    return Path(destination_path)\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    tarball_name = url.split(\"/\")[-1]\n    return download_tarball(url, destination_path, tarball_name)\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    r = requests.get(url, stream=True)\n    for i, repo in enumerate(r.iter_content(1024)):\n        if i % 100 == 0:\n            logger.info(f\"Processed {i} of {len(r.iter_content(1024))} repo archives\")\n        with destination_path.open(\"wb\") as f:\n            f.write(repo)\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive_path = Path(destination_path) / Path(url.split('/')[-1]).split('.')[0] / 'desc.tar.gz'\n    archive_path.unlink()\n    extract_tarball(url, archive_path)\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive_path = pathlib.Path(destination_path)\n\n    if not archive_path.exists():\n        tarball = tarfile.open(url, \"r:gz\")\n        tarball.extractall(path=destination_path)\n        tarball.close()\n\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: str) -> Path:\n    return download_tarball(url, destination_path)"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    if url.endswith('.tar.gz'):\n        return get_repo_archive_tar(url, destination_path)\n    return get_repo_archive_tar(url, destination_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    with tarfile.open(str(destination_path), \"r:gz\") as tar:\n        tar.extractall(path=str(destination_path))\n\n    return Path(destination_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    # TODO: Add support for other paths.\n    return destination_path / f\"{url.split(\"/\")[-1]}.tar.gz\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_path = destination_path / Path(\"desc\")\n    if not archive_path.exists():\n        _download_tarball(url, destination_path)\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive = urllib.request.urlopen(url)\n    with tarfile.open(fileobj=archive) as tar:\n        tar.extractall(destination_path)\n    return Path(destination_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    tarball_name = url.split(\"/\")[-1]\n    return download_tarball(url, destination_path, tarball_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    r = requests.get(url, stream=True)\n    for i, repo in enumerate(r.iter_content(1024)):\n        if i % 100 == 0:\n            logger.info(f\"Processed {i} of {len(r.iter_content(1024))} repo archives\")\n        with destination_path.open(\"wb\") as f:\n            f.write(repo)\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive_path = Path(destination_path) / Path(url.split('/')[-1]).split('.')[0] / 'desc.tar.gz'\n    archive_path.unlink()\n    extract_tarball(url, archive_path)\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> Path:\n    archive_path = pathlib.Path(destination_path)\n\n    if not archive_path.exists():\n        tarball = tarfile.open(url, \"r:gz\")\n        tarball.extractall(path=destination_path)\n        tarball.close()\n\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> Path:\n    return download_tarball(url, destination_path)", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_20.py", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "ques_id": "62ece4982e6aefcf4aabbd70", "code": ["def os_is_mac():\n    return sys.platform.startswith(\"darwin\")\n", "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return sys.platform == 'darwin'\n", "def os_is_mac():\n    return platform.system() == 'Darwin'", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return platform.system() == \"Darwin\"", "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return sys.platform.startswith(\"darwin\")\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def os_is_mac():\n    return sys.platform.startswith(\"darwin\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform == 'darwin'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return platform.system() == 'Darwin'", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith(\"darwin\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_14.py", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "ques_id": "62ece4982e6aefcf4aabbd71", "code": ["def regex_dict(item):\n    return {\n        key: re.compile(value) if isinstance(value, str) else value\n        for key, value in item.items()\n    }\n", "def regex_dict(item):\n    return {k.replace('*.', '[.]'): v for k, v in item.items()}\n", "def regex_dict(item):\n    return {\n        key: re.compile(key + '$') if key!= '*.h' else key\n        for key in item\n    }\n", "def regex_dict(item):\n    return {\n        key: re.compile('^' + regex + '$') for key, regex in item.items()\n    }\n", "def regex_dict(item):\n    return dict((k, re.compile(v)) for k, v in item.items())", "def regex_dict(item):\n    return {re.sub('\\.cpp$', '.regex', key): value for key, value in item.items()}\n", "def regex_dict(item):\n    return {k: regex_key(v) for k, v in item.items()}\n", "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "def regex_dict(item):\n    return {k: re.sub(r'\\.(\\w+)$', r'\\1.', v) for k, v in item.items()}\n", "def regex_dict(item):\n    for k, v in item.items():\n        if k == '*.h' or k.endswith('.h'):\n            item[k] = re.compile(v)\n    return item\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def regex_dict(item):\n    return {\n        key: re.compile(value) if isinstance(value, str) else value\n        for key, value in item.items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k.replace('*.', '[.]'): v for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {\n        key: re.compile(key + '$') if key!= '*.h' else key\n        for key in item\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {\n        key: re.compile('^' + regex + '$') for key, regex in item.items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return dict((k, re.compile(v)) for k, v in item.items())", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {re.sub('\\.cpp$', '.regex', key): value for key, value in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: regex_key(v) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.sub(r'\\.(\\w+)$', r'\\1.', v) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    for k, v in item.items():\n        if k == '*.h' or k.endswith('.h'):\n            item[k] = re.compile(v)\n    return item\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_4.py", "name": "unquote", "docstring": "Remove quote from the given name.", "ques_id": "62ece4982e6aefcf4aabbd72", "code": ["def unquote(name):\n    if name[0] in \"'\\\"\":\n        return name[1:-1]\n    else:\n        return name\n", "def unquote(name):\n    if name[0] == '\"' and name[-1] == '\"':\n        return name[1:-1]\n    return name\n", "def unquote(name):\n    if name[0] == '\"':\n        return name[1:-1]\n    else:\n        return name\n", "def unquote(name):\n    return name[1:-1]\n", "def unquote(name):\n    return name[1:-1]\n", "def unquote(name):\n    return name[1:-1]\n", "def unquote(name):\n    if name[0] == '\"' and name[-1] == '\"':\n        return name[1:-1]\n    else:\n        return name\n", "def unquote(name):\n    if name[0] == '\"' and name[-1] == '\"':\n        name = name[1:-1]\n    return name\n", "def unquote(name):\n    \n    \n    if name[0] == name[-1] == '\"':\n        return name[1:-1]\n    return name", "def unquote(name):\n    return name[1:-1]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def unquote(name):\n    if name[0] in \"'\\\"\":\n        return name[1:-1]\n    else:\n        return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == '\"' and name[-1] == '\"':\n        return name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == '\"':\n        return name[1:-1]\n    else:\n        return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return name[1:-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return name[1:-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return name[1:-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == '\"' and name[-1] == '\"':\n        return name[1:-1]\n    else:\n        return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == '\"' and name[-1] == '\"':\n        name = name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    \n    \n    if name[0] == name[-1] == '\"':\n        return name[1:-1]\n    return name", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return name[1:-1]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_21.py", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "ques_id": "62ece4982e6aefcf4aabbd73", "code": ["def split(s, platform='this'):\n    # TODO: remove platform argument when all platforms support it.\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return shlex.split(s, posix=True)\n    elif platform == 'windows':\n        return shlex.split(s, posix=False)\n    else:\n        return shlex.split(s)\n", "def split(s, platform='this'):\n    return shlex.split(s, regex=REGEX[platform])\n", "def split(s, platform='this'):\n    return [x for x in shlex.split(s, posix=(platform == 'posix'))]\n", "def split(s, platform='this'):\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return shlex.split(' '.join(s.split()))\n    elif platform == 'windows':\n        return shlex.split(' '.join(s.split('\\\\')))\n    else:\n        return shlex.split(s)\n", "def split(s, platform='this'):\n    return re.split(r'(\\W|^)' if platform == 'c' else r'(\\W|$)', s)\n", "def split(s, platform='this'):\n\n    if platform == 'this':\n        return shlex.split(s, posix=True)\n    else:\n        return shlex.split(s)", "def split(s, platform='this'):\n    if platform == 'auto':\n        # this is the default platform\n        platform = os.name\n    return shlex.split(s, posix=platform == 'posix')\n", "def split(s, platform='this'):\n    return shlex.split(s, platform)", "def split(s, platform='this'):\n    if platform == 'this':\n        return shlex.split(s)\n    if platform == 'posix':\n        return shlex.split(s, posix=True)\n    if platform == 'windows':\n        return shlex.split(s, posix=False)\n    return shlex.split(s)\n", "def split(s, platform='this'):\n    if platform == 'cmd':\n        return shlex.split(s)\n    else:\n        return shlex.split(s, posix=True)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def split(s, platform='this'):\n    # TODO: remove platform argument when all platforms support it.\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return shlex.split(s, posix=True)\n    elif platform == 'windows':\n        return shlex.split(s, posix=False)\n    else:\n        return shlex.split(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    return shlex.split(s, regex=REGEX[platform])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    return [x for x in shlex.split(s, posix=(platform == 'posix'))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return shlex.split(' '.join(s.split()))\n    elif platform == 'windows':\n        return shlex.split(' '.join(s.split('\\\\')))\n    else:\n        return shlex.split(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    return re.split(r'(\\W|^)' if platform == 'c' else r'(\\W|$)', s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n\n    if platform == 'this':\n        return shlex.split(s, posix=True)\n    else:\n        return shlex.split(s)", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'auto':\n        # this is the default platform\n        platform = os.name\n    return shlex.split(s, posix=platform == 'posix')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    return shlex.split(s, platform)", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        return shlex.split(s)\n    if platform == 'posix':\n        return shlex.split(s, posix=True)\n    if platform == 'windows':\n        return shlex.split(s, posix=False)\n    return shlex.split(s)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'cmd':\n        return shlex.split(s)\n    else:\n        return shlex.split(s, posix=True)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_15.py", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "ques_id": "62ece4982e6aefcf4aabbd74", "code": ["def prepare_repository_from_archive(\n    archive_path: str, repository_url: str\n) -> str:\n    if archive_path is None:\n        return repository_url\n    return _uncompress_archive(archive_path, repository_url)\n", "def prepare_repository_from_archive(\n    archive_path: Path, verbose: bool = False\n) -> Tuple[str, str]:\n    return (\n        archive_path.name,\n        archive_path.parent / archive_path.name,\n    )\n", "def prepare_repository_from_archive(\n    archive_path: str, repository_url: str = DEFAULT_REPOSITORY_URL\n) -> str:\n    archive = open_archive(archive_path)\n    return prepare_repository_from_archive_data(archive, repository_url)\n", "def prepare_repository_from_archive(\n    archive_path: Path, repo_name: str, worktree: str = \"\"\n) -> str:\n    with archive_path.open(\"rb\") as archive:\n        archive_content = archive.read()\n\n    repo_url = get_repository_url_from_content(archive_content, repo_name, worktree)\n    return repo_url\n", "def prepare_repository_from_archive(\n    archive_path: str, archive_url: str, prefix: str\n) -> str:\n    with tarfile.open(archive_path) as archive:\n        archive.extractall(path=archive_url)\n    return archive_url + prefix + archive_path.split(archive_path)[-1]\n", "def prepare_repository_from_archive(\n    archive_path: str,\n    repo_name: str,\n    repo_url: str,\n    target_dir: str,\n) -> str:\n    archive_repo_url = get_archive_repository_url(archive_path, repo_name)\n    return prepare_repository_from_repository_url(archive_repo_url, repo_name, repo_url, target_dir)\n", "def prepare_repository_from_archive(\n    archive_path: str, dest_path: str, strip_path_prefix: bool = True\n) -> str:\n    with archive_path.open(\"rb\") as f:\n        return _prepare_repository_from_archive(\n            f, dest_path, strip_path_prefix\n        )\n", "def prepare_repository_from_archive(\n    archive_path: str, repository_name: str\n) -> str:\n    with tarfile.open(archive_path) as tar:\n        tar.extractall(path=repository_name)\n\n    return repository_name\n", "def prepare_repository_from_archive(\n    archive_path: Path, version: str, tar_name: str\n) -> str:\n    archive_path.unlink()\n    repo = archive_path.parent / tar_name\n    repo.unlink()\n    return repo.as_uri()\n", "def prepare_repository_from_archive(\n    archive_path: Path, repository_url: str = None\n) -> str:\n    with Archive(archive_path, repository_url) as archive:\n        return archive.prepare_repository()\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def prepare_repository_from_archive(\n    archive_path: str, repository_url: str\n) -> str:\n    if archive_path is None:\n        return repository_url\n    return _uncompress_archive(archive_path, repository_url)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, verbose: bool = False\n) -> Tuple[str, str]:\n    return (\n        archive_path.name,\n        archive_path.parent / archive_path.name,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str, repository_url: str = DEFAULT_REPOSITORY_URL\n) -> str:\n    archive = open_archive(archive_path)\n    return prepare_repository_from_archive_data(archive, repository_url)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, repo_name: str, worktree: str = \"\"\n) -> str:\n    with archive_path.open(\"rb\") as archive:\n        archive_content = archive.read()\n\n    repo_url = get_repository_url_from_content(archive_content, repo_name, worktree)\n    return repo_url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str, archive_url: str, prefix: str\n) -> str:\n    with tarfile.open(archive_path) as archive:\n        archive.extractall(path=archive_url)\n    return archive_url + prefix + archive_path.split(archive_path)[-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    repo_name: str,\n    repo_url: str,\n    target_dir: str,\n) -> str:\n    archive_repo_url = get_archive_repository_url(archive_path, repo_name)\n    return prepare_repository_from_repository_url(archive_repo_url, repo_name, repo_url, target_dir)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str, dest_path: str, strip_path_prefix: bool = True\n) -> str:\n    with archive_path.open(\"rb\") as f:\n        return _prepare_repository_from_archive(\n            f, dest_path, strip_path_prefix\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str, repository_name: str\n) -> str:\n    with tarfile.open(archive_path) as tar:\n        tar.extractall(path=repository_name)\n\n    return repository_name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, version: str, tar_name: str\n) -> str:\n    archive_path.unlink()\n    repo = archive_path.parent / tar_name\n    repo.unlink()\n    return repo.as_uri()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, repository_url: str = None\n) -> str:\n    with Archive(archive_path, repository_url) as archive:\n        return archive.prepare_repository()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_5.py", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "ques_id": "62ece4982e6aefcf4aabbd75", "code": ["def addignored(ignored):\n    ignored = ignored.split(',')\n    ignored = [f for f in ignored if not f.startswith('.')]\n    ignored.sort()\n    return ','.join(ignored)\n", "def addignored(ignored):\n\n    files = subprocess.check_output('git ls-files --ignored', shell=True).splitlines()\n    files = [f.decode('utf-8') for f in files]\n    files.sort()\n    return ','.join(files)\n", "def addignored(ignored):\n    ignored = ignored.split(',')\n    ignored.sort()\n    return ','.join(ignored)", "def addignored(ignored):\n    ignored = sorted(ignored)\n    ignored = [\"- \" + item for item in ignored]\n    return \"\\n\".join(ignored)", "def addignored(ignored):\n    cmd = ['git', 'ls-files']\n    output = subprocess.check_output(cmd, universal_newlines=True)\n    output = output.split('\\n')\n    output.sort()\n    return ','.join(output)\n", "def addignored(ignored):\n    files = []\n    for f in ignored:\n        files.append(git.ls_files(f)[0])\n    return \", \".join(files)", "def addignored(ignored):\n\n    if ignored == []:\n        return ''\n\n    ignored = ', '.join(sorted(ignored))\n\n    return '\\n'.join([\n        '[Ignored]',\n        '',\n       '   {0}'.format(ignored)\n    ])", "def addignored(ignored):\n    files = []\n    for filename in ignored:\n        files.append(os.path.basename(filename))\n    files.sort()\n    return ','.join(files)", "def addignored(ignored):\n    # define the command to be used\n    command = \"git ls-files -z --ignore-standard --others --exclude-standard.git\"\n    # run it\n    output = subprocess.check_output(command, shell=True)\n    # extract the filenames\n    filenames = output.decode(\"utf-8\").split('\\n')\n    # sort the list of filenames to make sure we only return the files in the ignored directory\n    filenames.sort()\n    # return the string representation of the files\n    return ', '.join(filenames)", "def addignored(ignored):\n    ignored = ignored.split(',')\n    ignored.sort()\n    return ','.join(ignored)"], "level": "slib_runnable", "generate_results": [{"generate_code": "def addignored(ignored):\n    ignored = ignored.split(',')\n    ignored = [f for f in ignored if not f.startswith('.')]\n    ignored.sort()\n    return ','.join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n\n    files = subprocess.check_output('git ls-files --ignored', shell=True).splitlines()\n    files = [f.decode('utf-8') for f in files]\n    files.sort()\n    return ','.join(files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = ignored.split(',')\n    ignored.sort()\n    return ','.join(ignored)", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = sorted(ignored)\n    ignored = [\"- \" + item for item in ignored]\n    return \"\\n\".join(ignored)", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    cmd = ['git', 'ls-files']\n    output = subprocess.check_output(cmd, universal_newlines=True)\n    output = output.split('\\n')\n    output.sort()\n    return ','.join(output)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    files = []\n    for f in ignored:\n        files.append(git.ls_files(f)[0])\n    return \", \".join(files)", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n\n    if ignored == []:\n        return ''\n\n    ignored = ', '.join(sorted(ignored))\n\n    return '\\n'.join([\n        '[Ignored]',\n        '',\n       '   {0}'.format(ignored)\n    ])", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    files = []\n    for filename in ignored:\n        files.append(os.path.basename(filename))\n    files.sort()\n    return ','.join(files)", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    # define the command to be used\n    command = \"git ls-files -z --ignore-standard --others --exclude-standard.git\"\n    # run it\n    output = subprocess.check_output(command, shell=True)\n    # extract the filenames\n    filenames = output.decode(\"utf-8\").split('\\n')\n    # sort the list of filenames to make sure we only return the files in the ignored directory\n    filenames.sort()\n    # return the string representation of the files\n    return ', '.join(filenames)", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = ignored.split(',')\n    ignored.sort()\n    return ','.join(ignored)", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_11.py", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "ques_id": "62ece4982e6aefcf4aabbd76", "code": ["def match(filename):\n    return (filename in (\"\", \"-\") or\n            filename.startswith(\"-\") and\n            os.path.isdir(filename[1:]))\n", "def match(filename):\n    return filename and filename in _supported_files", "def match(filename):\n    return filename.endswith('.py')\n", "def match(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1] in SUPPORTED_TYPES", "def match(filename):\n    if not filename:\n        return False\n    if filename.startswith('/'):\n        return False\n    return _type_regex.match(filename) is not None\n", "def match(filename):\n    if filename in FILE_MAPPINGS:\n        return False\n    return True", "def match(filename):\n    return filename.endswith(('.py', '.pyw', '.pyc', '.so', '.ipy', '.rst', '.txt', '.md'))", "def match(filename):\n    return filename in supported_files\n", "def match(filename):\n    return filename.endswith(\".py\") or filename.endswith(\".so\")\n", "def match(filename):\n    return filename in TYPES"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match(filename):\n    return (filename in (\"\", \"-\") or\n            filename.startswith(\"-\") and\n            os.path.isdir(filename[1:]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename and filename in _supported_files", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename.endswith('.py')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1] in SUPPORTED_TYPES", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    if not filename:\n        return False\n    if filename.startswith('/'):\n        return False\n    return _type_regex.match(filename) is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    if filename in FILE_MAPPINGS:\n        return False\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename.endswith(('.py', '.pyw', '.pyc', '.so', '.ipy', '.rst', '.txt', '.md'))", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename in supported_files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename.endswith(\".py\") or filename.endswith(\".so\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename in TYPES", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_1.py", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "ques_id": "62ece4982e6aefcf4aabbd77", "code": ["def parse_frequency(frequency):\n    try:\n        return parse_frequency_string(frequency)\n    except ValueError:\n        return None\n", "def parse_frequency(frequency):\n    if frequency is None:\n        return None\n\n    # strip off any leading zeroes and parse the unit\n    freq_unit, _ = parse_unit(frequency)\n\n    if freq_unit not in FREQUENCY_UNITS:\n        raise ValueError(\"Unknown frequency unit: %s\" % freq_unit)\n\n    return FREQUENCY_UNITS[freq_unit]\n", "def parse_frequency(frequency):\n    if frequency is None:\n        return None\n    if frequency.lower() in (\"always\", \"never\"):\n        return datetime.timedelta()\n    try:\n        return dateutil.parser.parse(frequency)\n    except ValueError:\n        raise ValueError(\"Invalid frequency: {0}\".format(frequency))\n", "def parse_frequency(frequency):\n    if frequency in FREQ_TO_TIME_CONVERSION:\n        return FREQ_TO_TIME_CONVERSION[frequency]\n    return None\n", "def parse_frequency(frequency):\n    if frequency is None:\n        return None\n    if frequency == \"always\":\n        return timedelta(weeks=1)\n    try:\n        return timedelta(**{freq: int(frequency) for freq in FREQUENCY_LIST})\n    except ValueError:\n        raise ValueError(\"Invalid frequency: {}\".format(frequency))\n", "def parse_frequency(frequency):\n    if not frequency:\n        return None\n    if frequency in (\"always\", \"once\", \"two-weeks\"):\n        return timedelta(weeks=1)\n    try:\n        return timedelta(**{freq: int(frequency) for freq in frequency.split(\" \")})\n    except ValueError:\n        raise ValueError(\"Unknown frequency {0!r}\".format(frequency))\n", "def parse_frequency(frequency):\n    if frequency is None:\n        return None\n    elif frequency == \"always\":\n        return datetime.timedelta(weeks=3)\n    else:\n        try:\n            return parse_time_unit(frequency)\n        except ValueError:\n            raise ValueError(\"Frequency '{}' is not a valid time unit\".format(frequency))", "def parse_frequency(frequency):\n    if frequency == \"always\":\n        return None\n    try:\n        return datetime.timedelta(weeks=int(frequency))\n    except ValueError:\n        raise ValueError(\"Invalid frequency '%s'\" % frequency)\n", "def parse_frequency(frequency):\n    if not frequency:\n        return None\n    frequency = frequency.strip()\n    if not frequency:\n        return None\n    return parse_frequency_dict(frequency)\n", "def parse_frequency(frequency):\n    if frequency == \"always\":\n        return datetime.timedelta(days=7)\n    else:\n        return parse_timedelta(frequency)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def parse_frequency(frequency):\n    try:\n        return parse_frequency_string(frequency)\n    except ValueError:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency is None:\n        return None\n\n    # strip off any leading zeroes and parse the unit\n    freq_unit, _ = parse_unit(frequency)\n\n    if freq_unit not in FREQUENCY_UNITS:\n        raise ValueError(\"Unknown frequency unit: %s\" % freq_unit)\n\n    return FREQUENCY_UNITS[freq_unit]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency is None:\n        return None\n    if frequency.lower() in (\"always\", \"never\"):\n        return datetime.timedelta()\n    try:\n        return dateutil.parser.parse(frequency)\n    except ValueError:\n        raise ValueError(\"Invalid frequency: {0}\".format(frequency))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency in FREQ_TO_TIME_CONVERSION:\n        return FREQ_TO_TIME_CONVERSION[frequency]\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency is None:\n        return None\n    if frequency == \"always\":\n        return timedelta(weeks=1)\n    try:\n        return timedelta(**{freq: int(frequency) for freq in FREQUENCY_LIST})\n    except ValueError:\n        raise ValueError(\"Invalid frequency: {}\".format(frequency))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if not frequency:\n        return None\n    if frequency in (\"always\", \"once\", \"two-weeks\"):\n        return timedelta(weeks=1)\n    try:\n        return timedelta(**{freq: int(frequency) for freq in frequency.split(\" \")})\n    except ValueError:\n        raise ValueError(\"Unknown frequency {0!r}\".format(frequency))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency is None:\n        return None\n    elif frequency == \"always\":\n        return datetime.timedelta(weeks=3)\n    else:\n        try:\n            return parse_time_unit(frequency)\n        except ValueError:\n            raise ValueError(\"Frequency '{}' is not a valid time unit\".format(frequency))", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency == \"always\":\n        return None\n    try:\n        return datetime.timedelta(weeks=int(frequency))\n    except ValueError:\n        raise ValueError(\"Invalid frequency '%s'\" % frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if not frequency:\n        return None\n    frequency = frequency.strip()\n    if not frequency:\n        return None\n    return parse_frequency_dict(frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency == \"always\":\n        return datetime.timedelta(days=7)\n    else:\n        return parse_timedelta(frequency)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_18.py", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "ques_id": "62ece4992e6aefcf4aabbd78", "code": ["def is_local(host):\n    return host.startswith('localhost')", "def is_local(host):\n    return host == \"127.0.0.1\"\n", "def is_local(host):\n    return host == \"127.0.0.1\"\n", "def is_local(host):\n    return host == 'localhost'", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    else:\n        return False\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == LOCALHOST\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_local(host):\n    return host.startswith('localhost')", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == \"127.0.0.1\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == \"127.0.0.1\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == 'localhost'", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == LOCALHOST\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_8.py", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "ques_id": "62ece4992e6aefcf4aabbd79", "code": ["def make_find_paths(find_paths):\n    if find_paths:\n        for pattern in find_paths:\n            if pattern.endswith('*'):\n                yield pattern[:-1]\n            else:\n                yield fnmatch.translate(pattern)\n", "def make_find_paths(find_paths):\n    return [make_find_path(p) for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [make_glob_path(path) for path in find_paths]\n", "def make_find_paths(find_paths):\n    for path in find_paths:\n        if path.endswith('*'):\n            yield path[:-1]\n        else:\n            yield path\n", "def make_find_paths(find_paths):\n    return [make_find_path(p) for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [make_find_path(p) for p in find_paths]\n", "def make_find_paths(find_paths):\n    if find_paths and not isinstance(find_paths, (list, tuple)):\n        find_paths = [find_paths]\n    return [path_to_glob(path) for path in find_paths]\n", "def make_find_paths(find_paths):\n    return [make_glob_path(p) for p in find_paths]\n", "def make_find_paths(find_paths):\n    for path in find_paths:\n        if is_glob(path):\n            yield glob.glob(path)\n        else:\n            yield path\n", "def make_find_paths(find_paths):\n    return [make_find_path(p) for p in find_paths]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def make_find_paths(find_paths):\n    if find_paths:\n        for pattern in find_paths:\n            if pattern.endswith('*'):\n                yield pattern[:-1]\n            else:\n                yield fnmatch.translate(pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [make_find_path(p) for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [make_glob_path(path) for path in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    for path in find_paths:\n        if path.endswith('*'):\n            yield path[:-1]\n        else:\n            yield path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [make_find_path(p) for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [make_find_path(p) for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    if find_paths and not isinstance(find_paths, (list, tuple)):\n        find_paths = [find_paths]\n    return [path_to_glob(path) for path in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [make_glob_path(p) for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    for path in find_paths:\n        if is_glob(path):\n            yield glob.glob(path)\n        else:\n            yield path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [make_find_path(p) for p in find_paths]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_19.py", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "ques_id": "62ece4992e6aefcf4aabbd7a", "code": ["def is_gitbash():\n    return ('.git' in os.getcwd())\n", "def is_gitbash():\n    return platform.system() == \"Windows\"", "def is_gitbash():\n    return platform.system() == \"Windows\"\n", "def is_gitbash():\n    return os.path.exists(\"/usr/bin/git\")\n", "def is_gitbash():\n    return os.name == \"nt\"\n", "def is_gitbash():\n    return sys.platform == 'win32' and 'gitbash' in sys.executable\n", "def is_gitbash():\n    return os.name == \"nt\"\n", "def is_gitbash():\n    return is_windows() and 'gitbash' in os.environ\n", "def is_gitbash():\n    return os.name == 'nt'\n", "def is_gitbash():\n    return os.name == 'nt'\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_gitbash():\n    return ('.git' in os.getcwd())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return platform.system() == \"Windows\"", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return platform.system() == \"Windows\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return os.path.exists(\"/usr/bin/git\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return os.name == \"nt\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return sys.platform == 'win32' and 'gitbash' in sys.executable\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return os.name == \"nt\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return is_windows() and 'gitbash' in os.environ\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return os.name == 'nt'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.name == 'nt'\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_9.py", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "ques_id": "62ece4992e6aefcf4aabbd7b", "code": ["def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not os.path.exists(config_filename):\n        os.makedirs(os.path.dirname(config_filename))\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n    if overwrite:\n        os.remove(config_filename)", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    os.makedirs(os.path.dirname(config_filename), exist_ok=True)\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n\n    if not os.path.exists(os.path.dirname(config_filename)):\n        os.makedirs(os.path.dirname(config_filename))\n    with open(config_filename, 'w') as config_file:\n        yaml.dump(rendered_config, config_file, default_flow_style=False, explicit_start=True, explicit_end=True, width=mode, Dumper=Dumper, line_length=80, allow_unicode=True, encoding='utf-8', allow_system_config_changes=False)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if os.path.exists(config_filename) and not overwrite:\n        abort('config file already exists: %s' % config_filename)\n    try:\n        with open(config_filename, 'w') as f:\n            f.write(rendered_config)\n    except IOError as e:\n        abort('cannot write config file: %s' % e)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not os.path.exists(os.path.dirname(config_filename)):\n        os.makedirs(os.path.dirname(config_filename))\n\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n\n    if overwrite and os.path.exists(config_filename):\n        shutil.rmtree(config_filename)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        abort('file %s already exists' % config_filename)\n    with open(config_filename, 'w') as f:\n        f.write(rendered_config)\n        f.flush()\n        os.fsync(f.fileno())\n        os.chmod(config_filename, mode)", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not os.path.exists(config_filename) or overwrite:\n        with open(config_filename, mode) as f:\n            f.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not os.path.exists(os.path.dirname(config_filename)):\n        os.makedirs(os.path.dirname(config_filename))\n\n    if not overwrite and os.path.exists(config_filename):\n        abort('File exists: {0}'.format(config_filename))\n\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not os.path.exists(os.path.dirname(config_filename)):\n        os.makedirs(os.path.dirname(config_filename))\n\n    with open(config_filename, 'w') as outfile:\n        yaml.safe_dump(rendered_config, outfile, default_flow_style=False, encoding='utf-8', allow_unicode=True)\n\n    if overwrite:\n        os.remove(config_filename)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite:\n        if os.path.exists(config_filename):\n            print(\"Configuration file already exists: %s\" % config_filename)\n            sys.exit(1)\n    with open(config_filename, mode) as f:\n        yaml.safe_dump(rendered_config, f, default_flow_style=False)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not os.path.exists(config_filename):\n        os.makedirs(os.path.dirname(config_filename))\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n    if overwrite:\n        os.remove(config_filename)", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    os.makedirs(os.path.dirname(config_filename), exist_ok=True)\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n\n    if not os.path.exists(os.path.dirname(config_filename)):\n        os.makedirs(os.path.dirname(config_filename))\n    with open(config_filename, 'w') as config_file:\n        yaml.dump(rendered_config, config_file, default_flow_style=False, explicit_start=True, explicit_end=True, width=mode, Dumper=Dumper, line_length=80, allow_unicode=True, encoding='utf-8', allow_system_config_changes=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if os.path.exists(config_filename) and not overwrite:\n        abort('config file already exists: %s' % config_filename)\n    try:\n        with open(config_filename, 'w') as f:\n            f.write(rendered_config)\n    except IOError as e:\n        abort('cannot write config file: %s' % e)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not os.path.exists(os.path.dirname(config_filename)):\n        os.makedirs(os.path.dirname(config_filename))\n\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n\n    if overwrite and os.path.exists(config_filename):\n        shutil.rmtree(config_filename)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        abort('file %s already exists' % config_filename)\n    with open(config_filename, 'w') as f:\n        f.write(rendered_config)\n        f.flush()\n        os.fsync(f.fileno())\n        os.chmod(config_filename, mode)", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not os.path.exists(config_filename) or overwrite:\n        with open(config_filename, mode) as f:\n            f.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not os.path.exists(os.path.dirname(config_filename)):\n        os.makedirs(os.path.dirname(config_filename))\n\n    if not overwrite and os.path.exists(config_filename):\n        abort('File exists: {0}'.format(config_filename))\n\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not os.path.exists(os.path.dirname(config_filename)):\n        os.makedirs(os.path.dirname(config_filename))\n\n    with open(config_filename, 'w') as outfile:\n        yaml.safe_dump(rendered_config, outfile, default_flow_style=False, encoding='utf-8', allow_unicode=True)\n\n    if overwrite:\n        os.remove(config_filename)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite:\n        if os.path.exists(config_filename):\n            print(\"Configuration file already exists: %s\" % config_filename)\n            sys.exit(1)\n    with open(config_filename, mode) as f:\n        yaml.safe_dump(rendered_config, f, default_flow_style=False)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_22.py", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "ques_id": "62ece4992e6aefcf4aabbd7c", "code": ["def oneline(script, seperator=\" && \"):\n    return seperator.join(script)", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\"\\n\"))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script)\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join([shlex.quote(x) for x in script.split(\"\\n\")])\n", "def oneline(script, seperator=\" && \"):\n    return \"\\n\".join(script.split(seperator))", "def oneline(script, seperator=\" && \"):\n    return \"{}{}\".format(seperator, script)\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script)\n", "def oneline(script, seperator=\" && \"):\n    return \"{}{}\".format(seperator, script)\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())"], "level": "slib_runnable", "generate_results": [{"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script)", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\"\\n\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join([shlex.quote(x) for x in script.split(\"\\n\")])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return \"\\n\".join(script.split(seperator))", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return \"{}{}\".format(seperator, script)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return \"{}{}\".format(seperator, script)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_16.py", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "ques_id": "62ece4992e6aefcf4aabbd7d", "code": ["def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    with ProcessPoolExecutor(max_workers=1) as executor:\n        return executor.subprocess_run(\n            func, args, env={**os.environ, **extra_env} if extra_env else None,\n            timeout=timeout)\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    with Timeout(timeout):\n        return subprocess.run(\n            args,\n            env=extra_env,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            check=True,\n            timeout=timeout,\n        )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    return subprocess_run(\n        [sys.executable, func] + list(args), timeout=timeout, extra_env=extra_env\n    )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    return subprocess.run(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=os.environ.copy(),\n        check=True,\n        timeout=timeout,\n        **(extra_env or {})\n    )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    env.update(extra_env or {})\n    proc = subprocess.Popen(\n        args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=env)\n    proc.wait(timeout)\n    return proc.returncode", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    with Timer() as timer:\n        result = func(*args, **extra_env)\n    if timer.finished:\n        return result\n    else:\n        raise TimeoutError(f\"Timed out after {timeout} seconds\")\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    proc = subprocess.Popen(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        env=extra_env,\n        timeout=timeout,\n    )\n    return proc.communicate()\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    args = [sys.executable, '-m','subprocess'] + list(args)\n    if extra_env is not None:\n        args.extend(extra_env)\n    return subprocess.run(args, timeout=timeout, check=True)\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    return subprocess_run(\n        func,\n        *args,\n        timeout=timeout,\n        extra_env=extra_env,\n    )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {} if extra_env is None else extra_env\n    with subprocess.Popen(\n        args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=env\n    ) as proc:\n        return proc.communicate(timeout=timeout)[0]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    with ProcessPoolExecutor(max_workers=1) as executor:\n        return executor.subprocess_run(\n            func, args, env={**os.environ, **extra_env} if extra_env else None,\n            timeout=timeout)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    with Timeout(timeout):\n        return subprocess.run(\n            args,\n            env=extra_env,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            check=True,\n            timeout=timeout,\n        )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    return subprocess_run(\n        [sys.executable, func] + list(args), timeout=timeout, extra_env=extra_env\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    return subprocess.run(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=os.environ.copy(),\n        check=True,\n        timeout=timeout,\n        **(extra_env or {})\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    env.update(extra_env or {})\n    proc = subprocess.Popen(\n        args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=env)\n    proc.wait(timeout)\n    return proc.returncode", "is_pass": true, "return_code": 0}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    with Timer() as timer:\n        result = func(*args, **extra_env)\n    if timer.finished:\n        return result\n    else:\n        raise TimeoutError(f\"Timed out after {timeout} seconds\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    proc = subprocess.Popen(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        env=extra_env,\n        timeout=timeout,\n    )\n    return proc.communicate()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    args = [sys.executable, '-m','subprocess'] + list(args)\n    if extra_env is not None:\n        args.extend(extra_env)\n    return subprocess.run(args, timeout=timeout, check=True)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    return subprocess_run(\n        func,\n        *args,\n        timeout=timeout,\n        extra_env=extra_env,\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {} if extra_env is None else extra_env\n    with subprocess.Popen(\n        args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=env\n    ) as proc:\n        return proc.communicate(timeout=timeout)[0]\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_6.py", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "ques_id": "62ece4992e6aefcf4aabbd7e", "code": ["def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.name]\n    except KeyError:\n        if matcher.default is None:\n            raise Error('Missing variable %s' % matcher.name)\n        return matcher.default", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    if name not in os.environ:\n        raise Error(\"The variable %s is not defined in the environment\" % name)\n    return os.environ[name]\n", "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.name]\n    except KeyError:\n        if matcher.default is not None:\n            return matcher.default\n        raise ValueError(\"Variable not defined: {}\".format(matcher.name))\n", "def _resolve_string(matcher):\n    env_name = matcher.group(1)\n    default = matcher.group(2) if matcher.group(2) else None\n    value = os.environ.get(env_name, default)\n    if value is None:\n        raise Error('Variable {} is not defined in environment.'.format(env_name))\n    return value\n", "def _resolve_string(matcher):\n    env_name = matcher.group('name')\n    env_value = os.environ.get(env_name, '')\n    if env_value == '':\n        raise ValueError('Missing environment variable %r' % env_name)\n    return env_value\n", "def _resolve_string(matcher):\n    name, default = matcher.groups()\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is not None:\n            return default\n        raise ValueError(\"Missing environment variable: '%s'\" % name)\n", "def _resolve_string(matcher):\n    name, default = matcher.group(1, 2)\n    if default is None:\n        raise EnvironmentError(\"Could not resolve '%s'\" % name)\n    return os.environ.get(name, default)\n", "def _resolve_string(matcher):\n    if matcher.name in os.environ:\n        return os.environ[matcher.name]\n    if matcher.default is not None:\n        return matcher.default\n    raise errors.Error('No default for {}'.format(matcher.name))\n", "def _resolve_string(matcher):\n    name, default = matcher.group(1), matcher.group(2)\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default:\n            return default\n        raise Error('Key {} not defined'.format(name))\n", "def _resolve_string(matcher):\n    value = os.getenv(matcher.group(\"name\"), matcher.group(\"default\"))\n    if value == \"\":\n        raise ValueError(\"Environment variable '%s' is not set\" % matcher.group(\"name\"))\n    return value"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.name]\n    except KeyError:\n        if matcher.default is None:\n            raise Error('Missing variable %s' % matcher.name)\n        return matcher.default", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    if name not in os.environ:\n        raise Error(\"The variable %s is not defined in the environment\" % name)\n    return os.environ[name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.name]\n    except KeyError:\n        if matcher.default is not None:\n            return matcher.default\n        raise ValueError(\"Variable not defined: {}\".format(matcher.name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    env_name = matcher.group(1)\n    default = matcher.group(2) if matcher.group(2) else None\n    value = os.environ.get(env_name, default)\n    if value is None:\n        raise Error('Variable {} is not defined in environment.'.format(env_name))\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    env_name = matcher.group('name')\n    env_value = os.environ.get(env_name, '')\n    if env_value == '':\n        raise ValueError('Missing environment variable %r' % env_name)\n    return env_value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name, default = matcher.groups()\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is not None:\n            return default\n        raise ValueError(\"Missing environment variable: '%s'\" % name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name, default = matcher.group(1, 2)\n    if default is None:\n        raise EnvironmentError(\"Could not resolve '%s'\" % name)\n    return os.environ.get(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    if matcher.name in os.environ:\n        return os.environ[matcher.name]\n    if matcher.default is not None:\n        return matcher.default\n    raise errors.Error('No default for {}'.format(matcher.name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name, default = matcher.group(1), matcher.group(2)\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default:\n            return default\n        raise Error('Key {} not defined'.format(name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    value = os.getenv(matcher.group(\"name\"), matcher.group(\"default\"))\n    if value == \"\":\n        raise ValueError(\"Environment variable '%s' is not set\" % matcher.group(\"name\"))\n    return value", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_2.py", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "ques_id": "62ece4992e6aefcf4aabbd7f", "code": ["def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    netloc = urlparse(image_href).netloc\n    image_id = urlparse(image_href).path.split('/')[-1]\n\n    return image_id, netloc, False\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_id = _image_id_from_href(image_href)\n    netloc = _netloc_from_href(image_href)\n    use_ssl = _is_true(image_href.find('https://'))\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_id = _parse_href(image_href)\n    netloc = _parse_netloc(image_href)\n    use_ssl = bool(image_href.find('https://'))\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_href = image_href.strip('/')\n    image_id = image_href.split('/')[-1]\n    netloc = urllib.parse.urlparse(image_href).netloc\n    use_ssl = image_href.startswith('https://')\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_id = _parse_image_id(image_href)\n    netloc = _parse_netloc(image_href)\n    use_ssl = _parse_use_ssl(image_href)\n\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError('image_href cannot be empty')\n    image_href = image_href.split('/')\n    return image_href[0], '/'.join(image_href[1:]), bool(image_href[2])\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_id = image_href.split('/')[-1]\n    netloc = urllib.parse.urlparse(image_href).netloc\n    use_ssl = False\n    if'ssl' in netloc:\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_id = urllib.parse.urlparse(image_href).netloc\n    netloc = urllib.parse.urlparse(image_href).netloc\n    use_ssl = image_href.startswith('https://')\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    try:\n        image_id = urlparse.urlparse(image_href).path.strip(\"/\")\n    except ValueError:\n        raise ValueError(_(\"Invalid image reference %s\") % image_href)\n\n    netloc = urlparse.urlparse(image_href).netloc\n    use_ssl = False if netloc.startswith(\"http\") else True\n\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError('Image reference must be an image reference '\n                         'without the scheme (%s)' % image_href)\n    netloc = parsed.netloc\n    use_ssl = parsed.scheme =='s3'\n    return parsed.path.lstrip('/'), netloc, use_ssl\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    netloc = urlparse(image_href).netloc\n    image_id = urlparse(image_href).path.split('/')[-1]\n\n    return image_id, netloc, False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_id = _image_id_from_href(image_href)\n    netloc = _netloc_from_href(image_href)\n    use_ssl = _is_true(image_href.find('https://'))\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_id = _parse_href(image_href)\n    netloc = _parse_netloc(image_href)\n    use_ssl = bool(image_href.find('https://'))\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_href = image_href.strip('/')\n    image_id = image_href.split('/')[-1]\n    netloc = urllib.parse.urlparse(image_href).netloc\n    use_ssl = image_href.startswith('https://')\n    return image_id, netloc, use_ssl\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_id = _parse_image_id(image_href)\n    netloc = _parse_netloc(image_href)\n    use_ssl = _parse_use_ssl(image_href)\n\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError('image_href cannot be empty')\n    image_href = image_href.split('/')\n    return image_href[0], '/'.join(image_href[1:]), bool(image_href[2])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_id = image_href.split('/')[-1]\n    netloc = urllib.parse.urlparse(image_href).netloc\n    use_ssl = False\n    if'ssl' in netloc:\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_id = urllib.parse.urlparse(image_href).netloc\n    netloc = urllib.parse.urlparse(image_href).netloc\n    use_ssl = image_href.startswith('https://')\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    try:\n        image_id = urlparse.urlparse(image_href).path.strip(\"/\")\n    except ValueError:\n        raise ValueError(_(\"Invalid image reference %s\") % image_href)\n\n    netloc = urlparse.urlparse(image_href).netloc\n    use_ssl = False if netloc.startswith(\"http\") else True\n\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError('Image reference must be an image reference '\n                         'without the scheme (%s)' % image_href)\n    netloc = parsed.netloc\n    use_ssl = parsed.scheme =='s3'\n    return parsed.path.lstrip('/'), netloc, use_ssl\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_13.py", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "ques_id": "62ece4992e6aefcf4aabbd80", "code": ["def remove_ending_os_sep(input_list):\n    for i in range(len(input_list)):\n        if len(input_list[i]) > 1 and input_list[i][-1] == '/':\n            input_list[i] = input_list[i][:-1]\n        elif len(input_list[i]) > 1 and input_list[i][-1]!= '/':\n            input_list[i] = input_list[i][:-1]\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) == 0:\n        return input_list\n    if len(input_list[-1]) > 1:\n        return input_list\n    if input_list[-1] == \"/\":\n        input_list[-1] = \"\"\n    return input_list[:-1]", "def remove_ending_os_sep(input_list):\n    if len(input_list) == 0:\n        return input_list\n    if len(input_list) == 1:\n        return input_list\n    return remove_ending_os_sep(input_list[:-1]) + [input_list[-1]]\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) == 0:\n        raise TypeError('List of strings is empty')\n    if len(input_list) == 1:\n        return input_list\n    if input_list[-1] == os.sep:\n        return input_list[:-1]\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1:\n        for i in range(len(input_list) - 1):\n            if input_list[i] == '\\\\' and input_list[i + 1]!= '/':\n                input_list[i] = input_list[i + 1]\n                input_list[i + 1] = '/'\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) == 0:\n        return input_list\n\n    if len(input_list[-1]) == 1 and input_list[-1][0] == os.sep:\n        del input_list[-1]\n\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) == 0:\n        return input_list\n\n    if len(input_list[0]) > 1:\n        return [input_list[0]] + remove_ending_os_sep(input_list[1:])\n\n    return input_list[0] + remove_ending_os_sep(input_list[1:])\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) <= 1:\n        return input_list\n\n    return [remove_ending_os_sep(item) for item in input_list]\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) <= 1:\n        return input_list\n    if input_list[-1] == os.sep:\n        return remove_ending_os_sep(input_list[:-1])\n    return input_list[:-1]\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) <= 1:\n        return input_list\n    else:\n        last_character = input_list[-1]\n        if last_character == '/' or last_character == '\\\\':\n            return [x for x in input_list if x!= last_character]\n        else:\n            return input_list[:-1]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def remove_ending_os_sep(input_list):\n    for i in range(len(input_list)):\n        if len(input_list[i]) > 1 and input_list[i][-1] == '/':\n            input_list[i] = input_list[i][:-1]\n        elif len(input_list[i]) > 1 and input_list[i][-1]!= '/':\n            input_list[i] = input_list[i][:-1]\n    return input_list\n", "is_pass": true, "return_code": 0}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) == 0:\n        return input_list\n    if len(input_list[-1]) > 1:\n        return input_list\n    if input_list[-1] == \"/\":\n        input_list[-1] = \"\"\n    return input_list[:-1]", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) == 0:\n        return input_list\n    if len(input_list) == 1:\n        return input_list\n    return remove_ending_os_sep(input_list[:-1]) + [input_list[-1]]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) == 0:\n        raise TypeError('List of strings is empty')\n    if len(input_list) == 1:\n        return input_list\n    if input_list[-1] == os.sep:\n        return input_list[:-1]\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1:\n        for i in range(len(input_list) - 1):\n            if input_list[i] == '\\\\' and input_list[i + 1]!= '/':\n                input_list[i] = input_list[i + 1]\n                input_list[i + 1] = '/'\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) == 0:\n        return input_list\n\n    if len(input_list[-1]) == 1 and input_list[-1][0] == os.sep:\n        del input_list[-1]\n\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) == 0:\n        return input_list\n\n    if len(input_list[0]) > 1:\n        return [input_list[0]] + remove_ending_os_sep(input_list[1:])\n\n    return input_list[0] + remove_ending_os_sep(input_list[1:])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) <= 1:\n        return input_list\n\n    return [remove_ending_os_sep(item) for item in input_list]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) <= 1:\n        return input_list\n    if input_list[-1] == os.sep:\n        return remove_ending_os_sep(input_list[:-1])\n    return input_list[:-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) <= 1:\n        return input_list\n    else:\n        last_character = input_list[-1]\n        if last_character == '/' or last_character == '\\\\':\n            return [x for x in input_list if x!= last_character]\n        else:\n            return input_list[:-1]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_17.py", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "ques_id": "62ece4992e6aefcf4aabbd82", "code": ["def get_pattern(pattern, strip=True):\n    \n    \n    if strip:\n        pattern = pattern.strip()\n\n    return re.compile(pattern, re.IGNORECASE)\n", "def get_pattern(pattern, strip=True):\n    \n    \n    pattern = re.compile(pattern, re.IGNORECASE if strip else 0)\n    return pattern\n", "def get_pattern(pattern, strip=True):\n    regex = re.compile(pattern)\n    if strip:\n        return regex.sub('', pattern)\n    else:\n        return regex\n", "def get_pattern(pattern, strip=True):\n    if strip:\n        return re.sub(r'\\s+', '\\\\s+', pattern)\n    else:\n        return re.sub(r'\\s+', '\\s', pattern)\n", "def get_pattern(pattern, strip=True):\n    \n    \n    if strip:\n        return re.sub('[^A-Za-z0-9]+', '', pattern)\n    else:\n        return re.sub('[^A-Za-z0-9]+', '', pattern)\n", "def get_pattern(pattern, strip=True):\n    \n    \n    if not isinstance(pattern, str):\n        raise TypeError('The given pattern must be a string')\n    return re.compile(pattern, re.IGNORECASE if strip else 0)\n", "def get_pattern(pattern, strip=True):\n    \n    \n    if strip:\n        pattern = re.sub(r\"\\s\", \"\", pattern)\n    return re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n    \n    \n    if strip:\n        pattern = re.escape(pattern)\n    return re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = re.sub(r'\\s', '', pattern)\n    pattern = re.sub(r'\\*', '.*', pattern)\n    pattern = re.sub(r'\\?', '.', pattern)\n    pattern = re.sub(r'\\s+', '.', pattern)\n    pattern = pattern.split('\\n')\n    pattern = [p for p in pattern if p]\n    pattern = [p for p in pattern if not p.startswith('#')]\n    pattern = [p.strip() for p in pattern]\n    pattern = ''.join(pattern)\n    return pattern\n", "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, flags=re.IGNORECASE if strip else 0)"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_pattern(pattern, strip=True):\n    \n    \n    if strip:\n        pattern = pattern.strip()\n\n    return re.compile(pattern, re.IGNORECASE)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \n    \n    pattern = re.compile(pattern, re.IGNORECASE if strip else 0)\n    return pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    regex = re.compile(pattern)\n    if strip:\n        return regex.sub('', pattern)\n    else:\n        return regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if strip:\n        return re.sub(r'\\s+', '\\\\s+', pattern)\n    else:\n        return re.sub(r'\\s+', '\\s', pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \n    \n    if strip:\n        return re.sub('[^A-Za-z0-9]+', '', pattern)\n    else:\n        return re.sub('[^A-Za-z0-9]+', '', pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \n    \n    if not isinstance(pattern, str):\n        raise TypeError('The given pattern must be a string')\n    return re.compile(pattern, re.IGNORECASE if strip else 0)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \n    \n    if strip:\n        pattern = re.sub(r\"\\s\", \"\", pattern)\n    return re.compile(pattern)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \n    \n    if strip:\n        pattern = re.escape(pattern)\n    return re.compile(pattern)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if strip:\n        pattern = re.sub(r'\\s', '', pattern)\n    pattern = re.sub(r'\\*', '.*', pattern)\n    pattern = re.sub(r'\\?', '.', pattern)\n    pattern = re.sub(r'\\s+', '.', pattern)\n    pattern = pattern.split('\\n')\n    pattern = [p for p in pattern if p]\n    pattern = [p for p in pattern if not p.startswith('#')]\n    pattern = [p.strip() for p in pattern]\n    pattern = ''.join(pattern)\n    return pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, flags=re.IGNORECASE if strip else 0)", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_7.py", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62ece4992e6aefcf4aabbd83", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not env:\n        env = os.environ.copy()\n\n    if cwd:\n        env['PWD'] = cwd\n\n    return subprocess.call(commands, env=env, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd, verbose=verbose)", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    for cmd in commands:\n        cmd(args, cwd=cwd, verbose=verbose, hide_stderr=hide_stderr, env=env)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if env is None:\n        env = os.environ\n\n    p = subprocess.Popen(commands, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd, env=env)\n    stdout, stderr = p.communicate()\n    if p.returncode!= 0:\n        if verbose:\n            print('Command failed:', commands, p.returncode, stderr.decode('utf-8'))\n        return False\n    return True", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not isinstance(commands, list):\n        commands = [commands]\n    for command in commands:\n        _run_command(command, args, cwd, verbose, hide_stderr, env)", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    for command in commands:\n        if verbose:\n            print('Running %s' % command)\n        try:\n            subprocess.check_call(args, cwd=cwd, env=env, shell=True, stderr=subprocess.STDOUT)\n        except subprocess.CalledProcessError as e:\n            if verbose:\n                print('%s: %s' % (command, e))\n            if hide_stderr:\n                print('%s: %s' % (command, e.output))\n            if e.returncode!= 0:\n                raise\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not commands:\n        return []\n    if isinstance(commands, str):\n        commands = [commands]\n    if isinstance(args, str):\n        args = [args]\n    return subprocess.check_output(\n        commands, stderr=subprocess.STDOUT, cwd=cwd, env=env, verbose=verbose, hide_stderr=hide_stderr\n    )\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if isinstance(commands, str):\n        commands = [commands]\n    for command in commands:\n        run_command_impl(command, args, cwd, verbose, hide_stderr, env)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if isinstance(commands, basestring):\n        commands = [commands]\n    return run_command_generic(commands, args, cwd, verbose, hide_stderr, env)", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not isinstance(commands, list):\n        commands = [commands]\n\n    for command in commands:\n        run_command_with_args(command, args, cwd, verbose, hide_stderr, env)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if len(commands) == 0:\n        return\n    if len(commands) == 1:\n        # Avoid stderr printing to stdout.\n        commands = [commands[0]]\n    for command in commands:\n        run_command_no_output(command, args, cwd, verbose, hide_stderr, env)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not env:\n        env = os.environ.copy()\n\n    if cwd:\n        env['PWD'] = cwd\n\n    return subprocess.call(commands, env=env, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd, verbose=verbose)", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    for cmd in commands:\n        cmd(args, cwd=cwd, verbose=verbose, hide_stderr=hide_stderr, env=env)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if env is None:\n        env = os.environ\n\n    p = subprocess.Popen(commands, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd, env=env)\n    stdout, stderr = p.communicate()\n    if p.returncode!= 0:\n        if verbose:\n            print('Command failed:', commands, p.returncode, stderr.decode('utf-8'))\n        return False\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not isinstance(commands, list):\n        commands = [commands]\n    for command in commands:\n        _run_command(command, args, cwd, verbose, hide_stderr, env)", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    for command in commands:\n        if verbose:\n            print('Running %s' % command)\n        try:\n            subprocess.check_call(args, cwd=cwd, env=env, shell=True, stderr=subprocess.STDOUT)\n        except subprocess.CalledProcessError as e:\n            if verbose:\n                print('%s: %s' % (command, e))\n            if hide_stderr:\n                print('%s: %s' % (command, e.output))\n            if e.returncode!= 0:\n                raise\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not commands:\n        return []\n    if isinstance(commands, str):\n        commands = [commands]\n    if isinstance(args, str):\n        args = [args]\n    return subprocess.check_output(\n        commands, stderr=subprocess.STDOUT, cwd=cwd, env=env, verbose=verbose, hide_stderr=hide_stderr\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if isinstance(commands, str):\n        commands = [commands]\n    for command in commands:\n        run_command_impl(command, args, cwd, verbose, hide_stderr, env)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if isinstance(commands, basestring):\n        commands = [commands]\n    return run_command_generic(commands, args, cwd, verbose, hide_stderr, env)", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not isinstance(commands, list):\n        commands = [commands]\n\n    for command in commands:\n        run_command_with_args(command, args, cwd, verbose, hide_stderr, env)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if len(commands) == 0:\n        return\n    if len(commands) == 1:\n        # Avoid stderr printing to stdout.\n        commands = [commands[0]]\n    for command in commands:\n        run_command_no_output(command, args, cwd, verbose, hide_stderr, env)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_4.py", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "ques_id": "62ece4992e6aefcf4aabbd84", "code": ["def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    return is_ipv4_address(target) or is_ipv6_address(target)\n", "def is_ipv4(target):\n    try:\n        IPv4Address(target)\n        return True\n    except AddressValueError:\n        return False\n", "def is_ipv4(target):\n    try:\n        ipaddress.IPv4Address(target)\n        return True\n    except ValueError:\n        return False", "def is_ipv4(target):\n    try:\n        return netaddr.valid_ipv4(target)\n    except Exception:\n        return False\n", "def is_ipv4(target):\n    try:\n        return netaddr.valid_ipv4(target)\n    except Exception:\n        return False\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n        return True\n    except socket.error:\n        return False\n", "def is_ipv4(target):\n    return is_ip(target) and ':' in target", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n        return True\n    except socket.error:\n        return False\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    return is_ipv4_address(target) or is_ipv6_address(target)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        IPv4Address(target)\n        return True\n    except AddressValueError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        ipaddress.IPv4Address(target)\n        return True\n    except ValueError:\n        return False", "is_pass": true, "return_code": 0}, {"generate_code": "def is_ipv4(target):\n    try:\n        return netaddr.valid_ipv4(target)\n    except Exception:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        return netaddr.valid_ipv4(target)\n    except Exception:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n        return True\n    except socket.error:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    return is_ip(target) and ':' in target", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n        return True\n    except socket.error:\n        return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_11.py", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "ques_id": "62ece4992e6aefcf4aabbd85", "code": ["def find_roots(\n    graph: Graph,\n    rdflib_subclass_of: RDFlib.NamespaceURIRef,\n) -> Set[RDFlib.URIRef]:\n    return find_triples(graph, rdflib_subclass_of, RDFlib.RDFS.subClassOf)\n", "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Union[URIRef, Literal],\n    return_type: Optional[Type] = None,\n) -> Set[URIRef]:\n    if return_type is None:\n        return_type = set()\n    return set(graph.objects(subject=rdflib_subclass, predicate=RDFS.hasRoot))\n", "def find_roots(\n    graph: Graph,\n    sub_class: str\n) -> Set[URIRef]:\n    rdf = rdflib.ConjunctiveGraph()\n    rdf.parse(data=graph.serialize(format='turtle'))\n    return set([rdf.prefixes[pref].namespaceURI for pref in graph.prefixes])\n", "def find_roots(\n    graph: Graph, rdflib.RDFS.subClassOf: RDFLibClass\n) -> Set[RDFLibClass]:\n    if graph.sinks:\n        return set()\n\n    return set(graph.sinks) | set(graph.sources)\n", "def find_roots(\n    graph: Graph, rdflib_subclass: RDFSubClassOf, rdflib_broader: RDFSubClassOf\n) -> Set[URIRef]:\n    return set(rdflib_subclass.object) | set(rdflib_broader.object)\n", "def find_roots(\n    graph: Graph, rdflib_subclass_of: Union[RDFGraph, str]\n) -> Set[Tuple[str, str, str]]:\n    return find_subclass_roots(graph, rdflib_subclass_of)\n", "def find_roots(\n    graph: Graph,\n    rdflib_sub_class: URIRef,\n    rdflib_broader: URIRef,\n) -> Set[URIRef]:\n    return set(graph.objects(rdflib_sub_class, rdflib_broader))\n", "def find_roots(\n    graph: Graph, subclass_of: str = SKOS.broader, cache: bool = True\n) -> Set[URIRef]:\n    return find_roots_via_cache(graph, subclass_of, cache)\n", "def find_roots(\n    graph: Graph,\n    rdflib_subclass: RDFS.Class,\n    rdflib_broader: RDFS.Class,\n) -> Set[URIRef]:\n    return set(\n        rdflib_subclass\n        if rdflib_broader in graph\n        else graph\n        if rdflib_subclass in graph\n        else rdflib_broader\n        if rdflib_broader in graph\n        else rdflib_subclass\n    )\n", "def find_roots(\n    graph: Graph, sub_class: str = SKOS.broader\n) -> Iterable[Tuple[str, URIRef, URIRef]]:\n    return _find_roots(graph, sub_class, set())\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_subclass_of: RDFlib.NamespaceURIRef,\n) -> Set[RDFlib.URIRef]:\n    return find_triples(graph, rdflib_subclass_of, RDFlib.RDFS.subClassOf)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_subclass: Union[URIRef, Literal],\n    return_type: Optional[Type] = None,\n) -> Set[URIRef]:\n    if return_type is None:\n        return_type = set()\n    return set(graph.objects(subject=rdflib_subclass, predicate=RDFS.hasRoot))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    sub_class: str\n) -> Set[URIRef]:\n    rdf = rdflib.ConjunctiveGraph()\n    rdf.parse(data=graph.serialize(format='turtle'))\n    return set([rdf.prefixes[pref].namespaceURI for pref in graph.prefixes])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph, rdflib.RDFS.subClassOf: RDFLibClass\n) -> Set[RDFLibClass]:\n    if graph.sinks:\n        return set()\n\n    return set(graph.sinks) | set(graph.sources)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph, rdflib_subclass: RDFSubClassOf, rdflib_broader: RDFSubClassOf\n) -> Set[URIRef]:\n    return set(rdflib_subclass.object) | set(rdflib_broader.object)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph, rdflib_subclass_of: Union[RDFGraph, str]\n) -> Set[Tuple[str, str, str]]:\n    return find_subclass_roots(graph, rdflib_subclass_of)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_sub_class: URIRef,\n    rdflib_broader: URIRef,\n) -> Set[URIRef]:\n    return set(graph.objects(rdflib_sub_class, rdflib_broader))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph, subclass_of: str = SKOS.broader, cache: bool = True\n) -> Set[URIRef]:\n    return find_roots_via_cache(graph, subclass_of, cache)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    rdflib_subclass: RDFS.Class,\n    rdflib_broader: RDFS.Class,\n) -> Set[URIRef]:\n    return set(\n        rdflib_subclass\n        if rdflib_broader in graph\n        else graph\n        if rdflib_subclass in graph\n        else rdflib_broader\n        if rdflib_broader in graph\n        else rdflib_subclass\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph, sub_class: str = SKOS.broader\n) -> Iterable[Tuple[str, URIRef, URIRef]]:\n    return _find_roots(graph, sub_class, set())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_1.py", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "ques_id": "62ece4992e6aefcf4aabbd86", "code": ["def _dump_string(obj, dumper=None):\n    \n    \n    if dumper is None:\n        dumper = yaml.SafeDumper\n\n    return dumper.represent_scalar('tag:yaml.org,2002:str', str(obj))\n", "def _dump_string(obj, dumper=None):\n    return dumper or obj.dumper\n", "def _dump_string(obj, dumper=None):\n    \n    \n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, Dumper=dumper)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = Dumper\n    return dumper.represent_scalar('tag:yaml.org,2002:str', obj)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = _UnicodeDumper()\n    return dumper.dump(obj)\n", "def _dump_string(obj, dumper=None):\n    \n    \n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)\n", "def _dump_string(obj, dumper=None):\n    return dumper.dump(obj) if dumper else str(obj)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.dump\n    return dumper(u'!' + _dump_object(obj))\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar('tag:yaml.org,2002:str', str(obj))", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _dump_string(obj, dumper=None):\n    \n    \n    if dumper is None:\n        dumper = yaml.SafeDumper\n\n    return dumper.represent_scalar('tag:yaml.org,2002:str', str(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    return dumper or obj.dumper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    \n    \n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, Dumper=dumper)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = Dumper\n    return dumper.represent_scalar('tag:yaml.org,2002:str', obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = _UnicodeDumper()\n    return dumper.dump(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    \n    \n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    return dumper.dump(obj) if dumper else str(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.dump\n    return dumper(u'!' + _dump_object(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar('tag:yaml.org,2002:str', str(obj))", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_8.py", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "ques_id": "62ece4992e6aefcf4aabbd87", "code": ["def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    \n    log = logging.getLogger(name)\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(logging.Formatter('%(asctime)s %(name)-12s %(levelname)-8s %(message)s'))\n    log.addHandler(handler)\n    if debug:\n        log.setLevel(logging.DEBUG)\n    else:\n        log.setLevel(logging.INFO)\n    return log", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n    if debug:\n        logger.setLevel(logging.DEBUG)\n    return logger", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    \n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG if debug else logging.INFO)\n    file_handler = logging.FileHandler(logfile, 'w')\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    file_handler.setFormatter(formatter)\n    logger.addHandler(file_handler)\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log = logging.getLogger(name)\n    log.setLevel(logging.DEBUG if debug else logging.INFO)\n    log.addHandler(logging.FileHandler(logfile))\n    return log\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    if debug:\n        log_level = logging.DEBUG\n    else:\n        log_level = logging.INFO\n\n    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    logging.basicConfig(level=log_level, format=log_format, datefmt='%Y-%m-%d %H:%M:%S')\n\n    logging.getLogger(name).setLevel(log_level)\n\n    logging.getLogger(name).addHandler(logging.StreamHandler())\n    return logging.getLogger(name)", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    \n    logging.basicConfig(level=logging.INFO,\n                        format='%(asctime)s %(levelname)s %(name)s: %(message)s',\n                        datefmt='%Y-%m-%d %H:%M:%S',\n                        filename=logfile,\n                        filemode='w')\n    if debug:\n        logging.getLogger(name).setLevel(logging.DEBUG)\n    else:\n        logging.getLogger(name).setLevel(logging.INFO)", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG if debug else logging.INFO)\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(logging.Formatter(\n        '%(asctime)s [%(levelname)s] %(name)s: %(message)s'))\n    logger.addHandler(handler)\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG if debug else logging.INFO)\n    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n    file_handler = logging.FileHandler(logfile)\n    file_handler.setLevel(logging.DEBUG if debug else logging.INFO)\n    file_handler.setFormatter(formatter)\n    logger.addHandler(file_handler)\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logging.basicConfig(\n        format='%(asctime)s %(levelname)-8s %(message)s',\n        datefmt='%Y-%m-%d %H:%M:%S',\n        level=logging.DEBUG if debug else logging.INFO\n    )\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG if debug else logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)-8s %(message)s'))\n    logger.addHandler(handler)\n\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    if debug:\n        logger = logging.getLogger(name)\n    else:\n        logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG)\n    # create console handler\n    ch = logging.StreamHandler()\n    formatter = logging.Formatter(\n        '%(asctime)s %(name)s %(levelname)s %(message)s')\n    ch.setFormatter(formatter)\n    # add handler to logger object\n    logger.addHandler(ch)\n    return logger\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    \n    log = logging.getLogger(name)\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(logging.Formatter('%(asctime)s %(name)-12s %(levelname)-8s %(message)s'))\n    log.addHandler(handler)\n    if debug:\n        log.setLevel(logging.DEBUG)\n    else:\n        log.setLevel(logging.INFO)\n    return log", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.INFO)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n    if debug:\n        logger.setLevel(logging.DEBUG)\n    return logger", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    \n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG if debug else logging.INFO)\n    file_handler = logging.FileHandler(logfile, 'w')\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    file_handler.setFormatter(formatter)\n    logger.addHandler(file_handler)\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log = logging.getLogger(name)\n    log.setLevel(logging.DEBUG if debug else logging.INFO)\n    log.addHandler(logging.FileHandler(logfile))\n    return log\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    if debug:\n        log_level = logging.DEBUG\n    else:\n        log_level = logging.INFO\n\n    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    logging.basicConfig(level=log_level, format=log_format, datefmt='%Y-%m-%d %H:%M:%S')\n\n    logging.getLogger(name).setLevel(log_level)\n\n    logging.getLogger(name).addHandler(logging.StreamHandler())\n    return logging.getLogger(name)", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    \n    logging.basicConfig(level=logging.INFO,\n                        format='%(asctime)s %(levelname)s %(name)s: %(message)s',\n                        datefmt='%Y-%m-%d %H:%M:%S',\n                        filename=logfile,\n                        filemode='w')\n    if debug:\n        logging.getLogger(name).setLevel(logging.DEBUG)\n    else:\n        logging.getLogger(name).setLevel(logging.INFO)", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG if debug else logging.INFO)\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(logging.Formatter(\n        '%(asctime)s [%(levelname)s] %(name)s: %(message)s'))\n    logger.addHandler(handler)\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG if debug else logging.INFO)\n    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n    file_handler = logging.FileHandler(logfile)\n    file_handler.setLevel(logging.DEBUG if debug else logging.INFO)\n    file_handler.setFormatter(formatter)\n    logger.addHandler(file_handler)\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logging.basicConfig(\n        format='%(asctime)s %(levelname)-8s %(message)s',\n        datefmt='%Y-%m-%d %H:%M:%S',\n        level=logging.DEBUG if debug else logging.INFO\n    )\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG if debug else logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)-8s %(message)s'))\n    logger.addHandler(handler)\n\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    if debug:\n        logger = logging.getLogger(name)\n    else:\n        logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG)\n    # create console handler\n    ch = logging.StreamHandler()\n    formatter = logging.Formatter(\n        '%(asctime)s %(name)s %(levelname)s %(message)s')\n    ch.setFormatter(formatter)\n    # add handler to logger object\n    logger.addHandler(ch)\n    return logger\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_6.py", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "ques_id": "62ece4992e6aefcf4aabbd88", "code": ["def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.arange(*shape, dtype=dtype)", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.empty(shape, dtype)"], "level": "plib_runnable", "generate_results": [{"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.arange(*shape, dtype=dtype)", "is_pass": false, "return_code": 1}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype=dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.empty(shape, dtype)", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_2.py", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "ques_id": "62ece4992e6aefcf4aabbd89", "code": ["def gaussian(x):\n    return np.exp(-np.power(x - 0.2, 2) / (2 * np.power(0.1, 2)))\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-0.5*(x-0.2)**2/(2*0.1**2))", "def gaussian(x):\n    return np.exp(-(x-0.2)**2/(2*0.1**2))\n", "def gaussian(x):\n    return np.exp(-x**2/2) / np.sqrt(2*np.pi)\n", "def gaussian(x):\n    return np.exp(-np.power(x - 0.2, 2.) / 2.) / np.sqrt(2. * np.pi * 0.1)\n", "def gaussian(x):\n    return np.exp(-(x**2)/2) / np.sqrt(2*np.pi) / 0.1\n", "def gaussian(x):\n    \n    \n    return np.exp(-0.5*(x-0.2)**2)\n", "def gaussian(x):\n    return np.exp(-(x ** 2) / 0.2) / (np.sqrt(2 * np.pi) * 0.1)\n", "def gaussian(x):\n    \n    \n    return np.exp(-(x**2)/0.2)/np.sqrt(2*np.pi)"], "level": "plib_runnable", "generate_results": [{"generate_code": "def gaussian(x):\n    return np.exp(-np.power(x - 0.2, 2) / (2 * np.power(0.1, 2)))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.1**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-0.5*(x-0.2)**2/(2*0.1**2))", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x-0.2)**2/(2*0.1**2))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def gaussian(x):\n    return np.exp(-x**2/2) / np.sqrt(2*np.pi)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-np.power(x - 0.2, 2.) / 2.) / np.sqrt(2. * np.pi * 0.1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/2) / np.sqrt(2*np.pi) / 0.1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    \n    \n    return np.exp(-0.5*(x-0.2)**2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x ** 2) / 0.2) / (np.sqrt(2 * np.pi) * 0.1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    \n    \n    return np.exp(-(x**2)/0.2)/np.sqrt(2*np.pi)", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_13.py", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "ques_id": "62ece4992e6aefcf4aabbd8a", "code": ["def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parsers = load_parsers(config_filenames, overrides, resolve_env)\n    return _validate_configurations(parsers)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    cfg_parser = ConfigParser()\n    if resolve_env:\n        cfg_parser.optionxform = str\n    cfg_parser.read_file(open(config_filenames[0]))\n    cfg = _load_configurations(cfg_parser, config_filenames[1:],\n                               overrides=overrides)\n    return cfg, cfg_parser\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = load_configurations_raw(config_filenames, overrides, resolve_env)\n    return validate_configurations(configs)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    cfg = load_config_files(config_filenames, resolve_env=resolve_env)\n    return _validate_config_files(cfg, overrides)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = load_configs(config_filenames, resolve_env)\n    errors = validate_configs(configs, overrides=overrides)\n    return configs, errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parser = ConfigurationParser(overrides)\n    logging.getLogger(\"\").handlers = []\n    return _load_configurations(config_filenames, parser, resolve_env)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    validate(config_filenames, resolve_env=resolve_env)\n    return _load_configurations(config_filenames, overrides)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = load_configurations_from_filenames(config_filenames, overrides, resolve_env)\n    return validate_configurations(configs)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = [load_configuration(filename, overrides, resolve_env) for filename in config_filenames]\n    return dict((filename, parse_configuration(config)) for filename, config in configs), configs\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = load_config_files(config_filenames, overrides, resolve_env)\n    return validate_configs(configs)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parsers = load_parsers(config_filenames, overrides, resolve_env)\n    return _validate_configurations(parsers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    cfg_parser = ConfigParser()\n    if resolve_env:\n        cfg_parser.optionxform = str\n    cfg_parser.read_file(open(config_filenames[0]))\n    cfg = _load_configurations(cfg_parser, config_filenames[1:],\n                               overrides=overrides)\n    return cfg, cfg_parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = load_configurations_raw(config_filenames, overrides, resolve_env)\n    return validate_configurations(configs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    cfg = load_config_files(config_filenames, resolve_env=resolve_env)\n    return _validate_config_files(cfg, overrides)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = load_configs(config_filenames, resolve_env)\n    errors = validate_configs(configs, overrides=overrides)\n    return configs, errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parser = ConfigurationParser(overrides)\n    logging.getLogger(\"\").handlers = []\n    return _load_configurations(config_filenames, parser, resolve_env)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    validate(config_filenames, resolve_env=resolve_env)\n    return _load_configurations(config_filenames, overrides)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = load_configurations_from_filenames(config_filenames, overrides, resolve_env)\n    return validate_configurations(configs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = [load_configuration(filename, overrides, resolve_env) for filename in config_filenames]\n    return dict((filename, parse_configuration(config)) for filename, config in configs), configs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = load_config_files(config_filenames, overrides, resolve_env)\n    return validate_configs(configs)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_3.py", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "ques_id": "62ece4992e6aefcf4aabbd8b", "code": ["def force_string(obj):\n    if isinstance(obj, unicode):\n        return obj.encode('utf-8')\n    elif isinstance(obj, str):\n        return obj\n    else:\n        raise TypeError(\"force_string expected unicode, str or bytes object, got %s\" % type(obj))\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, str):\n        return obj.encode('utf-8')\n    else:\n        raise TypeError(\"force_string only accepts strings or bytes\")\n", "def force_string(obj):\n    return obj.encode(\"utf-8\") if isinstance(obj, str) else obj\n", "def force_string(obj):\n    if isinstance(obj, unicode):\n        return obj.encode('utf-8')\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    else:\n        return obj", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    elif isinstance(obj, unicode):\n        return obj\n    else:\n        raise TypeError(\"force_string expects a string, not %s\" % type(obj))\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, basestring):\n        return obj.encode(\"utf-8\")\n    return obj\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def force_string(obj):\n    if isinstance(obj, unicode):\n        return obj.encode('utf-8')\n    elif isinstance(obj, str):\n        return obj\n    else:\n        raise TypeError(\"force_string expected unicode, str or bytes object, got %s\" % type(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj\n    elif isinstance(obj, str):\n        return obj.encode('utf-8')\n    else:\n        raise TypeError(\"force_string only accepts strings or bytes\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    return obj.encode(\"utf-8\") if isinstance(obj, str) else obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, unicode):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    else:\n        return obj", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    elif isinstance(obj, unicode):\n        return obj\n    else:\n        raise TypeError(\"force_string expects a string, not %s\" % type(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, basestring):\n        return obj.encode(\"utf-8\")\n    return obj\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "ques_id": "62e60723d76274f8a4026b76", "code": ["def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks must be >= 0\")\n    if ticks >= cls._TICKS_PER_SECOND:\n        raise ValueError(\"ticks must be <= %s\" % cls._TICKS_PER_SECOND)\n    return cls._from_ticks(ticks, tz)", "def from_ticks(cls, ticks, tz=None):\n    return cls.from_seconds(ticks * _TICKS_PER_SECOND, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks must be >= 0\")\n    return cls(ticks / 1000000000.0, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    return cls._from_ticks(ticks, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks out of bounds (%s)\" % ticks)\n    return cls.from_unix(ticks / 1000000000, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks must be positive\")\n    return cls.from_seconds(ticks / 1000000.0, tz=tz)\n", "def from_ticks(cls, ticks, tz=None):\n    ticks = ticks * _TICKS_PER_NANOSEC // _TICKS_PER_DAY\n    return cls.from_seconds(ticks, tz)", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError('ticks must be >= 0 (got %r)' % ticks)\n    return cls(ticks / 1000000000, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    return cls._from_time(ticks * cls._TICKS_PER_SECOND, tz)", "def from_ticks(cls, ticks, tz=None):\n    return cls.from_datetime(datetime.fromtimestamp(ticks / 1000.0, tz))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks must be >= 0\")\n    if ticks >= cls._TICKS_PER_SECOND:\n        raise ValueError(\"ticks must be <= %s\" % cls._TICKS_PER_SECOND)\n    return cls._from_ticks(ticks, tz)", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls.from_seconds(ticks * _TICKS_PER_SECOND, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks must be >= 0\")\n    return cls(ticks / 1000000000.0, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls._from_ticks(ticks, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks out of bounds (%s)\" % ticks)\n    return cls.from_unix(ticks / 1000000000, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks must be positive\")\n    return cls.from_seconds(ticks / 1000000.0, tz=tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    ticks = ticks * _TICKS_PER_NANOSEC // _TICKS_PER_DAY\n    return cls.from_seconds(ticks, tz)", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError('ticks must be >= 0 (got %r)' % ticks)\n    return cls(ticks / 1000000000, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls._from_time(ticks * cls._TICKS_PER_SECOND, tz)", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls.from_datetime(datetime.fromtimestamp(ticks / 1000.0, tz))\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60873d76274f8a4026bd8", "code": ["def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n\n    return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    return cls.__protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers[protocol_version]\n", "def protocol_handlers(cls, protocol_version=None):\n    return _PROTOCOL_HANDLERS.get(cls, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return _get_protocol_handlers(cls, protocol_version)\n", "def protocol_handlers(cls, protocol_version=None):\n    if not protocol_version:\n        return _protocol_handlers.get(cls, {})\n\n    return _protocol_handlers.get(cls, {})[protocol_version]\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return _get_protocol_handlers(cls)\n    else:\n        return _get_protocol_handlers(cls, protocol_version)\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    return _protocol_handlers.get(cls, {}) if protocol_version is None else _protocol_handlers.get(cls, {})[protocol_version]\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n\n    return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": true, "return_code": 0}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return cls.__protocol_handlers.get(protocol_version, {})\n", "is_pass": true, "return_code": 0}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers[protocol_version]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return _PROTOCOL_HANDLERS.get(cls, {})\n", "is_pass": true, "return_code": 0}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return _get_protocol_handlers(cls, protocol_version)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if not protocol_version:\n        return _protocol_handlers.get(cls, {})\n\n    return _protocol_handlers.get(cls, {})[protocol_version]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": true, "return_code": 0}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return _get_protocol_handlers(cls)\n    else:\n        return _get_protocol_handlers(cls, protocol_version)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": true, "return_code": 0}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return _protocol_handlers.get(cls, {}) if protocol_version is None else _protocol_handlers.get(cls, {})[protocol_version]\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "ques_id": "62e60e3bd76274f8a4026d1a", "code": ["def from_raw_values(cls, values):\n    return cls(values)", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(\n        raw_values=[value.strip() for value in values],\n        url=url_from_raw_values(values),\n    )\n", "def from_raw_values(cls, values):\n    return cls(\n        raw_values=[\n            (str(value), {}) for value in values\n        ]\n    )\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)", "def from_raw_values(cls, values):\n    return cls([cls.from_raw_value(v) for v in values])\n"], "level": "self_contained", "generate_results": [{"generate_code": "def from_raw_values(cls, values):\n    return cls(values)", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(\n        raw_values=[value.strip() for value in values],\n        url=url_from_raw_values(values),\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(\n        raw_values=[\n            (str(value), {}) for value in values\n        ]\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls([cls.from_raw_value(v) for v in values])\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "ques_id": "62b87b199a0c4fa8b80b354c", "code": ["def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        return seq, type(seq)\n    return seq, type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, (str, bytes)):\n        return seq, None\n    if isinstance(seq, Sequence):\n        return seq, seq.__class__\n    if bufsize is None:\n        bufsize = sys.getsizeof(seq)\n    return seq, seq.__class__((seq, Sequence(bufsize)))\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        return (seq, SequenceType.SEQUENCE)\n    elif isinstance(seq, SequenceType):\n        return (seq, SequenceType.SEQUENCE_TYPE)\n    else:\n        return (seq, SequenceType.SEQUENCE_TYPE)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        return seq, seq.__class__\n    return seq, type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, seq_types):\n        return (seq, seq_types[seq.__class__])\n    if isinstance(seq, (list, tuple)):\n        return seq\n    if isinstance(seq, dict):\n        return seq_types[type(seq)](seq)\n    raise TypeError(\"Cannot determine sequence type from sequence of type {}\".format(type(seq)))\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, sequence):\n        return (seq, seq.type)\n    elif isinstance(seq, sequence_type):\n        return (seq, seq.__class__)\n    elif isinstance(seq, type):\n        return (seq, type)\n    else:\n        raise TypeError(\"seq must be a sequence, sequence_type, or a type\")\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, (six.string_types, six.binary_type)):\n        return (seq, seq.dtype)\n    if isinstance(seq, six.integer_types):\n        return (seq, seq.dtype)\n    if bufsize is None:\n        bufsize = sys.getsizeof(seq)\n    return (seq, np.dtype(seq.dtype))\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        return seq, type(seq)\n    return seq, type(seq)", "def _get_seq_with_type(seq, bufsize=None):\n    if not isinstance(seq, Sequence):\n        seq = Sequence(seq, bufsize)\n\n    return seq, type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, (list, tuple)):\n        return seq, seq.__class__\n    elif isinstance(seq, dict):\n        return list(seq.items()), seq.__class__\n    else:\n        return (seq, seq.__class__), seq.__class__\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        return seq, type(seq)\n    return seq, type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, (str, bytes)):\n        return seq, None\n    if isinstance(seq, Sequence):\n        return seq, seq.__class__\n    if bufsize is None:\n        bufsize = sys.getsizeof(seq)\n    return seq, seq.__class__((seq, Sequence(bufsize)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        return (seq, SequenceType.SEQUENCE)\n    elif isinstance(seq, SequenceType):\n        return (seq, SequenceType.SEQUENCE_TYPE)\n    else:\n        return (seq, SequenceType.SEQUENCE_TYPE)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        return seq, seq.__class__\n    return seq, type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, seq_types):\n        return (seq, seq_types[seq.__class__])\n    if isinstance(seq, (list, tuple)):\n        return seq\n    if isinstance(seq, dict):\n        return seq_types[type(seq)](seq)\n    raise TypeError(\"Cannot determine sequence type from sequence of type {}\".format(type(seq)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, sequence):\n        return (seq, seq.type)\n    elif isinstance(seq, sequence_type):\n        return (seq, seq.__class__)\n    elif isinstance(seq, type):\n        return (seq, type)\n    else:\n        raise TypeError(\"seq must be a sequence, sequence_type, or a type\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, (six.string_types, six.binary_type)):\n        return (seq, seq.dtype)\n    if isinstance(seq, six.integer_types):\n        return (seq, seq.dtype)\n    if bufsize is None:\n        bufsize = sys.getsizeof(seq)\n    return (seq, np.dtype(seq.dtype))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, Sequence):\n        return seq, type(seq)\n    return seq, type(seq)", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if not isinstance(seq, Sequence):\n        seq = Sequence(seq, bufsize)\n\n    return seq, type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, (list, tuple)):\n        return seq, seq.__class__\n    elif isinstance(seq, dict):\n        return list(seq.items()), seq.__class__\n    else:\n        return (seq, seq.__class__), seq.__class__\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "ques_id": "62b87b4f9a0c4fa8b80b3581", "code": ["def scale(self, other=None, recompute=False):\n\nif other is not None:\nif other is self.scale:\nreturn\nself._recompute_scale(other, recompute)\nelse:\nself._compute_scale(self, recompute)", "def scale(self, other=None, recompute=False):\n\n    if not isinstance(other, Histogram):\n        other = Histogram(other)\n\n    if recompute or other.scale is None:\n        other.scale = np.sum(self.values) / np.sum(other.values)\n\n    return other.scale", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return _lena.hist_scale(self, recompute)\n    else:\n        return _lena.hist_scale(self, other, recompute)", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        other = self._hist\n\n    if recompute:\n        self._compute_scale(other)\n\n    return other._scale", "def scale(self, other=None, recompute=False):\n    if other is None:\n        return _lena.hist_scale(self, recompute)\n    _lena.hist_scale(self, other, recompute)\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return histogram(self,'scale', recompute)\n    else:\n        histogram_scale(self, other, recompute)", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        other = self\n    if other._scale is None:\n        other._compute_scale(recompute)\n    return other._scale", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        other = self\n\n    if not recompute and other._scale is not None:\n        return other._scale\n\n    other._scale = hist_scale(self, other)\n    return other._scale", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return _lena.hist_scale(self, recompute)\n    else:\n        _lena.hist_scale(self, other, recompute)\n", "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        scale = _lena_hist_scale(self)\n        if scale is not None and recompute:\n            self.recompute()\n        return scale\n\n    _lena_hist_scale(self, other)"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None, recompute=False):\n\nif other is not None:\nif other is self.scale:\nreturn\nself._recompute_scale(other, recompute)\nelse:\nself._compute_scale(self, recompute)", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if not isinstance(other, Histogram):\n        other = Histogram(other)\n\n    if recompute or other.scale is None:\n        other.scale = np.sum(self.values) / np.sum(other.values)\n\n    return other.scale", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return _lena.hist_scale(self, recompute)\n    else:\n        return _lena.hist_scale(self, other, recompute)", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        other = self._hist\n\n    if recompute:\n        self._compute_scale(other)\n\n    return other._scale", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        return _lena.hist_scale(self, recompute)\n    _lena.hist_scale(self, other, recompute)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return histogram(self,'scale', recompute)\n    else:\n        histogram_scale(self, other, recompute)", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        other = self\n    if other._scale is None:\n        other._compute_scale(recompute)\n    return other._scale", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        other = self\n\n    if not recompute and other._scale is not None:\n        return other._scale\n\n    other._scale = hist_scale(self, other)\n    return other._scale", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        return _lena.hist_scale(self, recompute)\n    else:\n        _lena.hist_scale(self, other, recompute)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n\n    if other is None:\n        scale = _lena_hist_scale(self)\n        if scale is not None and recompute:\n            self.recompute()\n        return scale\n\n    _lena_hist_scale(self, other)", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "ques_id": "62b87b519a0c4fa8b80b3583", "code": ["def scale(self, other=None):\nif other is None:\nreturn self._scale\nelse:\nself._scale = other\nreturn self", "def scale(self, other=None):\nif other is None:\nreturn self._scale\nelse:\nif self._scale is None:\nself._scale = other\nreturn self._scale\n\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    else:\n        if not isinstance(other, (int, float, Lena)):\n            raise LenaValueError(\"Invalid value for scale\")\n        self._scale = other", "def scale(self, other=None):\nif other is None:\nreturn self._scale\nelse:\nif other is None:\nreturn self._scale_unknown\nif isinstance(other, numbers.Number):\nreturn self._scale * other\nelif isinstance(other, basestring):\nreturn self._scale_string * other\nelse:\nraise LenaValueError(\"unknown scale type\")", "def scale(self, other=None):\nif other is None:\nreturn self._scale\nelse:\nif self._scale is None:\nself._scale = other\nreturn self._scale", "def scale(self, other=None):\n\n    if other is None:\n        return self._scale\n    else:\n        if type(other) is not int or other < 0:\n            raise LenaValueError(\"scale must be a non-negative number\")\n        self._scale = other", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    self._check_valid_scale(other)\n    self._scale = other\n", "def scale(self, other=None):\nif other is None:\nreturn self._scale\nelse:\nself._scale = other\nself._update()", "def scale(self, other=None):\nif other is None:\nreturn self._scale\nif isinstance(other, Lena):\nself._scale = other.scale\nelse:\nself._scale = other\n\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, int):\n        raise LenaValueError(\"scale must be an integer\")\n    self._scale = other\n    return self"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None):\nif other is None:\nreturn self._scale\nelse:\nself._scale = other\nreturn self", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\nif other is None:\nreturn self._scale\nelse:\nif self._scale is None:\nself._scale = other\nreturn self._scale\n\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    else:\n        if not isinstance(other, (int, float, Lena)):\n            raise LenaValueError(\"Invalid value for scale\")\n        self._scale = other", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\nif other is None:\nreturn self._scale\nelse:\nif other is None:\nreturn self._scale_unknown\nif isinstance(other, numbers.Number):\nreturn self._scale * other\nelif isinstance(other, basestring):\nreturn self._scale_string * other\nelse:\nraise LenaValueError(\"unknown scale type\")", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\nif other is None:\nreturn self._scale\nelse:\nif self._scale is None:\nself._scale = other\nreturn self._scale", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n\n    if other is None:\n        return self._scale\n    else:\n        if type(other) is not int or other < 0:\n            raise LenaValueError(\"scale must be a non-negative number\")\n        self._scale = other", "is_pass": true, "return_code": 0}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    self._check_valid_scale(other)\n    self._scale = other\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\nif other is None:\nreturn self._scale\nelse:\nself._scale = other\nself._update()", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\nif other is None:\nreturn self._scale\nif isinstance(other, Lena):\nself._scale = other.scale\nelse:\nself._scale = other\n\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, int):\n        raise LenaValueError(\"scale must be an integer\")\n    self._scale = other\n    return self", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "ques_id": "62b87b869a0c4fa8b80b35e1", "code": ["def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\npass", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\npass", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\npass", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    pass", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\npass", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\npass", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1136", "code": ["def _verify(iface, candidate, tentative=False, vtype=None):\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1137", "code": ["def verifyObject(iface, candidate, tentative=False):\n", "def verifyObject(iface, candidate, tentative=False):\n", "def verifyObject(iface, candidate, tentative=False):\n", "def verifyObject(iface, candidate, tentative=False):\n", "def verifyObject(iface, candidate, tentative=False):\n", "def verifyObject(iface, candidate, tentative=False):\n", "def verifyObject(iface, candidate, tentative=False):\n    return True", "def verifyObject(iface, candidate, tentative=False):\n", "def verifyObject(iface, candidate, tentative=False):\n", "def verifyObject(iface, candidate, tentative=False):\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyObject(iface, candidate, tentative=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "ques_id": "62b8b4c1eb7e40a82d2d1139", "code": ["def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if candidate is None:\n        return False\n    if not isinstance(candidate, iface):\n        return False\n    if not isinstance(candidate, Tentative):\n        return False\n    return True\n", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not isinstance(candidate, IProtocol):\n        raise TypeError('{} is not a protocol object'.format(candidate))\n    if not isinstance(iface, IProtocol):\n        raise TypeError('{} is not a protocol object'.format(iface))\n    if not issubclass(candidate, iface):\n        raise TypeError('{} is not a subclass of {}'.format(candidate, iface))\n    if not tentative:\n        if not candidate.__class__.__name__ == iface.__class__.__name__:\n            raise TypeError('{} is not a subclass of {}'.format(candidate, iface))\n", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    verifyClassProperties(iface, candidate, tentative)\n    verifyClassAttributes(iface, candidate, tentative)\n    verifyClassMethods(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    if isinstance(candidate, iface):\n        return True\n    elif isinstance(candidate, Interface):\n        return verifyClass(candidate.iface, candidate, tentative)\n    else:\n        return False", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    verifyClassProperties(iface, candidate)\n    verifyClassProperties(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if issubclass(candidate, iface):\n        return True\n    else:\n        if tentative:\n            return False\n        else:\n            raise TypeError(\"%r is not a %s subclass\" % (candidate, iface))", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    return verify(iface, candidate, None, tentative)", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    return verify(iface, candidate, needs=None, tentative=tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    if tentative:\n        if isinstance(candidate, type):\n            return True\n        else:\n            return False\n    else:\n        if isinstance(candidate, type) and issubclass(candidate, iface):\n            return True\n        else:\n            return False", "def verifyClass(iface, candidate, tentative=False):\n    if issubclass(iface, Candidate) and not issubclass(iface, Tentative):\n        return iface(candidate, tentative)\n    else:\n        return iface\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if candidate is None:\n        return False\n    if not isinstance(candidate, iface):\n        return False\n    if not isinstance(candidate, Tentative):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not isinstance(candidate, IProtocol):\n        raise TypeError('{} is not a protocol object'.format(candidate))\n    if not isinstance(iface, IProtocol):\n        raise TypeError('{} is not a protocol object'.format(iface))\n    if not issubclass(candidate, iface):\n        raise TypeError('{} is not a subclass of {}'.format(candidate, iface))\n    if not tentative:\n        if not candidate.__class__.__name__ == iface.__class__.__name__:\n            raise TypeError('{} is not a subclass of {}'.format(candidate, iface))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    verifyClassProperties(iface, candidate, tentative)\n    verifyClassAttributes(iface, candidate, tentative)\n    verifyClassMethods(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    if isinstance(candidate, iface):\n        return True\n    elif isinstance(candidate, Interface):\n        return verifyClass(candidate.iface, candidate, tentative)\n    else:\n        return False", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    verifyClassProperties(iface, candidate)\n    verifyClassProperties(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if issubclass(candidate, iface):\n        return True\n    else:\n        if tentative:\n            return False\n        else:\n            raise TypeError(\"%r is not a %s subclass\" % (candidate, iface))", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    return verify(iface, candidate, None, tentative)", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    return verify(iface, candidate, needs=None, tentative=tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    if tentative:\n        if isinstance(candidate, type):\n            return True\n        else:\n            return False\n    else:\n        if isinstance(candidate, type) and issubclass(candidate, iface):\n            return True\n        else:\n            return False", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    if issubclass(iface, Candidate) and not issubclass(iface, Tentative):\n        return iface(candidate, tentative)\n    else:\n        return iface\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "ques_id": "62b8b559eb7e40a82d2d11f6", "code": ["def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = __metaclass__\n    for base in bases:\n        if isinstance(base, explicit_mc):\n            return base\n        else:\n            continue\n    return __metaclass__\n", "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is None:\n        explicit_mc = []\n\n    for base in bases:\n        if isinstance(base, type):\n            if base not in explicit_mc:\n                explicit_mc.append(base)\n                continue\n\n        if hasattr(base, '__metaclass__'):\n            return base.__metaclass__\n\n    return type\n", "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is not None:\n        return explicit_mc\n    else:\n        return bases[0].__metaclass__\n", "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if not bases:\n        return type\n    if len(bases) == 1:\n        return type\n    if not explicit_mc:\n        explicit_mc = []\n    for base in bases:\n        if isinstance(base, type) and issubclass(base, Metaclass):\n            explicit_mc.append(base)\n    if len(explicit_mc) == 0:\n        return type\n    return type if len(explicit_mc) == 1 else type.__new__(type, '%s%s' % (type.__name__, ''.join(explicit_mc)))\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    if len(bases) == 0:\n        return None\n    for base in bases:\n        if not isinstance(base, (type, types.ClassType)):\n            continue\n        if base in explicit_mc:\n            return base\n        explicit_mc.append(base)\n        return determineMetaclass(base.__bases__, explicit_mc)\n", "def determineMetaclass(bases, explicit_mc=None):\n    metaclass = 0\n    for base in bases:\n        if isinstance(base, type) and issubclass(base, Meta):\n            if metaclass == 0:\n                metaclass = base.__metaclass__\n            else:\n                return None\n        elif isinstance(base, type) and issubclass(base, type):\n            if metaclass == 0:\n                metaclass = base.__metaclass__\n            else:\n                return None\n    if explicit_mc:\n        return explicit_mc\n    else:\n        return metaclass\n", "def determineMetaclass(bases, explicit_mc=None):\n    for base in bases:\n        if hasattr(base, '__metaclass__'):\n            return base.__metaclass__\n    return type(explicit_mc)", "def determineMetaclass(bases, explicit_mc=None):\n    for base in bases:\n        if isinstance(base, type):\n            if base.__metaclass__ is None:\n                return base\n            elif explicit_mc is not None:\n                return base.__metaclass__\n            else:\n                return base.__metaclass__\n    return None\n", "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if issubclass(base, (type, types.ClassType)) and not issubclass(base, (types.FunctionType, types.MethodType)):\n            if base not in explicit_mc:\n                explicit_mc.append(base)\n                return base\n    return explicit_mc[0]", "def determineMetaclass(bases, explicit_mc=None):\n    mc = explicit_mc or []\n    for base in bases:\n        if issubclass(base, (type)):\n            return base, None\n        elif issubclass(base, type) and base not in mc:\n            return base, base.__metaclass__\n    return None, None\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = __metaclass__\n    for base in bases:\n        if isinstance(base, explicit_mc):\n            return base\n        else:\n            continue\n    return __metaclass__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is None:\n        explicit_mc = []\n\n    for base in bases:\n        if isinstance(base, type):\n            if base not in explicit_mc:\n                explicit_mc.append(base)\n                continue\n\n        if hasattr(base, '__metaclass__'):\n            return base.__metaclass__\n\n    return type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is not None:\n        return explicit_mc\n    else:\n        return bases[0].__metaclass__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if not bases:\n        return type\n    if len(bases) == 1:\n        return type\n    if not explicit_mc:\n        explicit_mc = []\n    for base in bases:\n        if isinstance(base, type) and issubclass(base, Metaclass):\n            explicit_mc.append(base)\n    if len(explicit_mc) == 0:\n        return type\n    return type if len(explicit_mc) == 1 else type.__new__(type, '%s%s' % (type.__name__, ''.join(explicit_mc)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    if len(bases) == 0:\n        return None\n    for base in bases:\n        if not isinstance(base, (type, types.ClassType)):\n            continue\n        if base in explicit_mc:\n            return base\n        explicit_mc.append(base)\n        return determineMetaclass(base.__bases__, explicit_mc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    metaclass = 0\n    for base in bases:\n        if isinstance(base, type) and issubclass(base, Meta):\n            if metaclass == 0:\n                metaclass = base.__metaclass__\n            else:\n                return None\n        elif isinstance(base, type) and issubclass(base, type):\n            if metaclass == 0:\n                metaclass = base.__metaclass__\n            else:\n                return None\n    if explicit_mc:\n        return explicit_mc\n    else:\n        return metaclass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    for base in bases:\n        if hasattr(base, '__metaclass__'):\n            return base.__metaclass__\n    return type(explicit_mc)", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    for base in bases:\n        if isinstance(base, type):\n            if base.__metaclass__ is None:\n                return base\n            elif explicit_mc is not None:\n                return base.__metaclass__\n            else:\n                return base.__metaclass__\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if issubclass(base, (type, types.ClassType)) and not issubclass(base, (types.FunctionType, types.MethodType)):\n            if base not in explicit_mc:\n                explicit_mc.append(base)\n                return base\n    return explicit_mc[0]", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    mc = explicit_mc or []\n    for base in bases:\n        if issubclass(base, (type)):\n            return base, None\n        elif issubclass(base, type) and base not in mc:\n            return base, base.__metaclass__\n    return None, None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "ques_id": "62b8d22a48ba5a41d1c3f47d", "code": ["def pop(self, key, default=__marker):\n    if key in self:\n        value = self[key]\n        del self[key]\n        return value\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "def pop(self, key, default=__marker):\n    try:\n        return super(MarkerMapping, self).pop(key, default)\n    except KeyError:\n        if default is not __marker:\n            return default\n        raise\n", "def pop(self, key, default=__marker):\n    if key in self:\n        value = self[key]\n        del self[key]\n        return value\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "def pop(self, key, default=__marker):\n    return self.__delitem__(key, default)", "def pop(self, key, default=__marker):\n    if key in self:\n        result = self[key]\n        del self[key]\n        return result\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        return self.pop(key)\n    return self.__dict__.pop(key, default)\n", "def pop(self, key, default=__marker):\n    if key in self:\n        return self[key]\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "def pop(self, key, default=__marker):\n    if key in self:\n        return self.__data.pop(key, default)\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "def pop(self, key, default=__marker):\n    return self.__data.pop(key, default)", "def pop(self, key, default=__marker):\n    if key in self:\n        return self[key]\n    if default is self.__marker:\n        raise KeyError(key)\n    return default"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        value = self[key]\n        del self[key]\n        return value\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    try:\n        return super(MarkerMapping, self).pop(key, default)\n    except KeyError:\n        if default is not __marker:\n            return default\n        raise\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        value = self[key]\n        del self[key]\n        return value\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    return self.__delitem__(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        result = self[key]\n        del self[key]\n        return result\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        return self.pop(key)\n    return self.__dict__.pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        return self[key]\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        return self.__data.pop(key, default)\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    return self.__data.pop(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        return self[key]\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "ques_id": "62b8d23748ba5a41d1c3f497", "code": ["def popitem(self):\n    if self._dict.keys():\n        return (self._dict.keys()[0], self._dict.values()[0])\n    else:\n        raise KeyError(\"empty dictionary\")", "def popitem(self):\n    return heapq.heappop(self._heap)[1]", "def popitem(self):\n    if not self:\n        raise KeyError('dictionary is empty')\n    key = self._keys[0]\n    value = self._values[0]\n    del self[key]\n    return (key, value)\n", "def popitem(self):\n    # return (key, self.__dict__.pop(key))\n    # return (key, self.__dict__[key])\n    return self.__dict__.popitem(last=False)", "def popitem(self):\n    return self.__data.popitem()\n", "def popitem(self):\n    return heapq.heappop(self._dict.iteritems())[1]\n", "def popitem(self):\n    \n    \n    for k in self.__slots__:\n        if k not in self:\n            raise KeyError('Key %r not found' % k)\n    k = self.__keys[0]\n    del self[k]\n    return (k, self[k])\n", "def popitem(self):\n    try:\n        return self.__delitem__(self.__len__() - 1)\n    except KeyError:\n        raise KeyError('%s is empty' % self.__class__.__name__)", "def popitem(self):\n    with self._lock:\n        if self._n == 0:\n            raise KeyError('popitem(): dictionary is empty')\n        # remove and return smallest item from heap\n        key = self._heap.pop()\n        result = (key, self._data[key])\n        self._n -= 1\n        if self._n == 0:\n            self._heapify()\n        return result", "def popitem(self):\n    return self._dict.popitem()"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    if self._dict.keys():\n        return (self._dict.keys()[0], self._dict.values()[0])\n    else:\n        raise KeyError(\"empty dictionary\")", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return heapq.heappop(self._heap)[1]", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if not self:\n        raise KeyError('dictionary is empty')\n    key = self._keys[0]\n    value = self._values[0]\n    del self[key]\n    return (key, value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    # return (key, self.__dict__.pop(key))\n    # return (key, self.__dict__[key])\n    return self.__dict__.popitem(last=False)", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return heapq.heappop(self._dict.iteritems())[1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \n    \n    for k in self.__slots__:\n        if k not in self:\n            raise KeyError('Key %r not found' % k)\n    k = self.__keys[0]\n    del self[k]\n    return (k, self[k])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__delitem__(self.__len__() - 1)\n    except KeyError:\n        raise KeyError('%s is empty' % self.__class__.__name__)", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    with self._lock:\n        if self._n == 0:\n            raise KeyError('popitem(): dictionary is empty')\n        # remove and return smallest item from heap\n        key = self._heap.pop()\n        result = (key, self._data[key])\n        self._n -= 1\n        if self._n == 0:\n            self._heapify()\n        return result", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self._dict.popitem()", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "ques_id": "62b8d23a48ba5a41d1c3f499", "code": ["def popitem(self):\n    with self._lock:\n        return self._table.popitem()", "def popitem(self):\n    try:\n        return self._data.popitem()\n    except KeyError:\n        raise KeyError('%r is empty' % self.__class__.__name__)", "def popitem(self):\n    # remove and return the most recently used item\n    return self._data.popitem()", "def popitem(self):\n    \n    \n    if self._len == 0:\n        raise KeyError('dictionary is empty')\n    key = self._keys[0]\n    del self[key]\n    return (key, self[key])", "def popitem(self):\n    if not self._data:\n        raise KeyError('dictionary is empty')\n    key = self._data[0]\n    self._data[0] = self._data[-1]\n    self._data.pop()\n    return (key, self._data[0])\n", "def popitem(self):\n    try:\n        return self.__data.popitem()\n    except KeyError:\n        raise KeyError('%s is empty' % type(self).__name__)", "def popitem(self):\n    if not self:\n        raise KeyError('dictionary is empty')\n    key = self._keys[0]\n    value = self._values[0]\n    del self[key]\n    return key, value", "def popitem(self):\n    return self.__data.popitem()", "def popitem(self):\n    return self._data.popitem()", "def popitem(self):\n    try:\n        key = next(iter(self))\n    except StopIteration:\n        raise KeyError('dictionary is empty')\n    value = self.pop(key)\n    return (key, value)"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    with self._lock:\n        return self._table.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self._data.popitem()\n    except KeyError:\n        raise KeyError('%r is empty' % self.__class__.__name__)", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    # remove and return the most recently used item\n    return self._data.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \n    \n    if self._len == 0:\n        raise KeyError('dictionary is empty')\n    key = self._keys[0]\n    del self[key]\n    return (key, self[key])", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if not self._data:\n        raise KeyError('dictionary is empty')\n    key = self._data[0]\n    self._data[0] = self._data[-1]\n    self._data.pop()\n    return (key, self._data[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__data.popitem()\n    except KeyError:\n        raise KeyError('%s is empty' % type(self).__name__)", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if not self:\n        raise KeyError('dictionary is empty')\n    key = self._keys[0]\n    value = self._values[0]\n    del self[key]\n    return key, value", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self._data.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = next(iter(self))\n    except StopIteration:\n        raise KeyError('dictionary is empty')\n    value = self.pop(key)\n    return (key, value)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "ques_id": "62b8d23c48ba5a41d1c3f49b", "code": ["def popitem(self):\n    if self._key_sequence:\n        key = self._key_sequence.pop()\n        value = self[key]\n        del self[key]\n        return (key, value)\n    else:\n        return dict.popitem(self)\n", "def popitem(self):\n    item = super().popitem()\n    self.__map.pop(item[0], None)\n    return item", "def popitem(self):\n    with self._lock:\n        return self._dict.popitem()", "def popitem(self):\n    return self._shelf.popitem()\n", "def popitem(self):\n    return self.__dict__.popitem()", "def popitem(self):\n    return dict.popitem(self)[:2]\n", "def popitem(self):\n    return self.__data.popitem()", "def popitem(self):\n    raise NotImplementedError", "def popitem(self):\n    try:\n        return dict.popitem(self)\n    except KeyError:\n        raise KeyError('Key %r not found' % (self._key,))", "def popitem(self):\n    item = self._dict.popitem()\n    return item[0], item[1]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    if self._key_sequence:\n        key = self._key_sequence.pop()\n        value = self[key]\n        del self[key]\n        return (key, value)\n    else:\n        return dict.popitem(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    item = super().popitem()\n    self.__map.pop(item[0], None)\n    return item", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    with self._lock:\n        return self._dict.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self._shelf.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__dict__.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[:2]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    raise NotImplementedError", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return dict.popitem(self)\n    except KeyError:\n        raise KeyError('Key %r not found' % (self._key,))", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    item = self._dict.popitem()\n    return item[0], item[1]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "ques_id": "62b8d23e48ba5a41d1c3f49e", "code": ["def popitem(self):\n    return self.data.popitem()\n", "def popitem(self):\n    try:\n        key = random.choice(list(self.__data.keys()))\n    except KeyError:\n        raise KeyError('No item found with key \"%s\"' % (key,))\n    value = self.pop(key)\n    return key, value\n", "def popitem(self):\n    try:\n        key = random.choice(list(self.data.keys()))\n        return (key, self.pop(key))\n    except KeyError:\n        raise KeyError('No item found with key \"%s\"' % key)", "def popitem(self):\n    return self.__data.popitem()", "def popitem(self):\n    try:\n        key = random.choice(self.__data.keys())\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n    value = self.__data[key]\n    del self.__data[key]\n    return key, value", "def popitem(self):\n    return dict.popitem(self)[0]\n", "def popitem(self):\n    \n    \n    return self._data.popitem()", "def popitem(self):\n    return random.choice(list(self.items()))", "def popitem(self):\n    return self.__data.popitem()", "def popitem(self):\n    try:\n        return next(iter(self))\n    except StopIteration:\n        raise KeyError('dictionary is empty')"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    return self.data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = random.choice(list(self.__data.keys()))\n    except KeyError:\n        raise KeyError('No item found with key \"%s\"' % (key,))\n    value = self.pop(key)\n    return key, value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = random.choice(list(self.data.keys()))\n        return (key, self.pop(key))\n    except KeyError:\n        raise KeyError('No item found with key \"%s\"' % key)", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = random.choice(self.__data.keys())\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n    value = self.__data[key]\n    del self.__data[key]\n    return key, value", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \n    \n    return self._data.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return random.choice(list(self.items()))", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return next(iter(self))\n    except StopIteration:\n        raise KeyError('dictionary is empty')", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "ques_id": "62b43425903eeb48555d3ea1", "code": ["def _create_in_regex(self) -> Pattern:\nreturn re.compile(r\"\\b((?:\\d+)\\.)?(\\d+)\\b\", re.UNICODE)\n", "def _create_in_regex(self) -> Pattern:\n\n    return re.compile(r'^(\\w+)(?:(?P<suffix>[\\w\\s-]+)?)?$', re.UNICODE)\n", "def _create_in_regex(self) -> Pattern:\nreturn re.compile(r\"(?P<in_style>(?:[a-z]+|[A-Z][a-z]+|[0-9]+)\\b)\", re.IGNORECASE)\n", "def _create_in_regex(self) -> Pattern:\nreturn re.compile(r'^(\\S+)\\s+(\\S+)')", "def _create_in_regex(self) -> Pattern:\n    return re.compile(r'^(\\S+)?(\\S+)?(\\S+)$')\n", "def _create_in_regex(self) -> Pattern:\n\n    in_regex = self._get_regex(\"in\")\n    in_regex = in_regex.replace(\"(\", \"(?P<in>.*?)\")\n    in_regex = in_regex.replace(\")\", \"(?P<in>.*?)\")\n    in_regex = in_regex.replace(\" \", \"\\\\s\")\n    in_regex = in_regex.replace(\"-\", \"\\\\-\")\n    in_regex = in_regex.replace(\"%\", \"\\\\%\")\n    in_regex = in_regex.replace(\"#\", \"\\\\#\")\n    in_regex = in_regex.replace(\"$\", \"\\\\$\")\n\n    return in_regex\n", "def _create_in_regex(self) -> Pattern:\nreturn re.compile(r'^(\\S+)\\s*(\\S+)\\s*(\\S+)\\s*(\\S+)\\s*(\\S+)$')", "def _create_in_regex(self) -> Pattern:\n    in_regex = self._get_in_style_param_regex()\n    in_regex = in_regex.replace(\" \", r\"\\ \")\n    in_regex = in_regex.replace(\"%\", r\"\\%\")\n    in_regex = in_regex.replace(\"#\", r\"\\#\")\n    in_regex = in_regex.replace(\"$\", r\"\\$\")\n    in_regex = in_regex.replace(\"\\\\\", r\"\\\\\")\n    return in_regex\n", "def _create_in_regex(self) -> Pattern:\nreturn re.compile(r\"\\b\" + self.in_style_regex + r\"\\b\", re.UNICODE)", "def _create_in_regex(self) -> Pattern:\n    return Pattern(self._in_style_regex)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_in_regex(self) -> Pattern:\nreturn re.compile(r\"\\b((?:\\d+)\\.)?(\\d+)\\b\", re.UNICODE)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n\n    return re.compile(r'^(\\w+)(?:(?P<suffix>[\\w\\s-]+)?)?$', re.UNICODE)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\nreturn re.compile(r\"(?P<in_style>(?:[a-z]+|[A-Z][a-z]+|[0-9]+)\\b)\", re.IGNORECASE)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\nreturn re.compile(r'^(\\S+)\\s+(\\S+)')", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return re.compile(r'^(\\S+)?(\\S+)?(\\S+)$')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n\n    in_regex = self._get_regex(\"in\")\n    in_regex = in_regex.replace(\"(\", \"(?P<in>.*?)\")\n    in_regex = in_regex.replace(\")\", \"(?P<in>.*?)\")\n    in_regex = in_regex.replace(\" \", \"\\\\s\")\n    in_regex = in_regex.replace(\"-\", \"\\\\-\")\n    in_regex = in_regex.replace(\"%\", \"\\\\%\")\n    in_regex = in_regex.replace(\"#\", \"\\\\#\")\n    in_regex = in_regex.replace(\"$\", \"\\\\$\")\n\n    return in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\nreturn re.compile(r'^(\\S+)\\s*(\\S+)\\s*(\\S+)\\s*(\\S+)\\s*(\\S+)$')", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    in_regex = self._get_in_style_param_regex()\n    in_regex = in_regex.replace(\" \", r\"\\ \")\n    in_regex = in_regex.replace(\"%\", r\"\\%\")\n    in_regex = in_regex.replace(\"#\", r\"\\#\")\n    in_regex = in_regex.replace(\"$\", r\"\\$\")\n    in_regex = in_regex.replace(\"\\\\\", r\"\\\\\")\n    return in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\nreturn re.compile(r\"\\b\" + self.in_style_regex + r\"\\b\", re.UNICODE)", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return Pattern(self._in_style_regex)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "ques_id": "62b43426903eeb48555d3ea2", "code": ["def _create_converter(self) -> _converting._Converter:\n    return _Converter(self._style_converter)\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter()\n", "def _create_converter(self) -> _converting._Converter:\n\n    return _converter._Converter(self)\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)\n", "def _create_converter(self) -> _converting._Converter:\n\n    return _Converter(self)\n", "def _create_converter(self) -> _converting._Converter:\n\n    return _Converter(self, self._schema)", "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)", "def _create_converter(self) -> _converting._Converter:\nreturn _converter._Converter(self._parameters)", "def _create_converter(self) -> _converting._Converter:\nreturn _converter.ParameterStyleConverter(\nself._converter,\n)", "def _create_converter(self) -> _converting._Converter:\n    converter = _converters.get(self._parameter_type)\n    if converter is None:\n        converter = _converters[self._parameter_type] = _Converter(self)\n    return converter"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self._style_converter)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n\n    return _converter._Converter(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n\n    return _Converter(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n\n    return _Converter(self, self._schema)", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\nreturn _converter._Converter(self._parameters)", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\nreturn _converter.ParameterStyleConverter(\nself._converter,\n)", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    converter = _converters.get(self._parameter_type)\n    if converter is None:\n        converter = _converters[self._parameter_type] = _Converter(self)\n    return converter", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "ques_id": "62b8966c755ee91dce50a154", "code": ["def isoparse(self, dt_str): ", "def isoparse(self, dt_str):", "def isoparse(self, dt_str):", "def isoparse(self, dt_str):", "def isoparse(self, dt_str):", "def isoparse(self, dt_str):", "def isoparse(self, dt_str):", "def isoparse(self, dt_str):", "def isoparse(self, dt_str):  ", "def isoparse(self, dt_str):"], "level": "class_runnable", "generate_results": [{"generate_code": "def isoparse(self, dt_str): ", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):  ", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "ques_id": "62b896de755ee91dce50a183", "code": ["def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):   )  tz)   tz)", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): ) )     )   )  ) )", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): ) )", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): )\n )      )", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):    )  ) ) )", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): )   ) tz)  ) )  '''   ')", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):  )", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):      tz) ) ) )", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): )", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): ) )"], "level": "project_runnable", "generate_results": [{"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):   )  tz)   tz)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): ) )     )   )  ) )", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): ) )", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): )\n )      )", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):    )  ) ) )", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): )   ) tz)  ) )  '''   ')", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):  )", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):      tz) ) ) )", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): )", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs): ) )", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d3", "code": ["def fromutc(self, dt):\n    return dt.replace(tzinfo=self.get_timezone())\n", "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        return self.fromutc(dt.replace(tzinfo=UTC))\n    return dt.astimezone(self)\n", "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise ValueError(\"Invalid timezone provided: %s\" % dt)\n\n    return dt.astimezone(self)", "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise ValueError('dt must be a naive datetime object')\n    dt = dt.astimezone(self)\n    return dt.replace(tzinfo=None)\n", "def fromutc(self, dt):\n    return dt.replace(tzinfo=None)\n", "def fromutc(self, dt):\n    return dt.replace(tzinfo=self)", "def fromutc(self, dt):\n    # type: (datetime) -> datetime\n    if self._is_ambiguous(dt):\n        return dt.astimezone(self)\n    return dt\n", "def fromutc(self, dt):\n    return self._make_datetime_aware(\n        self._make_fromutc_aware(dt)\n    )\n", "def fromutc(self, dt):\n    return self._tz.fromutc(dt)\n", "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise ValueError('Cannot fromutc an empty datetime')\n    return self._fromutc(dt)"], "level": "class_runnable", "generate_results": [{"generate_code": "def fromutc(self, dt):\n    return dt.replace(tzinfo=self.get_timezone())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        return self.fromutc(dt.replace(tzinfo=UTC))\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise ValueError(\"Invalid timezone provided: %s\" % dt)\n\n    return dt.astimezone(self)", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise ValueError('dt must be a naive datetime object')\n    dt = dt.astimezone(self)\n    return dt.replace(tzinfo=None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.replace(tzinfo=None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.replace(tzinfo=self)", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    # type: (datetime) -> datetime\n    if self._is_ambiguous(dt):\n        return dt.astimezone(self)\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self._make_datetime_aware(\n        self._make_fromutc_aware(dt)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self._tz.fromutc(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        raise ValueError('Cannot fromutc an empty datetime')\n    return self._fromutc(dt)", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "ques_id": "62b8a7b2755ee91dce50a4a7", "code": ["def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)", "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "ques_id": "6305f9991d275c6667163c50", "code": ["def set_cut_chars(self, before: str, after: str) -> None:\nself.__cut_chars = before + after", "def set_cut_chars(self, before: str, after: str):\nself.__cut_chars = before +'' + after\n", "def set_cut_chars(self, before: str, after: str):\nself.cut_chars = before + after", "def set_cut_chars(self, before: str, after: str) -> None:\nself._cut_chars = before + \",\" + after", "def set_cut_chars(self, before: str, after: str):\nself.__cut_chars = before + after\nself.__cut_chars_len = len(self.__cut_chars)", "def set_cut_chars(self, before: str, after: str):\nself.cut_chars = before + after", "def set_cut_chars(self, before: str, after: str) -> None:\nif before is not None:\nself.__cut_chars = before\nif after is not None:\nself.__cut_chars += after\n", "def set_cut_chars(self, before: str ='', after: str ='') -> None:\nself.__cut_chars = before + after", "def set_cut_chars(self, before: str, after: str) -> None:\nself.__cut_chars = before + ',' + after\n", "def set_cut_chars(self, before: str, after: str):\nself._cut_chars = before + \",\" + after"], "level": "class_runnable", "generate_results": [{"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\nself.__cut_chars = before + after", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\nself.__cut_chars = before +'' + after\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\nself.cut_chars = before + after", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\nself._cut_chars = before + \",\" + after", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\nself.__cut_chars = before + after\nself.__cut_chars_len = len(self.__cut_chars)", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\nself.cut_chars = before + after", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\nif before is not None:\nself.__cut_chars = before\nif after is not None:\nself.__cut_chars += after\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str ='', after: str ='') -> None:\nself.__cut_chars = before + after", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\nself.__cut_chars = before + ',' + after\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\nself._cut_chars = before + \",\" + after", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "ques_id": "6306292052e177c0ba469f09", "code": ["def identify_request(request: str) -> bool:\n    if request.startswith('/'):\n        return False\n\n    if request.startswith('/private'):\n        return True\n\n    return request.startswith('/message')\n", "def identify_request(request: Request):\n    if request.message:\n        return True\n    if request.private_message:\n        return True\n    if request.payload:\n        return True\n    return False\n", "def identify_request(request: Request) -> bool:\n    if request.is_payload_request():\n        return True\n    return request.is_legacy_payload()\n", "def identify_request(request: dict) -> bool:\n    if request[\"content\"].get(\"payload\", {}).get(\"type\") == \"message\":\n        return True\n    if request[\"content\"].get(\"payload\", {}).get(\"type\") == \"legacy_payload\":\n        return request[\"content\"].get(\"payload\", {}).get(\"payload_type\") == \"message\"\n    return False\n", "def identify_request(request: Request) -> bool:\n    if request.is_private:\n        return False\n\n    if not request.message:\n        return False\n\n    return _identify_request(request)\n", "def identify_request(request: dict) -> bool:\n    return request[\"public_message\"] is not None or request[\"private_message\"] is not None\n", "def identify_request(request: Request):\n    if request.is_legacy_payload():\n        return True\n    if request.is_private_payload():\n        return True\n    return False", "def identify_request(request: str) -> bool:\n    if request.startswith(\"/msg\"):\n        return True\n    elif request.startswith(\"/payload\"):\n        return False\n    else:\n        return False", "def identify_request(request: Request) -> bool:\n    return (\n        isinstance(request, Request)\n        and request.method in (\"POST\", \"PUT\", \"PATCH\", \"DELETE\")\n        and request.path.startswith(\"/private/\")\n    )\n", "def identify_request(request: Request) -> bool:\n    return (request.headers.get('content-type') == 'application/json' and\n            not request.headers.get('content-length'))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def identify_request(request: str) -> bool:\n    if request.startswith('/'):\n        return False\n\n    if request.startswith('/private'):\n        return True\n\n    return request.startswith('/message')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request):\n    if request.message:\n        return True\n    if request.private_message:\n        return True\n    if request.payload:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if request.is_payload_request():\n        return True\n    return request.is_legacy_payload()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: dict) -> bool:\n    if request[\"content\"].get(\"payload\", {}).get(\"type\") == \"message\":\n        return True\n    if request[\"content\"].get(\"payload\", {}).get(\"type\") == \"legacy_payload\":\n        return request[\"content\"].get(\"payload\", {}).get(\"payload_type\") == \"message\"\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    if request.is_private:\n        return False\n\n    if not request.message:\n        return False\n\n    return _identify_request(request)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: dict) -> bool:\n    return request[\"public_message\"] is not None or request[\"private_message\"] is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request):\n    if request.is_legacy_payload():\n        return True\n    if request.is_private_payload():\n        return True\n    return False", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: str) -> bool:\n    if request.startswith(\"/msg\"):\n        return True\n    elif request.startswith(\"/payload\"):\n        return False\n    else:\n        return False", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return (\n        isinstance(request, Request)\n        and request.method in (\"POST\", \"PUT\", \"PATCH\", \"DELETE\")\n        and request.path.startswith(\"/private/\")\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return (request.headers.get('content-type') == 'application/json' and\n            not request.headers.get('content-length'))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "ques_id": "6306292152e177c0ba469f0d", "code": ["def identify_request(request: bytes) -> bool:\n    return (\n        request[:4] == b'\\x00\\x01\\x00\\x00\\x00'\n        and request[4:] == b'\\x00\\x01\\x00\\x00\\x00'\n        and request[8:12] == b'\\x00\\x01\\x00\\x00\\x00'\n        and request[12:14] == b'\\x00\\x00\\x01\\x00\\x00'\n        and request[14:] == b'\\x00\\x00\\x01\\x00\\x00'\n    )\n", "def identify_request(request: Request) -> bool:\n    return isinstance(request, MatrixRequest)\n", "def identify_request(request: Dict) -> bool:\n    return request['request'] =='matrix'", "def identify_request(request: Request) -> bool:\n    return isinstance(request, MatrixRequest)\n", "def identify_request(request: str) -> bool:\n    return request in (\"M\", \"m\", \"s\", \"S\", \"st\", \"T\")", "def identify_request(request: dict) -> bool:\n    \n    \n    if \"method\" in request and request[\"method\"] == \"Matrix\":\n        return True\n    else:\n        return False\n", "def identify_request(request: str) -> bool:\n    return bool(re.match(REQUEST_IDENTIFIER, request))\n", "def identify_request(request: dict):\n    if 'event' in request:\n        return 'event'\n    elif'request' in request:\n        return'request'\n    else:\n        return 'unknown'\n", "def identify_request(request: str) -> bool:\n    return bool(re.match(REQUEST_REGEX, request))\n", "def identify_request(request: str):\n    if request == 'Matrix':\n        return True\n    else:\n        return False\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def identify_request(request: bytes) -> bool:\n    return (\n        request[:4] == b'\\x00\\x01\\x00\\x00\\x00'\n        and request[4:] == b'\\x00\\x01\\x00\\x00\\x00'\n        and request[8:12] == b'\\x00\\x01\\x00\\x00\\x00'\n        and request[12:14] == b'\\x00\\x00\\x01\\x00\\x00'\n        and request[14:] == b'\\x00\\x00\\x01\\x00\\x00'\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return isinstance(request, MatrixRequest)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Dict) -> bool:\n    return request['request'] =='matrix'", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return isinstance(request, MatrixRequest)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: str) -> bool:\n    return request in (\"M\", \"m\", \"s\", \"S\", \"st\", \"T\")", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: dict) -> bool:\n    \n    \n    if \"method\" in request and request[\"method\"] == \"Matrix\":\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: str) -> bool:\n    return bool(re.match(REQUEST_IDENTIFIER, request))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: dict):\n    if 'event' in request:\n        return 'event'\n    elif'request' in request:\n        return'request'\n    else:\n        return 'unknown'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: str) -> bool:\n    return bool(re.match(REQUEST_REGEX, request))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: str):\n    if request == 'Matrix':\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "ques_id": "6306292252e177c0ba469f11", "code": ["def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "def format_dt(dt):\n    return dt.strftime(\"%d %B %Y %H:%M:%S\")\n", "def format_dt(dt):\n    \n    \n    return dt.strftime(\"%Y-%m-%dT%H:%M:%S\")", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S.%f')", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "def format_dt(dt):\n    return dt.strftime('%Y-%m-%dT%H:%M:%SZ')\n", "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "def format_dt(dt):\n    return dt.isoformat().replace('+00:00', 'Z')", "def format_dt(dt):\n    \n    \n    return dt.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n", "def format_dt(dt):\n    \n    \n    return dt.isoformat()"], "level": "project_runnable", "generate_results": [{"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime(\"%d %B %Y %H:%M:%S\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    \n    \n    return dt.strftime(\"%Y-%m-%dT%H:%M:%S\")", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S.%f')", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime('%Y-%m-%dT%H:%M:%SZ')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.isoformat().replace('+00:00', 'Z')", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    \n    \n    return dt.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    \n    \n    return dt.isoformat()", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "ques_id": "6306292352e177c0ba469f1d", "code": ["def find_tags(text: str, replacer: Callable[[str], str] = None) -> Tuple[Set[str], str]:\n    if replacer is not None:\n        text = replacer(text)\n    return set(TAG_RE.findall(text)), text", "def find_tags(text: str, replacer=None) -> Tuple[set, str]:\n    return _find_tags(text, replacer, ignore_code=True)\n", "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    if not replacer:\n        return set(RE_TAG.findall(text))\n    else:\n        return set(RE_TAG.findall(text, replacer))\n", "def find_tags(text: str, replacer: Callable = None) -> Set[str]:\n    if replacer is None:\n        replacer = lambda t: t\n    return set(\n        tag for tag in findall(\n            r'<\\s*[^>]*?>(?:\\s*(?:\\w+\\s*=\\s*\\w+)|(?:\\s*(?:\\w+\\s*=\\s*)|(?:\\s*(?:\\w+\\s*=\\s*)|(?:\\s*(?:\\w+\\s*=\\s*)|(?:\\s*(?:\\w+\\s*=\\s*)|(?:\\s*(?:\\w+\\s*=\\s*)|(?:\\s*(?:\\w+\\s*=\\s*)))))))\\s*\\))',\n            text)\n", "def find_tags(text: str, replacer: Callable[[str], str] = replacer) -> Set[str]:\n    return {\n        tag\n        for tag in findall(r'(?:<[^>]+>)|(?:<[^>]+>)\\s*<[^>]+>', text)\n        if replacer(tag)\n    }\n", "def find_tags(text: str, replacer: Optional[Callable[[str], str]] = None) -> Set[str]:\n    if replacer is None:\n        replacer = lambda m: m\n\n    return set(\n        tag\n        for tag in re.findall(r\"<([^>]+)>\", text)\n        if tag.lower() not in (\"code\", \"meta\", \"footnotes\", \"code-block\")\n    ) | set(replacer(m) for m in re.findall(r\"<([^>]+)>\", text))\n", "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Tuple[Set[str], str]:\n    if replacer:\n        text = re.sub(r\"<.*?>\", replacer, text)\n    return _find_tags(text)\n", "def find_tags(text: str, replacer: Optional[Callable[[str], str]] = None) -> Tuple[Set[str], str]:\n    if replacer:\n        text = replacer(text)\n\n    # Try to find tags in code blocks\n    tags = set()\n    match = re.search(r'<\\s*(?:[^>]*>)?(.*?)\\s*>', text)\n    while match:\n        tags.add(match.group(1))\n        text = text[match.end(1):]\n        match = re.search(r'<\\s*(?:[^>]*>)?(.*?)\\s*>', text)\n\n    return tags, text\n", "def find_tags(text: str, replacer: Callable = replace) -> Set[str]:\n    # Use regex to match tags inside code blocks\n    return re.findall(r\"<(?:[^>]|(?:[^>]|$))*>(.*?)</\\1>\", text, re.DOTALL | re.UNICODE)\n", "def find_tags(text: str, replacer: Callable = None) -> Set[str]:\n    if replacer is not None:\n        text = replacer(text)\n    text = RE_CODE_TAGS.sub(lambda m: RE_CODE_TAGS_REPLACE_MAP[m.group(0)], text)\n    return {m.group(0) for m in RE_TAGS.finditer(text)}"], "level": "file_runnable", "generate_results": [{"generate_code": "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Tuple[Set[str], str]:\n    if replacer is not None:\n        text = replacer(text)\n    return set(TAG_RE.findall(text)), text", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer=None) -> Tuple[set, str]:\n    return _find_tags(text, replacer, ignore_code=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    if not replacer:\n        return set(RE_TAG.findall(text))\n    else:\n        return set(RE_TAG.findall(text, replacer))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable = None) -> Set[str]:\n    if replacer is None:\n        replacer = lambda t: t\n    return set(\n        tag for tag in findall(\n            r'<\\s*[^>]*?>(?:\\s*(?:\\w+\\s*=\\s*\\w+)|(?:\\s*(?:\\w+\\s*=\\s*)|(?:\\s*(?:\\w+\\s*=\\s*)|(?:\\s*(?:\\w+\\s*=\\s*)|(?:\\s*(?:\\w+\\s*=\\s*)|(?:\\s*(?:\\w+\\s*=\\s*)|(?:\\s*(?:\\w+\\s*=\\s*)))))))\\s*\\))',\n            text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable[[str], str] = replacer) -> Set[str]:\n    return {\n        tag\n        for tag in findall(r'(?:<[^>]+>)|(?:<[^>]+>)\\s*<[^>]+>', text)\n        if replacer(tag)\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Optional[Callable[[str], str]] = None) -> Set[str]:\n    if replacer is None:\n        replacer = lambda m: m\n\n    return set(\n        tag\n        for tag in re.findall(r\"<([^>]+)>\", text)\n        if tag.lower() not in (\"code\", \"meta\", \"footnotes\", \"code-block\")\n    ) | set(replacer(m) for m in re.findall(r\"<([^>]+)>\", text))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Tuple[Set[str], str]:\n    if replacer:\n        text = re.sub(r\"<.*?>\", replacer, text)\n    return _find_tags(text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Optional[Callable[[str], str]] = None) -> Tuple[Set[str], str]:\n    if replacer:\n        text = replacer(text)\n\n    # Try to find tags in code blocks\n    tags = set()\n    match = re.search(r'<\\s*(?:[^>]*>)?(.*?)\\s*>', text)\n    while match:\n        tags.add(match.group(1))\n        text = text[match.end(1):]\n        match = re.search(r'<\\s*(?:[^>]*>)?(.*?)\\s*>', text)\n\n    return tags, text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable = replace) -> Set[str]:\n    # Use regex to match tags inside code blocks\n    return re.findall(r\"<(?:[^>]|(?:[^>]|$))*>(.*?)</\\1>\", text, re.DOTALL | re.UNICODE)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable = None) -> Set[str]:\n    if replacer is not None:\n        text = replacer(text)\n    text = RE_CODE_TAGS.sub(lambda m: RE_CODE_TAGS_REPLACE_MAP[m.group(0)], text)\n    return {m.group(0) for m in RE_TAGS.finditer(text)}", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "ques_id": "6306292352e177c0ba469f1e", "code": ["def process_text_links(text):\n    text = linkify_text(text)\n    text = process_links(text)\n    return text\n", "def process_text_links(text):\n    text = re.sub(r'\\[\\[\\[(.*?)\\]\\]\\]', lambda m: m.group(1) +'' + m.group(2), text)\n    text = re.sub(r'\\[\\[(.*?)\\]\\]', lambda m: m.group(1) + m.group(2), text)\n    text = re.sub(r'\\[\\[([^\\]]*)\\]\\]', lambda m: m.group(1) + m.group(2), text)\n    return text\n", "def process_text_links(text):\n    # Ignore links with a scheme and an authority.\n    text = re.sub(r\"(?s)<a\\s+href=['\\\"]?([^\\\"'>]*)['\\\"]?>([^<]*)</a>\",\n                  lambda m: m.group(1) + m.group(2).replace('\"', \"'\"), text)\n    return text", "def process_text_links(text):\n    for regex, replace in LINK_REGEXES:\n        text = regex.sub(replace, text)\n    return text", "def process_text_links(text):\n    return text\n", "def process_text_links(text):\n    \n    \n    text = text.replace('\\n','')\n    for match in re.finditer('https?://[^\\s]+', text):\n        if match.group() not in urls:\n            text = re.sub(match.group(), urls[match.group()], text)\n    for match in re.finditer('https?://[^\\s]+@[^\\s]+', text):\n        if match.group() not in urls:\n            text = re.sub(match.group(), urls[match.group()], text)\n    text = re.sub('https?://[^\\s]+', '', text)\n    return text", "def process_text_links(text):\n    text = linkify_text(text)\n    return text\n", "def process_text_links(text):\n    \n    \n    text = re.sub(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+','', text)\n    text = re.sub(r'https?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+','', text)\n    text = re.sub(r'http\\S+', '', text)\n    return text", "def process_text_links(text):\n    text = re.sub(r'https?:\\/\\/(www\\.)?([a-zA-Z0-9]+\\.)*([a-zA-Z]{2,3}\\.[a-zA-Z0-9]+)', '\\g<1> <2>', text)\n    text = re.sub(r'https?://[a-zA-Z0-9\\-\\.]*', '\\g<1> <2>', text)\n    text = re.sub(r'https?://[a-zA-Z0-9\\-\\.]*[\\s\\S]*', '\\g<1> <2>', text)\n    text = re.sub(r'https?://[a-zA-Z0-9\\-\\.]*[\\s\\S]*', '\\g<1> <2>', text)\n    return text", "def process_text_links(text):\n    text = linkify_text(text)\n    text = re.sub(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', r'<a href=\"\\1\">\\1</a>', text)\n    text = re.sub(r'https?://[a-zA-Z]+[a-zA-Z0-9_.-]*[a-zA-Z0-9]', r'<a href=\"\\1\">\\1</a>', text)\n    return text"], "level": "plib_runnable", "generate_results": [{"generate_code": "def process_text_links(text):\n    text = linkify_text(text)\n    text = process_links(text)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = re.sub(r'\\[\\[\\[(.*?)\\]\\]\\]', lambda m: m.group(1) +'' + m.group(2), text)\n    text = re.sub(r'\\[\\[(.*?)\\]\\]', lambda m: m.group(1) + m.group(2), text)\n    text = re.sub(r'\\[\\[([^\\]]*)\\]\\]', lambda m: m.group(1) + m.group(2), text)\n    return text\n", "is_pass": true, "return_code": 0}, {"generate_code": "def process_text_links(text):\n    # Ignore links with a scheme and an authority.\n    text = re.sub(r\"(?s)<a\\s+href=['\\\"]?([^\\\"'>]*)['\\\"]?>([^<]*)</a>\",\n                  lambda m: m.group(1) + m.group(2).replace('\"', \"'\"), text)\n    return text", "is_pass": true, "return_code": 0}, {"generate_code": "def process_text_links(text):\n    for regex, replace in LINK_REGEXES:\n        text = regex.sub(replace, text)\n    return text", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    return text\n", "is_pass": true, "return_code": 0}, {"generate_code": "def process_text_links(text):\n    \n    \n    text = text.replace('\\n','')\n    for match in re.finditer('https?://[^\\s]+', text):\n        if match.group() not in urls:\n            text = re.sub(match.group(), urls[match.group()], text)\n    for match in re.finditer('https?://[^\\s]+@[^\\s]+', text):\n        if match.group() not in urls:\n            text = re.sub(match.group(), urls[match.group()], text)\n    text = re.sub('https?://[^\\s]+', '', text)\n    return text", "is_pass": true, "return_code": 0}, {"generate_code": "def process_text_links(text):\n    text = linkify_text(text)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    \n    \n    text = re.sub(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+','', text)\n    text = re.sub(r'https?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+','', text)\n    text = re.sub(r'http\\S+', '', text)\n    return text", "is_pass": true, "return_code": 0}, {"generate_code": "def process_text_links(text):\n    text = re.sub(r'https?:\\/\\/(www\\.)?([a-zA-Z0-9]+\\.)*([a-zA-Z]{2,3}\\.[a-zA-Z0-9]+)', '\\g<1> <2>', text)\n    text = re.sub(r'https?://[a-zA-Z0-9\\-\\.]*', '\\g<1> <2>', text)\n    text = re.sub(r'https?://[a-zA-Z0-9\\-\\.]*[\\s\\S]*', '\\g<1> <2>', text)\n    text = re.sub(r'https?://[a-zA-Z0-9\\-\\.]*[\\s\\S]*', '\\g<1> <2>', text)\n    return text", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = linkify_text(text)\n    text = re.sub(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', r'<a href=\"\\1\">\\1</a>', text)\n    text = re.sub(r'https?://[a-zA-Z]+[a-zA-Z0-9_.-]*[a-zA-Z0-9]', r'<a href=\"\\1\">\\1</a>', text)\n    return text", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "ques_id": "6306292652e177c0ba469f34", "code": ["def fetch_content_type(url: str) -> str:\n    try:\n        return requests.head(url).headers['content-type']\n    except KeyError:\n        return ''\n", "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.head(url)\n        return response.headers[\"content-type\"]\n    except Exception:\n        return None\n", "def fetch_content_type(url: str) -> str:\n    r = requests.head(url)\n    return r.headers.get(\"content-type\")\n", "def fetch_content_type(url: str) -> str:\n    r = requests.head(url)\n    return r.headers['content-type']\n", "def fetch_content_type(url: str) -> Optional[str]:\n    response = requests.head(url)\n    if response.status_code == 200:\n        return response.headers.get(\"content-type\")\n    return None\n", "def fetch_content_type(url: str) -> str:\n    return requests.head(url).headers[\"content-type\"]\n", "def fetch_content_type(url: str) -> str:\n    return requests.head(url).headers[\"Content-Type\"]", "def fetch_content_type(url: str) -> str:\n    with closing(get(url, stream=True)) as resp:\n        return resp.headers['content-type']\n", "def fetch_content_type(url: str) -> str:\n    \n    \n    return requests.head(url).headers.get(\"content-type\", \"\")\n", "def fetch_content_type(url: str) -> str:\n    return requests.head(url).headers[\"content-type\"]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def fetch_content_type(url: str) -> str:\n    try:\n        return requests.head(url).headers['content-type']\n    except KeyError:\n        return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.head(url)\n        return response.headers[\"content-type\"]\n    except Exception:\n        return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    r = requests.head(url)\n    return r.headers.get(\"content-type\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    r = requests.head(url)\n    return r.headers['content-type']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    response = requests.head(url)\n    if response.status_code == 200:\n        return response.headers.get(\"content-type\")\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    return requests.head(url).headers[\"content-type\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    return requests.head(url).headers[\"Content-Type\"]", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    with closing(get(url, stream=True)) as resp:\n        return resp.headers['content-type']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    \n    \n    return requests.head(url).headers.get(\"content-type\", \"\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    return requests.head(url).headers[\"content-type\"]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "ques_id": "6306292a52e177c0ba469f41", "code": ["def test_tag(tag: str) -> bool:\n    return tag in TAGS", "def test_tag(tag: str, word: str) -> bool:\n    return tag in tag_mapping[word]\n", "def test_tag(tag: str) -> bool:\n    \n    \n    return bool(TAG_RE.match(tag))\n", "def test_tag(tag: str, word: str):\n    \n    \n    if tag in tag_map:\n        return tag_map[tag](word)\n    else:\n        return False", "def test_tag(tag: str) -> bool:\n    return tag in TAGS\n", "def test_tag(tag: str) -> bool:\n    return tag.lower() in TAGS", "def test_tag(tag: str) -> bool:\n    if tag not in TAGS:\n        return False\n    return True\n", "def test_tag(tag: str, word: str) -> bool:\n    if tag in TAGS:\n        return True\n    return False", "def test_tag(tag: str) -> bool:\n    return tag in TAGS\n", "def test_tag(tag: str) -> bool:\n    return tag in TAGS\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def test_tag(tag: str) -> bool:\n    return tag in TAGS", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str, word: str) -> bool:\n    return tag in tag_mapping[word]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    \n    \n    return bool(TAG_RE.match(tag))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str, word: str):\n    \n    \n    if tag in tag_map:\n        return tag_map[tag](word)\n    else:\n        return False", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return tag in TAGS\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return tag.lower() in TAGS", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    if tag not in TAGS:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str, word: str) -> bool:\n    if tag in TAGS:\n        return True\n    return False", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return tag in TAGS\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return tag in TAGS\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "ques_id": "6306298b52e177c0ba469fdc", "code": ["def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return dict((child.tag, child.text) for child in node)\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}", "def xml_children_as_dict(node):\n    return dict([(child.tag, child.text)\n                 for child in node])\n", "def xml_children_as_dict(node):\n    result = {}\n    for child in node.getchildren():\n        tag = child.tag\n        if tag in result:\n            raise ValueError(\"Duplicate tag name %s\" % tag)\n        result[tag] = xml_children_as_dict(child)\n    return result\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {n.tag: n.text for n in node.getchildren()}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return dict((child.tag, child.text) for child in node)\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return dict((child.tag, child.text) for child in node)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return dict([(child.tag, child.text)\n                 for child in node])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    result = {}\n    for child in node.getchildren():\n        tag = child.tag\n        if tag in result:\n            raise ValueError(\"Duplicate tag name %s\" % tag)\n        result[tag] = xml_children_as_dict(child)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {n.tag: n.text for n in node.getchildren()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return dict((child.tag, child.text) for child in node)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "ques_id": "6306299052e177c0ba469fe8", "code": ["def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return\n\n    if sender_handle == '-' or entity_handle == '-':\n        raise ValueError('The sender and entity may not be the same.')\n\n    if sender_handle == entity_handle.split('@')[0]:\n        raise ValueError('The sender and entity must be different.')\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError('Sender and entity handle do not match.')\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return\n    if sender_handle == '-':\n        sender_handle = '__UNKNOWN__'\n    if entity_handle == '-':\n        entity_handle = '__UNKNOWN__'\n    raise ValueError(\"Entity handle mismatch: %s vs %s\" % (sender_handle, entity_handle))\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    elif sender_handle is None or entity_handle is None:\n        return False\n    else:\n        return sender_handle == entity_handle\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender and entity handle do not match.\")\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender and entity handle mismatch.\")\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender and Entity handle mismatch: %s!= %s\" % (\n            sender_handle, entity_handle))\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return\n\n    raise Exception(\"Sender and entity handle mismatch\")\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return\n\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender and entity handles do not match\")\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return\n\n    if sender_handle == '-' or entity_handle == '-':\n        raise ValueError('The sender and entity may not be the same.')\n\n    if sender_handle == entity_handle.split('@')[0]:\n        raise ValueError('The sender and entity must be different.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError('Sender and entity handle do not match.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return\n    if sender_handle == '-':\n        sender_handle = '__UNKNOWN__'\n    if entity_handle == '-':\n        entity_handle = '__UNKNOWN__'\n    raise ValueError(\"Entity handle mismatch: %s vs %s\" % (sender_handle, entity_handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    elif sender_handle is None or entity_handle is None:\n        return False\n    else:\n        return sender_handle == entity_handle\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender and entity handle do not match.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender and entity handle mismatch.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender and Entity handle mismatch: %s!= %s\" % (\n            sender_handle, entity_handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return\n\n    raise Exception(\"Sender and entity handle mismatch\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return\n\n    if sender_handle!= entity_handle:\n        raise ValueError(\"Sender and entity handles do not match\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "ques_id": "630629b952e177c0ba46a043", "code": ["def get_nodeinfo_well_known_document(url, document_path=None):\n    nodeinfo = {'protocol': 'https',\n                'url': url,\n                'document_path': document_path}\n    return nodeinfo\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return _get_nodeinfo_well_known_document(url, document_path=document_path)", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        \"nodeinfo\": {\n            \"url\": url,\n            \"document_path\": document_path,\n        }\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = '/'.join([url.rstrip('/'), 'document.well-known'])\n    return {'document_path': document_path}\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    document_path = document_path or ''\n    return {'@id': 'http://example.com/%s' % document_path,\n            '@type': 'http://schemas.google.com/g/2005#/definitions/NodeInfo',\n            'label': 'NodeInfo for %s' % url,\n            'properties': {\n                'url': url,\n                'document_path': document_path,\n            }}", "def get_nodeinfo_well_known_document(url, document_path=None):\n    document_path = document_path or get_nodeinfo_document_path(url)\n    return {\n        'type': 'document',\n        'url': url,\n        'document_path': document_path,\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    doc = NodeInfo()\n    doc.set_url(url)\n    doc.set_document_path(document_path)\n    return doc.to_dict()", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return get_nodeinfo(url, document_path).well_known_document\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        \"@type\": \"NodeInfo\",\n        \"@context\": \"https://nodeinfo.diaspora.software\",\n        \"@id\": url,\n        \"@type\": \"NodeInfo\",\n        \"@context\": \"https://nodeinfo.diaspora.software\",\n        \"@id\": url,\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    node_info = get_nodeinfo(url, document_path)\n    node_info['well_known'] = {\n       'version': '1.0',\n        'type': 'node-info',\n        'description': 'NodeInfo document',\n        'properties': node_info['properties'],\n    }\n    return node_info\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    nodeinfo = {'protocol': 'https',\n                'url': url,\n                'document_path': document_path}\n    return nodeinfo\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return _get_nodeinfo_well_known_document(url, document_path=document_path)", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        \"nodeinfo\": {\n            \"url\": url,\n            \"document_path\": document_path,\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = '/'.join([url.rstrip('/'), 'document.well-known'])\n    return {'document_path': document_path}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    document_path = document_path or ''\n    return {'@id': 'http://example.com/%s' % document_path,\n            '@type': 'http://schemas.google.com/g/2005#/definitions/NodeInfo',\n            'label': 'NodeInfo for %s' % url,\n            'properties': {\n                'url': url,\n                'document_path': document_path,\n            }}", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    document_path = document_path or get_nodeinfo_document_path(url)\n    return {\n        'type': 'document',\n        'url': url,\n        'document_path': document_path,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    doc = NodeInfo()\n    doc.set_url(url)\n    doc.set_document_path(document_path)\n    return doc.to_dict()", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return get_nodeinfo(url, document_path).well_known_document\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        \"@type\": \"NodeInfo\",\n        \"@context\": \"https://nodeinfo.diaspora.software\",\n        \"@id\": url,\n        \"@type\": \"NodeInfo\",\n        \"@context\": \"https://nodeinfo.diaspora.software\",\n        \"@id\": url,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    node_info = get_nodeinfo(url, document_path)\n    node_info['well_known'] = {\n       'version': '1.0',\n        'type': 'node-info',\n        'description': 'NodeInfo document',\n        'properties': node_info['properties'],\n    }\n    return node_info\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "ques_id": "630629d052e177c0ba46a0a1", "code": ["def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(public_key, doc.get_signature(signature),\n                            doc.get_signature_hash())\n", "def verify_relayable_signature(public_key, doc, signature):\n    # XXX Remove this line once the legacy client is aware of how signatures\n    # are generated and how to verify them.\n    return verify_signature(public_key, doc, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    if signature!= doc.get('signature'):\n        raise ValueError('Signature does not match the claimed author.')\n", "def verify_relayable_signature(public_key, doc, signature):\n    return verify_relayable_elements(public_key, doc, signature, etree.fromstring(doc))\n", "def verify_relayable_signature(public_key, doc, signature):\n    verifier = Verifier(public_key)\n    if verifier.verify(doc, signature):\n        return True\n    return False\n", "def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(public_key, doc.elements[0].text, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature, True)\n", "def verify_relayable_signature(public_key, doc, signature):\n    signer = PKCS1_v1_5.new(public_key)\n    return signer.verify(SHA256.new(doc.toxml()).digest(), signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    element = doc.find('.//signature/relayableSignature')\n    assert element is not None\n    assert element.text == signature\n", "def verify_relayable_signature(public_key, doc, signature):\n    if not signature:\n        return False\n    if public_key is None:\n        return False\n    if doc.get('signature') is None:\n        return False\n    return verify_signature(public_key, doc.get('signature'), signature)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(public_key, doc.get_signature(signature),\n                            doc.get_signature_hash())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    # XXX Remove this line once the legacy client is aware of how signatures\n    # are generated and how to verify them.\n    return verify_signature(public_key, doc, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if signature!= doc.get('signature'):\n        raise ValueError('Signature does not match the claimed author.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return verify_relayable_elements(public_key, doc, signature, etree.fromstring(doc))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    verifier = Verifier(public_key)\n    if verifier.verify(doc, signature):\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(public_key, doc.elements[0].text, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature, True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    signer = PKCS1_v1_5.new(public_key)\n    return signer.verify(SHA256.new(doc.toxml()).digest(), signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    element = doc.find('.//signature/relayableSignature')\n    assert element is not None\n    assert element.text == signature\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if not signature:\n        return False\n    if public_key is None:\n        return False\n    if doc.get('signature') is None:\n        return False\n    return verify_signature(public_key, doc.get('signature'), signature)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "ques_id": "630629e052e177c0ba46a0c4", "code": ["def parse_diaspora_webfinger(document: Document) -> dict:\n    if document.get('webfinger'):\n        return parse_webfinger(document)\n    else:\n        return {}\n", "def parse_diaspora_webfinger(document: dict) -> dict:\n    return _parse_webfinger(document)\n", "def parse_diaspora_webfinger(document: Document, filename: str):\n\n    if filename.endswith('.json'):\n        return parse_json_webfinger(document, filename)\n    elif filename.endswith('.xrd'):\n        return parse_xrd_webfinger(document, filename)\n    else:\n        raise ValueError('Unknown webfinger file type: {}'.format(filename))", "def parse_diaspora_webfinger(document: Document) -> Dict[str, Any]:\n    if document.type == DocumentType.WEBFINGER_JSON:\n        return parse_diaspora_webfinger_json(document)\n    elif document.type == DocumentType.WEBFINGER_XRD:\n        return parse_diaspora_webfinger_xrd(document)\n    else:\n        raise ValueError(f\"Unknown document type {document.type}\")\n", "def parse_diaspora_webfinger(document: Document) -> DiasporaWebfinger:\n    if document.header.format == \"json\":\n        return parse_diaspora_webfinger_json(document)\n    elif document.header.format == \"xrd\":\n        return parse_diaspora_webfinger_xrd(document)\n    else:\n        raise ValueError(\"Unknown format: %s\" % document.header.format)\n", "def parse_diaspora_webfinger(document: Document) -> None:\n    if document.get(\"type\") == \"diaspora_webfinger\":\n        webfinger_response = requests.post(\n            \"https://diaspora.github.io/diaspora_federation/discovery/webfinger.json\",\n            data=json.dumps(document),\n            headers={\"Content-Type\": \"application/json\"},\n        )\n        if webfinger_response.status_code!= 200:\n            raise Exception(f\"Failed to parse webfinger {webfinger_response.status_code}\")\n", "def parse_diaspora_webfinger(document: Document) -> Dict[str, Any]:\n    if 'webfinger' not in document:\n        return {}\n    return parse_webfinger(document['webfinger'])\n", "def parse_diaspora_webfinger(document: Document) -> Optional[WebfingerDiaspora]:\n    if not document.text:\n        return None\n    if document.text.startswith(\"{\"):\n        return WebfingerDiaspora(document.text)\n    return None\n", "def parse_diaspora_webfinger(document: Document) -> Optional[Webfinger]:\n    if not document.url.startswith(\"http\"):\n        return None\n    return Webfinger.from_json(document.url)\n", "def parse_diaspora_webfinger(document: Document) -> DiasporaWebfinger:\n    if document.get(\"format\") == \"new\":\n        return parse_webfinger_new(document)\n    else:\n        return parse_webfinger_old(document)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_diaspora_webfinger(document: Document) -> dict:\n    if document.get('webfinger'):\n        return parse_webfinger(document)\n    else:\n        return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: dict) -> dict:\n    return _parse_webfinger(document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document, filename: str):\n\n    if filename.endswith('.json'):\n        return parse_json_webfinger(document, filename)\n    elif filename.endswith('.xrd'):\n        return parse_xrd_webfinger(document, filename)\n    else:\n        raise ValueError('Unknown webfinger file type: {}'.format(filename))", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document) -> Dict[str, Any]:\n    if document.type == DocumentType.WEBFINGER_JSON:\n        return parse_diaspora_webfinger_json(document)\n    elif document.type == DocumentType.WEBFINGER_XRD:\n        return parse_diaspora_webfinger_xrd(document)\n    else:\n        raise ValueError(f\"Unknown document type {document.type}\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document) -> DiasporaWebfinger:\n    if document.header.format == \"json\":\n        return parse_diaspora_webfinger_json(document)\n    elif document.header.format == \"xrd\":\n        return parse_diaspora_webfinger_xrd(document)\n    else:\n        raise ValueError(\"Unknown format: %s\" % document.header.format)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document) -> None:\n    if document.get(\"type\") == \"diaspora_webfinger\":\n        webfinger_response = requests.post(\n            \"https://diaspora.github.io/diaspora_federation/discovery/webfinger.json\",\n            data=json.dumps(document),\n            headers={\"Content-Type\": \"application/json\"},\n        )\n        if webfinger_response.status_code!= 200:\n            raise Exception(f\"Failed to parse webfinger {webfinger_response.status_code}\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document) -> Dict[str, Any]:\n    if 'webfinger' not in document:\n        return {}\n    return parse_webfinger(document['webfinger'])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document) -> Optional[WebfingerDiaspora]:\n    if not document.text:\n        return None\n    if document.text.startswith(\"{\"):\n        return WebfingerDiaspora(document.text)\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document) -> Optional[Webfinger]:\n    if not document.url.startswith(\"http\"):\n        return None\n    return Webfinger.from_json(document.url)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: Document) -> DiasporaWebfinger:\n    if document.get(\"format\") == \"new\":\n        return parse_webfinger_new(document)\n    else:\n        return parse_webfinger_old(document)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "ques_id": "630629e152e177c0ba46a0d1", "code": ["def try_retrieve_webfinger_document(handle: str) -> str:\n    try:\n        return requests.get(f\"https://{handle}/webfinger\").text\n    except requests.exceptions.RequestException:\n        return \"\"\n", "def try_retrieve_webfinger_document(handle: str, delay: int = 5) -> str:\n    time.sleep(delay)\n    try:\n        return retrieve_webfinger_document(handle)\n    except Exception:\n        return None\n", "def try_retrieve_webfinger_document(handle: int) -> WebfingerDocument:\n    try:\n        return WebfingerDocument(handle)\n    except WebfingerException:\n        return None\n", "def try_retrieve_webfinger_document(handle: Union[bytes, str], headers: dict) -> bytes:\n    \n    \n    try:\n        return retrieve_webfinger_document_raw(handle, headers)\n    except Exception as e:\n        if isinstance(e, HTTPError) and e.response.status_code == 403:\n            return None\n        raise\n", "def try_retrieve_webfinger_document(handle: int, user_agent: str) -> str:\n    response = requests.get(\n        url=f\"https://api.rfc7033.org/finger/{handle}?user-agent={user_agent}\",\n        timeout=TIMEOUT,\n    )\n\n    if response.status_code == 200:\n        return response.content.decode(\"utf-8\")\n\n    return \"\"\n", "def try_retrieve_webfinger_document(handle: str, suffix: str = '') -> dict:\n    try:\n        return retrieve_webfinger_document(handle, suffix)\n    except Exception as e:\n        logger.error(f\"Failed to retrieve webfinger document with error {e}\")\n        return {}\n", "def try_retrieve_webfinger_document(handle: str, **kwargs) -> bytes:\n    try:\n        return retrieve_webfinger_document(handle, **kwargs)\n    except Exception:\n        return b\"\"\n", "def try_retrieve_webfinger_document(handle: str, **kwargs) -> str:\n    try:\n        return handle.read()\n    except Exception:\n        pass\n", "def try_retrieve_webfinger_document(handle: str, username: str) -> str:\n    try:\n        return retrieve_webfinger_document_from_handle(handle, username)\n    except Exception:\n        # TODO log this\n        return \"\"\n", "def try_retrieve_webfinger_document(handle: Union[str, bytes]) -> str:\n    if isinstance(handle, str):\n        handle = handle.encode(\"ascii\")\n    response = requests.get(webfinger.url(handle), timeout=5)\n    if response.status_code == 200:\n        return response.text\n    return None\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def try_retrieve_webfinger_document(handle: str) -> str:\n    try:\n        return requests.get(f\"https://{handle}/webfinger\").text\n    except requests.exceptions.RequestException:\n        return \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: str, delay: int = 5) -> str:\n    time.sleep(delay)\n    try:\n        return retrieve_webfinger_document(handle)\n    except Exception:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: int) -> WebfingerDocument:\n    try:\n        return WebfingerDocument(handle)\n    except WebfingerException:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: Union[bytes, str], headers: dict) -> bytes:\n    \n    \n    try:\n        return retrieve_webfinger_document_raw(handle, headers)\n    except Exception as e:\n        if isinstance(e, HTTPError) and e.response.status_code == 403:\n            return None\n        raise\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: int, user_agent: str) -> str:\n    response = requests.get(\n        url=f\"https://api.rfc7033.org/finger/{handle}?user-agent={user_agent}\",\n        timeout=TIMEOUT,\n    )\n\n    if response.status_code == 200:\n        return response.content.decode(\"utf-8\")\n\n    return \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: str, suffix: str = '') -> dict:\n    try:\n        return retrieve_webfinger_document(handle, suffix)\n    except Exception as e:\n        logger.error(f\"Failed to retrieve webfinger document with error {e}\")\n        return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: str, **kwargs) -> bytes:\n    try:\n        return retrieve_webfinger_document(handle, **kwargs)\n    except Exception:\n        return b\"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: str, **kwargs) -> str:\n    try:\n        return handle.read()\n    except Exception:\n        pass\n", "is_pass": true, "return_code": 0}, {"generate_code": "def try_retrieve_webfinger_document(handle: str, username: str) -> str:\n    try:\n        return retrieve_webfinger_document_from_handle(handle, username)\n    except Exception:\n        # TODO log this\n        return \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: Union[str, bytes]) -> str:\n    if isinstance(handle, str):\n        handle = handle.encode(\"ascii\")\n    response = requests.get(webfinger.url(handle), timeout=5)\n    if response.status_code == 200:\n        return response.text\n    return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "ques_id": "630629e152e177c0ba46a0d2", "code": ["def retrieve_and_parse_diaspora_webfinger(handle):\n    return retrieve_and_parse_webfinger(handle, \"diaspora\")\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    r = requests.get(handle)\n    r.raise_for_status()\n    return r.json()\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    return retrieve_and_parse_remote_doc(handle, 'DiasporaWebfinger')\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    try:\n        return _retrieve_and_parse_diaspora_webfinger(handle)\n    except Exception as exc:\n        raise exc\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = requests.get(handle)\n    return _parse_diaspora_webfinger(response.text)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    r = requests.get(handle)\n    return parse_diaspora_webfinger(r.text)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = requests.get(handle)\n    return parse_diaspora_webfinger(response.text)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    return retrieve_and_parse_diaspora_document(handle, 'webfinger')\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    return _retrieve_and_parse_remote_doc(\n        handle,\n        \"diaspora.webfinger\",\n        {\"id\": \"http://diaspora.org/webfinger/\"},\n    )\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = requests.get(handle)\n    return parse_diaspora_webfinger(response.content)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return retrieve_and_parse_webfinger(handle, \"diaspora\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    r = requests.get(handle)\n    r.raise_for_status()\n    return r.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return retrieve_and_parse_remote_doc(handle, 'DiasporaWebfinger')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    try:\n        return _retrieve_and_parse_diaspora_webfinger(handle)\n    except Exception as exc:\n        raise exc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = requests.get(handle)\n    return _parse_diaspora_webfinger(response.text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    r = requests.get(handle)\n    return parse_diaspora_webfinger(r.text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = requests.get(handle)\n    return parse_diaspora_webfinger(response.text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return retrieve_and_parse_diaspora_document(handle, 'webfinger')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return _retrieve_and_parse_remote_doc(\n        handle,\n        \"diaspora.webfinger\",\n        {\"id\": \"http://diaspora.org/webfinger/\"},\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = requests.get(handle)\n    return parse_diaspora_webfinger(response.content)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "ques_id": "630629e252e177c0ba46a0d6", "code": ["def retrieve_diaspora_host_meta(host):\n    return XRD(host)\n", "def retrieve_diaspora_host_meta(host):\n    return _retrieve_xrd_from_file(host, '/diaspora/host-meta')", "def retrieve_diaspora_host_meta(host):\n    return host.get_xrd('diaspora')\n", "def retrieve_diaspora_host_meta(host):\n    return XRD(host, \"https://diaspora.org/api/v1/hostMeta\")", "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        'https://{}/rest/diaspora/meta'.format(host)\n    )\n    response.raise_for_status()\n    return XRD(response.json())\n", "def retrieve_diaspora_host_meta(host):\n    url = 'https://%s.diaspora.org/remotes/%s/xrd' % (host, host)\n    return XRD(url)", "def retrieve_diaspora_host_meta(host):\n    return get_diaspora_client().hosts.get(host)\n", "def retrieve_diaspora_host_meta(host):\n    url = \"https://api.diaspora.org/host-meta/%s\" % host\n    r = requests.get(url)\n    if r.status_code!= 200:\n        raise ValueError(\"Failed to retrieve diaspora host-meta for %s\" % host)\n    return r.json()\n", "def retrieve_diaspora_host_meta(host):\n    return get_diaspora_host_meta(host, \"XRD\")\n", "def retrieve_diaspora_host_meta(host):\n    return _retrieve_meta(host, 'DiasporaHost')"], "level": "plib_runnable", "generate_results": [{"generate_code": "def retrieve_diaspora_host_meta(host):\n    return XRD(host)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return _retrieve_xrd_from_file(host, '/diaspora/host-meta')", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return host.get_xrd('diaspora')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return XRD(host, \"https://diaspora.org/api/v1/hostMeta\")", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        'https://{}/rest/diaspora/meta'.format(host)\n    )\n    response.raise_for_status()\n    return XRD(response.json())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    url = 'https://%s.diaspora.org/remotes/%s/xrd' % (host, host)\n    return XRD(url)", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return get_diaspora_client().hosts.get(host)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    url = \"https://api.diaspora.org/host-meta/%s\" % host\n    r = requests.get(url)\n    if r.status_code!= 200:\n        raise ValueError(\"Failed to retrieve diaspora host-meta for %s\" % host)\n    return r.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return get_diaspora_host_meta(host, \"XRD\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return _retrieve_meta(host, 'DiasporaHost')", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "ques_id": "630629e752e177c0ba46a0fb", "code": ["def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_request(\n        url, data, timeout=timeout, method=method, *args, **kwargs\n    )\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return _send_document(url, data, timeout, method, *args, **kwargs)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_request(\n        method,\n        url,\n        data=data,\n        timeout=timeout,\n        *args,\n        **kwargs\n    )\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_request(\"POST\", url, data, timeout, method, *args, **kwargs)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_request(url, data, timeout, method, *args, **kwargs)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_request(url, data, timeout=timeout, method=method, *args, **kwargs)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return _send_request(\"POST\", url, data=data, timeout=timeout, *args, **kwargs)", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout, **kwargs)\n    return _check_status(response, method), response\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    return _get_status_code_and_error(response), response.content\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url,\n        data=data,\n        timeout=timeout,\n        **kwargs\n    )\n    return response.status_code, response\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_request(\n        url, data, timeout=timeout, method=method, *args, **kwargs\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return _send_document(url, data, timeout, method, *args, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_request(\n        method,\n        url,\n        data=data,\n        timeout=timeout,\n        *args,\n        **kwargs\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_request(\"POST\", url, data, timeout, method, *args, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_request(url, data, timeout, method, *args, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_request(url, data, timeout=timeout, method=method, *args, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return _send_request(\"POST\", url, data=data, timeout=timeout, *args, **kwargs)", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout, **kwargs)\n    return _check_status(response, method), response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    return _get_status_code_and_error(response), response.content\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url,\n        data=data,\n        timeout=timeout,\n        **kwargs\n    )\n    return response.status_code, response\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "ques_id": "6306091073426c38ae68acac", "code": ["def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = keys[0]\n    dic[key] = val\n    for key in keys[1:]:\n        dic = dic[key]\n", "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n        return\n\n    keys = keys[:-1]\n    dict_insert(dic, val, keys[-1], *keys)\n", "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n        return\n\n    dic = dict_insert(dic, val, key, *keys[:-1])\n    dic[keys[-1]] = dic.get(keys[-1], {})\n    dic[keys[-1]] = dic[keys[-1]].get(key, 0) + 1\n", "def dict_insert(dic, val, key, *keys):\n    if len(keys) == 0:\n        dic[key] = val\n    else:\n        dic[key] = dict_insert(dic[key], val, keys[0], *keys[1:])\n", "def dict_insert(dic, val, key, *keys):\n    if keys:\n        dic[key] = {}\n        for key in keys:\n            dic[key][val] = dic[key].get(val, [])\n            dic[key][val].append(key)\n    else:\n        dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    keys = keys[:-1] if keys else [key]\n    for k in keys:\n        dic = dict_insert_deep(dic, val, k)\n    return dic\n", "def dict_insert(dic, val, key, *keys):\n    dic[key] = val\n    for key in keys:\n        if key not in dic:\n            dic[key] = {}\n        dict_insert(dic[key], val, key)\n", "def dict_insert(dic, val, key, *keys):\n    if keys:\n        keys = keys[:-1]\n        dic[key] = dic.get(key, {})\n        for key in keys:\n            dic[key][keys[-1]] = val\n", "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = '.'.join(keys)\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = key + '.' + keys[0]\n    if key not in dic:\n        dic[key] = val\n        return\n    else:\n        dict_insert(dic[key], val, keys[1:])\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = keys[0]\n    dic[key] = val\n    for key in keys[1:]:\n        dic = dic[key]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n        return\n\n    keys = keys[:-1]\n    dict_insert(dic, val, keys[-1], *keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n        return\n\n    dic = dict_insert(dic, val, key, *keys[:-1])\n    dic[keys[-1]] = dic.get(keys[-1], {})\n    dic[keys[-1]] = dic[keys[-1]].get(key, 0) + 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if len(keys) == 0:\n        dic[key] = val\n    else:\n        dic[key] = dict_insert(dic[key], val, keys[0], *keys[1:])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if keys:\n        dic[key] = {}\n        for key in keys:\n            dic[key][val] = dic[key].get(val, [])\n            dic[key][val].append(key)\n    else:\n        dic[key] = val\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    keys = keys[:-1] if keys else [key]\n    for k in keys:\n        dic = dict_insert_deep(dic, val, k)\n    return dic\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    dic[key] = val\n    for key in keys:\n        if key not in dic:\n            dic[key] = {}\n        dict_insert(dic[key], val, key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if keys:\n        keys = keys[:-1]\n        dic[key] = dic.get(key, {})\n        for key in keys:\n            dic[key][keys[-1]] = val\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = '.'.join(keys)\n    dic[key] = val\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = key + '.' + keys[0]\n    if key not in dic:\n        dic[key] = val\n        return\n    else:\n        dict_insert(dic[key], val, keys[1:])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "ques_id": "6306091a73426c38ae68acc8", "code": ["def list_of_file_names(settings_dirs, spec_option):\n    return [IniType(settings_dir, spec_option) for settings_dir in settings_dirs]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return list_of_files(settings_dirs, spec_option)\n", "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return [IniType(settings_dir, spec_option) for settings_dir in settings_dirs]\n", "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    if spec_option == 'local':\n        return list_of_file_names_local(settings_dirs)\n    if spec_option =='remote':\n        return list_of_file_names_remote(settings_dirs)\n    raise ValueError('Unknown ini file type specified: {}'.format(spec_option))\n", "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return [\"ini_file_{}.ini\".format(i) for i in range(len(settings_dirs))]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        settings_dir + spec_option + \".\" + ext\n        for settings_dir in settings_dirs\n        for ext in [\"\", \".py\"]\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return [IniType(settings_dirs, spec_option, f)\n            for f in list_of_files(settings_dirs, spec_option)]\n", "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return ['{}.{}'.format(x, spec_option) for x in settings_dirs]\n", "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return [IniType(file_name, spec_option) for file_name in settings_dirs]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        create_ini_type(settings_dirs, 'list_of_file_names.ini', spec_option)\n    ]\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [IniType(settings_dir, spec_option) for settings_dir in settings_dirs]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return list_of_files(settings_dirs, spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return [IniType(settings_dir, spec_option) for settings_dir in settings_dirs]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    if spec_option == 'local':\n        return list_of_file_names_local(settings_dirs)\n    if spec_option =='remote':\n        return list_of_file_names_remote(settings_dirs)\n    raise ValueError('Unknown ini file type specified: {}'.format(spec_option))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return [\"ini_file_{}.ini\".format(i) for i in range(len(settings_dirs))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        settings_dir + spec_option + \".\" + ext\n        for settings_dir in settings_dirs\n        for ext in [\"\", \".py\"]\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return [IniType(settings_dirs, spec_option, f)\n            for f in list_of_files(settings_dirs, spec_option)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return ['{}.{}'.format(x, spec_option) for x in settings_dirs]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return [IniType(file_name, spec_option) for file_name in settings_dirs]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        create_ini_type(settings_dirs, 'list_of_file_names.ini', spec_option)\n    ]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "ques_id": "6306091b73426c38ae68acd7", "code": ["def ansible_config_manager(cls):\n    return cls.get_ansible_config_manager()", "def ansible_config_manager(cls):\n    return cls._ansible_config_manager", "def ansible_config_manager(cls):\n    if cls == AnsibleConfigManager:\n        return AnsibleConfigManager()\n    elif cls == AnsibleConfigManagerRun:\n        return AnsibleConfigManagerRun()\n    else:\n        raise Exception(\"Unknown Ansible Config Manager %s\" % cls)", "def ansible_config_manager(cls):\n    if cls.get_config_manager():\n        return cls.get_config_manager()\n    else:\n        return ConfigManager.get_config_manager()\n", "def ansible_config_manager(cls):\n    return cls.get_options().ansible_config_manager\n", "def ansible_config_manager(cls):\n    \n    \n    return cls._ansible_config_manager\n", "def ansible_config_manager(cls):\n    return cls._ansible_config_manager\n", "def ansible_config_manager(cls):\n    \n    \n    try:\n        config_manager = cls._get_config_manager()\n    except AnsibleConfigException:\n        config_manager = None\n    return config_manager\n", "def ansible_config_manager(cls):\n    return cls._ansible_config_manager\n", "def ansible_config_manager(cls):\n    return cls.__dict__.get(\"_ansible_config_manager\", None)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def ansible_config_manager(cls):\n    return cls.get_ansible_config_manager()", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._ansible_config_manager", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    if cls == AnsibleConfigManager:\n        return AnsibleConfigManager()\n    elif cls == AnsibleConfigManagerRun:\n        return AnsibleConfigManagerRun()\n    else:\n        raise Exception(\"Unknown Ansible Config Manager %s\" % cls)", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    if cls.get_config_manager():\n        return cls.get_config_manager()\n    else:\n        return ConfigManager.get_config_manager()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.get_options().ansible_config_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    \n    \n    return cls._ansible_config_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._ansible_config_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    \n    \n    try:\n        config_manager = cls._get_config_manager()\n    except AnsibleConfigException:\n        config_manager = None\n    return config_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._ansible_config_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.__dict__.get(\"_ansible_config_manager\", None)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "ques_id": "6306091b73426c38ae68acd9", "code": ["def workspace_manager(cls):\n    \n    \n    return cls.__get_workspace_manager__()\n", "def workspace_manager(cls):\n    return WorkspaceManager(cls)\n", "def workspace_manager(cls):\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return cls._workspace_manager", "def workspace_manager(cls):\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return cls._workspace_manager", "def workspace_manager(cls):\n    return get_workspace_manager()", "def workspace_manager(cls):\n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return cls._workspace_manager\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def workspace_manager(cls):\n    \n    \n    return cls.__get_workspace_manager__()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return WorkspaceManager(cls)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return get_workspace_manager()", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "ques_id": "6306091b73426c38ae68acda", "code": ["def plugins_manager(cls):\n    \n    \n\n    if not cls.plugins:\n        cls.plugins = PluginManager()\n    return cls.plugins", "def plugins_manager(cls):\n    \n    \n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    \n    \n    if cls._plugins_manager is None:\n        cls._plugins_manager = PluginManager(cls)\n    return cls._plugins_manager", "def plugins_manager(cls):\n    return cls._plugins\n", "def plugins_manager(cls):\n    \n    \n    if cls in _plugins_managers:\n        return _plugins_managers[cls]\n\n    _plugins_managers[cls] = _PluginsManager(cls)\n    return _plugins_managers[cls]\n", "def plugins_manager(cls):\n    return cls._plugins\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return plugins.manager"], "level": "file_runnable", "generate_results": [{"generate_code": "def plugins_manager(cls):\n    \n    \n\n    if not cls.plugins:\n        cls.plugins = PluginManager()\n    return cls.plugins", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \n    \n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \n    \n    if cls._plugins_manager is None:\n        cls._plugins_manager = PluginManager(cls)\n    return cls._plugins_manager", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \n    \n    if cls in _plugins_managers:\n        return _plugins_managers[cls]\n\n    _plugins_managers[cls] = _PluginsManager(cls)\n    return _plugins_managers[cls]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return plugins.manager", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "ques_id": "6306091c73426c38ae68acdc", "code": ["def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException('spec content is missing')\n\n    spec_data = yaml.load(spec_content)\n    validate_data(cls, spec_data)\n    return spec_data", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"Spec file content cannot be None\")\n\n    return cls.validate_from_yaml(spec_content)\n", "def validate_from_content(cls, spec_content=None):\n    data = {}\n    for field in cls.required_fields:\n        data[field] = spec_content.get(field)\n    return data\n", "def validate_from_content(cls, spec_content=None):\n\n    spec_data = yaml.safe_load(spec_content)\n    return cls.validate_from_dict(spec_data)\n", "def validate_from_content(cls, spec_content=None):\n    return cls.validate(yaml.safe_load(spec_content))\n", "def validate_from_content(cls, spec_content=None):\n    data = {}\n    if not spec_content:\n        spec_content = get_spec_content(cls)\n    if not spec_content:\n        raise IRValidatorException('No spec content provided')\n    for name, value in spec_content.items():\n        if name not in cls.__fields__:\n            raise IRValidatorException('Missing field %s' % name)\n        data[name] = cls.__fields__[name].validate(value)\n    return data\n", "def validate_from_content(cls, spec_content=None):\n    spec = {}\n    if spec_content:\n        spec = yaml.safe_load(spec_content)\n    if not spec:\n        raise IRValidatorException(cls.__name__, 'no spec file found')\n    if not all(key in spec for key in cls.__required_fields):\n        raise IRValidatorException(cls.__name__,'missing required fields')\n    return spec\n", "def validate_from_content(cls, spec_content=None):\n    spec = cls._load_spec_from_content(spec_content)\n    cls._validate_spec(spec)\n    return spec\n", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"Spec content is required\")\n\n    data = yaml.load(spec_content)\n    if not isinstance(data, dict):\n        raise IRValidatorException(\"Spec content is not a dictionary\")\n\n    return data", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        spec_content = cls.SPEC_CONTENT\n\n    return validate(cls.SPEC_SCHEMA, spec_content)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException('spec content is missing')\n\n    spec_data = yaml.load(spec_content)\n    validate_data(cls, spec_data)\n    return spec_data", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"Spec file content cannot be None\")\n\n    return cls.validate_from_yaml(spec_content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    data = {}\n    for field in cls.required_fields:\n        data[field] = spec_content.get(field)\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n\n    spec_data = yaml.safe_load(spec_content)\n    return cls.validate_from_dict(spec_data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    return cls.validate(yaml.safe_load(spec_content))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    data = {}\n    if not spec_content:\n        spec_content = get_spec_content(cls)\n    if not spec_content:\n        raise IRValidatorException('No spec content provided')\n    for name, value in spec_content.items():\n        if name not in cls.__fields__:\n            raise IRValidatorException('Missing field %s' % name)\n        data[name] = cls.__fields__[name].validate(value)\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    spec = {}\n    if spec_content:\n        spec = yaml.safe_load(spec_content)\n    if not spec:\n        raise IRValidatorException(cls.__name__, 'no spec file found')\n    if not all(key in spec for key in cls.__required_fields):\n        raise IRValidatorException(cls.__name__,'missing required fields')\n    return spec\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    spec = cls._load_spec_from_content(spec_content)\n    cls._validate_spec(spec)\n    return spec\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"Spec content is required\")\n\n    data = yaml.load(spec_content)\n    if not isinstance(data, dict):\n        raise IRValidatorException(\"Spec content is not a dictionary\")\n\n    return data", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        spec_content = cls.SPEC_CONTENT\n\n    return validate(cls.SPEC_SCHEMA, spec_content)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "ques_id": "6306091c73426c38ae68acdd", "code": ["def validate_from_file(cls, yaml_file=None):\n    data = load_yaml_file(yaml_file)\n    if data is None:\n        raise IRValidatorException(\"Missing required fields\")\n    validate_keys(data, cls.required_keys())\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n\n    if yaml_file is None:\n        raise IRValidatorException('No file specified')\n\n    try:\n        with open(yaml_file, 'r') as f:\n            data = yaml.load(f)\n            cls.validate(data)\n    except Exception as e:\n        raise IRValidatorException('Failed to load file {}: {}'.format(yaml_file, e))\n\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException(\"Missing yaml file path\")\n    try:\n        with open(yaml_file, 'r') as f:\n            yaml_data = yaml.load(f, Loader=yaml.FullLoader)\n    except yaml.YAMLError as e:\n        raise IRValidatorException(e)\n    return cls.validate(yaml_data)\n", "def validate_from_file(cls, yaml_file=None):\n    cls.validate_fields(yaml_file)\n    return cls.load_from_file(yaml_file)\n", "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException(\n            \"You must provide a yaml file to validate with.\")\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n\n    validate_schema(data, cls.schema)\n\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException('Missing required YAML file path')\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n    return cls.validate(data)\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('A file path must be provided to validate a yaml file')\n\n    with open(yaml_file, 'r') as yaml_file:\n        data = yaml.safe_load(yaml_file)\n\n    if not isinstance(data, dict):\n        raise IRValidatorException('YAML file must contain a dict with required fields')\n\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        yaml_file = cls._default_file_path\n\n    if not os.path.exists(yaml_file):\n        raise IRValidatorException('File {} does not exist.'.format(yaml_file))\n\n    with open(yaml_file) as f:\n        yaml_data = yaml.safe_load(f)\n\n    validate_from_dict(cls, yaml_data)\n\n    return yaml_data\n", "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException(\"Missing YAML file\")\n\n    if not os.path.isfile(yaml_file):\n        raise IRValidatorException(\"Invalid YAML file path: {}\".format(yaml_file))\n\n    with open(yaml_file, \"r\") as f:\n        try:\n            return cls.load(f)\n        except yaml.YAMLError as exc:\n            raise IRValidatorException(exc)\n", "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException('Missing YAML file')\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.load(f, Loader=yaml.FullLoader)\n\n    cls.validate(data)\n\n    return data\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_file(cls, yaml_file=None):\n    data = load_yaml_file(yaml_file)\n    if data is None:\n        raise IRValidatorException(\"Missing required fields\")\n    validate_keys(data, cls.required_keys())\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n\n    if yaml_file is None:\n        raise IRValidatorException('No file specified')\n\n    try:\n        with open(yaml_file, 'r') as f:\n            data = yaml.load(f)\n            cls.validate(data)\n    except Exception as e:\n        raise IRValidatorException('Failed to load file {}: {}'.format(yaml_file, e))\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException(\"Missing yaml file path\")\n    try:\n        with open(yaml_file, 'r') as f:\n            yaml_data = yaml.load(f, Loader=yaml.FullLoader)\n    except yaml.YAMLError as e:\n        raise IRValidatorException(e)\n    return cls.validate(yaml_data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    cls.validate_fields(yaml_file)\n    return cls.load_from_file(yaml_file)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException(\n            \"You must provide a yaml file to validate with.\")\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n\n    validate_schema(data, cls.schema)\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException('Missing required YAML file path')\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n    return cls.validate(data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('A file path must be provided to validate a yaml file')\n\n    with open(yaml_file, 'r') as yaml_file:\n        data = yaml.safe_load(yaml_file)\n\n    if not isinstance(data, dict):\n        raise IRValidatorException('YAML file must contain a dict with required fields')\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        yaml_file = cls._default_file_path\n\n    if not os.path.exists(yaml_file):\n        raise IRValidatorException('File {} does not exist.'.format(yaml_file))\n\n    with open(yaml_file) as f:\n        yaml_data = yaml.safe_load(f)\n\n    validate_from_dict(cls, yaml_data)\n\n    return yaml_data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException(\"Missing YAML file\")\n\n    if not os.path.isfile(yaml_file):\n        raise IRValidatorException(\"Invalid YAML file path: {}\".format(yaml_file))\n\n    with open(yaml_file, \"r\") as f:\n        try:\n            return cls.load(f)\n        except yaml.YAMLError as exc:\n            raise IRValidatorException(exc)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException('Missing YAML file')\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.load(f, Loader=yaml.FullLoader)\n\n    cls.validate(data)\n\n    return data\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "ques_id": "6306091d73426c38ae68ace5", "code": ["def _include_groups(self, parser_dict):\n    for key, value in parser_dict.items():\n        if isinstance(value, list):\n            for include_group in value:\n                if include_group.get('include'):\n                    yield include_group", "def _include_groups(self, parser_dict):\n    include_groups = []\n    for key, value in parser_dict.items():\n        if isinstance(value, list):\n            include_groups.append(key)\n        else:\n            include_groups.append(value)\n    return include_groups\n", "def _include_groups(self, parser_dict):\n    if \"include_groups\" in parser_dict:\n        parser_dict[\"include_groups\"] = parser_dict[\"include_groups\"].split(\",\")\n        parser_dict[\"include_groups\"] = [i.strip() for i in parser_dict[\"include_groups\"]]\n        parser_dict[\"include_groups\"] = [i for i in parser_dict[\"include_groups\"] if i]\n    return parser_dict\n", "def _include_groups(self, parser_dict):\n    \n    \n    for key, value in parser_dict.items():\n        if isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    self._include_groups(item)\n        else:\n            if isinstance(value, dict):\n                self._include_groups(value)", "def _include_groups(self, parser_dict):\n    \n    \n    include_groups = []\n    for group in parser_dict.get(\"include\", []):\n        include_groups.append(self._include_group(group))\n\n    return include_groups\n", "def _include_groups(self, parser_dict):\n    includes = {}\n    for group, values in parser_dict.items():\n        includes[group] = []\n        for value in values:\n            if value[0] == '#':\n                includes[group].append(value[1:])\n            else:\n                includes[group].append(value)\n    return includes", "def _include_groups(self, parser_dict):\n    for include_group in parser_dict.get(\"include_groups\", []):\n        include_group_name = include_group.get(\"name\")\n        if include_group_name in self._spec_file.include_groups:\n            parser_dict[\"include_groups\"] = self._spec_file.include_groups[include_group_name]\n        else:\n            parser_dict[\"include_groups\"] = []\n    return parser_dict\n", "def _include_groups(self, parser_dict):\n    \n    \n    for group in parser_dict:\n        if group.startswith('-'):\n            group = group[1:]\n        if 'include' in parser_dict[group]:\n            parser_dict[group] = parser_dict[group]['include']\n    return parser_dict", "def _include_groups(self, parser_dict):\n    include_groups = parser_dict.get(\"include_groups\")\n    if include_groups:\n        for group in include_groups:\n            if not isinstance(group, str):\n                raise ValueError(\n                    \"Include group %s must be a string but not a %s\" %\n                    (group, type(group)))\n            self._include_groups.append(group)\n", "def _include_groups(self, parser_dict):\n    for include in parser_dict.get('include', []):\n        for line in _get_content(include):\n            self._add_group(line, include)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _include_groups(self, parser_dict):\n    for key, value in parser_dict.items():\n        if isinstance(value, list):\n            for include_group in value:\n                if include_group.get('include'):\n                    yield include_group", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_groups = []\n    for key, value in parser_dict.items():\n        if isinstance(value, list):\n            include_groups.append(key)\n        else:\n            include_groups.append(value)\n    return include_groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    if \"include_groups\" in parser_dict:\n        parser_dict[\"include_groups\"] = parser_dict[\"include_groups\"].split(\",\")\n        parser_dict[\"include_groups\"] = [i.strip() for i in parser_dict[\"include_groups\"]]\n        parser_dict[\"include_groups\"] = [i for i in parser_dict[\"include_groups\"] if i]\n    return parser_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    \n    \n    for key, value in parser_dict.items():\n        if isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    self._include_groups(item)\n        else:\n            if isinstance(value, dict):\n                self._include_groups(value)", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    \n    \n    include_groups = []\n    for group in parser_dict.get(\"include\", []):\n        include_groups.append(self._include_group(group))\n\n    return include_groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    includes = {}\n    for group, values in parser_dict.items():\n        includes[group] = []\n        for value in values:\n            if value[0] == '#':\n                includes[group].append(value[1:])\n            else:\n                includes[group].append(value)\n    return includes", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    for include_group in parser_dict.get(\"include_groups\", []):\n        include_group_name = include_group.get(\"name\")\n        if include_group_name in self._spec_file.include_groups:\n            parser_dict[\"include_groups\"] = self._spec_file.include_groups[include_group_name]\n        else:\n            parser_dict[\"include_groups\"] = []\n    return parser_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    \n    \n    for group in parser_dict:\n        if group.startswith('-'):\n            group = group[1:]\n        if 'include' in parser_dict[group]:\n            parser_dict[group] = parser_dict[group]['include']\n    return parser_dict", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_groups = parser_dict.get(\"include_groups\")\n    if include_groups:\n        for group in include_groups:\n            if not isinstance(group, str):\n                raise ValueError(\n                    \"Include group %s must be a string but not a %s\" %\n                    (group, type(group)))\n            self._include_groups.append(group)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    for include in parser_dict.get('include', []):\n        for line in _get_content(include):\n            self._add_group(line, include)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "ques_id": "6306092373426c38ae68acfa", "code": ["def get_spec_defaults(self):\n    return {\n        \"build_dir\": self._get_spec_default(\"build_dir\"),\n        \"spec_file\": self._get_spec_default(\"spec_file\"),\n        \"spec_base\": self._get_spec_default(\"spec_base\"),\n    }\n", "def get_spec_defaults(self):\n    if self.name == 'args':\n        return self.args.values()\n    elif self.name == 'kwargs':\n        return self.kwargs.values()\n    else:\n        return self.defaults\n", "def get_spec_defaults(self):\n    defaults = {}\n    for name, value in self.defaults.items():\n        if name in self.spec:\n            defaults[name] = self.spec[name]\n    return defaults", "def get_spec_defaults(self):\n    return self._resolve_defaults(self.spec, self._get_spec_defaults())", "def get_spec_defaults(self):\n    return self.spec.get_defaults()", "def get_spec_defaults(self):\n    return self.spec.get_defaults()\n", "def get_spec_defaults(self):\n    spec = getattr(self.get_spec(),'spec', None)\n    if spec is None:\n        return {}\n    return spec.get_defaults(self.spec, self)\n", "def get_spec_defaults(self):\n    for name, value in self.spec.get('defaults', {}).items():\n        if not isinstance(value, (list, dict)):\n            value = [value]\n        value = self._get_spec_value(name, value)\n        self.spec['defaults'][name] = value\n    for name, value in self.spec.get('defaults_dict', {}).items():\n        if not isinstance(value, (list, dict)):\n            value = [value]\n        value = self._get_spec_value(name, value)\n        self.spec['defaults_dict'][name] = value\n    for name, value in self.spec.get('defaults_tuple', ()):\n        self.spec['defaults_tuple'][name] = self._get_spec_value(name, value)\n", "def get_spec_defaults(self):\n    spec = self.get_spec()\n    return {name: getattr(spec, name) for name in spec._fields}\n", "def get_spec_defaults(self):\n    return {\n        'title': self.spec['title'],\n        'description': self.spec['description'],\n        'tags': self.spec.get('tags', []),\n       'version': self.spec.get('version', ''),\n       'slug': self.spec.get('slug', ''),\n        'license': self.spec.get('license', ''),\n        'author': self.spec.get('author', ''),\n        'author_email': self.spec.get('author_email', ''),\n        'license_url': self.spec.get('license_url', ''),\n        'author_url': self.spec.get('author_url', ''),\n        'url': self.spec.get('url', ''),\n    }\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_spec_defaults(self):\n    return {\n        \"build_dir\": self._get_spec_default(\"build_dir\"),\n        \"spec_file\": self._get_spec_default(\"spec_file\"),\n        \"spec_base\": self._get_spec_default(\"spec_base\"),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    if self.name == 'args':\n        return self.args.values()\n    elif self.name == 'kwargs':\n        return self.kwargs.values()\n    else:\n        return self.defaults\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    defaults = {}\n    for name, value in self.defaults.items():\n        if name in self.spec:\n            defaults[name] = self.spec[name]\n    return defaults", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self._resolve_defaults(self.spec, self._get_spec_defaults())", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.spec.get_defaults()", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.spec.get_defaults()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    spec = getattr(self.get_spec(),'spec', None)\n    if spec is None:\n        return {}\n    return spec.get_defaults(self.spec, self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    for name, value in self.spec.get('defaults', {}).items():\n        if not isinstance(value, (list, dict)):\n            value = [value]\n        value = self._get_spec_value(name, value)\n        self.spec['defaults'][name] = value\n    for name, value in self.spec.get('defaults_dict', {}).items():\n        if not isinstance(value, (list, dict)):\n            value = [value]\n        value = self._get_spec_value(name, value)\n        self.spec['defaults_dict'][name] = value\n    for name, value in self.spec.get('defaults_tuple', ()):\n        self.spec['defaults_tuple'][name] = self._get_spec_value(name, value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    spec = self.get_spec()\n    return {name: getattr(spec, name) for name in spec._fields}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return {\n        'title': self.spec['title'],\n        'description': self.spec['description'],\n        'tags': self.spec.get('tags', []),\n       'version': self.spec.get('version', ''),\n       'slug': self.spec.get('slug', ''),\n        'license': self.spec.get('license', ''),\n        'author': self.spec.get('author', ''),\n        'author_email': self.spec.get('author_email', ''),\n        'license_url': self.spec.get('license_url', ''),\n        'author_url': self.spec.get('author_url', ''),\n        'url': self.spec.get('url', ''),\n    }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "ques_id": "6306092973426c38ae68ad01", "code": ["def get_deprecated_args(self):\n    \n    \n    return {}\n", "def get_deprecated_args(self):\n    return {'deprecated_options': self.deprecated_options}\n", "def get_deprecated_args(self):\n    return self.deprecated_args\n", "def get_deprecated_args(self):\n    \n    \n    return self._deprecated_args", "def get_deprecated_args(self):\n    return {'options': self.deprecated_args}\n", "def get_deprecated_args(self):\n    return self._deprecated_args", "def get_deprecated_args(self):\n    return {}\n", "def get_deprecated_args(self):\n    return self.__deprecated_args__\n", "def get_deprecated_args(self):\n    \n    \n    return {}\n", "def get_deprecated_args(self):\n    return self._deprecated_args"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_deprecated_args(self):\n    \n    \n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return {'deprecated_options': self.deprecated_options}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self.deprecated_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    \n    \n    return self._deprecated_args", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return {'options': self.deprecated_args}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._deprecated_args", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self.__deprecated_args__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    \n    \n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._deprecated_args", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "ques_id": "6306092c73426c38ae68ad02", "code": ["def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecation_args = {}\n    for arg in self._deprecated_args:\n        if arg in cli_args:\n            deprecation_args[arg] = cli_args[arg]\n        else:\n            deprecation_args[arg] = answer_file_args[arg]\n\n    self._logger.debug(\"deprecated args: {}\".format(deprecation_args))\n    return deprecation_args\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    for arg in cli_args:\n        if arg not in answer_file_args:\n            self.log.warning('Argument %s is deprecated. Please use %s' %\n                             (arg, arg))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    for arg_name, arg_value in cli_args.items():\n        if arg_name in answer_file_args:\n            answer_file_args[arg_name] = self.validate_arg(cli_args[arg_name], arg_value)\n        else:\n            print(f'{arg_name} is deprecated. Please use --{arg_name} or --{arg_name}=new_value')\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    answer_file = answer_file_args[\"file\"]\n    if not answer_file.endswith(\".yaml\"):\n        return\n\n    self._validate_file_arguments(cli_args, answer_file)\n    self._validate_file_arguments(cli_args, answer_file.replace(\".yaml\", \".yml\"))\n    self._validate_file_arguments(cli_args, answer_file.replace(\".yml\", \".yaml\"))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    print(\"DEPRECATED ARGUMENTS: {}\".format(cli_args))\n    print(\"DEPRECATED ARGUMENTS: {}\".format(answer_file_args))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args is not None:\n        for key in cli_args.keys():\n            if key in answer_file_args.keys():\n                raise ValueError(\n                    \"Argument '{0}' is deprecated and should be used instead \"\n                    \"of '{1}'\".format(key, cli_args[key]))\n            else:\n                print(\"Argument '{0}' is deprecated\".format(key))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args.deprecated_args:\n        deprecated_args = cli_args.deprecated_args\n        for arg in deprecated_args:\n            if arg not in answer_file_args:\n                self.logger.error('[DEPRECATED] Argument {} is not present in file'.format(arg))\n                return False\n        return True\n    else:\n        return True", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args is not None:\n        self.validate_args(cli_args)\n    if answer_file_args is not None:\n        self.validate_args(answer_file_args)", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args['deprecated']:\n        return\n    deprecated = cli_args['deprecated']\n    if deprecated and deprecated in answer_file_args:\n        answer_file_args[deprecated] = answer_file_args.pop(deprecated)\n        if not answer_file_args:\n            print('')\n        else:\n            print('\\n'.join(\n                ['    {}: {}'.format(k, v) for k, v in answer_file_args.items()]\n            ))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args is None or cli_args.get('deprecated') is None:\n        return\n\n    if cli_args['deprecated'] is True:\n        self.deprecation_warning(answer_file_args)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecation_args = {}\n    for arg in self._deprecated_args:\n        if arg in cli_args:\n            deprecation_args[arg] = cli_args[arg]\n        else:\n            deprecation_args[arg] = answer_file_args[arg]\n\n    self._logger.debug(\"deprecated args: {}\".format(deprecation_args))\n    return deprecation_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    for arg in cli_args:\n        if arg not in answer_file_args:\n            self.log.warning('Argument %s is deprecated. Please use %s' %\n                             (arg, arg))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    for arg_name, arg_value in cli_args.items():\n        if arg_name in answer_file_args:\n            answer_file_args[arg_name] = self.validate_arg(cli_args[arg_name], arg_value)\n        else:\n            print(f'{arg_name} is deprecated. Please use --{arg_name} or --{arg_name}=new_value')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    answer_file = answer_file_args[\"file\"]\n    if not answer_file.endswith(\".yaml\"):\n        return\n\n    self._validate_file_arguments(cli_args, answer_file)\n    self._validate_file_arguments(cli_args, answer_file.replace(\".yaml\", \".yml\"))\n    self._validate_file_arguments(cli_args, answer_file.replace(\".yml\", \".yaml\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    print(\"DEPRECATED ARGUMENTS: {}\".format(cli_args))\n    print(\"DEPRECATED ARGUMENTS: {}\".format(answer_file_args))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args is not None:\n        for key in cli_args.keys():\n            if key in answer_file_args.keys():\n                raise ValueError(\n                    \"Argument '{0}' is deprecated and should be used instead \"\n                    \"of '{1}'\".format(key, cli_args[key]))\n            else:\n                print(\"Argument '{0}' is deprecated\".format(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args.deprecated_args:\n        deprecated_args = cli_args.deprecated_args\n        for arg in deprecated_args:\n            if arg not in answer_file_args:\n                self.logger.error('[DEPRECATED] Argument {} is not present in file'.format(arg))\n                return False\n        return True\n    else:\n        return True", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args is not None:\n        self.validate_args(cli_args)\n    if answer_file_args is not None:\n        self.validate_args(answer_file_args)", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args['deprecated']:\n        return\n    deprecated = cli_args['deprecated']\n    if deprecated and deprecated in answer_file_args:\n        answer_file_args[deprecated] = answer_file_args.pop(deprecated)\n        if not answer_file_args:\n            print('')\n        else:\n            print('\\n'.join(\n                ['    {}: {}'.format(k, v) for k, v in answer_file_args.items()]\n            ))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args is None or cli_args.get('deprecated') is None:\n        return\n\n    if cli_args['deprecated'] is True:\n        self.deprecation_warning(answer_file_args)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "ques_id": "6306092d73426c38ae68ad04", "code": ["def get_parser_option_specs(self, command_name):\n    if command_name in self.commands:\n        return self.commands[command_name].get_parser_option_specs()\n    else:\n        return []\n", "def get_parser_option_specs(self, command_name):\n    if command_name not in self.__commands:\n        raise KeyError(\"Command '%s' is not defined\" % command_name)\n    return self.__commands[command_name].get_parser_option_specs()", "def get_parser_option_specs(self, command_name):\n    option_spec = {}\n    for option in self._parser.option_list:\n        if option.dest == command_name:\n            option_spec[option.opts[0]] = option.opts[1]\n    return option_spec\n", "def get_parser_option_specs(self, command_name):\n    parser = self.get_parser(command_name)\n    return parser.option_list", "def get_parser_option_specs(self, command_name):\n    if command_name == \"main\":\n        return self.main_parser.parse_args()\n    elif command_name == \"virsh\":\n        return self.virsh_parser.parse_args()\n    elif command_name == \"ospd\":\n        return self.ospd_parser.parse_args()\n    elif command_name == \"ospd-config\":\n        return self.ospd_parser.parse_args()\n    else:\n        return []\n", "def get_parser_option_specs(self, command_name):\n    return self.get_parser_options(command_name)[1]", "def get_parser_option_specs(self, command_name):\n    return self._parser_options.get(command_name, [])", "def get_parser_option_specs(self, command_name):\n    return self._parser.get_option_specs(command_name)", "def get_parser_option_specs(self, command_name):\n    return self.command_parser_map[command_name]", "def get_parser_option_specs(self, command_name):\n    if command_name == \"main\":\n        return self.__main_parser.option_list\n    elif command_name == \"virsh\":\n        return self.__virsh_parser.option_list\n    elif command_name == \"ospd\":\n        return self.__ospd_parser.option_list\n    elif command_name == \"libvirtd\":\n        return self.__libvirtd_parser.option_list\n    else:\n        return self.__parser.option_list\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_parser_option_specs(self, command_name):\n    if command_name in self.commands:\n        return self.commands[command_name].get_parser_option_specs()\n    else:\n        return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    if command_name not in self.__commands:\n        raise KeyError(\"Command '%s' is not defined\" % command_name)\n    return self.__commands[command_name].get_parser_option_specs()", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    option_spec = {}\n    for option in self._parser.option_list:\n        if option.dest == command_name:\n            option_spec[option.opts[0]] = option.opts[1]\n    return option_spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    parser = self.get_parser(command_name)\n    return parser.option_list", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    if command_name == \"main\":\n        return self.main_parser.parse_args()\n    elif command_name == \"virsh\":\n        return self.virsh_parser.parse_args()\n    elif command_name == \"ospd\":\n        return self.ospd_parser.parse_args()\n    elif command_name == \"ospd-config\":\n        return self.ospd_parser.parse_args()\n    else:\n        return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.get_parser_options(command_name)[1]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self._parser_options.get(command_name, [])", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self._parser.get_option_specs(command_name)", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.command_parser_map[command_name]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    if command_name == \"main\":\n        return self.__main_parser.option_list\n    elif command_name == \"virsh\":\n        return self.__virsh_parser.option_list\n    elif command_name == \"ospd\":\n        return self.__ospd_parser.option_list\n    elif command_name == \"libvirtd\":\n        return self.__libvirtd_parser.option_list\n    else:\n        return self.__parser.option_list\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "ques_id": "6306092d73426c38ae68ad05", "code": ["def get_option_spec(self, command_name, argument_name):\n\n\nreturn self.__get_option_spec(command_name, argument_name, True)\n", "def get_option_spec(self, command_name, argument_name):\n\n\nreturn self.__get_command_spec(command_name).get_option_spec(argument_name)", "def get_option_spec(self, command_name, argument_name):\n    return self.__option_specs[command_name][argument_name]", "def get_option_spec(self, command_name, argument_name):\n    \n    \n    try:\n        return self.__getattribute__(command_name)[argument_name]\n    except KeyError:\n        raise OptionNotFound(command_name, argument_name)", "def get_option_spec(self, command_name, argument_name):\n    \n    \n    return self.__commands[command_name]['options'][argument_name]\n", "def get_option_spec(self, command_name, argument_name):\n    \n    \n\n    if command_name not in self.commands:\n        return None\n\n    command = self.commands[command_name]\n    if argument_name not in command.options:\n        return None\n\n    return command.options[argument_name]\n", "def get_option_spec(self, command_name, argument_name):\n    return self.__command_table[command_name]['options'][argument_name]", "def get_option_spec(self, command_name, argument_name):\n    \n    \n    command = self.__get_command(command_name)\n    return command.get_option_spec(argument_name)", "def get_option_spec(self, command_name, argument_name):\n    \n    \n    command = self._get_command(command_name)\n    return command.get_option_spec(argument_name)", "def get_option_spec(self, command_name, argument_name):\n    \n    \n    if command_name not in self._commands:\n        raise ValueError('Unknown command name {!r}'.format(command_name))\n    command = self._commands[command_name]\n    return command.get_option_spec(argument_name)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_option_spec(self, command_name, argument_name):\n\n\nreturn self.__get_option_spec(command_name, argument_name, True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n\n\nreturn self.__get_command_spec(command_name).get_option_spec(argument_name)", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self.__option_specs[command_name][argument_name]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    \n    \n    try:\n        return self.__getattribute__(command_name)[argument_name]\n    except KeyError:\n        raise OptionNotFound(command_name, argument_name)", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    \n    \n    return self.__commands[command_name]['options'][argument_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    \n    \n\n    if command_name not in self.commands:\n        return None\n\n    command = self.commands[command_name]\n    if argument_name not in command.options:\n        return None\n\n    return command.options[argument_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self.__command_table[command_name]['options'][argument_name]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    \n    \n    command = self.__get_command(command_name)\n    return command.get_option_spec(argument_name)", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    \n    \n    command = self._get_command(command_name)\n    return command.get_option_spec(argument_name)", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    \n    \n    if command_name not in self._commands:\n        raise ValueError('Unknown command name {!r}'.format(command_name))\n    command = self._commands[command_name]\n    return command.get_option_spec(argument_name)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "ques_id": "6306092d73426c38ae68ad06", "code": ["def get_silent_args(self, args):\nreturn [arg for arg in self.silent_args if arg in args]", "def get_silent_args(self, args):\nargs_silent = []\nfor arg in args:\nif not arg.startswith('-'):\nargs_silent.append(arg)\nreturn args_silent", "def get_silent_args(self, args):\nreturn []", "def get_silent_args(self, args):\nreturn [arg for arg in args if arg!='self']", "def get_silent_args(self, args):\nreturn [arg for arg in args if not self.__is_silent(arg)]\n", "def get_silent_args(self, args):\nreturn [arg for arg in args if arg not in self.silent_args]", "def get_silent_args(self, args):\n    return [arg for arg in self.__args if not arg.silent]", "def get_silent_args(self, args):\nreturn []", "def get_silent_args(self, args):\nreturn [arg for arg in args if arg not in self.silent_args]\n", "def get_silent_args(self, args):\nreturn [arg for arg in args if not self.__silent_args.has_key(arg)]\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_silent_args(self, args):\nreturn [arg for arg in self.silent_args if arg in args]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\nargs_silent = []\nfor arg in args:\nif not arg.startswith('-'):\nargs_silent.append(arg)\nreturn args_silent", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\nreturn []", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\nreturn [arg for arg in args if arg!='self']", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\nreturn [arg for arg in args if not self.__is_silent(arg)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\nreturn [arg for arg in args if arg not in self.silent_args]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in self.__args if not arg.silent]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\nreturn []", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\nreturn [arg for arg in args if arg not in self.silent_args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\nreturn [arg for arg in args if not self.__silent_args.has_key(arg)]\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "ques_id": "6306092d73426c38ae68ad07", "code": ["def validate_requires_args(self, args):\n    for arg in args:\n        if arg not in self.required_args:\n            raise ValueError(\n                f\"The argument {arg} is required for {self.name}\"\n            )\n", "def validate_requires_args(self, args):\n    return all(required in args for required in REQUIRED_ARGS)\n", "def validate_requires_args(self, args):\n    if not args.username and not args.password:\n        raise ValueError('You need to specify either a username or a password.')", "def validate_requires_args(self, args):\n\n    required_args = [\"file\", \"record\", \"out_dir\", \"out_file\"]\n\n    for arg in required_args:\n        if arg not in args:\n            return False\n\n    return True\n", "def validate_requires_args(self, args):\n    for arg in self.required_args:\n        if arg not in args:\n            return False\n    return True", "def validate_requires_args(self, args):\n    for arg in self.required_args:\n        if arg not in args:\n            raise ValueError(\"Required argument {0} not provided.\".format(arg))\n", "def validate_requires_args(self, args):\n    return all(arg is not None for arg in self.required_args)", "def validate_requires_args(self, args):\n    for arg in args:\n        if arg not in self.required_args:\n            return False\n    return True\n", "def validate_requires_args(self, args):\n    \n    \n    required_args = ['title', 'url', 'description', 'is_enabled']\n    for arg in required_args:\n        if arg not in args:\n            raise Exception('Missing required argument: {}'.format(arg))\n", "def validate_requires_args(self, args):\n    missing_args = []\n    for arg in REQUIRED_ARGS:\n        if arg not in args:\n            missing_args.append(arg)\n    if missing_args:\n        raise ValueError('Missing required arguments: %s' % ', '.join(missing_args))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_requires_args(self, args):\n    for arg in args:\n        if arg not in self.required_args:\n            raise ValueError(\n                f\"The argument {arg} is required for {self.name}\"\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    return all(required in args for required in REQUIRED_ARGS)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    if not args.username and not args.password:\n        raise ValueError('You need to specify either a username or a password.')", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n\n    required_args = [\"file\", \"record\", \"out_dir\", \"out_file\"]\n\n    for arg in required_args:\n        if arg not in args:\n            return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    for arg in self.required_args:\n        if arg not in args:\n            return False\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    for arg in self.required_args:\n        if arg not in args:\n            raise ValueError(\"Required argument {0} not provided.\".format(arg))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    return all(arg is not None for arg in self.required_args)", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    for arg in args:\n        if arg not in self.required_args:\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    \n    \n    required_args = ['title', 'url', 'description', 'is_enabled']\n    for arg in required_args:\n        if arg not in args:\n            raise Exception('Missing required argument: {}'.format(arg))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    missing_args = []\n    for arg in REQUIRED_ARGS:\n        if arg not in args:\n            missing_args.append(arg)\n    if missing_args:\n        raise ValueError('Missing required arguments: %s' % ', '.join(missing_args))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "ques_id": "6306092d73426c38ae68ad08", "code": ["def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    return [arg for arg in args if self._conditionally_required(\n        command_name, options_spec, arg)]\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    args_with_required_when = []\n    for name, value in args:\n        if value is None and name in options_spec:\n            args_with_required_when.append(name)\n        elif value is not None and name not in options_spec:\n            args_with_required_when.append(name)\n    return args_with_required_when\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    return self._get_conditionally_required_args_helper(\n        command_name, options_spec, args, False)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    conditionally_required_args = []\n    for arg in args:\n        if self._is_required_when(command_name, options_spec, arg):\n            conditionally_required_args.append(arg)\n    return conditionally_required_args", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    required_when = self._get_conditionally_required_arguments(command_name,\n                                                               options_spec,\n                                                               args)\n    return [arg for arg in args if arg in required_when]\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    return _get_conditionally_required_args(\n        command_name, options_spec, args, required_when=True)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    if not self._conditional_required_args:\n        return []\n    conditional_required_args = self._conditional_required_args\n    for arg in args:\n        conditional_required_args.append(arg)\n    return self._get_conditionally_required_args_helper(\n        command_name, options_spec, conditional_required_args)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    conditional_args = []\n    for arg in args:\n        if self._conditional_arg_matches(command_name, options_spec, arg):\n            conditional_args.append(arg)\n    return conditional_args\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    conditions = [condition for condition in options_spec\n                  if condition['required_when'](command_name, args)]\n\n    if conditions:\n        return conditions\n    return []\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    arg_names = set()\n    for arg in args:\n        if not self._conditionally_required_arg(command_name, arg):\n            continue\n\n        if self._arg_matches_required_when(command_name, arg):\n            arg_names.add(arg)\n\n    return arg_names\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    return [arg for arg in args if self._conditionally_required(\n        command_name, options_spec, arg)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    args_with_required_when = []\n    for name, value in args:\n        if value is None and name in options_spec:\n            args_with_required_when.append(name)\n        elif value is not None and name not in options_spec:\n            args_with_required_when.append(name)\n    return args_with_required_when\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    return self._get_conditionally_required_args_helper(\n        command_name, options_spec, args, False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    conditionally_required_args = []\n    for arg in args:\n        if self._is_required_when(command_name, options_spec, arg):\n            conditionally_required_args.append(arg)\n    return conditionally_required_args", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    required_when = self._get_conditionally_required_arguments(command_name,\n                                                               options_spec,\n                                                               args)\n    return [arg for arg in args if arg in required_when]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    return _get_conditionally_required_args(\n        command_name, options_spec, args, required_when=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    if not self._conditional_required_args:\n        return []\n    conditional_required_args = self._conditional_required_args\n    for arg in args:\n        conditional_required_args.append(arg)\n    return self._get_conditionally_required_args_helper(\n        command_name, options_spec, conditional_required_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    conditional_args = []\n    for arg in args:\n        if self._conditional_arg_matches(command_name, options_spec, arg):\n            conditional_args.append(arg)\n    return conditional_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    conditions = [condition for condition in options_spec\n                  if condition['required_when'](command_name, args)]\n\n    if conditions:\n        return conditions\n    return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    arg_names = set()\n    for arg in args:\n        if not self._conditionally_required_arg(command_name, arg):\n            continue\n\n        if self._arg_matches_required_when(command_name, arg):\n            arg_names.add(arg)\n\n    return arg_names\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad09", "code": ["def validate_length_args(self, args):\n    if len(args) < self.length:\n        raise ValidationError(\n            self.error_messages['too_few_arguments'],\n            code='too_few_arguments',\n        )\n", "def validate_length_args(self, args):\n    if len(args) > self.max_length:\n        raise ArgumentError('Too many arguments (%d)' % len(args))\n", "def validate_length_args(self, args):\n    return len(args) > self.length\n", "def validate_length_args(self, args):\n    if args['length'] > len(args['value']):\n        raise ValueError('Length specified is greater than value specified')", "def validate_length_args(self, args):\n    if len(args) > self.length:\n        raise ValueError('Argument is longer than length')\n", "def validate_length_args(self, args):\n    return len(args) > self.args_length", "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.__error(\"Length of {} is greater than {}\".format(args[0], self.length))\n", "def validate_length_args(self, args):\n    length = args.get('length', 0)\n    if length > len(args['items']):\n        raise ArgumentError('Value of length must be less than length of items.')", "def validate_length_args(self, args):\n    if len(args) > self.arg_max:\n        raise argparse.ArgumentTypeError(\n            f\"{self.arg_name} exceeds maximum length of {self.arg_max}\"\n        )\n", "def validate_length_args(self, args):\n    if len(args) > self.args_length:\n        self.error(\"Value of argument '{0}' exceeds length limit of {1}\".format(args[0], self.args_length))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_length_args(self, args):\n    if len(args) < self.length:\n        raise ValidationError(\n            self.error_messages['too_few_arguments'],\n            code='too_few_arguments',\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.max_length:\n        raise ArgumentError('Too many arguments (%d)' % len(args))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    return len(args) > self.length\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if args['length'] > len(args['value']):\n        raise ValueError('Length specified is greater than value specified')", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.length:\n        raise ValueError('Argument is longer than length')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    return len(args) > self.args_length", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.__error(\"Length of {} is greater than {}\".format(args[0], self.length))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    length = args.get('length', 0)\n    if length > len(args['items']):\n        raise ArgumentError('Value of length must be less than length of items.')", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.arg_max:\n        raise argparse.ArgumentTypeError(\n            f\"{self.arg_name} exceeds maximum length of {self.arg_max}\"\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.args_length:\n        self.error(\"Value of argument '{0}' exceeds length limit of {1}\".format(args[0], self.args_length))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0a", "code": ["def validate_choices_args(self, args):\n    if args not in self.choices:\n        raise ValueError('Invalid choice: {}'.format(args))\n", "def validate_choices_args(self, args):\n    for choice in self.choices:\n        if choice[0] in args:\n            return True\n    return False\n", "def validate_choices_args(self, args):\n    if args['choices'] in self.get_choices_list():\n        return True\n    return False\n", "def validate_choices_args(self, args):\n    if args.choices is not None:\n        choices = args.choices\n        choices = set(choices)\n        available_choices = set(self._available_choices)\n        available_choices.difference_update(choices)\n        if len(choices)!= len(available_choices):\n            raise ValueError(\n                'Not all choices are available in the arguments for the choices argument.'\n            )\n", "def validate_choices_args(self, args):\n    if args.choices and not args.choices in self.choices:\n        raise ValueError(\n            \"Expected one of {} choices, got {}\".format(\n                self.choices, args.choices))\n", "def validate_choices_args(self, args):\n    choices = args.get('choices')\n    if not choices:\n        return\n    for choice in choices:\n        if choice not in self.choices:\n            raise ValueError('Invalid choice %s.' % choice)", "def validate_choices_args(self, args):\n    if args['choices'] not in self._choices:\n        raise ValueError(\"Invalid choice: '{}'\".format(args['choices']))\n", "def validate_choices_args(self, args):\n    if args[\"choices\"] not in self.choices:\n        raise ArgumentError(\"'%s' is not a valid choice for the choices argument\" % args[\"choices\"])", "def validate_choices_args(self, args):\n    if args not in self.choices:\n        raise ValueError(\"Invalid choice: %s\" % args)", "def validate_choices_args(self, args):\n    choices = []\n    for arg in args:\n        if arg in self.__choices:\n            choices.append(arg)\n    if len(choices) == 0:\n        self.__choices.append('all')\n    return choices"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_choices_args(self, args):\n    if args not in self.choices:\n        raise ValueError('Invalid choice: {}'.format(args))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    for choice in self.choices:\n        if choice[0] in args:\n            return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args['choices'] in self.get_choices_list():\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args.choices is not None:\n        choices = args.choices\n        choices = set(choices)\n        available_choices = set(self._available_choices)\n        available_choices.difference_update(choices)\n        if len(choices)!= len(available_choices):\n            raise ValueError(\n                'Not all choices are available in the arguments for the choices argument.'\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args.choices and not args.choices in self.choices:\n        raise ValueError(\n            \"Expected one of {} choices, got {}\".format(\n                self.choices, args.choices))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    choices = args.get('choices')\n    if not choices:\n        return\n    for choice in choices:\n        if choice not in self.choices:\n            raise ValueError('Invalid choice %s.' % choice)", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args['choices'] not in self._choices:\n        raise ValueError(\"Invalid choice: '{}'\".format(args['choices']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args[\"choices\"] not in self.choices:\n        raise ArgumentError(\"'%s' is not a valid choice for the choices argument\" % args[\"choices\"])", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args not in self.choices:\n        raise ValueError(\"Invalid choice: %s\" % args)", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    choices = []\n    for arg in args:\n        if arg in self.__choices:\n            choices.append(arg)\n    if len(choices) == 0:\n        self.__choices.append('all')\n    return choices", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0b", "code": ["def validate_min_max_args(self, args):\n    if args.min is not None and args.max is not None:\n        if args.min > args.max:\n            self.error(\"%s must be at least %s\" % (args.min, args.max))\n", "def validate_min_max_args(self, args):\n    try:\n        min_value = self._validate_args(args, self.MIN_VALUE, self.MAX_VALUE)\n    except ValueError:\n        self._print_args_error(args)\n        return False\n    return min_value is not None\n", "def validate_min_max_args(self, args):\n    if args is None:\n        raise ValueError(\"Arguments are required.\")\n\n    min_arg, max_arg = self.get_min_max_args()\n    if min_arg <= args <= max_arg:\n        return\n    raise ValueError(\"Arguments are not between {} and {}\".format(min_arg, max_arg))", "def validate_min_max_args(self, args):\n    if not isinstance(args, list):\n        raise ValueError(\"Arguments must be a list.\")\n    if not all(isinstance(arg, str) for arg in args):\n        raise ValueError(\"Arguments must be strings.\")\n\n    if not all(isinstance(arg, int) for arg in args):\n        raise ValueError(\"Arguments must be integers.\")\n\n    if not all(isinstance(arg, float) for arg in args):\n        raise ValueError(\"Arguments must be floats.\")", "def validate_min_max_args(self, args):\n    return self.validate_args(args, self.min_arg, self.max_arg)\n", "def validate_min_max_args(self, args):\n    if not args:\n        raise ValueError('Missing argument \"%s\"' % self.__class__.__name__)\n\n    for arg in args:\n        if arg < self.__min_value or arg > self.__max_value:\n            raise ValueError('Argument \"%s\" is not between %s and %s' % (arg, self.__min_value, self.__max_value))", "def validate_min_max_args(self, args):\n    if len(args)!= 2:\n        self.__parser.error('A range must be specified.')\n\n    try:\n        min_value = int(args[0])\n        max_value = int(args[1])\n    except ValueError:\n        self.__parser.error('A range must be specified.')\n\n    if min_value > max_value:\n        self.__parser.error('A range must be specified.')\n", "def validate_min_max_args(self, args):\n    return (args.min is not None and args.max is not None and\n            args.min >= args.max)\n", "def validate_min_max_args(self, args):\n    if not isinstance(args, list):\n        raise InvalidArgument(\"Argument must be a list.\")\n\n    if len(args) < 2:\n        raise InvalidArgument(\"Arguments must be at least two values.\")\n\n    if args[0] < args[1]:\n        raise InvalidArgument(\"Value of first argument must be less than value of second argument.\")", "def validate_min_max_args(self, args):\n    min_arg = args.get(self._arg_name, None)\n    max_arg = args.get(self._arg_name + '_max', None)\n    if min_arg is None or max_arg is None:\n        return True\n    return min_arg <= args[self._arg_name] <= max_arg\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_min_max_args(self, args):\n    if args.min is not None and args.max is not None:\n        if args.min > args.max:\n            self.error(\"%s must be at least %s\" % (args.min, args.max))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    try:\n        min_value = self._validate_args(args, self.MIN_VALUE, self.MAX_VALUE)\n    except ValueError:\n        self._print_args_error(args)\n        return False\n    return min_value is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if args is None:\n        raise ValueError(\"Arguments are required.\")\n\n    min_arg, max_arg = self.get_min_max_args()\n    if min_arg <= args <= max_arg:\n        return\n    raise ValueError(\"Arguments are not between {} and {}\".format(min_arg, max_arg))", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if not isinstance(args, list):\n        raise ValueError(\"Arguments must be a list.\")\n    if not all(isinstance(arg, str) for arg in args):\n        raise ValueError(\"Arguments must be strings.\")\n\n    if not all(isinstance(arg, int) for arg in args):\n        raise ValueError(\"Arguments must be integers.\")\n\n    if not all(isinstance(arg, float) for arg in args):\n        raise ValueError(\"Arguments must be floats.\")", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    return self.validate_args(args, self.min_arg, self.max_arg)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if not args:\n        raise ValueError('Missing argument \"%s\"' % self.__class__.__name__)\n\n    for arg in args:\n        if arg < self.__min_value or arg > self.__max_value:\n            raise ValueError('Argument \"%s\" is not between %s and %s' % (arg, self.__min_value, self.__max_value))", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if len(args)!= 2:\n        self.__parser.error('A range must be specified.')\n\n    try:\n        min_value = int(args[0])\n        max_value = int(args[1])\n    except ValueError:\n        self.__parser.error('A range must be specified.')\n\n    if min_value > max_value:\n        self.__parser.error('A range must be specified.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    return (args.min is not None and args.max is not None and\n            args.min >= args.max)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if not isinstance(args, list):\n        raise InvalidArgument(\"Argument must be a list.\")\n\n    if len(args) < 2:\n        raise InvalidArgument(\"Arguments must be at least two values.\")\n\n    if args[0] < args[1]:\n        raise InvalidArgument(\"Value of first argument must be less than value of second argument.\")", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    min_arg = args.get(self._arg_name, None)\n    max_arg = args.get(self._arg_name + '_max', None)\n    if min_arg is None or max_arg is None:\n        return True\n    return min_arg <= args[self._arg_name] <= max_arg\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "ques_id": "6306092e73426c38ae68ad0d", "code": ["def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self._create_argumet_type(subcommand, type_name, option_name,\n                                      spec_option, self.complex_argument_types)", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.__create_argumet_type(subcommand, type_name, option_name,\n                                       spec_option, complex)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.__create_argument_type(subcommand, type_name, option_name,\n                                       spec_option, complex)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.__create_argument_type(subcommand, type_name, option_name,\n                                       spec_option, True)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.__create_argument_type(subcommand, type_name, option_name,\n                                        spec_option, complex)", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return ComplexArgumentType(\n        subcommand, type_name, option_name, spec_option)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return complex(subcommand, type_name, option_name, spec_option)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return ComplexType(subcommand, type_name, option_name, spec_option)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    if not isinstance(spec_option, ComplexTypeSpecification):\n        raise ValueError(\"The'spec_option' parameter must be a ComplexTypeSpecification\")\n    return ComplexType(subcommand, type_name, option_name, spec_option)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    if not self.__has_complex_type(subcommand, type_name, option_name,\n                                   spec_option):\n        raise SchemaError(\"No complex type found for {}.{}.{}\".format(\n            subcommand, type_name, option_name))\n    return self.__create_complex_argument_type(subcommand, type_name, option_name,\n                                               spec_option)"], "level": "class_runnable", "generate_results": [{"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self._create_argumet_type(subcommand, type_name, option_name,\n                                      spec_option, self.complex_argument_types)", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.__create_argumet_type(subcommand, type_name, option_name,\n                                       spec_option, complex)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.__create_argument_type(subcommand, type_name, option_name,\n                                       spec_option, complex)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.__create_argument_type(subcommand, type_name, option_name,\n                                       spec_option, True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.__create_argument_type(subcommand, type_name, option_name,\n                                        spec_option, complex)", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return ComplexArgumentType(\n        subcommand, type_name, option_name, spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return complex(subcommand, type_name, option_name, spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return ComplexType(subcommand, type_name, option_name, spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    if not isinstance(spec_option, ComplexTypeSpecification):\n        raise ValueError(\"The'spec_option' parameter must be a ComplexTypeSpecification\")\n    return ComplexType(subcommand, type_name, option_name, spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    if not self.__has_complex_type(subcommand, type_name, option_name,\n                                   spec_option):\n        raise SchemaError(\"No complex type found for {}.{}.{}\".format(\n            subcommand, type_name, option_name))\n    return self.__create_complex_argument_type(subcommand, type_name, option_name,\n                                               spec_option)", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "ques_id": "6306092e73426c38ae68ad0f", "code": ["def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    if args.control:\n        control_args = self._get_nested_custom_args(args)\n    if args.nested:\n        nested_args = self._get_nested_custom_args(args.nested)\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if '=' in arg:\n            key, value = arg.split('=')\n            control_args[key] = value\n        else:\n            nested_args[arg] = args[arg]\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n\n    control_args = {}\n    nested_args = {}\n    if args.control:\n        control_args = self._get_nested_custom_args(args)\n    if args.nested:\n        nested_args = self._get_nested_custom_args(args.nested)\n\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n\n    for arg in args:\n        if arg.startswith(\"--control\"):\n            control_args.update(arg)\n        elif arg.startswith(\"--nested\"):\n            nested_args.update(arg)\n\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    return {}, {}", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for key, value in args.iteritems():\n        if key.startswith('-') and key.endswith('_'):\n            nested_args[key[1:-1]] = value\n        else:\n            control_args[key] = value\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if arg.startswith('--'):\n            nested_args[arg[2:]] = args[arg]\n        else:\n            control_args[arg] = args[arg]\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    if args.control:\n        control_args = self._get_nested_custom_args(args.control)\n    if args.nested:\n        nested_args = self._get_nested_custom_args(args.nested)\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n\n    control_args = {}\n    nested_args = {}\n\n    for arg in args:\n        if arg == \"--control\":\n            control_args = True\n        elif arg == \"--nested\":\n            nested_args = True\n        else:\n            return None, None\n\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    if args.control:\n        control_args = args.control\n    if args.nested:\n        nested_args = args.nested\n    return control_args, nested_args\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    if args.control:\n        control_args = self._get_nested_custom_args(args)\n    if args.nested:\n        nested_args = self._get_nested_custom_args(args.nested)\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if '=' in arg:\n            key, value = arg.split('=')\n            control_args[key] = value\n        else:\n            nested_args[arg] = args[arg]\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n\n    control_args = {}\n    nested_args = {}\n    if args.control:\n        control_args = self._get_nested_custom_args(args)\n    if args.nested:\n        nested_args = self._get_nested_custom_args(args.nested)\n\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n\n    for arg in args:\n        if arg.startswith(\"--control\"):\n            control_args.update(arg)\n        elif arg.startswith(\"--nested\"):\n            nested_args.update(arg)\n\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    return {}, {}", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for key, value in args.iteritems():\n        if key.startswith('-') and key.endswith('_'):\n            nested_args[key[1:-1]] = value\n        else:\n            control_args[key] = value\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if arg.startswith('--'):\n            nested_args[arg[2:]] = args[arg]\n        else:\n            control_args[arg] = args[arg]\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    if args.control:\n        control_args = self._get_nested_custom_args(args.control)\n    if args.nested:\n        nested_args = self._get_nested_custom_args(args.nested)\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n\n    control_args = {}\n    nested_args = {}\n\n    for arg in args:\n        if arg == \"--control\":\n            control_args = True\n        elif arg == \"--nested\":\n            nested_args = True\n        else:\n            return None, None\n\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    if args.control:\n        control_args = args.control\n    if args.nested:\n        nested_args = args.nested\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "ques_id": "6306092e73426c38ae68ad11", "code": ["def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    for var in extra_vars:\n        if var not in vars_dict:\n            vars_dict[var] = {}\n\n        vars_dict[var] = vars_dict[var].copy()\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    return vars_dict.update(extra_vars)\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    extra_vars = [var.strip() for var in extra_vars]\n    vars_dict.update({\"extra-vars\": extra_vars})\n    return vars_dict", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if not isinstance(extra_vars, list):\n        raise TypeError(\"extra-vars must be a list\")\n\n    vars_dict.update({'extra-vars': extra_vars})\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(vars_dict, dict):\n        vars_dict = vars_dict.copy()\n        for extra_var in extra_vars:\n            if extra_var in vars_dict:\n                vars_dict[extra_var] = vars_dict.pop(extra_var)\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(extra_vars, basestring):\n        extra_vars = [extra_vars]\n\n    vars_dict.update(extra_vars)\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    for extra_var in extra_vars:\n        if extra_var in vars_dict:\n            vars_dict[extra_var] = vars_dict[extra_var] + vars_dict[extra_var]\n        else:\n            vars_dict[extra_var] = vars_dict[extra_var]\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    for var in extra_vars:\n        if var not in vars_dict:\n            vars_dict[var] = dict()\n\n        vars_dict[var].update(vars_dict[var])\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    for var in extra_vars:\n        if var not in vars_dict:\n            vars_dict[var] = {}\n\n        vars_dict[var] = vars_dict[var].copy()\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    return vars_dict.update(extra_vars)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    extra_vars = [var.strip() for var in extra_vars]\n    vars_dict.update({\"extra-vars\": extra_vars})\n    return vars_dict", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if not isinstance(extra_vars, list):\n        raise TypeError(\"extra-vars must be a list\")\n\n    vars_dict.update({'extra-vars': extra_vars})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(vars_dict, dict):\n        vars_dict = vars_dict.copy()\n        for extra_var in extra_vars:\n            if extra_var in vars_dict:\n                vars_dict[extra_var] = vars_dict.pop(extra_var)\n\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(extra_vars, basestring):\n        extra_vars = [extra_vars]\n\n    vars_dict.update(extra_vars)\n\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    for extra_var in extra_vars:\n        if extra_var in vars_dict:\n            vars_dict[extra_var] = vars_dict[extra_var] + vars_dict[extra_var]\n        else:\n            vars_dict[extra_var] = vars_dict[extra_var]\n\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    for var in extra_vars:\n        if var not in vars_dict:\n            vars_dict[var] = dict()\n\n        vars_dict[var].update(vars_dict[var])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "ques_id": "6306092f73426c38ae68ad13", "code": ["def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return _ansible_playbook(\n        ir_workspace, ir_plugin, playbook_path, verbose=verbose,\n        extra_vars=extra_vars, ansible_args=ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return ansible_main(\n        ir_workspace, ir_plugin, playbook_path, verbose=verbose,\n        extra_vars=extra_vars, ansible_args=ansible_args)", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    command = 'ansible-playbook {} {}'.format(\n        playbook_path, ir_workspace.name)\n    return _ansible_run(command, verbose, extra_vars, ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    # TODO: Implement this function\n    return None", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return _ansible_wrapper(\n        ir_workspace, ir_plugin, playbook_path, verbose, extra_vars, ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    ansible_args = dict(ansible_args or {})\n    ansible_args.update({'ir_workspace': ir_workspace,\n                        'ir_plugin': ir_plugin,\n                        'playbook_path': playbook_path})\n    return playbook(**ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n\n    ir_workspace.ansible_playbook(\n        playbook_path, verbose=verbose, extra_vars=extra_vars, ansible_args=ansible_args\n    )\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return ansible_wrapper(\n        ir_workspace, ir_plugin, playbook_path, verbose=verbose,\n        extra_vars=extra_vars, ansible_args=ansible_args,\n        ansible_wrapper=ansible_playbook_wrapper)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n\n    return _ansible_playbook_helper(\n        ir_workspace, ir_plugin, playbook_path, verbose, extra_vars, ansible_args\n    )\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return playbook(\n        ir_workspace, ir_plugin, playbook_path, verbose=verbose,\n        extra_vars=extra_vars, ansible_args=ansible_args)"], "level": "file_runnable", "generate_results": [{"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return _ansible_playbook(\n        ir_workspace, ir_plugin, playbook_path, verbose=verbose,\n        extra_vars=extra_vars, ansible_args=ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return ansible_main(\n        ir_workspace, ir_plugin, playbook_path, verbose=verbose,\n        extra_vars=extra_vars, ansible_args=ansible_args)", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    command = 'ansible-playbook {} {}'.format(\n        playbook_path, ir_workspace.name)\n    return _ansible_run(command, verbose, extra_vars, ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    # TODO: Implement this function\n    return None", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return _ansible_wrapper(\n        ir_workspace, ir_plugin, playbook_path, verbose, extra_vars, ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    ansible_args = dict(ansible_args or {})\n    ansible_args.update({'ir_workspace': ir_workspace,\n                        'ir_plugin': ir_plugin,\n                        'playbook_path': playbook_path})\n    return playbook(**ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n\n    ir_workspace.ansible_playbook(\n        playbook_path, verbose=verbose, extra_vars=extra_vars, ansible_args=ansible_args\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return ansible_wrapper(\n        ir_workspace, ir_plugin, playbook_path, verbose=verbose,\n        extra_vars=extra_vars, ansible_args=ansible_args,\n        ansible_wrapper=ansible_playbook_wrapper)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n\n    return _ansible_playbook_helper(\n        ir_workspace, ir_plugin, playbook_path, verbose, extra_vars, ansible_args\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return playbook(\n        ir_workspace, ir_plugin, playbook_path, verbose=verbose,\n        extra_vars=extra_vars, ansible_args=ansible_args)", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "ques_id": "6306093273426c38ae68ad15", "code": ["def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return _run_ansible_cli(cli_args, vars_dict, ir_workspace, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # TODO: Add support for setting variables in the vars dict\n    return _run_ansible_cli(cli_args, vars_dict, ir_workspace, ir_plugin, ir_workspace.playbook_dir)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return cli_args[0](cli_args[1:], vars_dict, ir_workspace, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    vars_dict.update(ir_plugin.vars)\n    return cli_args, vars_dict\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return _run_cli(cli_args, vars_dict, ir_workspace, ir_plugin, playbook_name='playbook.yml')\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = vars_dict.copy()\n    ansible_vars.update(ir_workspace.ansible_vars)\n    return cli_runner.invoke(cli_args, ansible_vars, catch_exceptions=False)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    if ir_workspace:\n        ir_workspace.load_vars(vars_dict)\n        ir_workspace.load_plugins(ir_plugin)\n    results = cli_args.run(cli_args, ir_workspace, ir_plugin)\n    return results\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    cli_args = cli_args + ['--extra-vars']\n    cli_args += vars_dict.get('extra_vars', [])\n    return _run_ansible_cli(cli_args, ir_workspace, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    with ir_workspace.create_temp_playbook(cli_args=cli_args, vars_dict=vars_dict, plugin=ir_plugin) as playbook:\n        return playbook.run()\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return _run_cli(cli_args, vars_dict, ir_workspace, ir_plugin)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return _run_ansible_cli(cli_args, vars_dict, ir_workspace, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # TODO: Add support for setting variables in the vars dict\n    return _run_ansible_cli(cli_args, vars_dict, ir_workspace, ir_plugin, ir_workspace.playbook_dir)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return cli_args[0](cli_args[1:], vars_dict, ir_workspace, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    vars_dict.update(ir_plugin.vars)\n    return cli_args, vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return _run_cli(cli_args, vars_dict, ir_workspace, ir_plugin, playbook_name='playbook.yml')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = vars_dict.copy()\n    ansible_vars.update(ir_workspace.ansible_vars)\n    return cli_runner.invoke(cli_args, ansible_vars, catch_exceptions=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    if ir_workspace:\n        ir_workspace.load_vars(vars_dict)\n        ir_workspace.load_plugins(ir_plugin)\n    results = cli_args.run(cli_args, ir_workspace, ir_plugin)\n    return results\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    cli_args = cli_args + ['--extra-vars']\n    cli_args += vars_dict.get('extra_vars', [])\n    return _run_ansible_cli(cli_args, ir_workspace, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    with ir_workspace.create_temp_playbook(cli_args=cli_args, vars_dict=vars_dict, plugin=ir_plugin) as playbook:\n        return playbook.run()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return _run_cli(cli_args, vars_dict, ir_workspace, ir_plugin)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "ques_id": "63060ada73426c38ae68ad31", "code": ["def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        values_dict[key] = str(values_dict[key])\n    return values_dict\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg, value in values_dict.items():\n        if type(value) == type([]):\n            values_dict[arg] = value[0]\n        elif type(value) == type(''):\n            values_dict[arg] = value\n        else:\n            values_dict[arg] = str(value)", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if not isinstance(value, str):\n            values_dict[key] = str(value)\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        if key.endswith('values'):\n            values_dict[key] = values_dict[key].split()\n        else:\n            values_dict[key] = self._get_cli_value(values_dict[key])\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        if isinstance(values_dict[key], str):\n            values_dict[key] = values_dict[key].encode(\"utf-8\")\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if isinstance(value, str):\n            values_dict[key] = value.strip()\n        elif isinstance(value, bool):\n            values_dict[key] = value == \"True\"\n        elif isinstance(value, int):\n            values_dict[key] = value == \"1\"\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg in values_dict[parser_name]:\n        if isinstance(values_dict[parser_name][arg], six.string_types):\n            values_dict[parser_name][arg] = str(values_dict[parser_name][arg])\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    if parser_name in values_dict:\n        for arg in values_dict[parser_name]:\n            if isinstance(arg, str):\n                values_dict[parser_name][arg] = values_dict[parser_name][arg].strip()\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_val in values_dict.items():\n        if isinstance(arg_val, str):\n            values_dict[arg_name] = arg_val.encode(\"utf-8\")\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict.keys():\n        if key.startswith(parser_name):\n            values_dict[key] = self._arg_type_map.get(key, str)(values_dict[key])\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        values_dict[key] = str(values_dict[key])\n    return values_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg, value in values_dict.items():\n        if type(value) == type([]):\n            values_dict[arg] = value[0]\n        elif type(value) == type(''):\n            values_dict[arg] = value\n        else:\n            values_dict[arg] = str(value)", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if not isinstance(value, str):\n            values_dict[key] = str(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        if key.endswith('values'):\n            values_dict[key] = values_dict[key].split()\n        else:\n            values_dict[key] = self._get_cli_value(values_dict[key])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        if isinstance(values_dict[key], str):\n            values_dict[key] = values_dict[key].encode(\"utf-8\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if isinstance(value, str):\n            values_dict[key] = value.strip()\n        elif isinstance(value, bool):\n            values_dict[key] = value == \"True\"\n        elif isinstance(value, int):\n            values_dict[key] = value == \"1\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg in values_dict[parser_name]:\n        if isinstance(values_dict[parser_name][arg], six.string_types):\n            values_dict[parser_name][arg] = str(values_dict[parser_name][arg])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    if parser_name in values_dict:\n        for arg in values_dict[parser_name]:\n            if isinstance(arg, str):\n                values_dict[parser_name][arg] = values_dict[parser_name][arg].strip()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_val in values_dict.items():\n        if isinstance(arg_val, str):\n            values_dict[arg_name] = arg_val.encode(\"utf-8\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict.keys():\n        if key.startswith(parser_name):\n            values_dict[key] = self._arg_type_map.get(key, str)(values_dict[key])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "ques_id": "63060b1a73426c38ae68ad3e", "code": ["def get_plugin_spec_flatten_dict(plugin_dir):\n    flat_dict = {}\n    for plugin_path in get_plugin_spec_paths(plugin_dir):\n        plugin_name = os.path.basename(plugin_path)\n        flat_dict[plugin_name] = get_plugin_spec_flatten_dict(plugin_path)\n    return flat_dict\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    plugin_dict = {}\n    for plugin in get_plugin_dir_flatten_dict(plugin_dir):\n        plugin_dict.update(plugin)\n\n    return plugin_dict\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return dict((k, get_plugin_spec_flatten_dict(os.path.join(plugin_dir, k))) for k in os.listdir(plugin_dir))\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict(get_plugin_spec_dict(plugin_dir))\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        'name': plugin_dir,\n        'plugin': {\n            'name': os.path.basename(plugin_dir),\n            'plugin_spec': {\n                'plugin_dir': plugin_dir,\n                'plugin_id': os.path.basename(plugin_dir)\n            }\n        }\n    }\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        \"plugin_name\": get_plugin_name(plugin_dir),\n        \"short_description\": get_plugin_description(plugin_dir),\n        \"author\": get_plugin_author(plugin_dir),\n        \"version\": get_plugin_version(plugin_dir),\n        \"license\": get_plugin_license(plugin_dir),\n        \"version_info\": get_plugin_version_info(plugin_dir),\n        \"author_info\": get_plugin_author_info(plugin_dir),\n        \"path\": get_plugin_path(plugin_dir)\n    }\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    spec_dict = {}\n    for dirname, dirnames, filenames in os.walk(plugin_dir):\n        for filename in filenames:\n            if filename.endswith('.py'):\n                spec_dict[os.path.splitext(filename)[0]] = dirname\n\n    return spec_dict\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    plugin_spec_flatten_dict = {}\n    for file_name in os.listdir(plugin_dir):\n        if file_name.endswith(\".py\"):\n            plugin_spec_flatten_dict[file_name[:-3]] = get_plugin_spec_flatten_dict(os.path.join(plugin_dir, file_name))\n    return plugin_spec_flatten_dict\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for key, value in get_plugin_spec_dict(plugin_dir).items() if isinstance(value, dict)}\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    plugin_spec_dict = get_plugin_spec_dict(plugin_dir)\n    plugin_spec_dict = flatten_dict(plugin_spec_dict)\n    return plugin_spec_dict\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    flat_dict = {}\n    for plugin_path in get_plugin_spec_paths(plugin_dir):\n        plugin_name = os.path.basename(plugin_path)\n        flat_dict[plugin_name] = get_plugin_spec_flatten_dict(plugin_path)\n    return flat_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    plugin_dict = {}\n    for plugin in get_plugin_dir_flatten_dict(plugin_dir):\n        plugin_dict.update(plugin)\n\n    return plugin_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return dict((k, get_plugin_spec_flatten_dict(os.path.join(plugin_dir, k))) for k in os.listdir(plugin_dir))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict(get_plugin_spec_dict(plugin_dir))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        'name': plugin_dir,\n        'plugin': {\n            'name': os.path.basename(plugin_dir),\n            'plugin_spec': {\n                'plugin_dir': plugin_dir,\n                'plugin_id': os.path.basename(plugin_dir)\n            }\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        \"plugin_name\": get_plugin_name(plugin_dir),\n        \"short_description\": get_plugin_description(plugin_dir),\n        \"author\": get_plugin_author(plugin_dir),\n        \"version\": get_plugin_version(plugin_dir),\n        \"license\": get_plugin_license(plugin_dir),\n        \"version_info\": get_plugin_version_info(plugin_dir),\n        \"author_info\": get_plugin_author_info(plugin_dir),\n        \"path\": get_plugin_path(plugin_dir)\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    spec_dict = {}\n    for dirname, dirnames, filenames in os.walk(plugin_dir):\n        for filename in filenames:\n            if filename.endswith('.py'):\n                spec_dict[os.path.splitext(filename)[0]] = dirname\n\n    return spec_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    plugin_spec_flatten_dict = {}\n    for file_name in os.listdir(plugin_dir):\n        if file_name.endswith(\".py\"):\n            plugin_spec_flatten_dict[file_name[:-3]] = get_plugin_spec_flatten_dict(os.path.join(plugin_dir, file_name))\n    return plugin_spec_flatten_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for key, value in get_plugin_spec_dict(plugin_dir).items() if isinstance(value, dict)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    plugin_spec_dict = get_plugin_spec_dict(plugin_dir)\n    plugin_spec_dict = flatten_dict(plugin_spec_dict)\n    return plugin_spec_dict\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "ques_id": "63060b1b73426c38ae68ad42", "code": ["def inject_config(self):\n    \n    \n    if not self.config_path:\n        return\n    os.environ[self.config_path] = self.config_value", "def inject_config(self):\n    \n    \n    if self.config_path:\n        os.environ['CONFIG_PATH'] = self.config_path\n", "def inject_config(self):\n    if 'CONFIG_PATH' not in os.environ:\n        os.environ['CONFIG_PATH'] = os.path.join(\n            os.path.dirname(__file__), '../../config')\n", "def inject_config(self):\n    if self.config_path is None:\n        return\n    self.config_path = os.path.expanduser(self.config_path)", "def inject_config(self):\n    if self._config_path is None:\n        return\n    os.environ['PYTHONUNBUFFERED'] = 'yes'\n    os.environ['PYTHONUNBUFFERED_LOGGING'] = 'yes'\n    os.environ['PYTHONUNBUFFERED_LOGGING_LEVEL'] = 'DEBUG'\n    os.environ['PYTHONUNBUFFERED_LOGGING_FILE'] = self._config_path", "def inject_config(self):\n    \n    \n    if not self._config_path:\n        self._config_path = os.path.join(os.getenv('HOME'), '.config/scripts/config.json')\n", "def inject_config(self):\n    \n    \n    if not self.config_path:\n        self.config_path = '/etc/'\n", "def inject_config(self):\n    \n    \n    if not self.config_path:\n        return\n    os.environ['CONFIG_PATH'] = self.config_path\n", "def inject_config(self):\n    \n    \n    if self.config_path is None:\n        return\n\n    os.environ['CONFIG_PATH'] = self.config_path\n", "def inject_config(self):\n    if 'CONFIG' not in os.environ:\n        os.environ['CONFIG'] = os.path.join(self.get_config_dir(), 'config.yaml')"], "level": "class_runnable", "generate_results": [{"generate_code": "def inject_config(self):\n    \n    \n    if not self.config_path:\n        return\n    os.environ[self.config_path] = self.config_value", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    \n    \n    if self.config_path:\n        os.environ['CONFIG_PATH'] = self.config_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if 'CONFIG_PATH' not in os.environ:\n        os.environ['CONFIG_PATH'] = os.path.join(\n            os.path.dirname(__file__), '../../config')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if self.config_path is None:\n        return\n    self.config_path = os.path.expanduser(self.config_path)", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if self._config_path is None:\n        return\n    os.environ['PYTHONUNBUFFERED'] = 'yes'\n    os.environ['PYTHONUNBUFFERED_LOGGING'] = 'yes'\n    os.environ['PYTHONUNBUFFERED_LOGGING_LEVEL'] = 'DEBUG'\n    os.environ['PYTHONUNBUFFERED_LOGGING_FILE'] = self._config_path", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    \n    \n    if not self._config_path:\n        self._config_path = os.path.join(os.getenv('HOME'), '.config/scripts/config.json')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    \n    \n    if not self.config_path:\n        self.config_path = '/etc/'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    \n    \n    if not self.config_path:\n        return\n    os.environ['CONFIG_PATH'] = self.config_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    \n    \n    if self.config_path is None:\n        return\n\n    os.environ['CONFIG_PATH'] = self.config_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if 'CONFIG' not in os.environ:\n        os.environ['CONFIG'] = os.path.join(self.get_config_dir(), 'config.yaml')", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "ques_id": "63060b1b73426c38ae68ad43", "code": ["def extend_cli(self, root_subparsers):\n    cli_options = self._get_cli_options()\n    cli_parser = root_subparsers.add_parser('cli', help='cli options')\n    cli_parser.set_defaults(func=self._cli_func)\n    for option in cli_options:\n        cli_parser.add_argument('--' + option.name, **option.opts)\n        if option.name in self._cli_specs:\n            self._cli_specs[option.name].update(option.opts)\n        else:\n            self._cli_specs[option.name] = option.opts\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('repo', help='repo information')\n    self.add_repo_args(parser)\n    parser.add_argument('--token', '-t', required=True, help='API token')\n    parser.add_argument('--username', '-u', required=True, help='API username')\n    parser.add_argument('--password', '-p', required=True, help='API password')", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.cli_name,\n        help=self.__doc__,\n        formatter_class=HelpFormatter,\n        description=self.description\n    )\n    self.extend_cli_parser(parser)\n", "def extend_cli(self, root_subparsers):\n    self.cli_parser = self.cli_parser.add_parser(self.command,\n                                                 help=self.help,\n                                                 description=self.description)\n\n    self.cli_parser.set_defaults(func=self.run)\n    self.cli_parser.add_argument(\"--version\", action=\"version\", version=self.version)\n    root_subparsers.add_parser(self.cli_parser)\n", "def extend_cli(self, root_subparsers):\n    self._cli = self._add_subparsers(root_subparsers, 'cli')\n    self._add_common_options(self._cli)", "def extend_cli(self, root_subparsers):\n    pass\n", "def extend_cli(self, root_subparsers):\n    extend_cli_base(self, root_subparsers, self.cli_parser)\n", "def extend_cli(self, root_subparsers):\n    cli_opts = self.__get_cli_opts()\n    for opt in cli_opts:\n        root_subparsers.add_parser(opt.name, help=opt.help, **opt.kwargs)\n", "def extend_cli(self, root_subparsers):\n    root_subparser = root_subparsers.add_parser(\n       'spec', help='List spec information',\n        description='Lists the spec information for a given package.')\n    root_subparser.set_defaults(func=self.run)\n", "def extend_cli(self, root_subparsers):\n    self._cli_parser = root_subparsers.add_parser(\n        self.cli_name,\n        help=self.__doc__)\n    self._cli_parser.set_defaults(func=self._run)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def extend_cli(self, root_subparsers):\n    cli_options = self._get_cli_options()\n    cli_parser = root_subparsers.add_parser('cli', help='cli options')\n    cli_parser.set_defaults(func=self._cli_func)\n    for option in cli_options:\n        cli_parser.add_argument('--' + option.name, **option.opts)\n        if option.name in self._cli_specs:\n            self._cli_specs[option.name].update(option.opts)\n        else:\n            self._cli_specs[option.name] = option.opts\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('repo', help='repo information')\n    self.add_repo_args(parser)\n    parser.add_argument('--token', '-t', required=True, help='API token')\n    parser.add_argument('--username', '-u', required=True, help='API username')\n    parser.add_argument('--password', '-p', required=True, help='API password')", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.cli_name,\n        help=self.__doc__,\n        formatter_class=HelpFormatter,\n        description=self.description\n    )\n    self.extend_cli_parser(parser)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    self.cli_parser = self.cli_parser.add_parser(self.command,\n                                                 help=self.help,\n                                                 description=self.description)\n\n    self.cli_parser.set_defaults(func=self.run)\n    self.cli_parser.add_argument(\"--version\", action=\"version\", version=self.version)\n    root_subparsers.add_parser(self.cli_parser)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    self._cli = self._add_subparsers(root_subparsers, 'cli')\n    self._add_common_options(self._cli)", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    extend_cli_base(self, root_subparsers, self.cli_parser)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    cli_opts = self.__get_cli_opts()\n    for opt in cli_opts:\n        root_subparsers.add_parser(opt.name, help=opt.help, **opt.kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    root_subparser = root_subparsers.add_parser(\n       'spec', help='List spec information',\n        description='Lists the spec information for a given package.')\n    root_subparser.set_defaults(func=self.run)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    self._cli_parser = root_subparsers.add_parser(\n        self.cli_name,\n        help=self.__doc__)\n    self._cli_parser.set_defaults(func=self._run)\n", "is_pass": false, "return_code": 1}]}
