{"generate_results": [{"generate_code": "public boolean shouldPrintMessage(int timestamp,String message){\n\t\n\tif(timestamp < 0){\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Returns true if the message should be printed in the given timestamp, otherwise returns false. If this method returns false, the message will not be printed. The timestamp is in seconds granularity. \n */\n", "method_name": "shouldPrintMessage", "codes": ["public boolean shouldPrintMessage(int timestamp,String message){\n\t\n\tif(timestamp < 0){\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}"], "code_level": "class_runnable", "_id": "6367672d1a6d9265ec017c73", "project_name": "interviews-master"}
{"generate_results": [{"generate_code": "public boolean remove(int val){\n\tif(val == 0){\n\t\treturn false;\n\t}\n\t\n\tfor(int i = 0; i < size; i++){\n\t\tif(val == values[i]){\n\t\t\tvalues[i] = 0;\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Removes a value from the set. Returns true if the set contained the specified element. \n */\n", "method_name": "remove", "codes": ["public boolean remove(int val){\n\tif(val == 0){\n\t\treturn false;\n\t}\n\t\n\tfor(int i = 0; i < size; i++){\n\t\tif(val == values[i]){\n\t\t\tvalues[i] = 0;\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}"], "code_level": "class_runnable", "_id": "6367672d1a6d9265ec017c74", "project_name": "interviews-master"}
{"generate_results": [{"generate_code": "public boolean insert(int val){\n\tif(val < 0 || val > this.size()){\n\t\treturn false;\n\t}\n\t\n\tthis.set.add(val);\n\treturn true;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Inserts a value to the set. Returns true if the set did not already contain the specified element. \n */\n", "method_name": "insert", "codes": ["public boolean insert(int val){\n\tif(val < 0 || val > this.size()){\n\t\treturn false;\n\t}\n\t\n\tthis.set.add(val);\n\treturn true;\n}"], "code_level": "class_runnable", "_id": "6367672d1a6d9265ec017c78", "project_name": "interviews-master"}
{"generate_results": [{"generate_code": "public static boolean isSameLength(final byte[] array1,final byte[] array2){\n\tif(array1==null) return array2==null;\n\tif(array2==null) return array1==null;\n\tif(array1.length!=array2.length) return false;\n\tfor(int i=0;i<array1.length;i++){\n\t\tif(array1[i]!=array2[i]) return false;\n\t}\n\treturn true;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>.</p>\n * @param array1 the first array, may be <code>null</code>\n * @param array2 the second array, may be <code>null</code>\n * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array\n */\n", "method_name": "isSameLength", "codes": ["public static boolean isSameLength(final byte[] array1,final byte[] array2){\n\tif(array1==null) return array2==null;\n\tif(array2==null) return array1==null;\n\tif(array1.length!=array2.length) return false;\n\tfor(int i=0;i<array1.length;i++){\n\t\tif(array1[i]!=array2[i]) return false;\n\t}\n\treturn true;\n}"], "code_level": "self_contained", "_id": "6367670b1a6d9265ec017a00", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean[] toPrimitive(final Boolean[] array){\n    if (array == null) return null;\n    \n    final boolean[] result = new boolean[array.length];\n    for (int i=array.length; i-->0;){\n        result[i] = array[i];\n    }\n    \n    return result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of object Booleans to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Boolean</code> array, may be <code>null</code>\n * @return a <code>boolean</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static boolean[] toPrimitive(final Boolean[] array){\n    if (array == null) return null;\n    \n    final boolean[] result = new boolean[array.length];\n    for (int i=array.length; i-->0;){\n        result[i] = array[i];\n    }\n    \n    return result;\n}"], "code_level": "self_contained", "_id": "636767081a6d9265ec017989", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static String toString(Object obj){\n    return obj == null? \"\" : obj.toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Gets the <code>toString</code> of an <code>Object</code> returning an empty string (\"\") if <code>null</code> input.</p> <pre> ObjectUtils.toString(null)         = \"\" ObjectUtils.toString(\"\")           = \"\" ObjectUtils.toString(\"bat\")        = \"bat\" ObjectUtils.toString(Boolean.TRUE) = \"true\" </pre>\n * @see StringUtils#defaultString(String)\n * @see String#valueOf(Object)\n * @param obj  the Object to <code>toString</code>, may be null\n * @return the passed in Object's toString, or nullStr if <code>null</code> input\n * @since 2.0\n */\n", "method_name": "toString", "codes": ["public static String toString(Object obj){\n    return obj == null? \"\" : obj.toString();\n}"], "code_level": "self_contained", "_id": "636766f81a6d9265ec01775c", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean toBoolean(Boolean bool){\n  return bool!= null? bool : false;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts a Boolean to a boolean handling <code>null</code> by returning <code>false</code>.</p> <pre> BooleanUtils.toBoolean(Boolean.TRUE)  = true BooleanUtils.toBoolean(Boolean.FALSE) = false BooleanUtils.toBoolean(null)          = false </pre>\n * @param bool  the boolean to convert\n * @return <code>true</code> or <code>false</code>, <code>null</code> returns <code>false</code>\n */\n", "method_name": "toBoolean", "codes": ["public static boolean toBoolean(Boolean bool){\n  return bool!= null? bool : false;\n}"], "code_level": "self_contained", "_id": "636766f91a6d9265ec01777f", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static Byte[] nullToEmpty(final Byte[] array){\n\tif (array == null) {\n\t\treturn EMPTY_BYTE_ARRAY;\n\t}\n\treturn array;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n * @param array  the array to check for <code>null</code> or empty\n * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n * @since 2.5\n */\n", "method_name": "nullToEmpty", "codes": ["public static Byte[] nullToEmpty(final Byte[] array){\n\tif (array == null) {\n\t\treturn EMPTY_BYTE_ARRAY;\n\t}\n\treturn array;\n}"], "code_level": "self_contained", "_id": "6367670b1a6d9265ec0179ff", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static Boolean[] nullToEmpty(final Boolean[] array){\n    if (array == null) {\n        return EMPTY_BOOL;\n    }\n    return array;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n * @param array  the array to check for <code>null</code> or empty\n * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n * @since 2.5\n */\n", "method_name": "nullToEmpty", "codes": ["public static Boolean[] nullToEmpty(final Boolean[] array){\n    if (array == null) {\n        return EMPTY_BOOL;\n    }\n    return array;\n}"], "code_level": "self_contained", "_id": "6367670a1a6d9265ec0179e8", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static byte[] toPrimitive(final Byte[] array){\n    if (array == null) return null;\n    \n    final int length = array.length;\n    switch(length){\n        case 0:\n            return null;\n        case 1:\n            return new byte[]{(byte)array[0]};\n        default:\n            int pos = 0;\n            byte[] array2 = new byte[length];\n            while(pos < length) {\n                array2[pos++] = (byte)array[pos];\n            }\n            return array2;\n    }\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * <p>Converts an array of object Bytes to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Byte</code> array, may be <code>null</code>\n * @return a <code>byte</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static byte[] toPrimitive(final Byte[] array){\n    if (array == null) return null;\n    \n    final int length = array.length;\n    switch(length){\n        case 0:\n            return null;\n        case 1:\n            return new byte[]{(byte)array[0]};\n        default:\n            int pos = 0;\n            byte[] array2 = new byte[length];\n            while(pos < length) {\n                array2[pos++] = (byte)array[pos];\n            }\n            return array2;\n    }\n}"], "code_level": "self_contained", "_id": "636767031a6d9265ec0178e6", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static String reverse(final String str){\n\tif(str == null){\n\t\treturn null;\n\t}\n\treturn new StringBuilder(str).reverse().toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Reverses a String as per  {@link StringBuilder#reverse()}.</p> <p>A <code>null</code> String returns <code>null</code>.</p> <pre> StringUtils.reverse(null)  = null StringUtils.reverse(\"\")    = \"\" StringUtils.reverse(\"bat\") = \"tab\" </pre>\n * @param str  the String to reverse, may be null\n * @return the reversed String, <code>null</code> if null String input\n */\n", "method_name": "reverse", "codes": ["public static String reverse(final String str){\n\tif(str == null){\n\t\treturn null;\n\t}\n\treturn new StringBuilder(str).reverse().toString();\n}"], "code_level": "slib_runnable", "_id": "636767001a6d9265ec017873", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean isDigits(String str){\n    if(str == null)\n        return false;\n    \n    for(int i = 0; i < str.length(); i++){\n        if(!Character.isDigit(str.charAt(i)))\n            return false;\n    }\n    \n    return true;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * <p>Checks whether the <code>String</code> contains only digit characters.</p> <p><code>Null</code> and empty String will return <code>false</code>.</p>\n * @param str  the <code>String</code> to check\n * @return <code>true</code> if str contains only unicode numeric\n */\n", "method_name": "isDigits", "codes": ["public static boolean isDigits(String str){\n    if(str == null)\n        return false;\n    \n    for(int i = 0; i < str.length(); i++){\n        if(!Character.isDigit(str.charAt(i)))\n            return false;\n    }\n    \n    return true;\n}"], "code_level": "slib_runnable", "_id": "636766ff1a6d9265ec01784b", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * <p>Check if a String ends with a specified suffix (optionally case insensitive).</p>\n * @see String#endsWith(String)\n * @param str  the String to check, may be null\n * @param suffix the suffix to find, may be null\n * @param ignoreCase inidicates whether the compare should ignore case(case insensitive) or not.\n * @return <code>true</code> if the String starts with the prefix orboth <code>null</code>\n */\n\nprivate static boolean endsWith(final String str,final String suffix,final boolean ignoreCase){\n\tif (str == null) return false;\n\tif (suffix == null) return false;\n\tfinal int len = str.length();\n\tif (len < suffix.length()) return false;\n\tfinal int end = len - suffix.length();\n\tif (ignoreCase) {\n\t\treturn str.regionMatches(true, end, suffix, 0, suffix.length());\n\t} else {\n\t\treturn str.regionMatches(false, end, suffix, 0, suffix.length());\n\t}\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Check if a String ends with a specified suffix (optionally case insensitive).</p>\n * @see String#endsWith(String)\n * @param str  the String to check, may be null\n * @param suffix the suffix to find, may be null\n * @param ignoreCase inidicates whether the compare should ignore case(case insensitive) or not.\n * @return <code>true</code> if the String starts with the prefix orboth <code>null</code>\n */\n", "method_name": "endsWith", "codes": ["/** \n * <p>Check if a String ends with a specified suffix (optionally case insensitive).</p>\n * @see String#endsWith(String)\n * @param str  the String to check, may be null\n * @param suffix the suffix to find, may be null\n * @param ignoreCase inidicates whether the compare should ignore case(case insensitive) or not.\n * @return <code>true</code> if the String starts with the prefix orboth <code>null</code>\n */\n\nprivate static boolean endsWith(final String str,final String suffix,final boolean ignoreCase){\n\tif (str == null) return false;\n\tif (suffix == null) return false;\n\tfinal int len = str.length();\n\tif (len < suffix.length()) return false;\n\tfinal int end = len - suffix.length();\n\tif (ignoreCase) {\n\t\treturn str.regionMatches(true, end, suffix, 0, suffix.length());\n\t} else {\n\t\treturn str.regionMatches(false, end, suffix, 0, suffix.length());\n\t}\n}"], "code_level": "self_contained", "_id": "6367670c1a6d9265ec017a35", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static Character[] nullToEmpty(final Character[] array){\n\tif (array == null) {\n\t\treturn EMPTY_CHARACTER_ARRAY;\n\t}\n\treturn array;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n * @param array  the array to check for <code>null</code> or empty\n * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n * @since 2.5\n */\n", "method_name": "nullToEmpty", "codes": ["public static Character[] nullToEmpty(final Character[] array){\n\tif (array == null) {\n\t\treturn EMPTY_CHARACTER_ARRAY;\n\t}\n\treturn array;\n}"], "code_level": "self_contained", "_id": "636766f11a6d9265ec017651", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static Double[] nullToEmpty(final Double[] array){\n\tif (array == null) {\n\t\treturn EMPTY_DOUBLE_ARRAY;\n\t}\n\treturn array;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n * @param array  the array to check for <code>null</code> or empty\n * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n * @since 2.5\n */\n", "method_name": "nullToEmpty", "codes": ["public static Double[] nullToEmpty(final Double[] array){\n\tif (array == null) {\n\t\treturn EMPTY_DOUBLE_ARRAY;\n\t}\n\treturn array;\n}"], "code_level": "self_contained", "_id": "636767021a6d9265ec0178bb", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean isEmpty(final double[] array){\n    return array == null || array.length == 0;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks if an array of primitive doubles is empty or <code>null</code>.</p>\n * @param array  the array to test\n * @return <code>true</code> if the array is empty or <code>null</code>\n * @since 2.1\n */\n", "method_name": "isEmpty", "codes": ["public static boolean isEmpty(final double[] array){\n    return array == null || array.length == 0;\n}"], "code_level": "self_contained", "_id": "636766f01a6d9265ec01762e", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean isNotTrue(Boolean bool){\n    return bool!= null &&!bool.booleanValue();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks if a <code>Boolean</code> value is <i>not</i> <code>true</code>, handling <code>null</code> by returning <code>true</code>.</p> <pre> BooleanUtils.isNotTrue(Boolean.TRUE)  = false BooleanUtils.isNotTrue(Boolean.FALSE) = true BooleanUtils.isNotTrue(null)          = true </pre>\n * @param bool  the boolean to check, null returns <code>true</code>\n * @return <code>true</code> if the input is null or false\n * @since 2.3\n */\n", "method_name": "isNotTrue", "codes": ["public static boolean isNotTrue(Boolean bool){\n    return bool!= null &&!bool.booleanValue();\n}"], "code_level": "self_contained", "_id": "636766f21a6d9265ec017677", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static double[] toPrimitive(final Double[] array){\n    if (array == null) return null;\n    \n    final int length = array.length;\n    final double[] rtn = new double[length];\n    for (int i=0; i<length; i++){\n        rtn[i] = array[i];\n    }\n    \n    return rtn;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of object Doubles to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Double</code> array, may be <code>null</code>\n * @return a <code>double</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static double[] toPrimitive(final Double[] array){\n    if (array == null) return null;\n    \n    final int length = array.length;\n    final double[] rtn = new double[length];\n    for (int i=0; i<length; i++){\n        rtn[i] = array[i];\n    }\n    \n    return rtn;\n}"], "code_level": "self_contained", "_id": "636766ff1a6d9265ec017842", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static char toChar(final Character ch,final char defaultValue){\n\tif(ch==null){\n\t\treturn defaultValue;\n\t}\n\treturn ch.charValue();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts the Character to a char handling <code>null</code>.</p> <pre> CharUtils.toChar(null, 'X') = 'X' CharUtils.toChar(' ', 'X')  = ' ' CharUtils.toChar('A', 'X')  = 'A' </pre>\n * @param ch  the character to convert\n * @param defaultValue  the value to use if the  Character is null\n * @return the char value of the Character or the default if null\n */\n", "method_name": "toChar", "codes": ["public static char toChar(final Character ch,final char defaultValue){\n\tif(ch==null){\n\t\treturn defaultValue;\n\t}\n\treturn ch.charValue();\n}"], "code_level": "self_contained", "_id": "6367670a1a6d9265ec0179cf", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * <p>Utility method for  {@link #createNumber(String)}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * <p>Utility method for  {@link #createNumber(String)}.</p> <p>Returns <code>true</code> if s is <code>null</code>.</p>\n * @param s the String to check\n * @return if it is all zeros or <code>null</code>\n */\n", "method_name": "isAllZeros", "codes": ["/** \n * <p>Utility method for  {@link #createNumber(String)}"], "code_level": "self_contained", "_id": "636767081a6d9265ec0179a2", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static String toString(Object object){\n\tif(object == null){\n\t\treturn \"null\";\n\t}\n\treturn object.toString();\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Object to String ,when null object then null else return toString(); \n */\n", "method_name": "toString", "codes": ["public static String toString(Object object){\n\tif(object == null){\n\t\treturn \"null\";\n\t}\n\treturn object.toString();\n}"], "code_level": "self_contained", "_id": "636766f21a6d9265ec01767d", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static int[] toPrimitive(final Integer[] array){\n\tif (array == null) return null;\n\t\n\tint[] result = new int[array.length];\n\tfor (int i=0; i<array.length; i++){\n\t\tresult[i] = array[i];\n\t}\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of object Integers to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Integer</code> array, may be <code>null</code>\n * @return an <code>int</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static int[] toPrimitive(final Integer[] array){\n\tif (array == null) return null;\n\t\n\tint[] result = new int[array.length];\n\tfor (int i=0; i<array.length; i++){\n\t\tresult[i] = array[i];\n\t}\n\treturn result;\n}"], "code_level": "self_contained", "_id": "6367670c1a6d9265ec017a2a", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean isAsciiControl(final char ch){\n\treturn (ch >='') && (ch <= 127);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * <p>Checks whether the character is ASCII 7 bit control.</p> <pre> CharUtils.isAsciiControl('a')  = false CharUtils.isAsciiControl('A')  = false CharUtils.isAsciiControl('3')  = false CharUtils.isAsciiControl('-')  = false CharUtils.isAsciiControl('\\n') = true CharUtils.isAsciiControl('&copy;') = false </pre>\n * @param ch  the character to check\n * @return true if less than 32 or equals 127\n */\n", "method_name": "isAsciiControl", "codes": ["public static boolean isAsciiControl(final char ch){\n\treturn (ch >='') && (ch <= 127);\n}"], "code_level": "self_contained", "_id": "636766fa1a6d9265ec01779d", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static Boolean[] toObject(final boolean[] array){\n\treturn toObject(array, array.length);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * <p>Converts an array of primitive booleans to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>boolean</code> array\n * @return a <code>Boolean</code> array, <code>null</code> if null array input\n */\n", "method_name": "toObject", "codes": ["public static Boolean[] toObject(final boolean[] array){\n\treturn toObject(array, array.length);\n}"], "code_level": "class_runnable", "_id": "636766fa1a6d9265ec017796", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static Short[] toObject(final short[] array){\n\tif (array == null) return null;\n\tif (array.length == 0) return EMPTY_SHORT_ARRAY;\n\t\n\tfinal Short[] result = new Short[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = new Short(array[i]);\n\t}\n\treturn result;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * <p>Converts an array of primitive shorts to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>short</code> array\n * @return a <code>Short</code> array, <code>null</code> if null array input\n */\n", "method_name": "toObject", "codes": ["public static Short[] toObject(final short[] array){\n\tif (array == null) return null;\n\tif (array.length == 0) return EMPTY_SHORT_ARRAY;\n\t\n\tfinal Short[] result = new Short[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = new Short(array[i]);\n\t}\n\treturn result;\n}"], "code_level": "class_runnable", "_id": "6367670a1a6d9265ec0179f1", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static char[] toPrimitive(final Character[] array){\n    if (array == null) return null;\n    \n    final char[] array2 = new char[array.length];\n    for (int i=0; i<array.length; i++) {\n        array2[i] = array[i].charValue();\n    }\n    return array2;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of object Characters to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Character</code> array, may be <code>null</code>\n * @return a <code>char</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static char[] toPrimitive(final Character[] array){\n    if (array == null) return null;\n    \n    final char[] array2 = new char[array.length];\n    for (int i=0; i<array.length; i++) {\n        array2[i] = array[i].charValue();\n    }\n    return array2;\n}"], "code_level": "self_contained", "_id": "636766fe1a6d9265ec017838", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static Integer[] toObject(final int[] array){\n\tif (array == null) return null;\n\tif (array.length == 0) return null;\n\t\n\tInteger[] result = new Integer[array.length];\n\tfor (int i=0; i<array.length; i++){\n\t\tresult[i] = new Integer(array[i]);\n\t}\n\treturn result;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * <p>Converts an array of primitive ints to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  an <code>int</code> array\n * @return an <code>Integer</code> array, <code>null</code> if null array input\n */\n", "method_name": "toObject", "codes": ["public static Integer[] toObject(final int[] array){\n\tif (array == null) return null;\n\tif (array.length == 0) return null;\n\t\n\tInteger[] result = new Integer[array.length];\n\tfor (int i=0; i<array.length; i++){\n\t\tresult[i] = new Integer(array[i]);\n\t}\n\treturn result;\n}"], "code_level": "class_runnable", "_id": "636767041a6d9265ec01790f", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static Double[] toObject(final double[] array){\n\tif (array == null) return null;\n\t\n\tfinal Double[] result = new Double[array.length];\n\tfor (int i=0; i<array.length; i++){\n\t\tresult[i] = Double.valueOf(array[i]);\n\t}\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of primitive doubles to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>double</code> array\n * @return a <code>Double</code> array, <code>null</code> if null array input\n */\n", "method_name": "toObject", "codes": ["public static Double[] toObject(final double[] array){\n\tif (array == null) return null;\n\t\n\tfinal Double[] result = new Double[array.length];\n\tfor (int i=0; i<array.length; i++){\n\t\tresult[i] = Double.valueOf(array[i]);\n\t}\n\treturn result;\n}"], "code_level": "class_runnable", "_id": "636766fa1a6d9265ec0177a4", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * <p>Check if a String starts with a specified prefix (optionally case insensitive).</p>\n * @see String#startsWith(String)\n * @param str  the String to check, may be null\n * @param prefix the prefix to find, may be null\n * @param ignoreCase inidicates whether the compare should ignore case(case insensitive) or not.\n * @return <code>true</code> if the String starts with the prefix orboth <code>null</code>\n */\n\nprivate static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){\n\tif (str == null) {\n\t\treturn false;\n\t}\n\tif (prefix == null) {\n\t\treturn str.startsWith(null);\n\t}\n\treturn str.startsWith(prefix);\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * <p>Check if a String starts with a specified prefix (optionally case insensitive).</p>\n * @see String#startsWith(String)\n * @param str  the String to check, may be null\n * @param prefix the prefix to find, may be null\n * @param ignoreCase inidicates whether the compare should ignore case(case insensitive) or not.\n * @return <code>true</code> if the String starts with the prefix orboth <code>null</code>\n */\n", "method_name": "startsWith", "codes": ["/** \n * <p>Check if a String starts with a specified prefix (optionally case insensitive).</p>\n * @see String#startsWith(String)\n * @param str  the String to check, may be null\n * @param prefix the prefix to find, may be null\n * @param ignoreCase inidicates whether the compare should ignore case(case insensitive) or not.\n * @return <code>true</code> if the String starts with the prefix orboth <code>null</code>\n */\n\nprivate static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){\n\tif (str == null) {\n\t\treturn false;\n\t}\n\tif (prefix == null) {\n\t\treturn str.startsWith(null);\n\t}\n\treturn str.startsWith(prefix);\n}"], "code_level": "self_contained", "_id": "636767151a6d9265ec017b6b", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static Character toCharacterObject(final char ch){\n\tif (ch =='') {\n\t\treturn new Character(' ');\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'A' && ch <= 'Z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'a' && ch <= 'z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'A' && ch <= 'Z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'a' && ch <= 'z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'A' && ch <= 'Z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'a' && ch <= 'z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'A' && ch <= 'Z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'a' && ch <= 'z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'A' && ch <= 'Z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'a' && ch <= 'z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'A' && ch <= 'Z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'a' && ch <= 'z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'A' && ch <= 'Z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'a' && ch <= 'z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'A' && ch <= 'Z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'a' && ch <= 'z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'A' && ch <= 'Z') {\n\t\treturn new Character(ch);\n\t}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * <p>Converts the character to a Character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same Character object each time.</p> <pre> CharUtils.toCharacterObject(' ')  = ' ' CharUtils.toCharacterObject('A')  = 'A' </pre>\n * @param ch  the character to convert\n * @return a Character of the specified character\n */\n", "method_name": "toCharacterObject", "codes": ["public static Character toCharacterObject(final char ch){\n\tif (ch =='') {\n\t\treturn new Character(' ');\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'A' && ch <= 'Z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'a' && ch <= 'z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'A' && ch <= 'Z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'a' && ch <= 'z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'A' && ch <= 'Z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'a' && ch <= 'z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'A' && ch <= 'Z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'a' && ch <= 'z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'A' && ch <= 'Z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'a' && ch <= 'z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'A' && ch <= 'Z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'a' && ch <= 'z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'A' && ch <= 'Z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'a' && ch <= 'z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'A' && ch <= 'Z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'a' && ch <= 'z') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= '0' && ch <= '9') {\n\t\treturn new Character(ch);\n\t}\n\tif (ch >= 'A' && ch <= 'Z') {\n\t\treturn new Character(ch);\n\t}"], "code_level": "class_runnable", "_id": "636766fe1a6d9265ec01781c", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean isAsciiAlphaUpper(final char ch){\n\treturn (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9');\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * <p>Checks whether the character is ASCII 7 bit alphabetic upper case.</p> <pre> CharUtils.isAsciiAlphaUpper('a')  = false CharUtils.isAsciiAlphaUpper('A')  = true CharUtils.isAsciiAlphaUpper('3')  = false CharUtils.isAsciiAlphaUpper('-')  = false CharUtils.isAsciiAlphaUpper('\\n') = false CharUtils.isAsciiAlphaUpper('&copy;') = false </pre>\n * @param ch  the character to check\n * @return true if between 65 and 90 inclusive\n */\n", "method_name": "isAsciiAlphaUpper", "codes": ["public static boolean isAsciiAlphaUpper(final char ch){\n\treturn (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9');\n}"], "code_level": "self_contained", "_id": "636766fb1a6d9265ec0177c1", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static int length(final String str){\n    if (str == null) return 0;\n    return str.length();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Gets a String's length or <code>0</code> if the String is <code>null</code>.\n * @param str a String or <code>null</code>\n * @return String length or <code>0</code> if the String is <code>null</code>.\n * @since 2.4\n */\n", "method_name": "length", "codes": ["public static int length(final String str){\n    if (str == null) return 0;\n    return str.length();\n}"], "code_level": "self_contained", "_id": "6367670a1a6d9265ec0179d9", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static String base64Decode(final String s){\n\t\n\tfinal StringBuffer sb = new StringBuffer();\n\t\n\tfinal int len = s.length();\n\t\n\tfor(int i=0;i<len;i++){\n\t\t\n\t\tfinal char c = s.charAt(i);\n\t\t\n\t\tif(c == '='){\n\t\t\t\n\t\t\tsb.append(\"=\");\n\t\t\t\n\t\t}else if(c == '+'){\n\t\t\t\n\t\t\tsb.append(\"+\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '_'){\n\t\t\t\n\t\t\tsb.append(\"_\");\n\t\t\t\n\t\t}else if(c == '='){\n\t\t\t\n\t\t\tsb.append(\"=\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '+'){\n\t\t\t\n\t\t\tsb.append(\"+\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '_'){\n\t\t\t\n\t\t\tsb.append(\"_\");\n\t\t\t\n\t\t}else if(c == '='){\n\t\t\t\n\t\t\tsb.append(\"=\");\n\t\t\t\n\t\t}else if(c == '_'){\n\t\t\t\n\t\t\tsb.append(\"_\");\n\t\t\t\n\t\t}else if(c == '+'){\n\t\t\t\n\t\t\tsb.append(\"+\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '='){\n\t\t\t\n\t\t\tsb.append(\"=\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '+'){\n\t\t\t\n\t\t\tsb.append(\"+\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '_'){\n\t\t\t\n\t\t\tsb.append(\"_\");\n\t\t\t\n\t\t}else if(c == '='){\n\t\t\t\n\t\t\tsb.append(\"=\");\n\t\t\t\n\t\t}else if(c == '_'){\n\t\t\t\n\t\t\tsb.append(\"_\");\n\t\t\t\n\t\t}else if(c == '+'){\n\t\t\t\n\t\t\tsb.append(\"+\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '='){\n\t\t\t\n\t\t\tsb.append(\"=\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '+'){\n\t\t\t\n\t\t\tsb.append(\"+\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '_'){\n\t\t\t\n\t\t\tsb.append(\"_\");\n\t\t\t\n\t\t}else if(c == '='){\n\t\t\t\n\t\t\tsb.append(\"=\");\n\t\t\t\n\t\t}else if(c == '_'){\n\t\t\t\n\t\t\tsb.append(\"_\");\n\t\t\t\n\t\t}else if(c == '+'){\n\t\t\t\n\t\t\tsb.append(\"+\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '='){\n\t\t\t\n\t\t\tsb.append(\"=\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '+'){\n\t\t\t\n\t\t\tsb.append(\"+\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '_'){\n\t\t\t\n\t\t\tsb.append(\"_\");\n\t\t\t\n\t\t}else if(c == '='){\n\t\t\t\n\t\t\tsb.append(\"=\");\n\t\t\t\n\t\t}else if(c == '_'){\n\t\t\t\n\t\t\tsb.append(\"_\");\n\t\t\t\n\t\t}else if(c == '+'){\n\t\t\t\n\t\t\tsb.append", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Decoding a string to a string follow the Base64 regular. \n */\n", "method_name": "base64Decode", "codes": ["public static String base64Decode(final String s){\n\t\n\tfinal StringBuffer sb = new StringBuffer();\n\t\n\tfinal int len = s.length();\n\t\n\tfor(int i=0;i<len;i++){\n\t\t\n\t\tfinal char c = s.charAt(i);\n\t\t\n\t\tif(c == '='){\n\t\t\t\n\t\t\tsb.append(\"=\");\n\t\t\t\n\t\t}else if(c == '+'){\n\t\t\t\n\t\t\tsb.append(\"+\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '_'){\n\t\t\t\n\t\t\tsb.append(\"_\");\n\t\t\t\n\t\t}else if(c == '='){\n\t\t\t\n\t\t\tsb.append(\"=\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '+'){\n\t\t\t\n\t\t\tsb.append(\"+\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '_'){\n\t\t\t\n\t\t\tsb.append(\"_\");\n\t\t\t\n\t\t}else if(c == '='){\n\t\t\t\n\t\t\tsb.append(\"=\");\n\t\t\t\n\t\t}else if(c == '_'){\n\t\t\t\n\t\t\tsb.append(\"_\");\n\t\t\t\n\t\t}else if(c == '+'){\n\t\t\t\n\t\t\tsb.append(\"+\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '='){\n\t\t\t\n\t\t\tsb.append(\"=\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '+'){\n\t\t\t\n\t\t\tsb.append(\"+\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '_'){\n\t\t\t\n\t\t\tsb.append(\"_\");\n\t\t\t\n\t\t}else if(c == '='){\n\t\t\t\n\t\t\tsb.append(\"=\");\n\t\t\t\n\t\t}else if(c == '_'){\n\t\t\t\n\t\t\tsb.append(\"_\");\n\t\t\t\n\t\t}else if(c == '+'){\n\t\t\t\n\t\t\tsb.append(\"+\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '='){\n\t\t\t\n\t\t\tsb.append(\"=\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '+'){\n\t\t\t\n\t\t\tsb.append(\"+\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '_'){\n\t\t\t\n\t\t\tsb.append(\"_\");\n\t\t\t\n\t\t}else if(c == '='){\n\t\t\t\n\t\t\tsb.append(\"=\");\n\t\t\t\n\t\t}else if(c == '_'){\n\t\t\t\n\t\t\tsb.append(\"_\");\n\t\t\t\n\t\t}else if(c == '+'){\n\t\t\t\n\t\t\tsb.append(\"+\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '='){\n\t\t\t\n\t\t\tsb.append(\"=\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '+'){\n\t\t\t\n\t\t\tsb.append(\"+\");\n\t\t\t\n\t\t}else if(c == '$'){\n\t\t\t\n\t\t\tsb.append(\"$\");\n\t\t\t\n\t\t}else if(c == '_'){\n\t\t\t\n\t\t\tsb.append(\"_\");\n\t\t\t\n\t\t}else if(c == '='){\n\t\t\t\n\t\t\tsb.append(\"=\");\n\t\t\t\n\t\t}else if(c == '_'){\n\t\t\t\n\t\t\tsb.append(\"_\");\n\t\t\t\n\t\t}else if(c == '+'){\n\t\t\t\n\t\t\tsb.append"], "code_level": "class_runnable", "_id": "636766f81a6d9265ec017748", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean isSameLength(final double[] array1,final double[] array2){\n\tif(array1 == null) return array2 == null;\n\tif(array2 == null) return array1 == null;\n\tif(array1.length!= array2.length) return false;\n\tfor(int i = 0; i < array1.length; i++){\n\t\tif(array1[i]!= array2[i]) return false;\n\t}\n\treturn true;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>.</p>\n * @param array1 the first array, may be <code>null</code>\n * @param array2 the second array, may be <code>null</code>\n * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array\n */\n", "method_name": "isSameLength", "codes": ["public static boolean isSameLength(final double[] array1,final double[] array2){\n\tif(array1 == null) return array2 == null;\n\tif(array2 == null) return array1 == null;\n\tif(array1.length!= array2.length) return false;\n\tfor(int i = 0; i < array1.length; i++){\n\t\tif(array1[i]!= array2[i]) return false;\n\t}\n\treturn true;\n}"], "code_level": "self_contained", "_id": "636766f11a6d9265ec017663", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static char[] clone(final char[] array){\n\tif (array == null) {\n\t\treturn null;\n\t}\n\t\n\tfinal char[] result = new char[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = array[i];\n\t}\n\t\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Clones an array returning a typecast result and handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  the array to clone, may be <code>null</code>\n * @return the cloned array, <code>null</code> if <code>null</code> input\n */\n", "method_name": "clone", "codes": ["public static char[] clone(final char[] array){\n\tif (array == null) {\n\t\treturn null;\n\t}\n\t\n\tfinal char[] result = new char[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = array[i];\n\t}\n\t\n\treturn result;\n}"], "code_level": "self_contained", "_id": "636766f31a6d9265ec01768f", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean isAscii(final char ch){\n    return ch <= 127;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks whether the character is ASCII 7 bit.</p> <pre> CharUtils.isAscii('a')  = true CharUtils.isAscii('A')  = true CharUtils.isAscii('3')  = true CharUtils.isAscii('-')  = true CharUtils.isAscii('\\n') = true CharUtils.isAscii('&copy;') = false </pre>\n * @param ch  the character to check\n * @return true if less than 128\n */\n", "method_name": "isAscii", "codes": ["public static boolean isAscii(final char ch){\n    return ch <= 127;\n}"], "code_level": "self_contained", "_id": "636766fb1a6d9265ec0177c3", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static String toString(final char ch){\n\tif(ch==' '){\n\t\treturn \" \";\n\t}else if(ch=='A'){\n\t\treturn \"A\";\n\t}else{\n\t\treturn String.valueOf(ch);\n\t}\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts the character to a String that contains the one character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same String object each time.</p> <pre> CharUtils.toString(' ')  = \" \" CharUtils.toString('A')  = \"A\" </pre>\n * @param ch  the character to convert\n * @return a String containing the one specified character\n */\n", "method_name": "toString", "codes": ["public static String toString(final char ch){\n\tif(ch==' '){\n\t\treturn \" \";\n\t}else if(ch=='A'){\n\t\treturn \"A\";\n\t}else{\n\t\treturn String.valueOf(ch);\n\t}\n}"], "code_level": "class_runnable", "_id": "6367670b1a6d9265ec017a05", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * Enlarges this byte vector so that it can receive'size' more bytes.\n * @param size number of additional bytes that this byte vector should be able to receive.\n */\n\nprivate void enlarge(final int size){\n\tif(size > this.size){\n\t\tthis.size = size;\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Enlarges this byte vector so that it can receive 'size' more bytes.\n * @param size number of additional bytes that this byte vector should be able to receive.\n */\n", "method_name": "enlarge", "codes": ["/** \n * Enlarges this byte vector so that it can receive'size' more bytes.\n * @param size number of additional bytes that this byte vector should be able to receive.\n */\n\nprivate void enlarge(final int size){\n\tif(size > this.size){\n\t\tthis.size = size;\n\t}\n}"], "code_level": "class_runnable", "_id": "636767191a6d9265ec017c0f", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * Adds a type in the type table of this symbol table. Does nothing if the type table already contains a similar type.\n * @param value an internal class name.\n * @return the index of a new or already existing type Symbol with the given value.\n */\n\nint addType(final String value){\n\tif(!typeTable.containsKey(value)){\n\t\ttypeTable.put(value, new Type(value));\n\t\treturn typeTable.size()-1;\n\t}\n\treturn -1;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Adds a type in the type table of this symbol table. Does nothing if the type table already contains a similar type.\n * @param value an internal class name.\n * @return the index of a new or already existing type Symbol with the given value.\n */\n", "method_name": "addType", "codes": ["/** \n * Adds a type in the type table of this symbol table. Does nothing if the type table already contains a similar type.\n * @param value an internal class name.\n * @return the index of a new or already existing type Symbol with the given value.\n */\n\nint addType(final String value){\n\tif(!typeTable.containsKey(value)){\n\t\ttypeTable.put(value, new Type(value));\n\t\treturn typeTable.size()-1;\n\t}\n\treturn -1;\n}"], "code_level": "project_runnable", "_id": "636766ef1a6d9265ec01761a", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public long readLong(final int offset){\n  return readLong(offset) | ((readLong(offset + 8) << 32) & 0xFFFFFFFFL);\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Reads a signed long value in this  {@link ClassReader}. <i>This method is intended for  {@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>\n * @param offset the start offset of the value to be read in this {@link ClassReader}.\n * @return the read value.\n */\n", "method_name": "readLong", "codes": ["public long readLong(final int offset){\n  return readLong(offset) | ((readLong(offset + 8) << 32) & 0xFFFFFFFFL);\n}"], "code_level": "class_runnable", "_id": "636766f81a6d9265ec01775b", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n\tif(byteArrayValue == null){\n\t\tbyteArrayValue = new byte[byteLength];\n\t}\n\tif(byteOffset + byteLength > byteArrayValue.length){\n\t\tbyteArrayValue = Arrays.copyOf(byteArrayValue, byteArrayValue.length);\n\t}\n\tSystem.arraycopy(byteArrayValue, byteOffset, byteArrayValue, 0, byteLength);\n\treturn this;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Puts an array of bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param byteArrayValue an array of bytes. May be {@literal null} to put {@code byteLength} nullbytes into this byte vector.\n * @param byteOffset index of the first byte of byteArrayValue that must be copied.\n * @param byteLength number of bytes of byteArrayValue that must be copied.\n * @return this byte vector.\n */\n", "method_name": "putByteArray", "codes": ["public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n\tif(byteArrayValue == null){\n\t\tbyteArrayValue = new byte[byteLength];\n\t}\n\tif(byteOffset + byteLength > byteArrayValue.length){\n\t\tbyteArrayValue = Arrays.copyOf(byteArrayValue, byteArrayValue.length);\n\t}\n\tSystem.arraycopy(byteArrayValue, byteOffset, byteArrayValue, 0, byteLength);\n\treturn this;\n}"], "code_level": "class_runnable", "_id": "6367671a1a6d9265ec017c15", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * Pops as many abstract types from the output frame stack as described by the given descriptor.\n * @param descriptor a type or method descriptor (in which case its argument types are popped).\n */\n\nprivate void pop(final String descriptor){\n\tif(descriptor.equals(\"void\")){\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"int\")){\n\t\tSystem.out.println(\"int\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"long\")){\n\t\tSystem.out.println(\"long\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"float\")){\n\t\tSystem.out.println(\"float\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"double\")){\n\t\tSystem.out.println(\"double\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"boolean\")){\n\t\tSystem.out.println(\"boolean\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"char\")){\n\t\tSystem.out.println(\"char\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"byte\")){\n\t\tSystem.out.println(\"byte\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"short\")){\n\t\tSystem.out.println(\"short\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"void\")){\n\t\tSystem.out.println(\"void\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"String\")){\n\t\tSystem.out.println(\"String\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class\")){\n\t\tSystem.out.println(\"Class\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Method\")){\n\t\tSystem.out.println(\"Method\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Pops as many abstract types from the output frame stack as described by the given descriptor.\n * @param descriptor a type or method descriptor (in which case its argument types are popped).\n */\n", "method_name": "pop", "codes": ["/** \n * Pops as many abstract types from the output frame stack as described by the given descriptor.\n * @param descriptor a type or method descriptor (in which case its argument types are popped).\n */\n\nprivate void pop(final String descriptor){\n\tif(descriptor.equals(\"void\")){\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"int\")){\n\t\tSystem.out.println(\"int\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"long\")){\n\t\tSystem.out.println(\"long\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"float\")){\n\t\tSystem.out.println(\"float\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"double\")){\n\t\tSystem.out.println(\"double\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"boolean\")){\n\t\tSystem.out.println(\"boolean\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"char\")){\n\t\tSystem.out.println(\"char\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"byte\")){\n\t\tSystem.out.println(\"byte\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"short\")){\n\t\tSystem.out.println(\"short\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"void\")){\n\t\tSystem.out.println(\"void\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"String\")){\n\t\tSystem.out.println(\"String\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class\")){\n\t\tSystem.out.println(\"Class\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Method\")){\n\t\tSystem.out.println(\"Method\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class[]\");\n\t\treturn;\n\t}\n\t\n\tif(descriptor.equals(\"Class[]\")){\n\t\tSystem.out.println(\"Class"], "code_level": "class_runnable", "_id": "636767021a6d9265ec0178b2", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * Adds an abstract type to the list of types on which a constructor is invoked in the basic block.\n * @param abstractType an abstract type on a which a constructor is invoked.\n */\n\nprivate void addInitializedType(final int abstractType){\n\tif(initializedTypes.contains(abstractType))\n\t\treturn;\n\tinitializedTypes.add(abstractType);\n\tif(abstractType == 0)\n\t\treturn;\n\tif(!initializedTypes.contains(abstractType-1))\n\t\tinitializedTypes.add(abstractType-1);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Adds an abstract type to the list of types on which a constructor is invoked in the basic block.\n * @param abstractType an abstract type on a which a constructor is invoked.\n */\n", "method_name": "addInitializedType", "codes": ["/** \n * Adds an abstract type to the list of types on which a constructor is invoked in the basic block.\n * @param abstractType an abstract type on a which a constructor is invoked.\n */\n\nprivate void addInitializedType(final int abstractType){\n\tif(initializedTypes.contains(abstractType))\n\t\treturn;\n\tinitializedTypes.add(abstractType);\n\tif(abstractType == 0)\n\t\treturn;\n\tif(!initializedTypes.contains(abstractType-1))\n\t\tinitializedTypes.add(abstractType-1);\n}"], "code_level": "class_runnable", "_id": "636766fa1a6d9265ec0177a9", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * Puts some abstract types of  {@link #currentFrame}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Puts some abstract types of  {@link #currentFrame} in {@link #stackMapTableEntries} , using theJVMS verification_type_info format used in StackMapTable attributes.\n * @param start index of the first type in {@link #currentFrame} to write.\n * @param end index of last type in {@link #currentFrame} to write (exclusive).\n */\n", "method_name": "putAbstractTypes", "codes": ["/** \n * Puts some abstract types of  {@link #currentFrame}"], "code_level": "project_runnable", "_id": "6367670a1a6d9265ec0179dc", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public short readShort(final int offset){\n  // Read first two bytes\n  final int b1 = in.read();\n  final int b2 = in.read();\n  // Extract the value\n  return (short) (((b1 & 0xFF) << 8) | (b2 & 0xFF));\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Reads a signed short value in this  {@link ClassReader}. <i>This method is intended for  {@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>\n * @param offset the start offset of the value to be read in this {@link ClassReader}.\n * @return the read value.\n */\n", "method_name": "readShort", "codes": ["public short readShort(final int offset){\n  // Read first two bytes\n  final int b1 = in.read();\n  final int b2 = in.read();\n  // Extract the value\n  return (short) (((b1 & 0xFF) << 8) | (b2 & 0xFF));\n}"], "code_level": "class_runnable", "_id": "636766f21a6d9265ec017667", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * Returns the label corresponding to the given bytecode offset. The default implementation of this method creates a label for the given offset if it has not been already created.\n * @param bytecodeOffset a bytecode offset in a method.\n * @param labels the already created labels, indexed by their offset. If a label already existsfor bytecodeOffset this method must not create a new one. Otherwise it must store the new label in this array.\n * @return a non null Label, which must be equal to labels[bytecodeOffset].\n */\n\nprotected Label readLabel(final int bytecodeOffset,final Label[] labels){\n\tif(labels[bytecodeOffset]!=null) return labels[bytecodeOffset];\n\tint index = bytecodeOffset*2+1;\n\tif(index>=labels.length) return null;\n\tint label = labels[index] = new Label();\n\tlabels[index].resolve(this, index, labels);\n\treturn label;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns the label corresponding to the given bytecode offset. The default implementation of this method creates a label for the given offset if it has not been already created.\n * @param bytecodeOffset a bytecode offset in a method.\n * @param labels the already created labels, indexed by their offset. If a label already existsfor bytecodeOffset this method must not create a new one. Otherwise it must store the new label in this array.\n * @return a non null Label, which must be equal to labels[bytecodeOffset].\n */\n", "method_name": "readLabel", "codes": ["/** \n * Returns the label corresponding to the given bytecode offset. The default implementation of this method creates a label for the given offset if it has not been already created.\n * @param bytecodeOffset a bytecode offset in a method.\n * @param labels the already created labels, indexed by their offset. If a label already existsfor bytecodeOffset this method must not create a new one. Otherwise it must store the new label in this array.\n * @return a non null Label, which must be equal to labels[bytecodeOffset].\n */\n\nprotected Label readLabel(final int bytecodeOffset,final Label[] labels){\n\tif(labels[bytecodeOffset]!=null) return labels[bytecodeOffset];\n\tint index = bytecodeOffset*2+1;\n\tif(index>=labels.length) return null;\n\tint label = labels[index] = new Label();\n\tlabels[index].resolve(this, index, labels);\n\treturn label;\n}"], "code_level": "self_contained", "_id": "636766ff1a6d9265ec017853", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * Reads a CONSTANT_Utf8 constant pool entry in  {@link #classFileBuffer}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Reads a CONSTANT_Utf8 constant pool entry in  {@link #classFileBuffer}.\n * @param constantPoolEntryIndex the index of a CONSTANT_Utf8 entry in the class's constant pooltable.\n * @param charBuffer the buffer to be used to read the string. This buffer must be sufficientlylarge. It is not automatically resized.\n * @return the String corresponding to the specified CONSTANT_Utf8 entry.\n */\n", "method_name": "readUtf", "codes": ["/** \n * Reads a CONSTANT_Utf8 constant pool entry in  {@link #classFileBuffer}"], "code_level": "class_runnable", "_id": "636766fe1a6d9265ec01782a", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public int hashCode(){\n    return super.hashCode();\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Returns a hash code value for this type.\n * @return a hash code value for this type.\n */\n", "method_name": "hashCode", "codes": ["public int hashCode(){\n    return super.hashCode();\n}"], "code_level": "class_runnable", "_id": "636766f81a6d9265ec017758", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table. Does nothing if the constant pool already contains a similar item.\n * @param name a field or method name.\n * @param descriptor a field or method descriptor.\n * @return a new or already existing Symbol with the given value.\n */\n\nint addConstantNameAndType(final String name,final String descriptor){\n\tif(!isConstantName(name)){\n\t\treturn addConstant(name, descriptor);\n\t}\n\treturn addConstant(name, descriptor, CONSTANT_NameAndType);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table. Does nothing if the constant pool already contains a similar item.\n * @param name a field or method name.\n * @param descriptor a field or method descriptor.\n * @return a new or already existing Symbol with the given value.\n */\n", "method_name": "addConstantNameAndType", "codes": ["/** \n * Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table. Does nothing if the constant pool already contains a similar item.\n * @param name a field or method name.\n * @param descriptor a field or method descriptor.\n * @return a new or already existing Symbol with the given value.\n */\n\nint addConstantNameAndType(final String name,final String descriptor){\n\tif(!isConstantName(name)){\n\t\treturn addConstant(name, descriptor);\n\t}\n\treturn addConstant(name, descriptor, CONSTANT_NameAndType);\n}"], "code_level": "project_runnable", "_id": "636766fe1a6d9265ec017823", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * Adds a source line number corresponding to this label.\n * @param lineNumber a source line number (which should be strictly positive).\n */\n\nfinal void addLineNumber(final int lineNumber){\n\tif(lineNumber < 0){\n\t\tthrow new IllegalArgumentException(\"lineNumber must be positive\");\n\t}\n\tif(lineNumber >= this.lineNumber){\n\t\tthrow new IllegalArgumentException(\"lineNumber must be less than or equal to the lineNumber of the label\");\n\t}\n\tthis.lineNumber = lineNumber;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Adds a source line number corresponding to this label.\n * @param lineNumber a source line number (which should be strictly positive).\n */\n", "method_name": "addLineNumber", "codes": ["/** \n * Adds a source line number corresponding to this label.\n * @param lineNumber a source line number (which should be strictly positive).\n */\n\nfinal void addLineNumber(final int lineNumber){\n\tif(lineNumber < 0){\n\t\tthrow new IllegalArgumentException(\"lineNumber must be positive\");\n\t}\n\tif(lineNumber >= this.lineNumber){\n\t\tthrow new IllegalArgumentException(\"lineNumber must be less than or equal to the lineNumber of the label\");\n\t}\n\tthis.lineNumber = lineNumber;\n}"], "code_level": "class_runnable", "_id": "636767131a6d9265ec017b23", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static int indexOfLastSeparator(String filename){\n\tif (filename == null) {\n\t\treturn -1;\n\t}\n\tint length = filename.length();\n\tint lastSep = 0;\n\tfor (int i = 0; i < length; i++){\n\t\tlastSep = indexOfLastSeparator(filename.charAt(i));\n\t\tif (lastSep!= -1){\n\t\t\treturn lastSep;\n\t\t}\n\t}\n\treturn lastSep;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns the index of the last directory separator character. <p> This method will handle a file in either Unix or Windows format. The position of the last forward or backslash is returned. <p> The output will be the same irrespective of the machine that the code is running on.\n * @param filename  the filename to find the last path separator in, null returns -1\n * @return the index of the last separator character, or -1 if thereis no such character\n */\n", "method_name": "indexOfLastSeparator", "codes": ["public static int indexOfLastSeparator(String filename){\n\tif (filename == null) {\n\t\treturn -1;\n\t}\n\tint length = filename.length();\n\tint lastSep = 0;\n\tfor (int i = 0; i < length; i++){\n\t\tlastSep = indexOfLastSeparator(filename.charAt(i));\n\t\tif (lastSep!= -1){\n\t\t\treturn lastSep;\n\t\t}\n\t}\n\treturn lastSep;\n}"], "code_level": "class_runnable", "_id": "636766f11a6d9265ec017658", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static void forceDeleteOnExit(File file) throws IOException {\n\tif (file == null) {\n\t\tthrow new NullPointerException(\"file must not be null\");\n\t}\n\tif (file.isDirectory()) {\n\t\tFile[] files = file.listFiles();\n\t\tif (files!= null) {\n\t\t\tfor (File f : files) {\n\t\t\t\tforceDeleteOnExit(f);\n\t\t\t}\n\t\t}\n\t}\n\tfile.delete();\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Schedules a file to be deleted when JVM exits. If file is directory delete it and all sub-directories.\n * @param file  file or directory to delete, must not be {@code null}\n * @throws NullPointerException if the file is {@code null}\n * @throws IOException in case deletion is unsuccessful\n */\n", "method_name": "forceDeleteOnExit", "codes": ["public static void forceDeleteOnExit(File file) throws IOException {\n\tif (file == null) {\n\t\tthrow new NullPointerException(\"file must not be null\");\n\t}\n\tif (file.isDirectory()) {\n\t\tFile[] files = file.listFiles();\n\t\tif (files!= null) {\n\t\t\tfor (File f : files) {\n\t\t\t\tforceDeleteOnExit(f);\n\t\t\t}\n\t\t}\n\t}\n\tfile.delete();\n}"], "code_level": "class_runnable", "_id": "636766fe1a6d9265ec017833", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static int indexOfExtension(String filename){\n\treturn indexOfExtension(filename, true);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns the index of the last extension separator character, which is a dot. <p> This method also checks that there is no directory separator after the last dot. To do this it uses  {@link #indexOfLastSeparator(String)} which willhandle a file in either Unix or Windows format. <p> The output will be the same irrespective of the machine that the code is running on.\n * @param filename  the filename to find the last path separator in, null returns -1\n * @return the index of the last separator character, or -1 if thereis no such character\n */\n", "method_name": "indexOfExtension", "codes": ["public static int indexOfExtension(String filename){\n\treturn indexOfExtension(filename, true);\n}"], "code_level": "class_runnable", "_id": "636767061a6d9265ec01794a", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public void write(byte b[]) throws IOException {\n    this.write(b, 0, b.length);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Writes <code>b.length</code> bytes from the specified byte array to this output stream.\n * @param b The array of bytes to be written.\n * @exception IOException if an error occurs.\n */\n", "method_name": "write", "codes": ["public void write(byte b[]) throws IOException {\n    this.write(b, 0, b.length);\n}"], "code_level": "class_runnable", "_id": "6367670b1a6d9265ec0179fe", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public void write(final byte b[],final int off,final int len) throws IOException {\n\tif (len==0) return;\n\tif (off+len>b.length) throw new IndexOutOfBoundsException();\n\tif (off==0) {\n\t\tthis.write(b,0,len);\n\t\treturn;\n\t}\n\tfinal int end=off+len;\n\tif (end>b.length) end=b.length;\n\tfor (int i=off;i<end;i++) this.write(b[i]);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Writes <code>len</code> bytes from the specified byte array starting at offset <code>off</code> to this byte array output stream.\n * @param b   the data.\n * @param off the start offset in the data.\n * @param len the number of bytes to write.\n */\n", "method_name": "write", "codes": ["public void write(final byte b[],final int off,final int len) throws IOException {\n\tif (len==0) return;\n\tif (off+len>b.length) throw new IndexOutOfBoundsException();\n\tif (off==0) {\n\t\tthis.write(b,0,len);\n\t\treturn;\n\t}\n\tfinal int end=off+len;\n\tif (end>b.length) end=b.length;\n\tfor (int i=off;i<end;i++) this.write(b[i]);\n}"], "code_level": "class_runnable", "_id": "636766f91a6d9265ec01776e", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public void write(final byte[] b) throws IOException {\n\twrite(b, 0, b.length);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * @see OutputStream#write(byte[]) \n */\n", "method_name": "write", "codes": ["public void write(final byte[] b) throws IOException {\n\twrite(b, 0, b.length);\n}"], "code_level": "class_runnable", "_id": "6367670a1a6d9265ec0179d8", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public String toString(){", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * <p> Gets the String built by this builder. </p>\n * @return the built string\n */\n", "method_name": "toString", "codes": ["public String toString(){"], "code_level": "project_runnable", "_id": "636767001a6d9265ec01787e", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * <p>Append to the <code>toString</code> the detail of an <code>int</code> array.</p>\n * @param buffer  the <code>StringBuffer</code> to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the <code>toString</code>,not <code>null</code>\n */\n\nprotected void appendDetail(StringBuffer buffer,String fieldName,int[] array){\n    buffer.append(fieldName);\n    buffer.append(array[0]);\n    buffer.append(array[1]);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Append to the <code>toString</code> the detail of an <code>int</code> array.</p>\n * @param buffer  the <code>StringBuffer</code> to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the <code>toString</code>,not <code>null</code>\n */\n", "method_name": "appendDetail", "codes": ["/** \n * <p>Append to the <code>toString</code> the detail of an <code>int</code> array.</p>\n * @param buffer  the <code>StringBuffer</code> to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the <code>toString</code>,not <code>null</code>\n */\n\nprotected void appendDetail(StringBuffer buffer,String fieldName,int[] array){\n    buffer.append(fieldName);\n    buffer.append(array[0]);\n    buffer.append(array[1]);\n}"], "code_level": "class_runnable", "_id": "636767001a6d9265ec01787f", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * Converts the given Collection into an array of Strings. The returned array does not contain <code>null</code> entries. Note that  {@link Arrays#sort(Object[])}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Converts the given Collection into an array of Strings. The returned array does not contain <code>null</code> entries. Note that  {@link Arrays#sort(Object[])} will throw an {@link NullPointerException} if an array element is <code>null</code>.\n * @param collection The collection to convert\n * @return A new array of Strings.\n */\n", "method_name": "toNoNullStringArray", "codes": ["/** \n * Converts the given Collection into an array of Strings. The returned array does not contain <code>null</code> entries. Note that  {@link Arrays#sort(Object[])}"], "code_level": "project_runnable", "_id": "636766f71a6d9265ec017730", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * <p> Registers the given object. Used by the reflection methods to avoid infinite loops. </p>\n * @param value The object to register.\n */\n\nstatic void register(Object value){\n    if(value == null){\n        return;\n    }\n    if(value instanceof Class){\n        Class cls = (Class)value;\n        if(!cls.isArray()){\n            cls.addMethod(\"register\", new Method(cls, \"register\", new Class[]{Object.class}, new Class[]{Object.class}));\n        }\n    }else if(value instanceof Object[]){\n        Object[] arr = (Object[])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][]){\n        Object[][] arr = (Object[][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][]){\n        Object[][][] arr = (Object[][][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][][]){\n        Object[][][][] arr = (Object[][][][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][][][]){\n        Object[][][][][] arr = (Object[][][][][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][][][][]){\n        Object[][][][][][] arr = (Object[][][][][][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][][][][][]){\n        Object[][][][][][][] arr = (Object[][][][][][][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][][][][][][]){\n        Object[][][][][][][][] arr = (Object[][][][][][][][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][][][][][][][]){\n        Object[][][][][][][][][] arr = (Object[][][][][][][][][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][][][][][][][][]){\n        Object[][][][][][][][][][] arr = (Object[][][][][][][][][][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][][][][][][][][][]){\n        Object[][][][][][][][][][][] arr = (Object[][][][][][][][][][][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][][][][][][][][][][]){\n        Object[][][][][][][][][][][][] arr = (Object[][][][][][][][][][][][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][][][][][][][][][][][]){\n        Object[][][][][][", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * <p> Registers the given object. Used by the reflection methods to avoid infinite loops. </p>\n * @param value The object to register.\n */\n", "method_name": "register", "codes": ["/** \n * <p> Registers the given object. Used by the reflection methods to avoid infinite loops. </p>\n * @param value The object to register.\n */\n\nstatic void register(Object value){\n    if(value == null){\n        return;\n    }\n    if(value instanceof Class){\n        Class cls = (Class)value;\n        if(!cls.isArray()){\n            cls.addMethod(\"register\", new Method(cls, \"register\", new Class[]{Object.class}, new Class[]{Object.class}));\n        }\n    }else if(value instanceof Object[]){\n        Object[] arr = (Object[])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][]){\n        Object[][] arr = (Object[][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][]){\n        Object[][][] arr = (Object[][][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][][]){\n        Object[][][][] arr = (Object[][][][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][][][]){\n        Object[][][][][] arr = (Object[][][][][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][][][][]){\n        Object[][][][][][] arr = (Object[][][][][][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][][][][][]){\n        Object[][][][][][][] arr = (Object[][][][][][][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][][][][][][]){\n        Object[][][][][][][][] arr = (Object[][][][][][][][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][][][][][][][]){\n        Object[][][][][][][][][] arr = (Object[][][][][][][][][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][][][][][][][][]){\n        Object[][][][][][][][][][] arr = (Object[][][][][][][][][][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][][][][][][][][][]){\n        Object[][][][][][][][][][][] arr = (Object[][][][][][][][][][][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][][][][][][][][][][]){\n        Object[][][][][][][][][][][][] arr = (Object[][][][][][][][][][][][])value;\n        for(int i = 0; i < arr.length; i++){\n            arr[i].register();\n        }\n    }else if(value instanceof Object[][][][][][][][][][][][][]){\n        Object[][][][][]["], "code_level": "class_runnable", "_id": "636767041a6d9265ec017911", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * <p>Append to the <code>toString</code> the detail of a <code>byte</code> array.</p>\n * @param buffer  the <code>StringBuffer</code> to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the <code>toString</code>,not <code>null</code>\n */\n\nprotected void appendDetail(StringBuffer buffer,String fieldName,byte[] array){\n\tbuffer.append(fieldName);\n\tbuffer.append(array);\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * <p>Append to the <code>toString</code> the detail of a <code>byte</code> array.</p>\n * @param buffer  the <code>StringBuffer</code> to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the <code>toString</code>,not <code>null</code>\n */\n", "method_name": "appendDetail", "codes": ["/** \n * <p>Append to the <code>toString</code> the detail of a <code>byte</code> array.</p>\n * @param buffer  the <code>StringBuffer</code> to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the <code>toString</code>,not <code>null</code>\n */\n\nprotected void appendDetail(StringBuffer buffer,String fieldName,byte[] array){\n\tbuffer.append(fieldName);\n\tbuffer.append(array);\n}"], "code_level": "class_runnable", "_id": "636766fe1a6d9265ec017821", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * Returns a new array of Strings without null elements. Internal method used to normalize exclude lists (arrays and collections). Note that  {@link Arrays#sort(Object[])}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns a new array of Strings without null elements. Internal method used to normalize exclude lists (arrays and collections). Note that  {@link Arrays#sort(Object[])} will throw an {@link NullPointerException}if an array element is <code>null</code>.\n * @param array The array to check\n * @return The given array or a new array without null.\n */\n", "method_name": "toNoNullStringArray", "codes": ["/** \n * Returns a new array of Strings without null elements. Internal method used to normalize exclude lists (arrays and collections). Note that  {@link Arrays#sort(Object[])}"], "code_level": "project_runnable", "_id": "636766fc1a6d9265ec0177ef", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public int available() throws IOException {\n    return super.available();\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * @see InputStream#available() \n */\n", "method_name": "available", "codes": ["public int available() throws IOException {\n    return super.available();\n}"], "code_level": "class_runnable", "_id": "636766f11a6d9265ec017641", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static <T>List<T> asList(T[] a){\n\tif (a == null) return null;\n\treturn Arrays.asList(a);\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Array to List. <p> Works like  {@link Arrays#asList(Object)}, but handles null arrays.\n * @return a list backed by the array.\n */\n", "method_name": "asList", "codes": ["public static <T>List<T> asList(T[] a){\n\tif (a == null) return null;\n\treturn Arrays.asList(a);\n}"], "code_level": "slib_runnable", "_id": "636766f01a6d9265ec017639", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static byte convertHexDigit(byte b){\n\tif(b >= '0' && b <= '9'){\n\t\treturn b - '0';\n\t}\n\tif(b >= 'a' && b <= 'f'){\n\t\treturn b - 'a' + 10;\n\t}\n\tif(b >= 'A' && b <= 'F'){\n\t\treturn b - 'A' + 10;\n\t}\n\treturn 0;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * @param b An ASCII encoded character 0-9 a-f A-F\n * @return The byte value of the character 0-16.\n */\n", "method_name": "convertHexDigit", "codes": ["public static byte convertHexDigit(byte b){\n\tif(b >= '0' && b <= '9'){\n\t\treturn b - '0';\n\t}\n\tif(b >= 'a' && b <= 'f'){\n\t\treturn b - 'a' + 10;\n\t}\n\tif(b >= 'A' && b <= 'F'){\n\t\treturn b - 'A' + 10;\n\t}\n\treturn 0;\n}"], "code_level": "slib_runnable", "_id": "636766f91a6d9265ec01777d", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public Converter lookup(final Class<?> clazz){\n\treturn lookup(clazz, null);\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Look up and return any registered  {@link Converter} for the specifieddestination class; if there is no registered Converter, return <code>null</code>.\n * @param clazz Class for which to return a registered Converter\n * @return The registered {@link Converter} or <code>null</code> if not found\n */\n", "method_name": "lookup", "codes": ["public Converter lookup(final Class<?> clazz){\n\treturn lookup(clazz, null);\n}"], "code_level": "class_runnable", "_id": "6367670a1a6d9265ec0179e7", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public boolean containsKey(final Object key){\n    return map.containsKey(key);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Return <code>true</code> if this map contains a mapping for the specified key.\n * @param key  the key to be searched for\n * @return true if the map contains the key\n */\n", "method_name": "containsKey", "codes": ["public boolean containsKey(final Object key){\n    return map.containsKey(key);\n}"], "code_level": "class_runnable", "_id": "6367670b1a6d9265ec0179f2", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * This method creates a copy of the provided array, and ensures that all the strings in the newly created array contain only lower-case letters. <p> Using this method to copy string arrays means that changes to the src array do not modify the dst array.\n */\n\nprivate static String[] copyStrings(final String[] src){\n\tfinal String[] dst = new String[src.length];\n\tfor(int i = 0; i < src.length; i++){\n\t\tdst[i] = src[i].toLowerCase();\n\t}\n\treturn dst;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * This method creates a copy of the provided array, and ensures that all the strings in the newly created array contain only lower-case letters. <p> Using this method to copy string arrays means that changes to the src array do not modify the dst array.\n */\n", "method_name": "copyStrings", "codes": ["/** \n * This method creates a copy of the provided array, and ensures that all the strings in the newly created array contain only lower-case letters. <p> Using this method to copy string arrays means that changes to the src array do not modify the dst array.\n */\n\nprivate static String[] copyStrings(final String[] src){\n\tfinal String[] dst = new String[src.length];\n\tfor(int i = 0; i < src.length; i++){\n\t\tdst[i] = src[i].toLowerCase();\n\t}\n\treturn dst;\n}"], "code_level": "self_contained", "_id": "636767041a6d9265ec0178f8", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * <p>Convert the input object into a java.lang.Character.</p>\n * @param type Data type to which this value should be converted.\n * @param value The input value to be converted.\n * @return The converted value.\n * @throws Exception if conversion cannot be performed successfully\n * @since 1.8.0\n */\n\n@Override protected Object convertToType(final Class<?> type,final Object value) throws Exception {\n\tif (value == null) {\n\t\treturn null;\n\t}\n\tif (value instanceof Character) {\n\t\treturn value;\n\t}\n\tif (value instanceof String) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Integer) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Long) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Float) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Double) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Boolean) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Byte) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Short) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Integer) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Long) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Float) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Double) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Boolean) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Byte) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Short) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Integer) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Long) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Float) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Double) {\n\t\treturn value.toString();\n\t}\n\tthrow new Exception(\"Unable to convert value of type \" + value.getClass().getName() + \" to Character.\");\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * <p>Convert the input object into a java.lang.Character.</p>\n * @param type Data type to which this value should be converted.\n * @param value The input value to be converted.\n * @return The converted value.\n * @throws Exception if conversion cannot be performed successfully\n * @since 1.8.0\n */\n", "method_name": "convertToType", "codes": ["/** \n * <p>Convert the input object into a java.lang.Character.</p>\n * @param type Data type to which this value should be converted.\n * @param value The input value to be converted.\n * @return The converted value.\n * @throws Exception if conversion cannot be performed successfully\n * @since 1.8.0\n */\n\n@Override protected Object convertToType(final Class<?> type,final Object value) throws Exception {\n\tif (value == null) {\n\t\treturn null;\n\t}\n\tif (value instanceof Character) {\n\t\treturn value;\n\t}\n\tif (value instanceof String) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Integer) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Long) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Float) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Double) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Boolean) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Byte) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Short) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Integer) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Long) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Float) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Double) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Boolean) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Byte) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Short) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Integer) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Long) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Float) {\n\t\treturn value.toString();\n\t}\n\tif (value instanceof Double) {\n\t\treturn value.toString();\n\t}\n\tthrow new Exception(\"Unable to convert value of type \" + value.getClass().getName() + \" to Character.\");\n}"], "code_level": "project_runnable", "_id": "636767021a6d9265ec0178bf", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public Collection<Object> values(){\n\treturn new ArrayList<Object>();\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Returns the values for the BeanMap.\n * @return values for the BeanMap. The returned collection is not modifiable.\n */\n", "method_name": "values", "codes": ["public Collection<Object> values(){\n\treturn new ArrayList<Object>();\n}"], "code_level": "class_runnable", "_id": "636766f11a6d9265ec01764f", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public void putAllWriteable(BeanMap map){\n\tfor(String key: map.getWriteableProperties()){\n\t\tput(key, map.get(key));\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Puts all of the writable properties from the given BeanMap into this BeanMap. Read-only and Write-only properties will be ignored.\n * @param map  the BeanMap whose properties to put\n */\n", "method_name": "putAllWriteable", "codes": ["public void putAllWriteable(BeanMap map){\n\tfor(String key: map.getWriteableProperties()){\n\t\tput(key, map.get(key));\n\t}\n}"], "code_level": "class_runnable", "_id": "636767071a6d9265ec017962", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public long contentLength(){\n    return _contentLength;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Retrieve the content length of the request.\n * @return The content length of the request.\n * @since 1.3\n */\n", "method_name": "contentLength", "codes": ["public long contentLength(){\n    return _contentLength;\n}"], "code_level": "project_runnable", "_id": "636767031a6d9265ec0178dd", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * Skips bytes until the end of the current line.\n * @param headerPart The headers, which are being parsed.\n * @param end Index of the last byte, which has yet been processed.\n * @return Index of the \\r\\n sequence, which indicates end of line.\n */\n\nprivate int parseEndOfLine(String headerPart,int end){\n\tint i=0;\n\twhile(i<end){\n\t\tif(headerPart.charAt(i)=='\\r'){\n\t\t\ti++;\n\t\t\tif(i>=end)\n\t\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Skips bytes until the end of the current line.\n * @param headerPart The headers, which are being parsed.\n * @param end Index of the last byte, which has yet been processed.\n * @return Index of the \\r\\n sequence, which indicates end of line.\n */\n", "method_name": "parseEndOfLine", "codes": ["/** \n * Skips bytes until the end of the current line.\n * @param headerPart The headers, which are being parsed.\n * @param end Index of the last byte, which has yet been processed.\n * @return Index of the \\r\\n sequence, which indicates end of line.\n */\n\nprivate int parseEndOfLine(String headerPart,int end){\n\tint i=0;\n\twhile(i<end){\n\t\tif(headerPart.charAt(i)=='\\r'){\n\t\t\ti++;\n\t\t\tif(i>=end)\n\t\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}"], "code_level": "self_contained", "_id": "636767121a6d9265ec017b0a", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * Searches for a byte of specified value in the <code>buffer</code>, starting at the specified <code>position</code>.\n * @param value The value to find.\n * @param pos   The starting position for searching.\n * @return The position of byte found, counting from beginning of the<code>buffer</code>, or <code>-1</code> if not found.\n */\n\nprotected int findByte(byte value,int pos){\n\t\n\tif(pos<0){\n\t\treturn -1;\n\t}\n\t\n\tif(pos>=buffer.length){\n\t\treturn -1;\n\t}\n\t\n\treturn buffer[pos]==value?pos:findByte(value,pos+1);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Searches for a byte of specified value in the <code>buffer</code>, starting at the specified <code>position</code>.\n * @param value The value to find.\n * @param pos   The starting position for searching.\n * @return The position of byte found, counting from beginning of the<code>buffer</code>, or <code>-1</code> if not found.\n */\n", "method_name": "findByte", "codes": ["/** \n * Searches for a byte of specified value in the <code>buffer</code>, starting at the specified <code>position</code>.\n * @param value The value to find.\n * @param pos   The starting position for searching.\n * @return The position of byte found, counting from beginning of the<code>buffer</code>, or <code>-1</code> if not found.\n */\n\nprotected int findByte(byte value,int pos){\n\t\n\tif(pos<0){\n\t\treturn -1;\n\t}\n\t\n\tif(pos>=buffer.length){\n\t\treturn -1;\n\t}\n\t\n\treturn buffer[pos]==value?pos:findByte(value,pos+1);\n}"], "code_level": "class_runnable", "_id": "636766ff1a6d9265ec017851", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public byte readByte() throws IOException {\n\tif (buffer == null) {\n\t\tthrow new IOException(\"No data available\");\n\t}\n\t\n\tbyte b = buffer[pos];\n\tpos++;\n\treturn b;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Reads a byte from the <code>buffer</code>, and refills it as necessary.\n * @return The next byte from the input stream.\n * @throws IOException if there is no more data available.\n */\n", "method_name": "readByte", "codes": ["public byte readByte() throws IOException {\n\tif (buffer == null) {\n\t\tthrow new IOException(\"No data available\");\n\t}\n\t\n\tbyte b = buffer[pos];\n\tpos++;\n\treturn b;\n}"], "code_level": "class_runnable", "_id": "636766f81a6d9265ec01774b", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * Parses out a token until any of the given terminators is encountered.\n * @param terminators the array of terminating characters. Any of these characters when encountered signify the end of the token\n * @return the token\n */\n\nprivate String parseToken(final char[] terminators){\n    StringBuilder token = new StringBuilder();\n    for(int i=0;i<terminators.length;i++){\n        if(terminators[i]=='\\n'){\n            token.append(\"\\n\");\n        }else if(terminators[i]=='\\r'){\n            token.append(\"\\r\");\n        }else if(terminators[i]=='\\t'){\n            token.append(\"\\t\");\n        }else{\n            token.append(terminators[i]);\n        }\n    }\n    return token.toString();\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Parses out a token until any of the given terminators is encountered.\n * @param terminators the array of terminating characters. Any of these characters when encountered signify the end of the token\n * @return the token\n */\n", "method_name": "parseToken", "codes": ["/** \n * Parses out a token until any of the given terminators is encountered.\n * @param terminators the array of terminating characters. Any of these characters when encountered signify the end of the token\n * @return the token\n */\n\nprivate String parseToken(final char[] terminators){\n    StringBuilder token = new StringBuilder();\n    for(int i=0;i<terminators.length;i++){\n        if(terminators[i]=='\\n'){\n            token.append(\"\\n\");\n        }else if(terminators[i]=='\\r'){\n            token.append(\"\\r\");\n        }else if(terminators[i]=='\\t'){\n            token.append(\"\\t\");\n        }else{\n            token.append(terminators[i]);\n        }\n    }\n    return token.toString();\n}"], "code_level": "class_runnable", "_id": "636766fa1a6d9265ec01779c", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean arrayequals(byte[] a,byte[] b,int count){\n\tif(a.length!=b.length)return false;\n\tfor(int i=0;i<count;i++){\n\t\tif(a[i]!=b[i])return false;\n\t}\n\treturn true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Compares <code>count</code> first bytes in the arrays <code>a</code> and <code>b</code>.\n * @param a     The first array to compare.\n * @param b     The second array to compare.\n * @param count How many bytes should be compared.\n * @return <code>true</code> if <code>count</code> first bytes in arrays<code>a</code> and <code>b</code> are equal.\n */\n", "method_name": "arrayequals", "codes": ["public static boolean arrayequals(byte[] a,byte[] b,int count){\n\tif(a.length!=b.length)return false;\n\tfor(int i=0;i<count;i++){\n\t\tif(a[i]!=b[i])return false;\n\t}\n\treturn true;\n}"], "code_level": "self_contained", "_id": "636766fd1a6d9265ec017814", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static int lastIndexOf(String str,String searchStr){\n\treturn str.lastIndexOf(searchStr);\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Finds the last index within a String, handling <code>null</code>. This method uses  {@link String#lastIndexOf(String)}. \n */\n", "method_name": "lastIndexOf", "codes": ["public static int lastIndexOf(String str,String searchStr){\n\treturn str.lastIndexOf(searchStr);\n}"], "code_level": "project_runnable", "_id": "636766f61a6d9265ec017701", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static String sub(String str,int start,int end){\n\tif(start>end){\n\t\treturn \"\";\n\t}\n\t\n\tint i=start;\n", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Gets a substring from the specified String avoiding exceptions. \n */\n", "method_name": "sub", "codes": ["public static String sub(String str,int start,int end){\n\tif(start>end){\n\t\treturn \"\";\n\t}\n\t\n\tint i=start;\n"], "code_level": "project_runnable", "_id": "636766ff1a6d9265ec01783b", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean containsAnyIgnoreCase(String str,List<String> searchStrArray){\n\t\n\tif(str==null || searchStrArray==null || searchStrArray.size()==0){\n\t\treturn false;\n\t}\n\t\n\tfor(String s : searchStrArray){\n\t\tif(str.toLowerCase().contains(s.toLowerCase())){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Case in-sensitive Checks if the String contains any character in the given set of string. \n */\n", "method_name": "containsAnyIgnoreCase", "codes": ["public static boolean containsAnyIgnoreCase(String str,List<String> searchStrArray){\n\t\n\tif(str==null || searchStrArray==null || searchStrArray.size()==0){\n\t\treturn false;\n\t}\n\t\n\tfor(String s : searchStrArray){\n\t\tif(str.toLowerCase().contains(s.toLowerCase())){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}"], "code_level": "project_runnable", "_id": "6367670b1a6d9265ec017a0f", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static int indexOf(String str,String searchStr){\n\tif(str==null || searchStr==null){\n\t\treturn -1;\n\t}\n\treturn str.indexOf(searchStr);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Finds the first index within a String, handling <code>null</code>. This method uses  {@link String#indexOf(String)}. \n */\n", "method_name": "indexOf", "codes": ["public static int indexOf(String str,String searchStr){\n\tif(str==null || searchStr==null){\n\t\treturn -1;\n\t}\n\treturn str.indexOf(searchStr);\n}"], "code_level": "project_runnable", "_id": "636767021a6d9265ec0178bc", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * Determine whether a parameter name ends at the current position, that is, whether the given character qualifies as a separator. \n */\n\nprivate static boolean isParameterSeparator(final char c){\n\treturn c == ',' || c == ';' || c == ':' || c == '(' || c == ')' || c == '[' || c == ']' || c == '{' || c == '}' || c == '@';\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Determine whether a parameter name ends at the current position, that is, whether the given character qualifies as a separator. \n */\n", "method_name": "isParameterSeparator", "codes": ["/** \n * Determine whether a parameter name ends at the current position, that is, whether the given character qualifies as a separator. \n */\n\nprivate static boolean isParameterSeparator(final char c){\n\treturn c == ',' || c == ';' || c == ':' || c == '(' || c == ')' || c == '[' || c == ']' || c == '{' || c == '}' || c == '@';\n}"], "code_level": "class_runnable", "_id": "636766fc1a6d9265ec0177da", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * Returns a copy of the given array of size 1 greater than the argument. The last value of the array is left to the default value.\n * @param array The array to copy, must not be <code>null</code>.\n * @param newArrayComponentType If <code>array</code> is <code>null</code>, create asize 1 array of this type.\n * @return A new copy of the array of size 1 greater than the input.\n */\n\nprivate static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n\tif(array == null) return null;\n\tif(array instanceof Object[]){\n\t\treturn ((Object[])array).clone();\n\t}\n\tif(array instanceof Object[][]){\n\t\tfinal Object[][] arrayCopy = new Object[1][];\n\t\tarrayCopy[0] = (Object[])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][]){\n\t\tfinal Object[][][] arrayCopy = new Object[1][][];\n\t\tarrayCopy[0] = (Object[][])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][][]){\n\t\tfinal Object[][][][] arrayCopy = new Object[1][][][];\n\t\tarrayCopy[0] = (Object[][][])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][][][]){\n\t\tfinal Object[][][][][] arrayCopy = new Object[1][][][][];\n\t\tarrayCopy[0] = (Object[][][][])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][][][][]){\n\t\tfinal Object[][][][][][] arrayCopy = new Object[1][][][][][];\n\t\tarrayCopy[0] = (Object[][][][][])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][][][][]){\n\t\tfinal Object[][][][][][] arrayCopy = new Object[1][][][][][];\n\t\tarrayCopy[0] = (Object[][][][][])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][][][][][]){\n\t\tfinal Object[][][][][][][] arrayCopy = new Object[1][][][][][][];\n\t\tarrayCopy[0] = (Object[][][][][][])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][][][][][][]){\n\t\tfinal Object[][][][][][][][] arrayCopy = new Object[1][][][][][][][];\n\t\tarrayCopy[0] = (Object[][][][][][][])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][][][][][][][]){\n\t\tfinal Object[][][][][][][][][] arrayCopy = new Object[1][][][][][][][][];\n\t\tarrayCopy[0] = (Object[][][][][][][][])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][][][][][][][][]){\n\t\tfinal Object[][][][][][][][][][] arrayCopy = new Object[1][][][][][][][][][];\n\t\tarrayCopy[0] = (Object[][][][][][][][][])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][][][][][][][][][]){\n\t\tfinal Object[][][][][][][][][][][] arrayCopy = new Object[1][][][][][][][][][][];\n\t\tarrayCopy[0] = (Object[][][][][][][][][][])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][][][][][][][][][][]){\n\t\tfinal Object[][][][][][][][][][][][] arrayCopy = new Object[1][][][][][][][][][][][];\n\t\tarrayCopy[0] = (Object[][][][][][][][][][][])", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns a copy of the given array of size 1 greater than the argument. The last value of the array is left to the default value.\n * @param array The array to copy, must not be <code>null</code>.\n * @param newArrayComponentType If <code>array</code> is <code>null</code>, create asize 1 array of this type.\n * @return A new copy of the array of size 1 greater than the input.\n */\n", "method_name": "copyArrayGrow1", "codes": ["/** \n * Returns a copy of the given array of size 1 greater than the argument. The last value of the array is left to the default value.\n * @param array The array to copy, must not be <code>null</code>.\n * @param newArrayComponentType If <code>array</code> is <code>null</code>, create asize 1 array of this type.\n * @return A new copy of the array of size 1 greater than the input.\n */\n\nprivate static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n\tif(array == null) return null;\n\tif(array instanceof Object[]){\n\t\treturn ((Object[])array).clone();\n\t}\n\tif(array instanceof Object[][]){\n\t\tfinal Object[][] arrayCopy = new Object[1][];\n\t\tarrayCopy[0] = (Object[])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][]){\n\t\tfinal Object[][][] arrayCopy = new Object[1][][];\n\t\tarrayCopy[0] = (Object[][])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][][]){\n\t\tfinal Object[][][][] arrayCopy = new Object[1][][][];\n\t\tarrayCopy[0] = (Object[][][])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][][][]){\n\t\tfinal Object[][][][][] arrayCopy = new Object[1][][][][];\n\t\tarrayCopy[0] = (Object[][][][])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][][][][]){\n\t\tfinal Object[][][][][][] arrayCopy = new Object[1][][][][][];\n\t\tarrayCopy[0] = (Object[][][][][])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][][][][]){\n\t\tfinal Object[][][][][][] arrayCopy = new Object[1][][][][][];\n\t\tarrayCopy[0] = (Object[][][][][])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][][][][][]){\n\t\tfinal Object[][][][][][][] arrayCopy = new Object[1][][][][][][];\n\t\tarrayCopy[0] = (Object[][][][][][])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][][][][][][]){\n\t\tfinal Object[][][][][][][][] arrayCopy = new Object[1][][][][][][][];\n\t\tarrayCopy[0] = (Object[][][][][][][])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][][][][][][][]){\n\t\tfinal Object[][][][][][][][][] arrayCopy = new Object[1][][][][][][][][];\n\t\tarrayCopy[0] = (Object[][][][][][][][])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][][][][][][][][]){\n\t\tfinal Object[][][][][][][][][][] arrayCopy = new Object[1][][][][][][][][][];\n\t\tarrayCopy[0] = (Object[][][][][][][][][])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][][][][][][][][][]){\n\t\tfinal Object[][][][][][][][][][][] arrayCopy = new Object[1][][][][][][][][][][];\n\t\tarrayCopy[0] = (Object[][][][][][][][][][])array.clone();\n\t\treturn arrayCopy;\n\t}\n\tif(array instanceof Object[][][][][][][][][][][][]){\n\t\tfinal Object[][][][][][][][][][][][] arrayCopy = new Object[1][][][][][][][][][][][];\n\t\tarrayCopy[0] = (Object[][][][][][][][][][][])"], "code_level": "slib_runnable", "_id": "636767031a6d9265ec0178ef", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static String sessionId(){\n\treturn \"session\";\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Session ID. \n */\n", "method_name": "sessionId", "codes": ["public static String sessionId(){\n\treturn \"session\";\n}"], "code_level": "plib_runnable", "_id": "636766fe1a6d9265ec017834", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public Boolean isPartialContentResponse(){\n\treturn isPartialContent;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Check if the actual response is a Partial Content (HTTP 206 code)\n * @return is partial content or not\n */\n", "method_name": "isPartialContentResponse", "codes": ["public Boolean isPartialContentResponse(){\n\treturn isPartialContent;\n}"], "code_level": "plib_runnable", "_id": "636766ae1a6d9265ec0175dc", "project_name": "framework-master"}
{"generate_results": [{"generate_code": "/** \n * Build the 'Content-Range' HTTP Header value.\n * @return 'Content-Range' value\n */\n\nprivate String buildContentRange(){\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"bytes \");\n    sb.append(getContentLength());\n    sb.append(\"/\");\n    sb.append(getContentLength());\n    sb.append(\"/\");\n    sb.append(getContentLength());\n    sb.append(\"\\r\\n\");\n    return sb.toString();\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Build the 'Content-Range' HTTP Header value.\n * @return 'Content-Range' value\n */\n", "method_name": "buildContentRange", "codes": ["/** \n * Build the 'Content-Range' HTTP Header value.\n * @return 'Content-Range' value\n */\n\nprivate String buildContentRange(){\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"bytes \");\n    sb.append(getContentLength());\n    sb.append(\"/\");\n    sb.append(getContentLength());\n    sb.append(\"/\");\n    sb.append(getContentLength());\n    sb.append(\"\\r\\n\");\n    return sb.toString();\n}"], "code_level": "class_runnable", "_id": "636766ae1a6d9265ec0175d8", "project_name": "framework-master"}
{"generate_results": [{"generate_code": "/** \n * Translate a MIME standard character set name into the Java equivalent.\n * @param charset The MIME standard name.\n * @return The Java equivalent for this name.\n */\n\nprivate static String javaCharset(String charset){\n    if (charset.equals(\"ISO-8859-1\"))\n        return \"ISO-8859-1\";\n    if (charset.equals(\"ISO-8859-2\"))\n        return \"ISO-8859-2\";\n    if (charset.equals(\"ISO-8859-3\"))\n        return \"ISO-8859-3\";\n    if (charset.equals(\"ISO-8859-4\"))\n        return \"ISO-8859-4\";\n    if (charset.equals(\"ISO-8859-5\"))\n        return \"ISO-8859-5\";\n    if (charset.equals(\"ISO-8859-6\"))\n        return \"ISO-8859-6\";\n    if (charset.equals(\"ISO-8859-7\"))\n        return \"ISO-8859-7\";\n    if (charset.equals(\"ISO-8859-8\"))\n        return \"ISO-8859-8\";\n    if (charset.equals(\"ISO-8859-9\"))\n        return \"ISO-8859-9\";\n    if (charset.equals(\"ISO-8859-10\"))\n        return \"ISO-8859-10\";\n    if (charset.equals(\"ISO-8859-11\"))\n        return \"ISO-8859-11\";\n    if (charset.equals(\"ISO-8859-13\"))\n        return \"ISO-8859-13\";\n    if (charset.equals(\"ISO-8859-14\"))\n        return \"ISO-8859-14\";\n    if (charset.equals(\"ISO-8859-15\"))\n        return \"ISO-8859-15\";\n    if (charset.equals(\"ISO-8859-16\"))\n        return \"ISO-8859-16\";\n    if (charset.equals(\"ISO-8859-2\"))\n        return \"ISO-8859-2\";\n    if (charset.equals(\"ISO-8859-3\"))\n        return \"ISO-8859-3\";\n    if (charset.equals(\"ISO-8859-4\"))\n        return \"ISO-8859-4\";\n    if (charset.equals(\"ISO-8859-5\"))\n        return \"ISO-8859-5\";\n    if (charset.equals(\"ISO-8859-6\"))\n        return \"ISO-8859-6\";\n    if (charset.equals(\"ISO-8859-7\"))\n        return \"ISO-8859-7\";\n    if (charset.equals(\"ISO-8859-8\"))\n        return \"ISO-8859-8\";\n    if (charset.equals(\"ISO-8859-9\"))\n        return \"ISO-8859-9\";\n    if (charset.equals(\"ISO-8859-10\"))\n        return \"ISO-8859-10\";\n    if (charset.equals(\"ISO-8859-11\"))\n        return \"ISO-8859-11\";\n    if (charset.equals(\"ISO-8859-13\"))\n        return \"ISO-8859-13\";\n    if (charset.equals(\"ISO-8859-14\"))\n        return \"ISO-8859-14\";\n    if (charset.equals(\"ISO-8859-15\"))\n        return \"ISO-8859-15\";\n    if (charset.equals(\"ISO-8859-16\"))\n        return \"ISO-8859-16\";\n    if (charset.equals(\"ISO-IR-165\"))\n        return \"ISO-IR-165\";\n    if (charset.equals(\"ISO-IR-216\"))\n        return \"ISO-IR-216\";\n    if (charset.equals(\"ISO-IR-233\"))\n        return \"ISO-IR-233\";\n    if (charset.equals(\"ISO-IR-237\"))\n        return \"ISO-IR-237\";\n    if (charset.equals(\"ISO-IR-258\"))\n", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Translate a MIME standard character set name into the Java equivalent.\n * @param charset The MIME standard name.\n * @return The Java equivalent for this name.\n */\n", "method_name": "javaCharset", "codes": ["/** \n * Translate a MIME standard character set name into the Java equivalent.\n * @param charset The MIME standard name.\n * @return The Java equivalent for this name.\n */\n\nprivate static String javaCharset(String charset){\n    if (charset.equals(\"ISO-8859-1\"))\n        return \"ISO-8859-1\";\n    if (charset.equals(\"ISO-8859-2\"))\n        return \"ISO-8859-2\";\n    if (charset.equals(\"ISO-8859-3\"))\n        return \"ISO-8859-3\";\n    if (charset.equals(\"ISO-8859-4\"))\n        return \"ISO-8859-4\";\n    if (charset.equals(\"ISO-8859-5\"))\n        return \"ISO-8859-5\";\n    if (charset.equals(\"ISO-8859-6\"))\n        return \"ISO-8859-6\";\n    if (charset.equals(\"ISO-8859-7\"))\n        return \"ISO-8859-7\";\n    if (charset.equals(\"ISO-8859-8\"))\n        return \"ISO-8859-8\";\n    if (charset.equals(\"ISO-8859-9\"))\n        return \"ISO-8859-9\";\n    if (charset.equals(\"ISO-8859-10\"))\n        return \"ISO-8859-10\";\n    if (charset.equals(\"ISO-8859-11\"))\n        return \"ISO-8859-11\";\n    if (charset.equals(\"ISO-8859-13\"))\n        return \"ISO-8859-13\";\n    if (charset.equals(\"ISO-8859-14\"))\n        return \"ISO-8859-14\";\n    if (charset.equals(\"ISO-8859-15\"))\n        return \"ISO-8859-15\";\n    if (charset.equals(\"ISO-8859-16\"))\n        return \"ISO-8859-16\";\n    if (charset.equals(\"ISO-8859-2\"))\n        return \"ISO-8859-2\";\n    if (charset.equals(\"ISO-8859-3\"))\n        return \"ISO-8859-3\";\n    if (charset.equals(\"ISO-8859-4\"))\n        return \"ISO-8859-4\";\n    if (charset.equals(\"ISO-8859-5\"))\n        return \"ISO-8859-5\";\n    if (charset.equals(\"ISO-8859-6\"))\n        return \"ISO-8859-6\";\n    if (charset.equals(\"ISO-8859-7\"))\n        return \"ISO-8859-7\";\n    if (charset.equals(\"ISO-8859-8\"))\n        return \"ISO-8859-8\";\n    if (charset.equals(\"ISO-8859-9\"))\n        return \"ISO-8859-9\";\n    if (charset.equals(\"ISO-8859-10\"))\n        return \"ISO-8859-10\";\n    if (charset.equals(\"ISO-8859-11\"))\n        return \"ISO-8859-11\";\n    if (charset.equals(\"ISO-8859-13\"))\n        return \"ISO-8859-13\";\n    if (charset.equals(\"ISO-8859-14\"))\n        return \"ISO-8859-14\";\n    if (charset.equals(\"ISO-8859-15\"))\n        return \"ISO-8859-15\";\n    if (charset.equals(\"ISO-8859-16\"))\n        return \"ISO-8859-16\";\n    if (charset.equals(\"ISO-IR-165\"))\n        return \"ISO-IR-165\";\n    if (charset.equals(\"ISO-IR-216\"))\n        return \"ISO-IR-216\";\n    if (charset.equals(\"ISO-IR-233\"))\n        return \"ISO-IR-233\";\n    if (charset.equals(\"ISO-IR-237\"))\n        return \"ISO-IR-237\";\n    if (charset.equals(\"ISO-IR-258\"))\n"], "code_level": "class_runnable", "_id": "636766f01a6d9265ec01763e", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "/** \n * Performs a right node rotation.\n * @param node a node to rotate\n * @return a new parent of the {@code node}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Performs a right node rotation.\n * @param node a node to rotate\n * @return a new parent of the {@code node}\n */\n", "method_name": "rotateRight", "codes": ["/** \n * Performs a right node rotation.\n * @param node a node to rotate\n * @return a new parent of the {@code node}"], "code_level": "file_runnable", "_id": "636767441a6d9265ec017cc1", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public static final <V>void swap(V[] arr,int i,int j){\n\tV temp = arr[i];\n\tarr[i] = arr[j];\n\tarr[j] = temp;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Swaps the two elements at the specified indices in the given array.\n * @param < V > the type of elements in the array\n * @param arr the array\n * @param i the index of the first element\n * @param j the index of the second element\n */\n", "method_name": "swap", "codes": ["public static final <V>void swap(V[] arr,int i,int j){\n\tV temp = arr[i];\n\tarr[i] = arr[j];\n\tarr[j] = temp;\n}"], "code_level": "self_contained", "_id": "636767551a6d9265ec017f3f", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public String get(){\n\t\t\treturn Integer.toString(start, end, step, step2, step3, step4, step5);\n\t\t}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Create a string supplier which returns unique strings. The returns strings are simply integers starting from start.\n * @param start where to start the sequence\n * @return a string supplier\n */\n", "method_name": "createStringSupplier", "codes": ["public String get(){\n\t\t\treturn Integer.toString(start, end, step, step2, step3, step4, step5);\n\t\t}"], "code_level": "slib_runnable", "_id": "6367675c1a6d9265ec018058", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public ListNode<E> previousNode(){\n    return null;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * {@inheritDoc}\n */\n", "method_name": "previousNode", "codes": ["public ListNode<E> previousNode(){\n    return null;\n}"], "code_level": "class_runnable", "_id": "636767501a6d9265ec017e86", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public static long factorial(int n){\n\tif(n == 0) return 1;\n\tif(n == 1) return 1;\n\treturn n * factorial(n - 1);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Calculate the factorial of $n$.\n * @param n the input number\n * @return the factorial\n */\n", "method_name": "factorial", "codes": ["public static long factorial(int n){\n\tif(n == 0) return 1;\n\tif(n == 1) return 1;\n\treturn n * factorial(n - 1);\n}"], "code_level": "self_contained", "_id": "636767581a6d9265ec017fc4", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "/** \n * Remove the non null  {@code node}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Remove the non null  {@code node} from the list. \n */\n", "method_name": "unlink", "codes": ["/** \n * Remove the non null  {@code node}"], "code_level": "class_runnable", "_id": "636767631a6d9265ec018171", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public static final <V>void reverse(V[] arr,int from,int to){\n\tfor(int i=from;i<to;i++){\n\t\tswap(arr,i,to-1);\n\t}\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Reverses the order of the elements in the specified range within the given array.\n * @param < V > the type of elements in the array\n * @param arr the array\n * @param from the index of the first element (inclusive) inside the range to reverse\n * @param to the index of the last element (inclusive) inside the range to reverse\n */\n", "method_name": "reverse", "codes": ["public static final <V>void reverse(V[] arr,int from,int to){\n\tfor(int i=from;i<to;i++){\n\t\tswap(arr,i,to-1);\n\t}\n}"], "code_level": "class_runnable", "_id": "636767491a6d9265ec017d90", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "/** \n * Atomically moves all  {@link ListNode ListNodes}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Atomically moves all  {@link ListNode ListNodes} from {@code list} to this list as if eachnode was removed with  {@link #removeListNode(ListNodeImpl)} from {@code list} andsubsequently added to this list by  {@link #addListNode(ListNodeImpl)}.\n */\n", "method_name": "moveAllListNodes", "codes": ["/** \n * Atomically moves all  {@link ListNode ListNodes}"], "code_level": "class_runnable", "_id": "6367674a1a6d9265ec017da9", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public static <V,E>IsomorphicGraphMapping<V,E> identity(Graph<V,E> graph){\n\treturn new IsomorphicGraphMapping<V,E>(graph);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Computes an identity automorphism (i.e. a self-mapping of a graph in which each vertex also maps to itself).\n * @param graph the input graph\n * @param < V > the graph vertex type\n * @param < E > the graph edge type\n * @return a mapping from graph to graph\n */\n", "method_name": "identity", "codes": ["public static <V,E>IsomorphicGraphMapping<V,E> identity(Graph<V,E> graph){\n\treturn new IsomorphicGraphMapping<V,E>(graph);\n}"], "code_level": "project_runnable", "_id": "6367675f1a6d9265ec0180d3", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public void generateGraph(Graph<V,E> target,Map<String,V> resultMap){\n\t\n\t// create the graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Construct a complete bipartite graph\n */\n", "method_name": "generateGraph", "codes": ["public void generateGraph(Graph<V,E> target,Map<String,V> resultMap){\n\t\n\t// create the graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,null);\n\t\n\t// create the bipartite graph\n\ttarget.addEdge(null,"], "code_level": "class_runnable", "_id": "636767641a6d9265ec01817d", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "/** \n * Inserts this bucket in the data structure before the  {@code bucket}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Inserts this bucket in the data structure before the  {@code bucket}.\n * @param bucket the bucket, that will be the next to this bucket.\n */\n", "method_name": "insertBefore", "codes": ["/** \n * Inserts this bucket in the data structure before the  {@code bucket}"], "code_level": "class_runnable", "_id": "636767531a6d9265ec017efb", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public boolean hasNext(){\n\treturn m_visited.size() > 0;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Checks whether there exist unvisited vertices.\n * @return true if there exist unvisited vertices.\n */\n", "method_name": "hasNext", "codes": ["public boolean hasNext(){\n\treturn m_visited.size() > 0;\n}"], "code_level": "class_runnable", "_id": "636767561a6d9265ec017f63", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "/** \n * Removes this bucket from the data structure.\n */\n\nvoid removeSelf(){\n    if(!bucket){\n        return;\n    }\n    bucket->next=bucket->prev=NULL;\n    bucket=NULL;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Removes this bucket from the data structure.\n */\n", "method_name": "removeSelf", "codes": ["/** \n * Removes this bucket from the data structure.\n */\n\nvoid removeSelf(){\n    if(!bucket){\n        return;\n    }\n    bucket->next=bucket->prev=NULL;\n    bucket=NULL;\n}"], "code_level": "class_runnable", "_id": "6367675a1a6d9265ec018010", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "/** \n * Compute all vertices that have positive degree by iterating over the edges on purpose. This keeps the complexity to $O(m)$ where $m$ is the number of edges.\n * @return set of vertices with positive degree\n */\n\nprivate Set<V> initVisibleVertices(){\n\tSet<V> vertices = new HashSet<V>();\n\tfor(V vertex : graph.getVertices()){\n\t\tif(graph.getEdgeWeight(vertex) > 0){\n\t\t\tvertices.add(vertex);\n\t\t}\n\t}\n\treturn vertices;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Compute all vertices that have positive degree by iterating over the edges on purpose. This keeps the complexity to $O(m)$ where $m$ is the number of edges.\n * @return set of vertices with positive degree\n */\n", "method_name": "initVisibleVertices", "codes": ["/** \n * Compute all vertices that have positive degree by iterating over the edges on purpose. This keeps the complexity to $O(m)$ where $m$ is the number of edges.\n * @return set of vertices with positive degree\n */\n\nprivate Set<V> initVisibleVertices(){\n\tSet<V> vertices = new HashSet<V>();\n\tfor(V vertex : graph.getVertices()){\n\t\tif(graph.getEdgeWeight(vertex) > 0){\n\t\t\tvertices.add(vertex);\n\t\t}\n\t}\n\treturn vertices;\n}"], "code_level": "class_runnable", "_id": "6367674b1a6d9265ec017dc0", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public void removeFromTreeEdgeList(){\n\tif(this.treeEdgeList.size() == 0){\n\t\treturn;\n\t}\n\tthis.treeEdgeList.remove(this);\n\tthis.treeEdgeList.remove(this);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Removes this edge from both doubly linked lists of tree edges.\n */\n", "method_name": "removeFromTreeEdgeList", "codes": ["public void removeFromTreeEdgeList(){\n\tif(this.treeEdgeList.size() == 0){\n\t\treturn;\n\t}\n\tthis.treeEdgeList.remove(this);\n\tthis.treeEdgeList.remove(this);\n}"], "code_level": "class_runnable", "_id": "6367675c1a6d9265ec01805b", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "/** \n * Add an edge to the index.\n * @param sourceVertex the source vertex\n * @param targetVertex the target vertex\n * @param e the edge\n */\n\nprotected void addToIndex(V sourceVertex,V targetVertex,E e){\n\tif(e.getSource().equals(sourceVertex)){\n\t\tindex.add(targetVertex);\n\t}\n\telse{\n\t\tindex.add(sourceVertex);\n\t\tindex.add(targetVertex);\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Add an edge to the index.\n * @param sourceVertex the source vertex\n * @param targetVertex the target vertex\n * @param e the edge\n */\n", "method_name": "addToIndex", "codes": ["/** \n * Add an edge to the index.\n * @param sourceVertex the source vertex\n * @param targetVertex the target vertex\n * @param e the edge\n */\n\nprotected void addToIndex(V sourceVertex,V targetVertex,E e){\n\tif(e.getSource().equals(sourceVertex)){\n\t\tindex.add(targetVertex);\n\t}\n\telse{\n\t\tindex.add(sourceVertex);\n\t\tindex.add(targetVertex);\n\t}\n}"], "code_level": "class_runnable", "_id": "636767601a6d9265ec0180fd", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public static Pair<Box2D,Box2D> splitAlongXAxis(Box2D box){\n\tBox2D left = box.getMinX();\n\tBox2D right = box.getMaxX();\n\t\n\tif(left.getX() < right.getX()){\n\t\tleft = left.getMinX();\n\t\tright = right.getMaxX();\n\t}\n\t\n\treturn new Pair<Box2D,Box2D>(new Box2D(left,right),new Box2D(left,right));\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Split a box along the x axis into two equal boxes.\n * @param box the box to split\n * @return a pair with the two resulting boxes\n */\n", "method_name": "splitAlongXAxis", "codes": ["public static Pair<Box2D,Box2D> splitAlongXAxis(Box2D box){\n\tBox2D left = box.getMinX();\n\tBox2D right = box.getMaxX();\n\t\n\tif(left.getX() < right.getX()){\n\t\tleft = left.getMinX();\n\t\tright = right.getMaxX();\n\t}\n\t\n\treturn new Pair<Box2D,Box2D>(new Box2D(left,right),new Box2D(left,right));\n}"], "code_level": "project_runnable", "_id": "636767521a6d9265ec017ecc", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public static boolean equals(Point2D p1,Point2D p2){\n\t\n\treturn (Math.abs(p1.getX()-p2.getX())<=1e-9 && Math.abs(p1.getY()-p2.getY())<=1e-9);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Compare two points for equality using tolerance 1e-9.\n * @param p1 the first point\n * @param p2 the second point\n * @return whether the two points are equal or not\n */\n", "method_name": "equals", "codes": ["public static boolean equals(Point2D p1,Point2D p2){\n\t\n\treturn (Math.abs(p1.getX()-p2.getX())<=1e-9 && Math.abs(p1.getY()-p2.getY())<=1e-9);\n}"], "code_level": "project_runnable", "_id": "636767531a6d9265ec017ef1", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public int compare(Double o1,Double o2){\n\treturn Double.compare(o1,o2);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Compares two floating point values. Returns 0 if they are equal, -1 if  {@literal o1 < o2}, 1 otherwise\n * @param o1 the first value\n * @param o2 the second value\n * @return 0 if they are equal, -1 if {@literal o1 < o2}, 1 otherwise\n */\n", "method_name": "compare", "codes": ["public int compare(Double o1,Double o2){\n\treturn Double.compare(o1,o2);\n}"], "code_level": "slib_runnable", "_id": "6367674a1a6d9265ec017dab", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public String toString(){\n\tString s = \"\";\n\tfor(int i = 0; i < size(); i++){\n\t\ts += \" \" + get(i);\n\t}\n\treturn s;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns a textual representation of the queue.\n * @return a textual representation of the queue.\n */\n", "method_name": "toString", "codes": ["public String toString(){\n\tString s = \"\";\n\tfor(int i = 0; i < size(); i++){\n\t\ts += \" \" + get(i);\n\t}\n\treturn s;\n}"], "code_level": "class_runnable", "_id": "6367674f1a6d9265ec017e74", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "/** \n * Computes floor($\\log_2 (n)$) $+ 1$\n */\n\nprivate int computeBinaryLog(int n){\n\tint result = 0;\n\twhile(n > 0){\n\t\tresult += (n & 1);\n\t\tn >>= 1;\n\t}\n\treturn result;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Computes floor($\\log_2 (n)$) $+ 1$\n */\n", "method_name": "computeBinaryLog", "codes": ["/** \n * Computes floor($\\log_2 (n)$) $+ 1$\n */\n\nprivate int computeBinaryLog(int n){\n\tint result = 0;\n\twhile(n > 0){\n\t\tresult += (n & 1);\n\t\tn >>= 1;\n\t}\n\treturn result;\n}"], "code_level": "self_contained", "_id": "636767431a6d9265ec017c8d", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public double vertexWeight(Set<V> v){\n\tdouble sum = 0;\n\tfor (V v2 : v){\n\t\tsum += vertexWeight(v2);\n\t}\n\treturn sum;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Compute the sum of the weights entering a vertex\n * @param v the vertex\n * @return the sum of the weights entering a vertex\n */\n", "method_name": "vertexWeight", "codes": ["public double vertexWeight(Set<V> v){\n\tdouble sum = 0;\n\tfor (V v2 : v){\n\t\tsum += vertexWeight(v2);\n\t}\n\treturn sum;\n}"], "code_level": "class_runnable", "_id": "636767611a6d9265ec018106", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public Set<V> intersection(Set<V> set1,Set<V> set2){\n\tSet<V> result = new HashSet<V>();\n\tfor(V v : set1){\n\t\tif(set2.contains(v)){\n\t\t\tresult.add(v);\n\t\t}\n\t}\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Efficient way to compute the intersection between two sets\n * @param set1 set $1$\n * @param set2 set $2$\n * @return intersection of set $1$ and $2$\n */\n", "method_name": "intersection", "codes": ["public Set<V> intersection(Set<V> set1,Set<V> set2){\n\tSet<V> result = new HashSet<V>();\n\tfor(V v : set1){\n\t\tif(set2.contains(v)){\n\t\t\tresult.add(v);\n\t\t}\n\t}\n\treturn result;\n}"], "code_level": "slib_runnable", "_id": "636767611a6d9265ec018116", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "/** \n * Either finds and returns a circulator to the node on the boundary of the component, which satisfies the  {@code predicate}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Either finds and returns a circulator to the node on the boundary of the component, which satisfies the  {@code predicate} or returns a circulator to the {@code stop} node.\n * @param predicate the condition the desired node should satisfy\n * @param start the node to start the search from\n * @param stop the node to end the search with\n * @param dir the direction to start the traversal in\n * @return a circulator to the node satisfying the {@code predicate} or to the {@code stop} node\n */\n", "method_name": "selectOnOuterFace", "codes": ["/** \n * Either finds and returns a circulator to the node on the boundary of the component, which satisfies the  {@code predicate}"], "code_level": "class_runnable", "_id": "636767511a6d9265ec017eb6", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "/** \n * Returns an edge connecting previously returned node with node, which will be returned next. If either of the mentioned nodes is virtual, the edge will be incident to its real counterpart.\n * @return an edge from the current node to the next node\n */\n\nEdge edgeToNext(){\n\tEdge temp = new Edge();\n\ttemp.next = new Edge();\n\ttemp.next.next = new Edge();\n\ttemp.next.next.next = new Edge();\n\ttemp.next.next.next.next = new Edge();\n\ttemp.next.next.next.next.next = new Edge();\n\ttemp.next.next.next.next.next.next = new Edge();\n\ttemp.next.next.next.next.next.next.next = new Edge();\n\ttemp.next.next.next.next.next.next.next.next = new Edge();\n\ttemp.next.next.next.next.next.next.next.next.next.next = new Edge();\n\ttemp.next.next.next.next.next.next.next.next.next.next.next.next = new Edge();\n\ttemp.next.next.next.next.next.next.next.next.next.next.next.next.next.next = new Edge();\n\ttemp.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns an edge connecting previously returned node with node, which will be returned next. If either of the mentioned nodes is virtual, the edge will be incident to its real counterpart.\n * @return an edge from the current node to the next node\n */\n", "method_name": "edgeToNext", "codes": ["/** \n * Returns an edge connecting previously returned node with node, which will be returned next. If either of the mentioned nodes is virtual, the edge will be incident to its real counterpart.\n * @return an edge from the current node to the next node\n */\n\nEdge edgeToNext(){\n\tEdge temp = new Edge();\n\ttemp.next = new Edge();\n\ttemp.next.next = new Edge();\n\ttemp.next.next.next = new Edge();\n\ttemp.next.next.next.next = new Edge();\n\ttemp.next.next.next.next.next = new Edge();\n\ttemp.next.next.next.next.next.next = new Edge();\n\ttemp.next.next.next.next.next.next.next = new Edge();\n\ttemp.next.next.next.next.next.next.next.next = new Edge();\n\ttemp.next.next.next.next.next.next.next.next.next.next = new Edge();\n\ttemp.next.next.next.next.next.next.next.next.next.next.next.next = new Edge();\n\ttemp.next.next.next.next.next.next.next.next.next.next.next.next.next.next = new Edge();\n\ttemp.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next"], "code_level": "class_runnable", "_id": "6367675d1a6d9265ec018082", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "/** \n * Transform from a Set representation to a graph path.\n * @param tour a set containing the edges of the tour\n * @param graph the graph\n * @return a graph path\n */\n\nprotected GraphPath<V,E> edgeSetToTour(Set<E> tour,Graph<V,E> graph){\n\t\n\t// create a new graph path\n\tGraphPath<V,E> newPath = new GraphPath<V,E>(graph);\n\t\n\t// add the edges of the tour\n\tfor(E e : tour){\n\t\tnewPath.addEdge(e);\n\t}\n\t\n\treturn newPath;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Transform from a Set representation to a graph path.\n * @param tour a set containing the edges of the tour\n * @param graph the graph\n * @return a graph path\n */\n", "method_name": "edgeSetToTour", "codes": ["/** \n * Transform from a Set representation to a graph path.\n * @param tour a set containing the edges of the tour\n * @param graph the graph\n * @return a graph path\n */\n\nprotected GraphPath<V,E> edgeSetToTour(Set<E> tour,Graph<V,E> graph){\n\t\n\t// create a new graph path\n\tGraphPath<V,E> newPath = new GraphPath<V,E>(graph);\n\t\n\t// add the edges of the tour\n\tfor(E e : tour){\n\t\tnewPath.addEdge(e);\n\t}\n\t\n\treturn newPath;\n}"], "code_level": "class_runnable", "_id": "636767561a6d9265ec017f7c", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "/** \n * Moves all vertices from the bucket with label  {@code minLabel}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Moves all vertices from the bucket with label  {@code minLabel} to the bucket with label 0.Clears the bucket with label  {@code minLabel}. Updates the labeling accordingly.\n * @param bucketsByLabel the buckets vertices are stored in\n * @param labels the labels of the vertices\n * @param minLabel the minimum value of the non-empty bucket\n */\n", "method_name": "reload", "codes": ["/** \n * Moves all vertices from the bucket with label  {@code minLabel}"], "code_level": "self_contained", "_id": "636767641a6d9265ec018190", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "/** \n * {@inheritDoc}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * {@inheritDoc}\n */\n", "method_name": "provideNextVertex", "codes": ["/** \n * {@inheritDoc}"], "code_level": "class_runnable", "_id": "636767611a6d9265ec018112", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "/** \n * Computes the global separator list of the  {@code graph}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Computes the global separator list of the  {@code graph}. More precisely, for every edge $e$ in the $G = (V, E)$ computes list of minimal separators $S_e$ in the neighborhood of $e$ and then concatenates these lists. Note: the result may contain duplicates\n * @return the list of minimal separators of every edge $e$ in the inspected graph\n */\n", "method_name": "computeGlobalSeparatorList", "codes": ["/** \n * Computes the global separator list of the  {@code graph}"], "code_level": "class_runnable", "_id": "636767601a6d9265ec0180e2", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "/** \n * Computes a suffix sum of the  {@code bounds}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Computes a suffix sum of the  {@code bounds}. Returns computed suffix sum and the sum of all elements in the  {@code bounds list}.\n * @param bounds list of integers.\n * @return computed pair of suffix sum list and a sum of all elements.\n */\n", "method_name": "computeSuffixSum", "codes": ["/** \n * Computes a suffix sum of the  {@code bounds}"], "code_level": "project_runnable", "_id": "636767461a6d9265ec017d0e", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "/** \n * Finds a maximum lower bound for every key.\n * @param keys list of keys.\n * @return the computed key lower bounds.\n */\n\nprivate List<Integer> computeLowerBounds(List<K> keys){\n    List<Integer> lowerBounds = new ArrayList<Integer>();\n    for (K key : keys) {\n        lowerBounds.add(key.getLowerBound());\n    }\n    return lowerBounds;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Finds a maximum lower bound for every key.\n * @param keys list of keys.\n * @return the computed key lower bounds.\n */\n", "method_name": "computeLowerBounds", "codes": ["/** \n * Finds a maximum lower bound for every key.\n * @param keys list of keys.\n * @return the computed key lower bounds.\n */\n\nprivate List<Integer> computeLowerBounds(List<K> keys){\n    List<Integer> lowerBounds = new ArrayList<Integer>();\n    for (K key : keys) {\n        lowerBounds.add(key.getLowerBound());\n    }\n    return lowerBounds;\n}"], "code_level": "class_runnable", "_id": "636767431a6d9265ec017c88", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "/** \n * Finds a minimum lower bound for every key.\n * @param keys a list of keys.\n * @return the computed key upper bound.\n */\n\nprivate List<Integer> computeUpperBounds(List<K> keys){\n\tList<Integer> upperBounds = new ArrayList<Integer>();\n\tfor(K key: keys){\n\t\tupperBounds.add(key.getUpperBound());\n\t}\n\treturn upperBounds;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Finds a minimum lower bound for every key.\n * @param keys a list of keys.\n * @return the computed key upper bound.\n */\n", "method_name": "computeUpperBounds", "codes": ["/** \n * Finds a minimum lower bound for every key.\n * @param keys a list of keys.\n * @return the computed key upper bound.\n */\n\nprivate List<Integer> computeUpperBounds(List<K> keys){\n\tList<Integer> upperBounds = new ArrayList<Integer>();\n\tfor(K key: keys){\n\t\tupperBounds.add(key.getUpperBound());\n\t}\n\treturn upperBounds;\n}"], "code_level": "class_runnable", "_id": "636767581a6d9265ec017fb4", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "/** \n * Check whether the subgraph of <code>graph</code> induced by the given <code>vertices</code> is complete, i.e. a clique.\n * @param graph the graph.\n * @param vertices the vertices to induce the subgraph from.\n * @return true if the induced subgraph is a clique.\n */\n\nprivate static <V,E>boolean isClique(Graph<V,E> graph,Set<V> vertices){\n\t\n\t// Check whether the induced subgraph is a clique.\n\tif(graph.isComplete()){\n\t\treturn true;\n\t}\n\t\n\t// Check whether the induced subgraph is a clique.\n\tfor(V vertex:vertices){\n\t\tif(graph.getEdgeWeight(vertex,vertex)==0){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Check whether the subgraph of <code>graph</code> induced by the given <code>vertices</code> is complete, i.e. a clique.\n * @param graph the graph.\n * @param vertices the vertices to induce the subgraph from.\n * @return true if the induced subgraph is a clique.\n */\n", "method_name": "isClique", "codes": ["/** \n * Check whether the subgraph of <code>graph</code> induced by the given <code>vertices</code> is complete, i.e. a clique.\n * @param graph the graph.\n * @param vertices the vertices to induce the subgraph from.\n * @return true if the induced subgraph is a clique.\n */\n\nprivate static <V,E>boolean isClique(Graph<V,E> graph,Set<V> vertices){\n\t\n\t// Check whether the induced subgraph is a clique.\n\tif(graph.isComplete()){\n\t\treturn true;\n\t}\n\t\n\t// Check whether the induced subgraph is a clique.\n\tfor(V vertex:vertices){\n\t\tif(graph.getEdgeWeight(vertex,vertex)==0){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}"], "code_level": "class_runnable", "_id": "6367675f1a6d9265ec0180cf", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public int nonZeros(int row){\n\tint count = 0;\n\tfor (int i = 0; i < row; i++)\n\t\tif (data[i]!= 0)\n\t\t\tcount++;\n\treturn count;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Get the number of non-zero entries of a row.\n * @param row the row\n * @return the number of non-zero entries of a row\n */\n", "method_name": "nonZeros", "codes": ["public int nonZeros(int row){\n\tint count = 0;\n\tfor (int i = 0; i < row; i++)\n\t\tif (data[i]!= 0)\n\t\t\tcount++;\n\treturn count;\n}"], "code_level": "class_runnable", "_id": "636767511a6d9265ec017eb0", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "/** \n * Unescape a string DOT identifier.\n * @param input the input\n * @return the unescaped output\n */\n\nprivate String unescapeId(String input){\n\tStringBuffer output = new StringBuffer();\n\tint i = 0;\n\tint j = 0;\n\twhile(i < input.length()){\n\t\tif(input.charAt(i) == '.'){\n\t\t\toutput.append(input.charAt(++i));\n\t\t\tj = i;\n\t\t}\n\t\telse{\n\t\t\toutput.append(input.charAt(i));\n\t\t\ti++;\n\t\t}\n\t}\n\treturn output.toString();\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Unescape a string DOT identifier.\n * @param input the input\n * @return the unescaped output\n */\n", "method_name": "unescapeId", "codes": ["/** \n * Unescape a string DOT identifier.\n * @param input the input\n * @return the unescaped output\n */\n\nprivate String unescapeId(String input){\n\tStringBuffer output = new StringBuffer();\n\tint i = 0;\n\tint j = 0;\n\twhile(i < input.length()){\n\t\tif(input.charAt(i) == '.'){\n\t\t\toutput.append(input.charAt(++i));\n\t\t\tj = i;\n\t\t}\n\t\telse{\n\t\t\toutput.append(input.charAt(i));\n\t\t\ti++;\n\t\t}\n\t}\n\treturn output.toString();\n}"], "code_level": "class_runnable", "_id": "636767461a6d9265ec017d17", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "/** \n * Decodes octets to characters using the UTF-8 decoding and appends the characters to a StringBuffer.\n * @return the index to the next unchecked character in the string to decode\n */\n\nprivate static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){\n\tint c;\n\tint c1;\n\tint c2;\n\tint c3;\n\tint c4;\n\tint c5;\n\tint c6;\n\tint c7;\n\tint c8;\n\tint c9;\n\tint c10;\n\tint c11;\n\tint c12;\n\tint c13;\n\tint c14;\n\tint c15;\n\tint c16;\n\tint c17;\n\tint c18;\n\tint c19;\n\tint c20;\n\tint c21;\n\tint c22;\n\tint c23;\n\tint c24;\n\tint c25;\n\tint c26;\n\tint c27;\n\tint c28;\n\tint c29;\n\tint c30;\n\tint c31;\n\tint c32;\n\tint c33;\n\tint c34;\n\tint c35;\n\tint c36;\n\tint c37;\n\tint c38;\n\tint c39;\n\tint c40;\n\tint c41;\n\tint c42;\n\tint c43;\n\tint c44;\n\tint c45;\n\tint c46;\n\tint c47;\n\tint c48;\n\tint c49;\n\tint c50;\n\tint c51;\n\tint c52;\n\tint c53;\n\tint c54;\n\tint c55;\n\tint c56;\n\tint c57;\n\tint c58;\n\tint c59;\n\tint c60;\n\tint c61;\n\tint c62;\n\tint c63;\n\tint c64;\n\tint c65;\n\tint c66;\n\tint c67;\n\tint c68;\n\tint c69;\n\tint c70;\n\tint c71;\n\tint c72;\n\tint c73;\n\tint c74;\n\tint c75;\n\tint c76;\n\tint c77;\n\tint c78;\n\tint c79;\n\tint c80;\n\tint c81;\n\tint c82;\n\tint c83;\n\tint c84;\n\tint c85;\n\tint c86;\n\tint c87;\n\tint c88;\n\tint c89;\n\tint c90;\n\tint c91;\n\tint c92;\n\tint c93;\n\tint c94;\n\tint c95;\n\tint c96;\n\tint c97;\n\tint c98;\n\tint c99;\n\tint c100;\n\tint c101;\n\tint c102;\n\tint c103;\n\tint c104;\n\tint c105;\n\tint c106;\n\tint c107;\n\tint c108;\n\tint c109;\n\tint c110;\n\tint c111;\n\tint c112;\n\tint c113;\n\tint c114;\n\tint c115;\n\tint c116;\n\tint c117;\n\tint c118;\n\tint c119;\n\tint c120;\n\tint c121;\n\tint c122;\n\tint c123;\n\tint c124;\n\tint c125;\n\tint c126;\n\tint c127;\n\tint c128;\n\tint c129;\n\tint c130;\n\tint c131;\n\tint c132;\n\tint c133;\n\tint c134;\n\tint c135;\n\tint c136;\n\tint c137;\n\tint c138;\n\tint c139;\n\tint c140;\n\tint c141;\n\tint c142;\n\tint c143;\n\tint c144;\n\tint c145;\n\tint c146;\n\tint c147;\n\tint c148;\n\tint c149;\n\tint c150;\n\tint c151;\n\tint c152;\n\tint c153;\n\tint c154;\n\tint c155;\n\tint c156;\n\tint c157;\n\tint c158;\n\tint c159", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Decodes octets to characters using the UTF-8 decoding and appends the characters to a StringBuffer.\n * @return the index to the next unchecked character in the string to decode\n */\n", "method_name": "decodeOctets", "codes": ["/** \n * Decodes octets to characters using the UTF-8 decoding and appends the characters to a StringBuffer.\n * @return the index to the next unchecked character in the string to decode\n */\n\nprivate static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){\n\tint c;\n\tint c1;\n\tint c2;\n\tint c3;\n\tint c4;\n\tint c5;\n\tint c6;\n\tint c7;\n\tint c8;\n\tint c9;\n\tint c10;\n\tint c11;\n\tint c12;\n\tint c13;\n\tint c14;\n\tint c15;\n\tint c16;\n\tint c17;\n\tint c18;\n\tint c19;\n\tint c20;\n\tint c21;\n\tint c22;\n\tint c23;\n\tint c24;\n\tint c25;\n\tint c26;\n\tint c27;\n\tint c28;\n\tint c29;\n\tint c30;\n\tint c31;\n\tint c32;\n\tint c33;\n\tint c34;\n\tint c35;\n\tint c36;\n\tint c37;\n\tint c38;\n\tint c39;\n\tint c40;\n\tint c41;\n\tint c42;\n\tint c43;\n\tint c44;\n\tint c45;\n\tint c46;\n\tint c47;\n\tint c48;\n\tint c49;\n\tint c50;\n\tint c51;\n\tint c52;\n\tint c53;\n\tint c54;\n\tint c55;\n\tint c56;\n\tint c57;\n\tint c58;\n\tint c59;\n\tint c60;\n\tint c61;\n\tint c62;\n\tint c63;\n\tint c64;\n\tint c65;\n\tint c66;\n\tint c67;\n\tint c68;\n\tint c69;\n\tint c70;\n\tint c71;\n\tint c72;\n\tint c73;\n\tint c74;\n\tint c75;\n\tint c76;\n\tint c77;\n\tint c78;\n\tint c79;\n\tint c80;\n\tint c81;\n\tint c82;\n\tint c83;\n\tint c84;\n\tint c85;\n\tint c86;\n\tint c87;\n\tint c88;\n\tint c89;\n\tint c90;\n\tint c91;\n\tint c92;\n\tint c93;\n\tint c94;\n\tint c95;\n\tint c96;\n\tint c97;\n\tint c98;\n\tint c99;\n\tint c100;\n\tint c101;\n\tint c102;\n\tint c103;\n\tint c104;\n\tint c105;\n\tint c106;\n\tint c107;\n\tint c108;\n\tint c109;\n\tint c110;\n\tint c111;\n\tint c112;\n\tint c113;\n\tint c114;\n\tint c115;\n\tint c116;\n\tint c117;\n\tint c118;\n\tint c119;\n\tint c120;\n\tint c121;\n\tint c122;\n\tint c123;\n\tint c124;\n\tint c125;\n\tint c126;\n\tint c127;\n\tint c128;\n\tint c129;\n\tint c130;\n\tint c131;\n\tint c132;\n\tint c133;\n\tint c134;\n\tint c135;\n\tint c136;\n\tint c137;\n\tint c138;\n\tint c139;\n\tint c140;\n\tint c141;\n\tint c142;\n\tint c143;\n\tint c144;\n\tint c145;\n\tint c146;\n\tint c147;\n\tint c148;\n\tint c149;\n\tint c150;\n\tint c151;\n\tint c152;\n\tint c153;\n\tint c154;\n\tint c155;\n\tint c156;\n\tint c157;\n\tint c158;\n\tint c159"], "code_level": "class_runnable", "_id": "6367667f1a6d9265ec017457", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public static List<PathSegmentImpl> decodePath(URI u,boolean decode){\n\tList<PathSegmentImpl> result = new ArrayList<PathSegmentImpl>();\n\tif (u.isAbsolute()){\n\t\tresult.add(new PathSegmentImpl(u.getScheme(),u.getRawSchemeSpecificPart()));\n\t}\n\telse{\n\t\tString path = u.getRawPath();\n\t\tint i = path.indexOf(':');\n\t\tif (i>0){\n\t\t\tString scheme = path.substring(0,i);\n\t\t\tString pathPart = path.substring(i+1);\n\t\t\tresult.add(new PathSegmentImpl(scheme,pathPart));\n\t\t}\n\t}\n\treturn result;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Decode the path component of a URI as path segments.\n * @param u the URI. If the path component is an absolute path componentthen the leading '/' is ignored and is not considered a delimiator of a path segment.\n * @param decode true if the path segments of the path componentshould be in decoded form.\n * @return the list of path segments.\n */\n", "method_name": "decodePath", "codes": ["public static List<PathSegmentImpl> decodePath(URI u,boolean decode){\n\tList<PathSegmentImpl> result = new ArrayList<PathSegmentImpl>();\n\tif (u.isAbsolute()){\n\t\tresult.add(new PathSegmentImpl(u.getScheme(),u.getRawSchemeSpecificPart()));\n\t}\n\telse{\n\t\tString path = u.getRawPath();\n\t\tint i = path.indexOf(':');\n\t\tif (i>0){\n\t\t\tString scheme = path.substring(0,i);\n\t\t\tString pathPart = path.substring(i+1);\n\t\t\tresult.add(new PathSegmentImpl(scheme,pathPart));\n\t\t}\n\t}\n\treturn result;\n}"], "code_level": "slib_runnable", "_id": "6367667f1a6d9265ec01745d", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public final MatchResult match(CharSequence uri){\n\treturn match(uri, null);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Match a URI against the pattern.\n * @param uri the uri to match against the template.\n * @return the match result, otherwise null if no match occurs.\n */\n", "method_name": "match", "codes": ["public final MatchResult match(CharSequence uri){\n\treturn match(uri, null);\n}"], "code_level": "project_runnable", "_id": "636766861a6d9265ec01755a", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public final boolean isTemplateVariablePresent(String name){\n\treturn templateVariables.containsKey(name);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Ascertain if a template variable is a member of this template.\n * @param name name The template variable.\n * @return true if the template variable is a member of the template, otherwisefalse.\n */\n", "method_name": "isTemplateVariablePresent", "codes": ["public final boolean isTemplateVariablePresent(String name){\n\treturn templateVariables.containsKey(name);\n}"], "code_level": "class_runnable", "_id": "636766861a6d9265ec017553", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public static String encodeTemplateNames(String s){\n\tStringBuffer sb = new StringBuffer();\n\tint i = 0;\n\twhile(i < s.length()){\n\t\tif(s.charAt(i) == '{'){\n\t\t\tsb.append(\"%\");\n\t\t\ti++;\n\t\t\twhile(i < s.length() && s.charAt(i)!= '}'){\n\t\t\t\tsb.append(s.charAt(i));\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tsb.append(\"}\");\n\t\t}\n\t\telse if(s.charAt(i) == '}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Encodes a string with template parameters names present, specifically the characters '{' and '}' will be percent-encoded.\n * @param s the string with zero or more template parameters names\n * @return the string with encoded template parameters names.\n */\n", "method_name": "encodeTemplateNames", "codes": ["public static String encodeTemplateNames(String s){\n\tStringBuffer sb = new StringBuffer();\n\tint i = 0;\n\twhile(i < s.length()){\n\t\tif(s.charAt(i) == '{'){\n\t\t\tsb.append(\"%\");\n\t\t\ti++;\n\t\t\twhile(i < s.length() && s.charAt(i)!= '}'){\n\t\t\t\tsb.append(s.charAt(i));\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tsb.append(\"}\");\n\t\t}\n\t\telse if(s.charAt(i) == '}"], "code_level": "self_contained", "_id": "636766801a6d9265ec017487", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public static void addToClassPath(Vector<URL> cpV,String dir,String jarName){\n\t\n\t// get the classpath\n\tVector<URL> cp = (Vector<URL>) Classpath.getClasspath();\n\t\n\t// add the jar files\n\tfor (int i=0;i<cpV.size();i++){\n\t\t\n\t\t// get the jar file\n\t\tURL jar = cpV.elementAt(i);\n\t\t\n\t\t// add the jar file to the classpath\n\t\tcp.addElement(jar);\n\t\t\n\t\t// add the jar file to the classpath\n\t\tcp.addElement(jar);\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Add all the jar files in a dir to the classpath, represented as a Vector of URLs.\n */\n", "method_name": "addToClassPath", "codes": ["public static void addToClassPath(Vector<URL> cpV,String dir,String jarName){\n\t\n\t// get the classpath\n\tVector<URL> cp = (Vector<URL>) Classpath.getClasspath();\n\t\n\t// add the jar files\n\tfor (int i=0;i<cpV.size();i++){\n\t\t\n\t\t// get the jar file\n\t\tURL jar = cpV.elementAt(i);\n\t\t\n\t\t// add the jar file to the classpath\n\t\tcp.addElement(jar);\n\t\t\n\t\t// add the jar file to the classpath\n\t\tcp.addElement(jar);\n\t}\n}"], "code_level": "class_runnable", "_id": "6367667f1a6d9265ec01745c", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public static String decapitalize(String name){\n\treturn Introspector.decapitalize(name);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Reverse of Introspector.decapitalize\n */\n", "method_name": "capitalize", "codes": ["public static String decapitalize(String name){\n\treturn Introspector.decapitalize(name);\n}"], "code_level": "slib_runnable", "_id": "636766821a6d9265ec0174bf", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public static String unescapeJava(String str) throws Exception {\n\tif (str == null) {\n\t\treturn null;\n\t}\n\t\n\tif (str.length() == 0) {\n\t\treturn \"\";\n\t}\n\t\n\tStringBuilder sb = new StringBuilder();\n\tint i = 0;\n\tint j = 0;\n\tint length = str.length();\n\t\n\twhile (i < length) {\n\t\tif (str.charAt(i) == '\\\\') {\n\t\t\tif (j == 0) {\n\t\t\t\tsb.append(str.charAt(i+1));\n\t\t\t\ti += 2;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tswitch (str.charAt(i+1)) {\n\t\t\t\tcase 'b':\n\t\t\t\t\tsb.append('\\b');\n\t\t\t\t\ti += 2;\n\t\t\t\t\tcontinue;\n\t\t\t\tcase 'f':\n\t\t\t\t\tsb.append('\\f');\n\t\t\t\t\ti += 2;\n\t\t\t\t\tcontinue;\n\t\t\t\tcase 'n':\n\t\t\t\t\tsb.append('\\n');\n\t\t\t\t\ti += 2;\n\t\t\t\t\tcontinue;\n\t\t\t\tcase 'r':\n\t\t\t\t\tsb.append('\\r');\n\t\t\t\t\ti += 2;\n\t\t\t\t\tcontinue;\n\t\t\t\tcase 't':\n\t\t\t\t\tsb.append('\\t');\n\t\t\t\t\ti += 2;\n\t\t\t\t\tcontinue;\n\t\t\t\tcase 'u':\n\t\t\t\t\tsb.append((char)Integer.parseInt(str.substring(i+4, i+8), 16));\n\t\t\t\t\ti += 8;\n\t\t\t\t\tcontinue;\n\t\t\t\tcase '\\\\':\n\t\t\t\t\tsb.append('\\\\');\n\t\t\t\t\ti += 2;\n\t\t\t\t\tcontinue;\n\t\t\t\tdefault:\n\t\t\t\t\tsb.append(str.charAt(i));\n\t\t\t\t\ti++;\n\t\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsb.append(str.charAt(i));\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\treturn sb.toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Unescapes any Java literals found in the <code>String</code>. For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code> into a newline character, unless the <code>'\\'</code> is preceded by another <code>'\\'</code>.</p>\n * @param str the <code>String</code> to unescape, may be null\n * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n */\n", "method_name": "unescapeJava", "codes": ["public static String unescapeJava(String str) throws Exception {\n\tif (str == null) {\n\t\treturn null;\n\t}\n\t\n\tif (str.length() == 0) {\n\t\treturn \"\";\n\t}\n\t\n\tStringBuilder sb = new StringBuilder();\n\tint i = 0;\n\tint j = 0;\n\tint length = str.length();\n\t\n\twhile (i < length) {\n\t\tif (str.charAt(i) == '\\\\') {\n\t\t\tif (j == 0) {\n\t\t\t\tsb.append(str.charAt(i+1));\n\t\t\t\ti += 2;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tswitch (str.charAt(i+1)) {\n\t\t\t\tcase 'b':\n\t\t\t\t\tsb.append('\\b');\n\t\t\t\t\ti += 2;\n\t\t\t\t\tcontinue;\n\t\t\t\tcase 'f':\n\t\t\t\t\tsb.append('\\f');\n\t\t\t\t\ti += 2;\n\t\t\t\t\tcontinue;\n\t\t\t\tcase 'n':\n\t\t\t\t\tsb.append('\\n');\n\t\t\t\t\ti += 2;\n\t\t\t\t\tcontinue;\n\t\t\t\tcase 'r':\n\t\t\t\t\tsb.append('\\r');\n\t\t\t\t\ti += 2;\n\t\t\t\t\tcontinue;\n\t\t\t\tcase 't':\n\t\t\t\t\tsb.append('\\t');\n\t\t\t\t\ti += 2;\n\t\t\t\t\tcontinue;\n\t\t\t\tcase 'u':\n\t\t\t\t\tsb.append((char)Integer.parseInt(str.substring(i+4, i+8), 16));\n\t\t\t\t\ti += 8;\n\t\t\t\t\tcontinue;\n\t\t\t\tcase '\\\\':\n\t\t\t\t\tsb.append('\\\\');\n\t\t\t\t\ti += 2;\n\t\t\t\t\tcontinue;\n\t\t\t\tdefault:\n\t\t\t\t\tsb.append(str.charAt(i));\n\t\t\t\t\ti++;\n\t\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsb.append(str.charAt(i));\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\treturn sb.toString();\n}"], "code_level": "slib_runnable", "_id": "6367667d1a6d9265ec017401", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "/** \n * Helper to decode half of a hexadecimal number from a string.\n * @param c The ASCII character of the hexadecimal number to decode.Must be in the range  {@code [0-9a-fA-F]}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Helper to decode half of a hexadecimal number from a string.\n * @param c The ASCII character of the hexadecimal number to decode.Must be in the range  {@code [0-9a-fA-F]}.\n * @return The hexadecimal value represented in the ASCII charactergiven, or  {@link Character#MAX_VALUE} if the character is invalid.\n */\n", "method_name": "decodeHexNibble", "codes": ["/** \n * Helper to decode half of a hexadecimal number from a string.\n * @param c The ASCII character of the hexadecimal number to decode.Must be in the range  {@code [0-9a-fA-F]}"], "code_level": "slib_runnable", "_id": "636766851a6d9265ec01751b", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public static Class<?>[] resolveArguments(Type genericType,Class<?> targetType){\n\tif(genericType instanceof ParameterizedType){\n\t\tParameterizedType parameterizedType = (ParameterizedType) genericType;\n\t\tType[] typeArgs = parameterizedType.getActualTypeArguments();\n\t\tif(typeArgs.length == 1){\n\t\t\treturn typeArgs[0].getTypeArguments();\n\t\t}\n\t}\n\treturn null;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Resolves the arguments for the  {@code genericType} using the type variable information for the{@code targetType}. Returns  {@code null} if {@code genericType} is not parameterized or ifarguments cannot be resolved.\n */\n", "method_name": "resolveArguments", "codes": ["public static Class<?>[] resolveArguments(Type genericType,Class<?> targetType){\n\tif(genericType instanceof ParameterizedType){\n\t\tParameterizedType parameterizedType = (ParameterizedType) genericType;\n\t\tType[] typeArgs = parameterizedType.getActualTypeArguments();\n\t\tif(typeArgs.length == 1){\n\t\t\treturn typeArgs[0].getTypeArguments();\n\t\t}\n\t}\n\treturn null;\n}"], "code_level": "class_runnable", "_id": "636766821a6d9265ec0174b6", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public static Type resolveBound(TypeVariable<?> typeVariable){\n    return resolveBound(typeVariable, null);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Resolves the first bound for the  {@code typeVariable}, returning  {@code Unknown.class} if nonecan be resolved.\n */\n", "method_name": "resolveBound", "codes": ["public static Type resolveBound(TypeVariable<?> typeVariable){\n    return resolveBound(typeVariable, null);\n}"], "code_level": "slib_runnable", "_id": "6367667d1a6d9265ec01741d", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public static AtmosphereRequest wrap(HttpServletRequest request){\n\treturn new AtmosphereRequest(request);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Wrap an  {@link HttpServletRequest}.\n * @param request {@link HttpServletRequest}\n * @return an {@link AtmosphereRequest}\n */\n", "method_name": "wrap", "codes": ["public static AtmosphereRequest wrap(HttpServletRequest request){\n\treturn new AtmosphereRequest(request);\n}"], "code_level": "class_runnable", "_id": "636766821a6d9265ec0174d2", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public AtmosphereFramework removeAtmosphereHandler(String mapping){\n\treturn removeAtmosphereHandler(mapping,null);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Remove an  {@link AtmosphereHandler}.\n * @param mapping the mapping used when invoking {@link #addAtmosphereHandler(String,AtmosphereHandler)};\n * @return true if removed\n */\n", "method_name": "removeAtmosphereHandler", "codes": ["public AtmosphereFramework removeAtmosphereHandler(String mapping){\n\treturn removeAtmosphereHandler(mapping,null);\n}"], "code_level": "class_runnable", "_id": "6367667f1a6d9265ec017458", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "/** \n * Invoke the  {@link BroadcastFilter}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Invoke the  {@link BroadcastFilter}\n * @param msg\n * @return\n */\n", "method_name": "filter", "codes": ["/** \n * Invoke the  {@link BroadcastFilter}"], "code_level": "project_runnable", "_id": "636766821a6d9265ec0174b3", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "/** \n * <p> Checks in the specified list if there is at least one instance of the given {@link AtmosphereInterceptor interceptor}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * <p> Checks in the specified list if there is at least one instance of the given {@link AtmosphereInterceptor interceptor} implementation class.</p>\n * @param interceptorList the interceptors\n * @param c               the interceptor class\n * @return {@code false} if an instance of the class already exists in the list, {@code true} otherwise\n */\n", "method_name": "checkDuplicate", "codes": ["/** \n * <p> Checks in the specified list if there is at least one instance of the given {@link AtmosphereInterceptor interceptor}"], "code_level": "project_runnable", "_id": "636766811a6d9265ec017499", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public boolean hasBytes(){\n\treturn body.length() > 0;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * True is the body is a byte array\n * @return True is the body is a byte array\n */\n", "method_name": "hasBytes", "codes": ["public boolean hasBytes(){\n\treturn body.length() > 0;\n}"], "code_level": "class_runnable", "_id": "6367667c1a6d9265ec0173f7", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public static Meteor lookup(HttpServletRequest r){\n\treturn (Meteor)r.getAttribute(\"_meteor\");\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Retrieve an instance of  {@link Meteor} based on the {@link HttpServletRequest}.\n * @param r {@link HttpServletRequest}\n * @return a {@link Meteor} or null if not found\n */\n", "method_name": "lookup", "codes": ["public static Meteor lookup(HttpServletRequest r){\n\treturn (Meteor)r.getAttribute(\"_meteor\");\n}"], "code_level": "class_runnable", "_id": "6367667d1a6d9265ec0173ff", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public AtmosphereResource addEventListener(AtmosphereResourceEventListener e){\n\treturn addEventListener(e, null);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Add a  {@link AtmosphereResourceEventListener}.\n * @param e an instance of AtmosphereResourceEventListener\n */\n", "method_name": "addEventListener", "codes": ["public AtmosphereResource addEventListener(AtmosphereResourceEventListener e){\n\treturn addEventListener(e, null);\n}"], "code_level": "project_runnable", "_id": "6367667c1a6d9265ec0173fb", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public InputStream next() throws IOException {\n\treturn next(null);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Return the next  {@link java.io.File} object or {@code null} if no more files areavailable.\n */\n", "method_name": "next", "codes": ["public InputStream next() throws IOException {\n\treturn next(null);\n}"], "code_level": "class_runnable", "_id": "636766811a6d9265ec017496", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "/** \n * Returns the class path of the current JVM instance as an array of  {@link File}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns the class path of the current JVM instance as an array of  {@link File} objects.\n */\n", "method_name": "classPath", "codes": ["/** \n * Returns the class path of the current JVM instance as an array of  {@link File}"], "code_level": "slib_runnable", "_id": "636766821a6d9265ec0174c9", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public void readFrom(final InputStream in) throws IOException {\n  // Read the byte array\n  final byte[] buffer = new byte[BUFFER_SIZE];\n  int read = in.read(buffer);\n  if (read < 0) {\n    throw new EOFException(\"End of input stream reached\");\n  }\n  // Copy the data\n  System.arraycopy(buffer, 0, this.buffer, 0, read);\n  // Reset the read pointer\n  this.readPointer = 0;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Clear and fill the buffer of this  {@code ClassFileBuffer} with thesupplied byte stream. The read pointer is reset to the start of the byte array.\n */\n", "method_name": "readFrom", "codes": ["public void readFrom(final InputStream in) throws IOException {\n  // Read the byte array\n  final byte[] buffer = new byte[BUFFER_SIZE];\n  int read = in.read(buffer);\n  if (read < 0) {\n    throw new EOFException(\"End of input stream reached\");\n  }\n  // Copy the data\n  System.arraycopy(buffer, 0, this.buffer, 0, read);\n  // Reset the read pointer\n  this.readPointer = 0;\n}"], "code_level": "class_runnable", "_id": "636766801a6d9265ec017482", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "/** \n * Add the specified files in reverse order.\n */\n\nprivate void addReverse(final InputStream[] files){\n    for (int i = files.length - 1; i >= 0; i--) {\n        final InputStream in = files[i];\n        try {\n            final FileOutputStream out = new FileOutputStream(files[i]);\n            final byte[] buf = new byte[1024];\n            int len;\n            while ((len = in.read(buf)) > 0) {\n                out.write(buf, 0, len);\n            }\n            out.close();\n            in.close();\n        } catch (final IOException e) {\n            e.printStackTrace();\n        }\n    }\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Add the specified files in reverse order.\n */\n", "method_name": "addReverse", "codes": ["/** \n * Add the specified files in reverse order.\n */\n\nprivate void addReverse(final InputStream[] files){\n    for (int i = files.length - 1; i >= 0; i--) {\n        final InputStream in = files[i];\n        try {\n            final FileOutputStream out = new FileOutputStream(files[i]);\n            final byte[] buf = new byte[1024];\n            int len;\n            while ((len = in.read(buf)) > 0) {\n                out.write(buf, 0, len);\n            }\n            out.close();\n            in.close();\n        } catch (final IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"], "code_level": "class_runnable", "_id": "636766801a6d9265ec017477", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "/** \n * Add the specified files in reverse order.\n */\n\nprivate void addReverse(final File[] files){\n    for (int i = files.length - 1; i >= 0; i--){\n        File f = files[i];\n        if (f.isFile()){\n            if (f.getName().endsWith(\".java\")){\n                files[i] = new File(f.getParentFile(), f.getName().substring(0, f.getName().length() - 4));\n            }\n        }\n    }\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Add the specified files in reverse order.\n */\n", "method_name": "addReverse", "codes": ["/** \n * Add the specified files in reverse order.\n */\n\nprivate void addReverse(final File[] files){\n    for (int i = files.length - 1; i >= 0; i--){\n        File f = files[i];\n        if (f.isFile()){\n            if (f.getName().endsWith(\".java\")){\n                files[i] = new File(f.getParentFile(), f.getName().substring(0, f.getName().length() - 4));\n            }\n        }\n    }\n}"], "code_level": "class_runnable", "_id": "636766831a6d9265ec0174eb", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public long lastWriteTimeStampInMilliseconds(){\n\treturn lastWriteTimeStamp;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * The last time, in milliseconds, a write operation occurred.\n * @return this\n */\n", "method_name": "lastWriteTimeStampInMilliseconds", "codes": ["public long lastWriteTimeStampInMilliseconds(){\n\treturn lastWriteTimeStamp;\n}"], "code_level": "class_runnable", "_id": "6367667e1a6d9265ec01743a", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public Action inspect(AtmosphereResource r){\n\tif(r.getTransport() == null){\n\t\treturn Action.CONTINUE;\n\t}\n\tif(r.getTransport().equals(AtmosphereResource.TRANSPORT.HTTP)){\n\t\treturn Action.CONTINUE;\n\t}\n\treturn Action.CONTINUE;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Automatically suspend the  {@link AtmosphereResource} based on {@link AtmosphereResource.TRANSPORT} value.\n * @param r a {@link AtmosphereResource}\n * @return {@link Action#CONTINUE}\n */\n", "method_name": "inspect", "codes": ["public Action inspect(AtmosphereResource r){\n\tif(r.getTransport() == null){\n\t\treturn Action.CONTINUE;\n\t}\n\tif(r.getTransport().equals(AtmosphereResource.TRANSPORT.HTTP)){\n\t\treturn Action.CONTINUE;\n\t}\n\treturn Action.CONTINUE;\n}"], "code_level": "project_runnable", "_id": "636766851a6d9265ec017515", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public static String[] trimArrayElements(String[] array){\n\tint i = 0;\n\twhile(i < array.length){\n\t\tif(array[i] == null){\n\t\t\tarray[i] = \"\";\n\t\t}\n\t\tarray[i] = array[i].trim();\n\t\ti++;\n\t}\n\treturn array;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Trim the elements of the given String array, calling <code>String.trim()</code> on each of them.\n * @param array the original String array\n * @return the resulting array (of the same size) with trimmed elements\n */\n", "method_name": "trimArrayElements", "codes": ["public static String[] trimArrayElements(String[] array){\n\tint i = 0;\n\twhile(i < array.length){\n\t\tif(array[i] == null){\n\t\t\tarray[i] = \"\";\n\t\t}\n\t\tarray[i] = array[i].trim();\n\t\ti++;\n\t}\n\treturn array;\n}"], "code_level": "self_contained", "_id": "6367676d1a6d9265ec018229", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static int nullSafeHashCode(long[] array){\n\tif(array == null) return 0;\n\tint hash = 0;\n\tfor(int i = 0; i < array.length; i++){\n\t\thash = 31*hash + (int)(array[i]&0x7fffffff);\n\t}\n\treturn hash;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Return a hash code based on the contents of the specified array. If <code>array</code> is <code>null</code>, this method returns 0.\n * @param array the long array to obtain a hashcode\n * @return the long array's hashcode, which could be 0 if the array is null.\n */\n", "method_name": "nullSafeHashCode", "codes": ["public static int nullSafeHashCode(long[] array){\n\tif(array == null) return 0;\n\tint hash = 0;\n\tfor(int i = 0; i < array.length; i++){\n\t\thash = 31*hash + (int)(array[i]&0x7fffffff);\n\t}\n\treturn hash;\n}"], "code_level": "class_runnable", "_id": "636767691a6d9265ec0181aa", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static boolean startsWithIgnoreCase(String str,String prefix){\n\tif(str==null || prefix==null) return false;\n\treturn str.startsWith(prefix);\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Returns  {@code true} if the given string starts with the specified case-insensitive prefix, {@code false} otherwise.\n * @param str the String to check\n * @param prefix the prefix to look for\n * @return {@code true} if the given string starts with the specified case-insensitive prefix, {@code false} otherwise.\n * @see java.lang.String#startsWith\n */\n", "method_name": "startsWithIgnoreCase", "codes": ["public static boolean startsWithIgnoreCase(String str,String prefix){\n\tif(str==null || prefix==null) return false;\n\treturn str.startsWith(prefix);\n}"], "code_level": "self_contained", "_id": "6367676b1a6d9265ec0181df", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static Object findFirstMatch(Collection source,Collection candidates){\n\tif(source==null || candidates==null){\n\t\treturn null;\n\t}\n\tIterator it = candidates.iterator();\n\twhile(it.hasNext()){\n\t\tObject o = it.next();\n\t\tif(o!=null && o.toString().contains(source.toString())){\n\t\t\treturn o;\n\t\t}\n\t}\n\treturn null;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Return the first element in '<code>candidates</code>' that is contained in '<code>source</code>'. If no element in '<code>candidates</code>' is present in '<code>source</code>' returns <code>null</code>. Iteration order is {@link Collection} implementation specific.\n * @param source the source Collection\n * @param candidates the candidates to search for\n * @return the first present object, or <code>null</code> if not found\n */\n", "method_name": "findFirstMatch", "codes": ["public static Object findFirstMatch(Collection source,Collection candidates){\n\tif(source==null || candidates==null){\n\t\treturn null;\n\t}\n\tIterator it = candidates.iterator();\n\twhile(it.hasNext()){\n\t\tObject o = it.next();\n\t\tif(o!=null && o.toString().contains(source.toString())){\n\t\t\treturn o;\n\t\t}\n\t}\n\treturn null;\n}"], "code_level": "class_runnable", "_id": "6367676b1a6d9265ec0181e2", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static String trimTrailingWhitespace(String str){\n\tif (str == null) return null;\n\treturn str.trim();\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Trim trailing whitespace from the given String.\n * @param str the String to check\n * @return the trimmed String\n * @see java.lang.Character#isWhitespace\n */\n", "method_name": "trimTrailingWhitespace", "codes": ["public static String trimTrailingWhitespace(String str){\n\tif (str == null) return null;\n\treturn str.trim();\n}"], "code_level": "class_runnable", "_id": "6367676b1a6d9265ec0181ee", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static Object quoteIfString(Object obj){\n\tif (obj instanceof String){\n\t\treturn \"'\"+obj+\"'\";\n\t}\n\treturn obj;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Turn the given Object into a String with single quotes if it is a String; keeping the Object as-is else.\n * @param obj the input Object (e.g. \"myString\")\n * @return the quoted String (e.g. \"'myString'\"),or the input object as-is if not a String\n */\n", "method_name": "quoteIfString", "codes": ["public static Object quoteIfString(Object obj){\n\tif (obj instanceof String){\n\t\treturn \"'\"+obj+\"'\";\n\t}\n\treturn obj;\n}"], "code_level": "class_runnable", "_id": "6367676a1a6d9265ec0181bf", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static String trimLeadingWhitespace(String str){\n\tif (str == null) return null;\n\tint len = str.length();\n\tif (len == 0) return \"\";\n\t\n\t// Find the first whitespace character\n\tint start = 0;\n\twhile (start < len && Character.isWhitespace(str.charAt(start)))\n\t\tstart++;\n\t\n\t// Trim leading whitespace\n\treturn str.substring(start);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Trim leading whitespace from the given String.\n * @param str the String to check\n * @return the trimmed String\n * @see java.lang.Character#isWhitespace\n */\n", "method_name": "trimLeadingWhitespace", "codes": ["public static String trimLeadingWhitespace(String str){\n\tif (str == null) return null;\n\tint len = str.length();\n\tif (len == 0) return \"\";\n\t\n\t// Find the first whitespace character\n\tint start = 0;\n\twhile (start < len && Character.isWhitespace(str.charAt(start)))\n\t\tstart++;\n\t\n\t// Trim leading whitespace\n\treturn str.substring(start);\n}"], "code_level": "class_runnable", "_id": "6367676a1a6d9265ec0181cd", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static String[] toStringArray(Enumeration<String> enumeration){\n\tif (enumeration == null) return null;\n\tString[] result = new String[enumeration.count()];\n\tint i = 0;\n\twhile (enumeration.hasMoreElements()){\n\t\tresult[i++] = enumeration.nextElement();\n\t}\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Copy the given Enumeration into a String array. The Enumeration must contain String elements only.\n * @param enumeration the Enumeration to copy\n * @return the String array (<code>null</code> if the passed-inEnumeration was <code>null</code>)\n */\n", "method_name": "toStringArray", "codes": ["public static String[] toStringArray(Enumeration<String> enumeration){\n\tif (enumeration == null) return null;\n\tString[] result = new String[enumeration.count()];\n\tint i = 0;\n\twhile (enumeration.hasMoreElements()){\n\t\tresult[i++] = enumeration.nextElement();\n\t}\n\treturn result;\n}"], "code_level": "slib_runnable", "_id": "636767691a6d9265ec0181ae", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static String deleteAny(String inString,String charsToDelete){\n\tString result = \"\";\n\tfor(int i = 0; i < inString.length(); i++){\n\t\tif(inString.charAt(i) == charsToDelete.charAt(0)){\n\t\t\tresult = result + inString.substring(i+1,inString.length());\n\t\t}\n\t}\n\treturn result;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Delete any character in a given String.\n * @param inString the original String\n * @param charsToDelete a set of characters to delete.E.g. \"az\\n\" will delete 'a's, 'z's and new lines.\n * @return the resulting String\n */\n", "method_name": "deleteAny", "codes": ["public static String deleteAny(String inString,String charsToDelete){\n\tString result = \"\";\n\tfor(int i = 0; i < inString.length(); i++){\n\t\tif(inString.charAt(i) == charsToDelete.charAt(0)){\n\t\t\tresult = result + inString.substring(i+1,inString.length());\n\t\t}\n\t}\n\treturn result;\n}"], "code_level": "class_runnable", "_id": "6367676c1a6d9265ec01820b", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static boolean containsInstance(Collection collection,Object element){\n\tif(collection==null || element==null) return false;\n\tfor(Iterator iter=collection.iterator();iter.hasNext();){\n\t\tObject o=iter.next();\n\t\tif(o==element) return true;\n\t}\n\treturn false;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Check whether the given Collection contains the given element instance. <p>Enforces the given instance to be present, rather than returning <code>true</code> for an equal element as well.\n * @param collection the Collection to check\n * @param element the element to look for\n * @return <code>true</code> if found, <code>false</code> else\n */\n", "method_name": "containsInstance", "codes": ["public static boolean containsInstance(Collection collection,Object element){\n\tif(collection==null || element==null) return false;\n\tfor(Iterator iter=collection.iterator();iter.hasNext();){\n\t\tObject o=iter.next();\n\t\tif(o==element) return true;\n\t}\n\treturn false;\n}"], "code_level": "slib_runnable", "_id": "6367676c1a6d9265ec018223", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static String[] concatenateStringArrays(String[] array1,String[] array2){\n\tif (array1==null) return array2;\n\tif (array2==null) return array1;\n\tint length1=array1.length;\n\tint length2=array2.length;\n\tString[] result=new String[length1+length2];\n\tint index=0;\n\tfor (int i=0;i<length1;i++){\n\t\tresult[index]=array1[i];\n\t\tindex++;\n\t}\n\tfor (int i=0;i<length2;i++){\n\t\tresult[index]=array2[i];\n\t\tindex++;\n\t}\n\treturn result;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Concatenate the given String arrays into one, with overlapping array elements included twice. <p>The order of elements in the original arrays is preserved.\n * @param array1 the first array (can be <code>null</code>)\n * @param array2 the second array (can be <code>null</code>)\n * @return the new array (<code>null</code> if both given arrays were <code>null</code>)\n */\n", "method_name": "concatenateStringArrays", "codes": ["public static String[] concatenateStringArrays(String[] array1,String[] array2){\n\tif (array1==null) return array2;\n\tif (array2==null) return array1;\n\tint length1=array1.length;\n\tint length2=array2.length;\n\tString[] result=new String[length1+length2];\n\tint index=0;\n\tfor (int i=0;i<length1;i++){\n\t\tresult[index]=array1[i];\n\t\tindex++;\n\t}\n\tfor (int i=0;i<length2;i++){\n\t\tresult[index]=array2[i];\n\t\tindex++;\n\t}\n\treturn result;\n}"], "code_level": "slib_runnable", "_id": "6367676c1a6d9265ec018204", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static String[] addStringToArray(String[] array,String str){\n\tif (array == null) return new String[] { str };\n\tString[] newArray = new String[array.length+1];\n\tSystem.arraycopy(array, 0, newArray, 0, array.length);\n\tnewArray[array.length] = str;\n\treturn newArray;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Append the given String to the given String array, returning a new array consisting of the input array contents plus the given String.\n * @param array the array to append to (can be <code>null</code>)\n * @param str the String to append\n * @return the new array (never <code>null</code>)\n */\n", "method_name": "addStringToArray", "codes": ["public static String[] addStringToArray(String[] array,String str){\n\tif (array == null) return new String[] { str };\n\tString[] newArray = new String[array.length+1];\n\tSystem.arraycopy(array, 0, newArray, 0, array.length);\n\tnewArray[array.length] = str;\n\treturn newArray;\n}"], "code_level": "slib_runnable", "_id": "6367676a1a6d9265ec0181d4", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static int countOccurrencesOf(String str,String sub){\n\tif(str==null || sub==null){\n\t\treturn 0;\n\t}\n\tint count=0;\n\tint index=0;\n\twhile(index<str.length() && index<sub.length()){\n\t\tif(str.charAt(index)==sub.charAt(0)){\n\t\t\tcount++;\n\t\t}\n\t\tindex++;\n\t}\n\treturn count;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Returns the number of occurrences the substring  {@code sub} appears in string {@code str}.\n * @param str string to search in. Return 0 if this is null.\n * @param sub string to search for. Return 0 if this is null.\n * @return the number of occurrences the substring {@code sub} appears in string {@code str}.\n */\n", "method_name": "countOccurrencesOf", "codes": ["public static int countOccurrencesOf(String str,String sub){\n\tif(str==null || sub==null){\n\t\treturn 0;\n\t}\n\tint count=0;\n\tint index=0;\n\twhile(index<str.length() && index<sub.length()){\n\t\tif(str.charAt(index)==sub.charAt(0)){\n\t\t\tcount++;\n\t\t}\n\t\tindex++;\n\t}\n\treturn count;\n}"], "code_level": "self_contained", "_id": "6367676b1a6d9265ec0181dd", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static String stripFilenameExtension(String path){\n\tif (path == null) return null;\n\tint lastSlash = path.lastIndexOf('/');\n\tif (lastSlash == -1) return path;\n\tString newPath = path.substring(0, lastSlash);\n\treturn newPath + path.substring(lastSlash + 1);\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Strip the filename extension from the given path, e.g. \"mypath/myfile.txt\" -&gt; \"mypath/myfile\".\n * @param path the file path (may be <code>null</code>)\n * @return the path with stripped filename extension,or <code>null</code> if none\n */\n", "method_name": "stripFilenameExtension", "codes": ["public static String stripFilenameExtension(String path){\n\tif (path == null) return null;\n\tint lastSlash = path.lastIndexOf('/');\n\tif (lastSlash == -1) return path;\n\tString newPath = path.substring(0, lastSlash);\n\treturn newPath + path.substring(lastSlash + 1);\n}"], "code_level": "class_runnable", "_id": "6367676c1a6d9265ec018220", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static String trimLeadingCharacter(String str,char leadingCharacter){\n\t\n\tif(str == null || str.length() == 0) return \"\";\n\t\n\tint index = str.indexOf(leadingCharacter);\n\tif(index == -1) return str;\n\t\n\treturn str.substring(0,index);\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Trim all occurrences of the supplied leading character from the given String.\n * @param str the String to check\n * @param leadingCharacter the leading character to be trimmed\n * @return the trimmed String\n */\n", "method_name": "trimLeadingCharacter", "codes": ["public static String trimLeadingCharacter(String str,char leadingCharacter){\n\t\n\tif(str == null || str.length() == 0) return \"\";\n\t\n\tint index = str.indexOf(leadingCharacter);\n\tif(index == -1) return str;\n\t\n\treturn str.substring(0,index);\n}"], "code_level": "class_runnable", "_id": "636767691a6d9265ec0181a7", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static String[] split(String toSplit,String delimiter){\n\t\n\tString[] result = new String[2];\n\t\n\tint index = 0;\n\tint index2 = 0;\n\t\n\tif(toSplit.indexOf(delimiter) == -1){\n\t\treturn null;\n\t}\n\t\n\tresult[0] = toSplit.substring(0,index);\n\tresult[1] = toSplit.substring(index+1,toSplit.length());\n\t\n\treturn result;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Split a String at the first occurrence of the delimiter. Does not include the delimiter in the result.\n * @param toSplit the string to split\n * @param delimiter to split the string up with\n * @return a two element array with index 0 being before the delimiter, andindex 1 being after the delimiter (neither element includes the delimiter); or <code>null</code> if the delimiter wasn't found in the given input String\n */\n", "method_name": "split", "codes": ["public static String[] split(String toSplit,String delimiter){\n\t\n\tString[] result = new String[2];\n\t\n\tint index = 0;\n\tint index2 = 0;\n\t\n\tif(toSplit.indexOf(delimiter) == -1){\n\t\treturn null;\n\t}\n\t\n\tresult[0] = toSplit.substring(0,index);\n\tresult[1] = toSplit.substring(index+1,toSplit.length());\n\t\n\treturn result;\n}"], "code_level": "class_runnable", "_id": "636767691a6d9265ec0181a6", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static String applyRelativePath(String path,String relativePath){\n\tif (path.endsWith(\"/\")){\n\t\tpath = path.substring(0, path.length()-1);\n\t}\n\tif (relativePath.endsWith(\"/\")){\n\t\trelativePath = relativePath.substring(0, relativePath.length()-1);\n\t}\n\treturn path+relativePath;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Apply the given relative path to the given path, assuming standard Java folder separation (i.e. \"/\" separators).\n * @param path the path to start from (usually a full file path)\n * @param relativePath the relative path to apply(relative to the full file path above)\n * @return the full file path that results from applying the relative path\n */\n", "method_name": "applyRelativePath", "codes": ["public static String applyRelativePath(String path,String relativePath){\n\tif (path.endsWith(\"/\")){\n\t\tpath = path.substring(0, path.length()-1);\n\t}\n\tif (relativePath.endsWith(\"/\")){\n\t\trelativePath = relativePath.substring(0, relativePath.length()-1);\n\t}\n\treturn path+relativePath;\n}"], "code_level": "class_runnable", "_id": "636767691a6d9265ec0181ac", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static boolean substringMatch(CharSequence str,int index,CharSequence substring){\n\tif(str.length()<=index){\n\t\treturn false;\n\t}\n\tint start = index;\n\tint end = index;\n\twhile(end<str.length()){\n\t\tif(str.charAt(end)==substring.charAt(start)){\n\t\t\tend++;\n\t\t\tstart++;\n\t\t\tcontinue;\n\t\t}\n\t\tbreak;\n\t}\n\treturn end==str.length();\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Returns  {@code true} if the given string matches the given substring at the given index, {@code false} otherwise.\n * @param str the original string (or StringBuilder)\n * @param index the index in the original string to start matching against\n * @param substring the substring to match at the given index\n * @return {@code true} if the given string matches the given substring at the given index, {@code false} otherwise.\n */\n", "method_name": "substringMatch", "codes": ["public static boolean substringMatch(CharSequence str,int index,CharSequence substring){\n\tif(str.length()<=index){\n\t\treturn false;\n\t}\n\tint start = index;\n\tint end = index;\n\twhile(end<str.length()){\n\t\tif(str.charAt(end)==substring.charAt(start)){\n\t\t\tend++;\n\t\t\tstart++;\n\t\t\tcontinue;\n\t\t}\n\t\tbreak;\n\t}\n\treturn end==str.length();\n}"], "code_level": "slib_runnable", "_id": "6367676b1a6d9265ec0181e9", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "/** \n * Delete's the specified file if it exists \n */\n\nprotected static void deleteFile(String fileName){\n\t\n\ttry{\n\t\tFile file = new File(fileName);\n\t\tif(file.exists()){\n\t\t\tfile.delete();\n\t\t}\n\t}\n\tcatch(Exception e){\n\t\tSystem.out.println(\"Error deleting file: \" + fileName);\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Delete's the specified file if it exists \n */\n", "method_name": "deleteFile", "codes": ["/** \n * Delete's the specified file if it exists \n */\n\nprotected static void deleteFile(String fileName){\n\t\n\ttry{\n\t\tFile file = new File(fileName);\n\t\tif(file.exists()){\n\t\t\tfile.delete();\n\t\t}\n\t}\n\tcatch(Exception e){\n\t\tSystem.out.println(\"Error deleting file: \" + fileName);\n\t}\n}"], "code_level": "slib_runnable", "_id": "636767821a6d9265ec0183a0", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public String format(LoggingEvent event){\n    StringBuffer sb = new StringBuffer();\n    sb.append(event.getLevel().getName());\n    sb.append(\": \");\n    sb.append(event.getMessage());\n    sb.append(event.getThrowable());\n    return sb.toString();\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Produces a formatted string as specified by the conversion pattern.\n */\n", "method_name": "format", "codes": ["public String format(LoggingEvent event){\n    StringBuffer sb = new StringBuffer();\n    sb.append(event.getLevel().getName());\n    sb.append(\": \");\n    sb.append(event.getMessage());\n    sb.append(event.getThrowable());\n    return sb.toString();\n}"], "code_level": "project_runnable", "_id": "6367677e1a6d9265ec01830f", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "/** \n * This method does actual writing\n */\n\nprotected void subAppend(LoggingEvent event){\n\t\n\t//System.out.println(\"subAppend\");\n\t\n\t//System.out.println(\"event.getLogger().getName() = \"+event.getLogger().getName());\n\t\n\t//System.out.println(\"event.getLogger().getLevel() = \"+event.getLogger().getLevel());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle() = \"+event.getLogger().getResourceBundle());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale() = \"+event.getLogger().getResourceBundle().getLocale());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getLanguage() = \"+event.getLogger().getResourceBundle().getLocale().getLanguage());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getLanguage() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getLanguage());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry()", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * This method does actual writing\n */\n", "method_name": "subAppend", "codes": ["/** \n * This method does actual writing\n */\n\nprotected void subAppend(LoggingEvent event){\n\t\n\t//System.out.println(\"subAppend\");\n\t\n\t//System.out.println(\"event.getLogger().getName() = \"+event.getLogger().getName());\n\t\n\t//System.out.println(\"event.getLogger().getLevel() = \"+event.getLogger().getLevel());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle() = \"+event.getLogger().getResourceBundle());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale() = \"+event.getLogger().getResourceBundle().getLocale());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getLanguage() = \"+event.getLogger().getResourceBundle().getLocale().getLanguage());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getLanguage() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getLanguage());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry() = \"+event.getLogger().getResourceBundle().getLocale().getCountry().getCountry());\n\t\n\t//System.out.println(\"event.getLogger().getResourceBundle().getLocale().getCountry().getCountry()"], "code_level": "project_runnable", "_id": "636767781a6d9265ec01823d", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public static String peek(){\n\treturn peek(0);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Looks at the last diagnostic context at the top of this NDC without removing it. <p>The returned value is the value that was pushed last. If no context is available, then the empty string \"\" is returned.\n * @return String The innermost diagnostic context.\n */\n", "method_name": "peek", "codes": ["public static String peek(){\n\treturn peek(0);\n}"], "code_level": "class_runnable", "_id": "636767831a6d9265ec0183c9", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public Logger exists(String name){\n\treturn (Logger)get(name);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Check if the named logger exists in the hierarchy. If so return its reference, otherwise returns <code>null</code>.\n * @param name The name of the logger to search for.\n */\n", "method_name": "exists", "codes": ["public Logger exists(String name){\n\treturn (Logger)get(name);\n}"], "code_level": "project_runnable", "_id": "6367677e1a6d9265ec01832e", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public String format(final LoggingEvent event){\n\t\n\tfinal StringBuilder sb = new StringBuilder();\n\t\n\tsb.append(event.getLevel().toString());\n\tsb.append(\": \");\n\tsb.append(event.getMessage());\n\t\n\treturn sb.toString();\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Formats a logging event to a writer.\n * @param event logging event to be formatted.\n */\n", "method_name": "format", "codes": ["public String format(final LoggingEvent event){\n\t\n\tfinal StringBuilder sb = new StringBuilder();\n\t\n\tsb.append(event.getLevel().toString());\n\tsb.append(\": \");\n\tsb.append(event.getMessage());\n\t\n\treturn sb.toString();\n}"], "code_level": "project_runnable", "_id": "6367677b1a6d9265ec0182bd", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "/** \n * Find class given class name.\n * @param className class name, may not be null.\n * @return class, will not be null.\n * @throws ClassNotFoundException thrown if class can not be found.\n */\n\nprivate Class findClass(final String className) throws ClassNotFoundException {\n\tClass clazz = null;\n\ttry {\n\t\tclazz = Class.forName(className);\n\t} catch (ClassNotFoundException e) {\n\t\tthrow new ClassNotFoundException(\"Class not found: \" + className);\n\t}\n\treturn clazz;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Find class given class name.\n * @param className class name, may not be null.\n * @return class, will not be null.\n * @throws ClassNotFoundException thrown if class can not be found.\n */\n", "method_name": "findClass", "codes": ["/** \n * Find class given class name.\n * @param className class name, may not be null.\n * @return class, will not be null.\n * @throws ClassNotFoundException thrown if class can not be found.\n */\n\nprivate Class findClass(final String className) throws ClassNotFoundException {\n\tClass clazz = null;\n\ttry {\n\t\tclazz = Class.forName(className);\n\t} catch (ClassNotFoundException e) {\n\t\tthrow new ClassNotFoundException(\"Class not found: \" + className);\n\t}\n\treturn clazz;\n}"], "code_level": "slib_runnable", "_id": "636767791a6d9265ec018263", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public void addMessage(final LogRecord lr){\n\t\n\tif(lr == null){\n\t\treturn;\n\t}\n\t\n\tfinal String message = lr.getMessage();\n\t\n\tif(message == null){\n\t\treturn;\n\t}\n\t\n\tfinal StringBuilder sb = new StringBuilder();\n\tsb.append(message);\n\tsb.append(\"\\n\");\n\t\n\tfinal String log = sb.toString();\n\t\n\tfinal LogRecord newLr = new LogRecord(lr);\n\tnewLr.setLoggerName(lr.getLoggerName());\n\tnewLr.setLoggerClass(lr.getLoggerClass());\n\tnewLr.setLoggerMessage(log);\n\t\n\tfinal LogRecord oldLr = this.logRecords.put(lr.getLoggerName(), newLr);\n\t\n\tif(oldLr!= null){\n\t\toldLr.setLoggerName(lr.getLoggerName());\n\t\toldLr.setLoggerClass(lr.getLoggerClass());\n\t\toldLr.setLoggerMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setLoggerName(lr.getLoggerName());\n\t\toldLr.setLoggerClass(lr.getLoggerClass());\n\t\toldLr.setLoggerMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setLoggerName(lr.getLoggerName());\n\t\toldLr.setLoggerClass(lr.getLoggerClass());\n\t\toldLr.setLoggerMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setLoggerName(lr.getLoggerName());\n\t\toldLr.setLoggerClass(lr.getLoggerClass());\n\t\toldLr.setLoggerMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setLoggerName(lr.getLoggerName());\n\t\toldLr.setLoggerClass(lr.getLoggerClass());\n\t\toldLr.setLoggerMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setLoggerName(lr.getLoggerName());\n\t\toldLr.setLoggerClass(lr.getLoggerClass());\n\t\toldLr.setLoggerMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setLoggerName(lr.getLoggerName());\n\t\toldLr.setLoggerClass(lr.getLoggerClass());\n\t\toldLr.setLoggerMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setLoggerName(lr.getLoggerName());\n\t\toldLr.setLoggerClass(lr.getLoggerClass());\n\t\toldLr.setLoggerMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setLoggerName(lr.getLoggerName());\n\t\toldLr.setLoggerClass(lr.getLoggerClass());\n\t\toldLr.setLoggerMessage(log);\n\t}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Add a log record message to be displayed in the LogTable. This method is thread-safe as it posts requests to the SwingThread rather than processing directly.\n */\n", "method_name": "addMessage", "codes": ["public void addMessage(final LogRecord lr){\n\t\n\tif(lr == null){\n\t\treturn;\n\t}\n\t\n\tfinal String message = lr.getMessage();\n\t\n\tif(message == null){\n\t\treturn;\n\t}\n\t\n\tfinal StringBuilder sb = new StringBuilder();\n\tsb.append(message);\n\tsb.append(\"\\n\");\n\t\n\tfinal String log = sb.toString();\n\t\n\tfinal LogRecord newLr = new LogRecord(lr);\n\tnewLr.setLoggerName(lr.getLoggerName());\n\tnewLr.setLoggerClass(lr.getLoggerClass());\n\tnewLr.setLoggerMessage(log);\n\t\n\tfinal LogRecord oldLr = this.logRecords.put(lr.getLoggerName(), newLr);\n\t\n\tif(oldLr!= null){\n\t\toldLr.setLoggerName(lr.getLoggerName());\n\t\toldLr.setLoggerClass(lr.getLoggerClass());\n\t\toldLr.setLoggerMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setLoggerName(lr.getLoggerName());\n\t\toldLr.setLoggerClass(lr.getLoggerClass());\n\t\toldLr.setLoggerMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setLoggerName(lr.getLoggerName());\n\t\toldLr.setLoggerClass(lr.getLoggerClass());\n\t\toldLr.setLoggerMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setLoggerName(lr.getLoggerName());\n\t\toldLr.setLoggerClass(lr.getLoggerClass());\n\t\toldLr.setLoggerMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setLoggerName(lr.getLoggerName());\n\t\toldLr.setLoggerClass(lr.getLoggerClass());\n\t\toldLr.setLoggerMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setLoggerName(lr.getLoggerName());\n\t\toldLr.setLoggerClass(lr.getLoggerClass());\n\t\toldLr.setLoggerMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setLoggerName(lr.getLoggerName());\n\t\toldLr.setLoggerClass(lr.getLoggerClass());\n\t\toldLr.setLoggerMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setLoggerName(lr.getLoggerName());\n\t\toldLr.setLoggerClass(lr.getLoggerClass());\n\t\toldLr.setLoggerMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setMessage(log);\n\t}\n\t\n\tif(oldLr!= null){\n\t\toldLr.setLoggerName(lr.getLoggerName());\n\t\toldLr.setLoggerClass(lr.getLoggerClass());\n\t\toldLr.setLoggerMessage(log);\n\t}"], "code_level": "project_runnable", "_id": "636767791a6d9265ec018257", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public static void selectRow(int row,JTable table,JScrollPane pane){\n\t\n\tif(table.getSelectedRow()==-1){\n\t\treturn;\n\t}\n\t\n\tint rowToSelect = table.convertRowIndexToModel(table.getSelectedRow());\n\t\n\tif(rowToSelect==-1){\n\t\treturn;\n\t}\n\t\n\tpane.setViewportView(table.getModel().getValueAt(rowToSelect,0));\n\t\n\ttable.scrollRectToVisible(table.getCellRect(rowToSelect,0,true));\n\t\n\ttable.setRowSelectionInterval(rowToSelect,rowToSelect);\n\t\n\ttable.repaint();\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Selects a the specified row in the specified JTable and scrolls the specified JScrollpane to the newly selected row. More importantly, the call to repaint() delayed long enough to have the table properly paint the newly selected row which may be offscre\n * @param table should belong to the specified JScrollPane\n */\n", "method_name": "selectRow", "codes": ["public static void selectRow(int row,JTable table,JScrollPane pane){\n\t\n\tif(table.getSelectedRow()==-1){\n\t\treturn;\n\t}\n\t\n\tint rowToSelect = table.convertRowIndexToModel(table.getSelectedRow());\n\t\n\tif(rowToSelect==-1){\n\t\treturn;\n\t}\n\t\n\tpane.setViewportView(table.getModel().getValueAt(rowToSelect,0));\n\t\n\ttable.scrollRectToVisible(table.getCellRect(rowToSelect,0,true));\n\t\n\ttable.setRowSelectionInterval(rowToSelect,rowToSelect);\n\t\n\ttable.repaint();\n}"], "code_level": "project_runnable", "_id": "636767841a6d9265ec0183ff", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public static void createConfigurationDirectory(){\n\t\n\tString lf5 = \"\";\n\t\n\tif (System.getenv(\"USERPROFILE\")!= null) {\n\t\tlf5 = System.getenv(\"USERPROFILE\");\n\t} else {\n\t\tlf5 = System.getenv(\"HOMEPATH\") + \"\\\\Documents and Settings\\\\\";\n\t}\n\t\n\tlf5 = lf5 + \"MRU\";\n\t\n\ttry {\n\t\tFile lf5File = new File(lf5);\n\t\t\n\t\tif (!lf5File.exists()) {\n\t\t\tlf5File.mkdir();\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\t\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Creates the directory where the MRU file list will be written. The \"lf5\" directory is created in the Documents and Settings directory on Windows 2000 machines and where ever the user.home variable points on all other platforms.\n */\n", "method_name": "createConfigurationDirectory", "codes": ["public static void createConfigurationDirectory(){\n\t\n\tString lf5 = \"\";\n\t\n\tif (System.getenv(\"USERPROFILE\")!= null) {\n\t\tlf5 = System.getenv(\"USERPROFILE\");\n\t} else {\n\t\tlf5 = System.getenv(\"HOMEPATH\") + \"\\\\Documents and Settings\\\\\";\n\t}\n\t\n\tlf5 = lf5 + \"MRU\";\n\t\n\ttry {\n\t\tFile lf5File = new File(lf5);\n\t\t\n\t\tif (!lf5File.exists()) {\n\t\t\tlf5File.mkdir();\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\t\n}"], "code_level": "slib_runnable", "_id": "636767871a6d9265ec01846d", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public synchronized void send(final String message){\n\t\n\tif(message == null){\n\t\treturn;\n\t}\n\t\n\tsynchronized(this){\n\t\t\n\t\tif(this.isClosed()){\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(this.isConnected()){\n\t\t\t\n\t\t\tthis.send(message);\n\t\t\t\n\t\t}else{\n\t\t\t\n\t\t\tthis.send(message);\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * sends a message to each of the clients in telnet-friendly output. \n */\n", "method_name": "send", "codes": ["public synchronized void send(final String message){\n\t\n\tif(message == null){\n\t\treturn;\n\t}\n\t\n\tsynchronized(this){\n\t\t\n\t\tif(this.isClosed()){\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(this.isConnected()){\n\t\t\t\n\t\t\tthis.send(message);\n\t\t\t\n\t\t}else{\n\t\t\t\n\t\t\tthis.send(message);\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n}"], "code_level": "class_runnable", "_id": "6367677f1a6d9265ec018347", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "/** \n * Handles a log event.  For this appender, that means writing the message to each connected client.  \n */\n\nprotected void append(LoggingEvent event){\n\t\n\t// If the event is a message, then write it to the client\n\tif(event.getLevel().equals(Level.INFO)){\n\t\t\n\t\t// Write the message to the client\n\t\tclient.write(event.getMessage());\n\t\t\n\t}else if(event.getLevel().equals(Level.WARN)){\n\t\t\n\t\t// Write the message to the client\n\t\tclient.write(event.getMessage());\n\t\t\n\t}else if(event.getLevel().equals(Level.ERROR)){\n\t\t\n\t\t// Write the message to the client\n\t\tclient.write(event.getMessage());\n\t\t\n\t}else if(event.getLevel().equals(Level.FATAL)){\n\t\t\n\t\t// Write the message to the client\n\t\tclient.write(event.getMessage());\n\t\t\n\t}\n\t\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Handles a log event.  For this appender, that means writing the message to each connected client.  \n */\n", "method_name": "append", "codes": ["/** \n * Handles a log event.  For this appender, that means writing the message to each connected client.  \n */\n\nprotected void append(LoggingEvent event){\n\t\n\t// If the event is a message, then write it to the client\n\tif(event.getLevel().equals(Level.INFO)){\n\t\t\n\t\t// Write the message to the client\n\t\tclient.write(event.getMessage());\n\t\t\n\t}else if(event.getLevel().equals(Level.WARN)){\n\t\t\n\t\t// Write the message to the client\n\t\tclient.write(event.getMessage());\n\t\t\n\t}else if(event.getLevel().equals(Level.ERROR)){\n\t\t\n\t\t// Write the message to the client\n\t\tclient.write(event.getMessage());\n\t\t\n\t}else if(event.getLevel().equals(Level.FATAL)){\n\t\t\n\t\t// Write the message to the client\n\t\tclient.write(event.getMessage());\n\t\t\n\t}\n\t\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec01823e", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public void put(LoggingEvent o){\n\tif(buffer.size() >= bufferCapacity){\n\t\tbuffer.remove(0);\n\t}\n\tbuffer.add(o);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Place a  {@link LoggingEvent} in the buffer. If the buffer is fullthen the event is <b>silently dropped</b>. It is the caller's responsability to make sure that the buffer has free space.  \n */\n", "method_name": "put", "codes": ["public void put(LoggingEvent o){\n\tif(buffer.size() >= bufferCapacity){\n\t\tbuffer.remove(0);\n\t}\n\tbuffer.add(o);\n}"], "code_level": "class_runnable", "_id": "6367677f1a6d9265ec01834b", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public static String findAndSubst(String key,Properties props){\n\tString value = null;\n\tif(props.containsKey(key)){\n\t\tvalue = props.getProperty(key);\n\t}\n\treturn value;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Find the value corresponding to <code>key</code> in <code>props</code>. Then perform variable substitution on the found value.\n */\n", "method_name": "findAndSubst", "codes": ["public static String findAndSubst(String key,Properties props){\n\tString value = null;\n\tif(props.containsKey(key)){\n\t\tvalue = props.getProperty(key);\n\t}\n\treturn value;\n}"], "code_level": "project_runnable", "_id": "636767791a6d9265ec01826d", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public boolean isAttached(Appender appender){\n\treturn appender.isAttached();\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns <code>true</code> if the specified appender is in the list of attached appenders, <code>false</code> otherwise.\n * @since 1.2 \n */\n", "method_name": "isAttached", "codes": ["public boolean isAttached(Appender appender){\n\treturn appender.isAttached();\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec018238", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public static boolean toBoolean(String value,boolean dEfault){\n\tif(value.equalsIgnoreCase(\"true\")){\n\t\treturn true;\n\t}else if(value.equalsIgnoreCase(\"false\")){\n\t\treturn false;\n\t}else{\n\t\treturn dEfault;\n\t}\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * If <code>value</code> is \"true\", then <code>true</code> is returned. If <code>value</code> is \"false\", then <code>true</code> is returned. Otherwise, <code>default</code> is returned. <p>Case of value is unimportant.  \n */\n", "method_name": "toBoolean", "codes": ["public static boolean toBoolean(String value,boolean dEfault){\n\tif(value.equalsIgnoreCase(\"true\")){\n\t\treturn true;\n\t}else if(value.equalsIgnoreCase(\"false\")){\n\t\treturn false;\n\t}else{\n\t\treturn dEfault;\n\t}\n}"], "code_level": "self_contained", "_id": "6367677d1a6d9265ec0182fd", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public void add(LoggingEvent event){\n\tif(event.getLevel().intValue() < Level.WARNING.intValue()){\n\t\treturn;\n\t}\n\tif(!this.buffer.isEmpty()){\n\t\tthis.buffer.add(event);\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Add an <code>event</code> as the last event in the buffer.\n */\n", "method_name": "add", "codes": ["public void add(LoggingEvent event){\n\tif(event.getLevel().intValue() < Level.WARNING.intValue()){\n\t\treturn;\n\t}\n\tif(!this.buffer.isEmpty()){\n\t\tthis.buffer.add(event);\n\t}\n}"], "code_level": "class_runnable", "_id": "636767841a6d9265ec0183e8", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public void removeAppender(String name){\n\tif (name == null) return;\n\t\n\tfor (Appender appender : appenders) {\n\t\tif (appender.getName().equals(name)) {\n\t\t\tappenders.remove(appender);\n\t\t\tbreak;\n\t\t}\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Remove the appender with the name passed as parameter form the list of appenders.  \n */\n", "method_name": "removeAppender", "codes": ["public void removeAppender(String name){\n\tif (name == null) return;\n\t\n\tfor (Appender appender : appenders) {\n\t\tif (appender.getName().equals(name)) {\n\t\t\tappenders.remove(appender);\n\t\t\tbreak;\n\t\t}\n\t}\n}"], "code_level": "project_runnable", "_id": "636767861a6d9265ec01844c", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public int appendLoopOnAppenders(LoggingEvent event){\n    int result = 0;\n    for (Appender appender : appenders) {\n        result |= appender.appendLoopOnAppender(event);\n    }\n    return result;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Call the <code>doAppend</code> method on all attached appenders.  \n */\n", "method_name": "appendLoopOnAppenders", "codes": ["public int appendLoopOnAppenders(LoggingEvent event){\n    int result = 0;\n    for (Appender appender : appenders) {\n        result |= appender.appendLoopOnAppender(event);\n    }\n    return result;\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec018242", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public boolean hasThrown(){\n    return getThrown().toString().length() > 0;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * @return true if getThrown().toString() is a non-empty string.\n */\n", "method_name": "hasThrown", "codes": ["public boolean hasThrown(){\n    return getThrown().toString().length() > 0;\n}"], "code_level": "class_runnable", "_id": "636767821a6d9265ec0183ab", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public int getUnusedNodesSize(int nodeIndex, int nodeIndex2){\n    return removeUnusedNodes();\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Removes any inactive nodes from the Category tree.\n */\n", "method_name": "removeUnusedNodes", "codes": ["public int getUnusedNodesSize(int nodeIndex, int nodeIndex2){\n    return removeUnusedNodes();\n}"], "code_level": "project_runnable", "_id": "6367677e1a6d9265ec018314", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public int compare(Object aObj1,Object aObj2){\n\t\n\tif(aObj1==null && aObj2==null){\n\t\treturn 0;\n\t}\n\tif(aObj1==null){\n\t\treturn -1;\n\t}\n\tif(aObj2==null){\n\t\treturn 1;\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof Integer){\n\t\treturn ((Integer)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof String && aObj2 instanceof String){\n\t\treturn ((String)aObj1).compareTo((String)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof Integer){\n\t\treturn ((Integer)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof String && aObj2 instanceof String){\n\t\treturn ((String)aObj1).compareTo((String)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof Integer){\n\t\treturn ((Integer)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof String && aObj2 instanceof String){\n\t\treturn ((String)aObj1).compareTo((String)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof Integer){\n\t\treturn ((Integer)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof String && aObj2 instanceof Integer){\n\t\treturn ((String)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof String){\n\t\treturn ((Integer)aObj1).compareTo((String)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof String && aObj2 instanceof Integer){\n\t\treturn ((String)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof Integer){\n\t\treturn ((Integer)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof String && aObj2 instanceof String){\n\t\treturn ((String)aObj1).compareTo((String)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof Integer){\n\t\treturn ((Integer)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof String && aObj2 instanceof String){\n\t\treturn ((String)aObj1).compareTo((String)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof Integer){\n\t\treturn ((Integer)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof String && aObj2 instanceof Integer){\n\t\treturn ((String)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof String){\n\t\treturn ((Integer)aObj1).compareTo((String)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof String && aObj2 instanceof Integer){\n\t\treturn ((String)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof String){\n\t\treturn ((Integer)aObj1).compareTo((String)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof Integer){\n\t\treturn ((Integer)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof String && aObj2 instanceof Integer){\n\t\treturn ((String)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof String){\n\t\treturn ((Integer)aObj1).comp", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * @see Comparator \n */\n", "method_name": "compare", "codes": ["public int compare(Object aObj1,Object aObj2){\n\t\n\tif(aObj1==null && aObj2==null){\n\t\treturn 0;\n\t}\n\tif(aObj1==null){\n\t\treturn -1;\n\t}\n\tif(aObj2==null){\n\t\treturn 1;\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof Integer){\n\t\treturn ((Integer)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof String && aObj2 instanceof String){\n\t\treturn ((String)aObj1).compareTo((String)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof Integer){\n\t\treturn ((Integer)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof String && aObj2 instanceof String){\n\t\treturn ((String)aObj1).compareTo((String)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof Integer){\n\t\treturn ((Integer)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof String && aObj2 instanceof String){\n\t\treturn ((String)aObj1).compareTo((String)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof Integer){\n\t\treturn ((Integer)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof String && aObj2 instanceof Integer){\n\t\treturn ((String)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof String){\n\t\treturn ((Integer)aObj1).compareTo((String)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof String && aObj2 instanceof Integer){\n\t\treturn ((String)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof Integer){\n\t\treturn ((Integer)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof String && aObj2 instanceof String){\n\t\treturn ((String)aObj1).compareTo((String)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof Integer){\n\t\treturn ((Integer)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof String && aObj2 instanceof String){\n\t\treturn ((String)aObj1).compareTo((String)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof Integer){\n\t\treturn ((Integer)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof String && aObj2 instanceof Integer){\n\t\treturn ((String)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof String){\n\t\treturn ((Integer)aObj1).compareTo((String)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof String && aObj2 instanceof Integer){\n\t\treturn ((String)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof String){\n\t\treturn ((Integer)aObj1).compareTo((String)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof Integer){\n\t\treturn ((Integer)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof String && aObj2 instanceof Integer){\n\t\treturn ((String)aObj1).compareTo((Integer)aObj2);\n\t}\n\t\n\tif(aObj1 instanceof Integer && aObj2 instanceof String){\n\t\treturn ((Integer)aObj1).comp"], "code_level": "project_runnable", "_id": "636767841a6d9265ec0183f2", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public int decide(LoggingEvent event){\n\t\n\treturn NEUTRAL;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Returns  {@link Filter#NEUTRAL} is there is no string match.\n */\n", "method_name": "decide", "codes": ["public int decide(LoggingEvent event){\n\t\n\treturn NEUTRAL;\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec018250", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public void abbreviate(final int nameStart,final StringBuffer buf){\n\t\n\tfinal int nameEnd = buf.length();\n\t\n\tif(nameEnd > nameStart){\n\t\t\n\t\tbuf.setLength(nameStart);\n\t\t\n\t\tfinal int abbrev = buf.length();\n\t\t\n\t\twhile(abbrev > nameEnd){\n\t\t\t\n\t\t\tbuf.setCharAt(abbrev-1,'');\n\t\t\t\n\t\t\tabbrev--;\n\t\t}\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Abbreviate name.\n * @param buf buffer to append abbreviation.\n * @param nameStart start of name to abbreviate.\n */\n", "method_name": "abbreviate", "codes": ["public void abbreviate(final int nameStart,final StringBuffer buf){\n\t\n\tfinal int nameEnd = buf.length();\n\t\n\tif(nameEnd > nameStart){\n\t\t\n\t\tbuf.setLength(nameStart);\n\t\t\n\t\tfinal int abbrev = buf.length();\n\t\t\n\t\twhile(abbrev > nameEnd){\n\t\t\t\n\t\t\tbuf.setCharAt(abbrev-1,'');\n\t\t\t\n\t\t\tabbrev--;\n\t\t}\n\t}\n}"], "code_level": "class_runnable", "_id": "636767861a6d9265ec018440", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public String id(String entityId){\n\treturn entityId;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * @return the row id\n */\n", "method_name": "id", "codes": ["public String id(String entityId){\n\treturn entityId;\n}"], "code_level": "project_runnable", "_id": "636767df1a6d9265ec01873c", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "public void accept(final METRICS data){\n\tif(data == null) return;\n\t\n\tif(data.getMetric() == null) return;\n\t\n\tif(data.getMetric().getName().equals(METRICS.CACHE)){\n\t\tfinal String key = data.getMetric().getName();\n\t\tif(this.cache.containsKey(key)){\n\t\t\tthis.cache.put(key, this.cache.get(key));\n\t\t}\n\t\telse{\n\t\t\tthis.cache.put(key, data);\n\t\t}\n\t}\n\telse{\n\t\tthis.cache.put(data.getMetric().getName(), data);\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Accept the data into the cache and merge with the existing value. This method is not thread safe, should avoid concurrency calling.\n * @param data to be added potentially.\n */\n", "method_name": "accept", "codes": ["public void accept(final METRICS data){\n\tif(data == null) return;\n\t\n\tif(data.getMetric() == null) return;\n\t\n\tif(data.getMetric().getName().equals(METRICS.CACHE)){\n\t\tfinal String key = data.getMetric().getName();\n\t\tif(this.cache.containsKey(key)){\n\t\t\tthis.cache.put(key, this.cache.get(key));\n\t\t}\n\t\telse{\n\t\t\tthis.cache.put(key, data);\n\t\t}\n\t}\n\telse{\n\t\tthis.cache.put(data.getMetric().getName(), data);\n\t}\n}"], "code_level": "self_contained", "_id": "636767e11a6d9265ec018781", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "/** \n * Split time ranges to insure the start time and end time is small then  {@link #FETCH_DATA_DURATION}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Split time ranges to insure the start time and end time is small then  {@link #FETCH_DATA_DURATION}\n */\n", "method_name": "buildTimeRanges", "codes": ["/** \n * Split time ranges to insure the start time and end time is small then  {@link #FETCH_DATA_DURATION}"], "code_level": "self_contained", "_id": "636767df1a6d9265ec018744", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "public void valueAccumulation(String key,Long value){\n\tif(value == null){\n\t\treturn;\n\t}\n\tif(value == 0){\n\t\treturn;\n\t}\n\tLong oldValue = values.get(key);\n\tif(oldValue == null){\n\t\tvalues.put(key, value);\n\t}else{\n\t\tvalues.put(key, oldValue + value);\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Accumulate the value with existing value in the same given key.\n */\n", "method_name": "valueAccumulation", "codes": ["public void valueAccumulation(String key,Long value){\n\tif(value == null){\n\t\treturn;\n\t}\n\tif(value == 0){\n\t\treturn;\n\t}\n\tLong oldValue = values.get(key);\n\tif(oldValue == null){\n\t\tvalues.put(key, value);\n\t}else{\n\t\tvalues.put(key, oldValue + value);\n\t}\n}"], "code_level": "class_runnable", "_id": "636767de1a6d9265ec01871c", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "public boolean isExpired(long timestamp,long expiredThreshold){\n\t\n\tif(timestamp > System.currentTimeMillis()){\n\t\treturn true;\n\t}\n\t\n\tif(timestamp < System.currentTimeMillis() - expiredThreshold){\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * @param timestamp        of current time\n * @param expiredThreshold represents the duration between last update time and the time point removing from cache.\n * @return true means this metrics should be removed from cache.\n */\n", "method_name": "isExpired", "codes": ["public boolean isExpired(long timestamp,long expiredThreshold){\n\t\n\tif(timestamp > System.currentTimeMillis()){\n\t\treturn true;\n\t}\n\t\n\tif(timestamp < System.currentTimeMillis() - expiredThreshold){\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}"], "code_level": "class_runnable", "_id": "636767dd1a6d9265ec0186de", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "/** \n * build content,if it has ats someone set the ats\n */\n\nprivate Map<String,Object> buildContent(JsonObject jsonObject){\n\tMap<String,Object> content = new HashMap<String,Object>();\n\t\n\tif(jsonObject.has(\"content\")){\n\t\tcontent.put(\"content\",jsonObject.get(\"content\"));\n\t}\n\t\n\treturn content;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * build content,if it has ats someone set the ats\n */\n", "method_name": "buildContent", "codes": ["/** \n * build content,if it has ats someone set the ats\n */\n\nprivate Map<String,Object> buildContent(JsonObject jsonObject){\n\tMap<String,Object> content = new HashMap<String,Object>();\n\t\n\tif(jsonObject.has(\"content\")){\n\t\tcontent.put(\"content\",jsonObject.get(\"content\"));\n\t}\n\t\n\treturn content;\n}"], "code_level": "project_runnable", "_id": "636767e01a6d9265ec018755", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "/** \n * @param modelName model name of the entity\n * @throws IllegalStateException if sharding key indices are not continuous\n */\n\nprivate void check(String modelName) throws IllegalStateException {\n    if (!isContinuous(modelName)) {\n        throw new IllegalStateException(\"Model \" + modelName + \" is not continuous\");\n    }\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * @param modelName model name of the entity\n * @throws IllegalStateException if sharding key indices are not continuous\n */\n", "method_name": "check", "codes": ["/** \n * @param modelName model name of the entity\n * @throws IllegalStateException if sharding key indices are not continuous\n */\n\nprivate void check(String modelName) throws IllegalStateException {\n    if (!isContinuous(modelName)) {\n        throw new IllegalStateException(\"Model \" + modelName + \" is not continuous\");\n    }\n}"], "code_level": "self_contained", "_id": "636767de1a6d9265ec01871e", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "public void overrideName(String oldName,String newName){\n\t\n\tif(oldName==null || newName==null){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be null\");\n\t}\n\t\n\tif(oldName.equals(newName)){\n\t\treturn;\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Keep the same name replacement as  {@link ColumnName#overrideName(String,String)}\n * @param oldName to be replaced.\n * @param newName to use in the storage level.\n */\n", "method_name": "overrideName", "codes": ["public void overrideName(String oldName,String newName){\n\t\n\tif(oldName==null || newName==null){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be null\");\n\t}\n\t\n\tif(oldName.equals(newName)){\n\t\treturn;\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException(\"oldName and newName cannot be different\");\n\t}\n\t\n\tif(!oldName.equals(newName)){\n\t\tthrow new IllegalArgumentException"], "code_level": "self_contained", "_id": "636767dd1a6d9265ec0186f3", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "public boolean isCompatible(DataTable dataset){\n\t\n\tif(dataset.getBucket().getName().equals(this.getName())){\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * @return true if the bucket is same.\n */\n", "method_name": "isCompatible", "codes": ["public boolean isCompatible(DataTable dataset){\n\t\n\tif(dataset.getBucket().getName().equals(this.getName())){\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}"], "code_level": "plib_runnable", "_id": "636767e11a6d9265ec018795", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "public Mappings diffStructure(String tableName,Mappings mappings){\n\tif(mappings==null){\n\t\treturn null;\n\t}\n\tMappings newMappings = new Mappings();\n\tfor(String field:mappings.getFields()){\n\t\tif(!mappings.containsKey(field)){\n\t\t\tnewMappings.addField(field);\n\t\t}\n\t}\n\treturn newMappings;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns mappings with fields that not exist in the input mappings. The input mappings should be history mapping from current index. Do not return _source config to avoid current index update conflict.\n */\n", "method_name": "diffStructure", "codes": ["public Mappings diffStructure(String tableName,Mappings mappings){\n\tif(mappings==null){\n\t\treturn null;\n\t}\n\tMappings newMappings = new Mappings();\n\tfor(String field:mappings.getFields()){\n\t\tif(!mappings.containsKey(field)){\n\t\t\tnewMappings.addField(field);\n\t\t}\n\t}\n\treturn newMappings;\n}"], "code_level": "plib_runnable", "_id": "636767de1a6d9265ec018706", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "/** \n * Follow the dayStep to re-format the time bucket literal long value. Such as, in dayStep == 11, 20000105 re-formatted time bucket is 20000101, 20000115 re-formatted time bucket is 20000112, 20000123 re-formatted time bucket is 20000123\n */\n\nstatic long compressTimeBucket(long timeBucket,int dayStep){\n\tlong timeBucket_new = 0;\n\tlong timeBucket_new_new = 0;\n\tlong timeBucket_new_new_new = 0;\n\tlong timeBucket_new_new_new_new = 0;\n\tlong timeBucket_new_new_new_new_new = 0;\n\tlong timeBucket_new_new_new_new_new_new = 0;\n\tlong timeBucket_new_new_new_new_new_new_new = 0;\n\tlong timeBucket_new_new_new_new_new_new_new_new = 0;\n\tlong timeBucket_new_new_new_new_new_new_new_new_new = 0;\n\tlong timeBucket_new_new_new_new_new_new_new_new_new_new = 0;\n\tlong timeBucket_new_new_new_new_new_new_new_new_new_new_new_new = 0;\n\tlong timeBucket_new_new_new_new_new_new_new_new_new_new_new_new_new_new = 0;\n\tlong timeBucket_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Follow the dayStep to re-format the time bucket literal long value. Such as, in dayStep == 11, 20000105 re-formatted time bucket is 20000101, 20000115 re-formatted time bucket is 20000112, 20000123 re-formatted time bucket is 20000123\n */\n", "method_name": "compressTimeBucket", "codes": ["/** \n * Follow the dayStep to re-format the time bucket literal long value. Such as, in dayStep == 11, 20000105 re-formatted time bucket is 20000101, 20000115 re-formatted time bucket is 20000112, 20000123 re-formatted time bucket is 20000123\n */\n\nstatic long compressTimeBucket(long timeBucket,int dayStep){\n\tlong timeBucket_new = 0;\n\tlong timeBucket_new_new = 0;\n\tlong timeBucket_new_new_new = 0;\n\tlong timeBucket_new_new_new_new = 0;\n\tlong timeBucket_new_new_new_new_new = 0;\n\tlong timeBucket_new_new_new_new_new_new = 0;\n\tlong timeBucket_new_new_new_new_new_new_new = 0;\n\tlong timeBucket_new_new_new_new_new_new_new_new = 0;\n\tlong timeBucket_new_new_new_new_new_new_new_new_new = 0;\n\tlong timeBucket_new_new_new_new_new_new_new_new_new_new = 0;\n\tlong timeBucket_new_new_new_new_new_new_new_new_new_new_new_new = 0;\n\tlong timeBucket_new_new_new_new_new_new_new_new_new_new_new_new_new_new = 0;\n\tlong timeBucket_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_"], "code_level": "project_runnable", "_id": "636767dc1a6d9265ec0186be", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "/** \n * Returns ture when the input fields have already been stored in the properties.\n */\n\nprivate boolean containsAllFields(Fields fields){\n\t\n\tfor (Field field : fields.getFields()){\n\t\tif (field.getName().equals(this.getName())){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns ture when the input fields have already been stored in the properties.\n */\n", "method_name": "containsAllFields", "codes": ["/** \n * Returns ture when the input fields have already been stored in the properties.\n */\n\nprivate boolean containsAllFields(Fields fields){\n\t\n\tfor (Field field : fields.getFields()){\n\t\tif (field.getName().equals(this.getName())){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}"], "code_level": "slib_runnable", "_id": "636767dc1a6d9265ec0186c6", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "public void addNewTarget(Channels channels,IConsumer consumer){\n\t\n\tif(channels.getTarget()!=null){\n\t\tthrow new IllegalArgumentException(\"Target already set\");\n\t}\n\t\n\tchannels.setTarget(consumer);\n\t\n\tif(channels.getTarget()==null){\n\t\tthrow new IllegalArgumentException(\"Target not set\");\n\t}\n\t\n\t\n\t\n\t\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Add a new target channels.\n */\n", "method_name": "addNewTarget", "codes": ["public void addNewTarget(Channels channels,IConsumer consumer){\n\t\n\tif(channels.getTarget()!=null){\n\t\tthrow new IllegalArgumentException(\"Target already set\");\n\t}\n\t\n\tchannels.setTarget(consumer);\n\t\n\tif(channels.getTarget()==null){\n\t\tthrow new IllegalArgumentException(\"Target not set\");\n\t}\n\t\n\t\n\t\n\t\n}"], "code_level": "plib_runnable", "_id": "636767dd1a6d9265ec0186e5", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "public void init(){\n\t\n\t//check dist path\n\tString distPath = getProperty(\"dist.path\");\n\tif(distPath == null || distPath.length() == 0){\n\t\tthrow new RuntimeException(\"dist.path is not set\");\n\t}\n\t\n\t//check config path\n\tString configPath = getProperty(\"config.path\");\n\tif(configPath == null || configPath.length() == 0){\n\t\tthrow new RuntimeException(\"config.path is not set\");\n\t}\n\t\n\t//check config file\n\tString configFile = getProperty(\"config.file\");\n\tif(configFile == null || configFile.length() == 0){\n\t\tthrow new RuntimeException(\"config.file is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath = getProperty(\"config.file.path\");\n\tif(configFilePath == null || configFilePath.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath2 = getProperty(\"config.file.path2\");\n\tif(configFilePath2 == null || configFilePath2.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path2 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath3 = getProperty(\"config.file.path3\");\n\tif(configFilePath3 == null || configFilePath3.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path3 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath4 = getProperty(\"config.file.path4\");\n\tif(configFilePath4 == null || configFilePath4.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path4 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath5 = getProperty(\"config.file.path5\");\n\tif(configFilePath5 == null || configFilePath5.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path5 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath6 = getProperty(\"config.file.path6\");\n\tif(configFilePath6 == null || configFilePath6.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path6 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath7 = getProperty(\"config.file.path7\");\n\tif(configFilePath7 == null || configFilePath7.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path7 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath8 = getProperty(\"config.file.path8\");\n\tif(configFilePath8 == null || configFilePath8.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path8 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath9 = getProperty(\"config.file.path9\");\n\tif(configFilePath9 == null || configFilePath9.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path9 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath10 = getProperty(\"config.file.path10\");\n\tif(configFilePath10 == null || configFilePath10.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path10 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath11 = getProperty(\"config.file.path11\");\n\tif(configFilePath11 == null || configFilePath11.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path11 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath12 = getProperty(\"config.file.path12\");\n\tif(configFilePath12 == null || configFilePath12.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path12 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath13 = getProperty(\"config.file.path13\");\n", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * initialize config, such as check dist path\n */\n", "method_name": "init", "codes": ["public void init(){\n\t\n\t//check dist path\n\tString distPath = getProperty(\"dist.path\");\n\tif(distPath == null || distPath.length() == 0){\n\t\tthrow new RuntimeException(\"dist.path is not set\");\n\t}\n\t\n\t//check config path\n\tString configPath = getProperty(\"config.path\");\n\tif(configPath == null || configPath.length() == 0){\n\t\tthrow new RuntimeException(\"config.path is not set\");\n\t}\n\t\n\t//check config file\n\tString configFile = getProperty(\"config.file\");\n\tif(configFile == null || configFile.length() == 0){\n\t\tthrow new RuntimeException(\"config.file is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath = getProperty(\"config.file.path\");\n\tif(configFilePath == null || configFilePath.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath2 = getProperty(\"config.file.path2\");\n\tif(configFilePath2 == null || configFilePath2.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path2 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath3 = getProperty(\"config.file.path3\");\n\tif(configFilePath3 == null || configFilePath3.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path3 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath4 = getProperty(\"config.file.path4\");\n\tif(configFilePath4 == null || configFilePath4.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path4 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath5 = getProperty(\"config.file.path5\");\n\tif(configFilePath5 == null || configFilePath5.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path5 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath6 = getProperty(\"config.file.path6\");\n\tif(configFilePath6 == null || configFilePath6.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path6 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath7 = getProperty(\"config.file.path7\");\n\tif(configFilePath7 == null || configFilePath7.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path7 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath8 = getProperty(\"config.file.path8\");\n\tif(configFilePath8 == null || configFilePath8.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path8 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath9 = getProperty(\"config.file.path9\");\n\tif(configFilePath9 == null || configFilePath9.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path9 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath10 = getProperty(\"config.file.path10\");\n\tif(configFilePath10 == null || configFilePath10.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path10 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath11 = getProperty(\"config.file.path11\");\n\tif(configFilePath11 == null || configFilePath11.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path11 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath12 = getProperty(\"config.file.path12\");\n\tif(configFilePath12 == null || configFilePath12.length() == 0){\n\t\tthrow new RuntimeException(\"config.file.path12 is not set\");\n\t}\n\t\n\t//check config file path\n\tString configFilePath13 = getProperty(\"config.file.path13\");\n"], "code_level": "slib_runnable", "_id": "636767dc1a6d9265ec0186cb", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "public List<SequenceRange> buildSequenceRanges(){\n\tList<SequenceRange> result = new ArrayList<SequenceRange>();\n\t\n\t// build current profiles segment snapshot search sequence ranges\n\tfor(int i=0; i<profiles.size(); i++){\n\t\tSequenceRange range = profiles.get(i);\n\t\tresult.add(range);\n\t}\n\t\n\treturn result;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * build current profiles segment snapshot search sequence ranges\n */\n", "method_name": "buildSequenceRanges", "codes": ["public List<SequenceRange> buildSequenceRanges(){\n\tList<SequenceRange> result = new ArrayList<SequenceRange>();\n\t\n\t// build current profiles segment snapshot search sequence ranges\n\tfor(int i=0; i<profiles.size(); i++){\n\t\tSequenceRange range = profiles.get(i);\n\t\tresult.add(range);\n\t}\n\t\n\treturn result;\n}"], "code_level": "class_runnable", "_id": "636767de1a6d9265ec018726", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "public static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {\n\tList<ThreadSnapshot> threadSnapshots = new ArrayList<ThreadSnapshot>();\n\tBufferedReader reader = new BufferedReader(new FileReader(file));\n\tString line;\n\tStringBuilder sb = new StringBuilder();\n\twhile ((line = reader.readLine())!= null) {\n\t\tif (line.startsWith(\"#\")) {\n\t\t\tcontinue;\n\t\t}\n\t\tsb.append(line);\n\t\tsb.append(\"\\n\");\n\t\tString[] split = line.split(\"\\\\s+\");\n\t\tString startTime = split[0];\n\t\tString endTime = split[1];\n\t\tString threadName = split[2];\n\t\tString threadId = split[3];\n\t\tString threadIds = split[4];\n\t\tString threadIds2 = split[5];\n\t\tString threadIds3 = split[6];\n\t\tString threadIds4 = split[7];\n\t\tString threadIds5 = split[8];\n\t\tString threadIds6 = split[9];\n\t\tString threadIds7 = split[10];\n\t\tString threadIds8 = split[11];\n\t\tString threadIds9 = split[12];\n\t\tString threadIds10 = split[13];\n\t\tString threadIds11 = split[14];\n\t\tString threadIds12 = split[15];\n\t\tString threadIds13 = split[16];\n\t\tString threadIds14 = split[17];\n\t\tString threadIds15 = split[18];\n\t\tString threadIds16 = split[19];\n\t\tString threadIds17 = split[20];\n\t\tString threadIds18 = split[21];\n\t\tString threadIds19 = split[22];\n\t\tString threadIds20 = split[23];\n\t\tString threadIds21 = split[24];\n\t\tString threadIds22 = split[25];\n\t\tString threadIds23 = split[26];\n\t\tString threadIds24 = split[27];\n\t\tString threadIds25 = split[28];\n\t\tString threadIds26 = split[29];\n\t\tString threadIds27 = split[30];\n\t\tString threadIds28 = split[31];\n\t\tString threadIds29 = split[32];\n\t\tString threadIds30 = split[33];\n\t\tString threadIds31 = split[34];\n\t\tString threadIds32 = split[35];\n\t\tString threadIds33 = split[36];\n\t\tString threadIds34 = split[37];\n\t\tString threadIds35 = split[38];\n\t\tString threadIds36 = split[39];\n\t\tString threadIds37 = split[40];\n\t\tString threadIds38 = split[41];\n\t\tString threadIds39 = split[42];\n\t\tString threadIds40 = split[43];\n\t\tString threadIds41 = split[44];\n\t\tString threadIds42 = split[45];\n\t\tString threadIds43 = split[46];\n\t\tString threadIds44 = split[47];\n\t\tString threadIds45 = split[48];\n\t\tString threadIds46 = split[49];\n\t\tString threadIds47 = split[50];\n\t\tString threadIds48 = split[51];\n\t\tString threadIds49 = split[52];\n\t\tString threadIds50 = split[53];\n\t\tString threadIds51 = split[54];\n\t\tString threadIds52 = split[55];\n\t\tString threadIds53 = split[56];\n\t\tString threadIds54 = split[57];\n\t\tString threadIds55 = split[58];\n\t\tString threadIds56 = split[59];\n\t\tString threadIds57 = split[60];\n\t\tString threadIds58 = split[61];\n\t\tString threadIds59 = split[62];\n\t\tString threadIds60 = split[63];\n\t\tString threadIds61 = split[64];\n\t\tString threadIds62 = split[65];\n\t\tString threadIds63 = split[66];\n\t\tString threadIds64 = split[67];\n\t\tString threadIds65 = split[68];\n\t\tString threadIds66 = split[69];\n\t\tString threadIds67 = split[70];\n\t\tString threadIds68 = split[71", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * load thread snapshots in appointing time range\n */\n", "method_name": "parseFromFileWithTimeRange", "codes": ["public static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {\n\tList<ThreadSnapshot> threadSnapshots = new ArrayList<ThreadSnapshot>();\n\tBufferedReader reader = new BufferedReader(new FileReader(file));\n\tString line;\n\tStringBuilder sb = new StringBuilder();\n\twhile ((line = reader.readLine())!= null) {\n\t\tif (line.startsWith(\"#\")) {\n\t\t\tcontinue;\n\t\t}\n\t\tsb.append(line);\n\t\tsb.append(\"\\n\");\n\t\tString[] split = line.split(\"\\\\s+\");\n\t\tString startTime = split[0];\n\t\tString endTime = split[1];\n\t\tString threadName = split[2];\n\t\tString threadId = split[3];\n\t\tString threadIds = split[4];\n\t\tString threadIds2 = split[5];\n\t\tString threadIds3 = split[6];\n\t\tString threadIds4 = split[7];\n\t\tString threadIds5 = split[8];\n\t\tString threadIds6 = split[9];\n\t\tString threadIds7 = split[10];\n\t\tString threadIds8 = split[11];\n\t\tString threadIds9 = split[12];\n\t\tString threadIds10 = split[13];\n\t\tString threadIds11 = split[14];\n\t\tString threadIds12 = split[15];\n\t\tString threadIds13 = split[16];\n\t\tString threadIds14 = split[17];\n\t\tString threadIds15 = split[18];\n\t\tString threadIds16 = split[19];\n\t\tString threadIds17 = split[20];\n\t\tString threadIds18 = split[21];\n\t\tString threadIds19 = split[22];\n\t\tString threadIds20 = split[23];\n\t\tString threadIds21 = split[24];\n\t\tString threadIds22 = split[25];\n\t\tString threadIds23 = split[26];\n\t\tString threadIds24 = split[27];\n\t\tString threadIds25 = split[28];\n\t\tString threadIds26 = split[29];\n\t\tString threadIds27 = split[30];\n\t\tString threadIds28 = split[31];\n\t\tString threadIds29 = split[32];\n\t\tString threadIds30 = split[33];\n\t\tString threadIds31 = split[34];\n\t\tString threadIds32 = split[35];\n\t\tString threadIds33 = split[36];\n\t\tString threadIds34 = split[37];\n\t\tString threadIds35 = split[38];\n\t\tString threadIds36 = split[39];\n\t\tString threadIds37 = split[40];\n\t\tString threadIds38 = split[41];\n\t\tString threadIds39 = split[42];\n\t\tString threadIds40 = split[43];\n\t\tString threadIds41 = split[44];\n\t\tString threadIds42 = split[45];\n\t\tString threadIds43 = split[46];\n\t\tString threadIds44 = split[47];\n\t\tString threadIds45 = split[48];\n\t\tString threadIds46 = split[49];\n\t\tString threadIds47 = split[50];\n\t\tString threadIds48 = split[51];\n\t\tString threadIds49 = split[52];\n\t\tString threadIds50 = split[53];\n\t\tString threadIds51 = split[54];\n\t\tString threadIds52 = split[55];\n\t\tString threadIds53 = split[56];\n\t\tString threadIds54 = split[57];\n\t\tString threadIds55 = split[58];\n\t\tString threadIds56 = split[59];\n\t\tString threadIds57 = split[60];\n\t\tString threadIds58 = split[61];\n\t\tString threadIds59 = split[62];\n\t\tString threadIds60 = split[63];\n\t\tString threadIds61 = split[64];\n\t\tString threadIds62 = split[65];\n\t\tString threadIds63 = split[66];\n\t\tString threadIds64 = split[67];\n\t\tString threadIds65 = split[68];\n\t\tString threadIds66 = split[69];\n\t\tString threadIds67 = split[70];\n\t\tString threadIds68 = split[71"], "code_level": "project_runnable", "_id": "636767e11a6d9265ec018790", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "/** \n * Convert process properties to source data\n */\n\nprivate JsonObject convertProperties(List<KeyStringValuePair> properties){\n\tJsonObject result = new JsonObject();\n\t\n\tfor(KeyStringValuePair property : properties){\n\t\tresult.addProperty(property.getKey(), property.getValue());\n\t}\n\t\n\treturn result;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Convert process properties to source data\n */\n", "method_name": "convertProperties", "codes": ["/** \n * Convert process properties to source data\n */\n\nprivate JsonObject convertProperties(List<KeyStringValuePair> properties){\n\tJsonObject result = new JsonObject();\n\t\n\tfor(KeyStringValuePair property : properties){\n\t\tresult.addProperty(property.getKey(), property.getValue());\n\t}\n\t\n\treturn result;\n}"], "code_level": "project_runnable", "_id": "636767e01a6d9265ec018764", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "/** \n * Pops an abstract type from the output frame stack and returns its value.\n * @return the abstract type that has been popped from the output frame stack.\n */\n\nprivate int pop(){\n    //System.out.println(\"POP\");\n    int result = stack.pop();\n    //System.out.println(\"result = \" + result);\n    return result;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Pops an abstract type from the output frame stack and returns its value.\n * @return the abstract type that has been popped from the output frame stack.\n */\n", "method_name": "pop", "codes": ["/** \n * Pops an abstract type from the output frame stack and returns its value.\n * @return the abstract type that has been popped from the output frame stack.\n */\n\nprivate int pop(){\n    //System.out.println(\"POP\");\n    int result = stack.pop();\n    //System.out.println(\"result = \" + result);\n    return result;\n}"], "code_level": "self_contained", "_id": "636766a91a6d9265ec0175c2", "project_name": "fastjson2-main"}
{"generate_results": [{"generate_code": "/** \n * Starts the visit of a new stack map frame, stored in  {@link #currentFrame}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Starts the visit of a new stack map frame, stored in  {@link #currentFrame}.\n * @param offset   the bytecode offset of the instruction to which the frame corresponds.\n * @param numLocal the number of local variables in the frame.\n * @param numStack the number of stack elements in the frame.\n * @return the index of the next element to be written in this frame.\n */\n", "method_name": "visitFrameStart", "codes": ["/** \n * Starts the visit of a new stack map frame, stored in  {@link #currentFrame}"], "code_level": "self_contained", "_id": "636766aa1a6d9265ec0175ce", "project_name": "fastjson2-main"}
{"generate_results": [{"generate_code": "/** \n * Enlarges this byte vector so that it can receive'size' more bytes.\n * @param size number of additional bytes that this byte vector should be able to receive.\n */\n\nprivate void enlarge(final int size){\n\tbyte[] newArray = new byte[size];\n\tSystem.arraycopy(this, 0, newArray, 0, this.length);\n\tthis.length = size;\n\tthis.data = newArray;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Enlarges this byte vector so that it can receive 'size' more bytes.\n * @param size number of additional bytes that this byte vector should be able to receive.\n */\n", "method_name": "enlarge", "codes": ["/** \n * Enlarges this byte vector so that it can receive'size' more bytes.\n * @param size number of additional bytes that this byte vector should be able to receive.\n */\n\nprivate void enlarge(final int size){\n\tbyte[] newArray = new byte[size];\n\tSystem.arraycopy(this, 0, newArray, 0, this.length);\n\tthis.length = size;\n\tthis.data = newArray;\n}"], "code_level": "self_contained", "_id": "636766a91a6d9265ec0175c1", "project_name": "fastjson2-main"}
{"generate_results": [{"generate_code": "public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n\tif(byteLength > this.byteLength){\n\t\tthrow new IllegalArgumentException(\"byteLength must be less than this.byteLength\");\n\t}\n\tif(byteArrayValue == null){\n\t\tthrow new IllegalArgumentException(\"byteArrayValue must not be null\");\n\t}\n\tif(byteOffset < 0 || byteOffset > byteArrayValue.length - byteLength){\n\t\tthrow new IllegalArgumentException(\"byteOffset must be less than this.byteLength\");\n\t}\n\tif(byteLength == 0){\n\t\treturn this;\n\t}\n\tif(byteLength > this.byteLength){\n\t\tthis.byteLength = byteLength;\n\t\tthis.byteArrayValue = byteArrayValue.clone();\n\t}else{\n\t\tthis.byteArrayValue = byteArrayValue.clone();\n\t\tthis.byteLength = byteLength;\n\t}\n\treturn this;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Puts an array of bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param byteArrayValue an array of bytes. May be {@literal null} to put {@code byteLength} nullbytes into this byte vector.\n * @param byteOffset     index of the first byte of byteArrayValue that must be copied.\n * @param byteLength     number of bytes of byteArrayValue that must be copied.\n * @return this byte vector.\n */\n", "method_name": "putByteArray", "codes": ["public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n\tif(byteLength > this.byteLength){\n\t\tthrow new IllegalArgumentException(\"byteLength must be less than this.byteLength\");\n\t}\n\tif(byteArrayValue == null){\n\t\tthrow new IllegalArgumentException(\"byteArrayValue must not be null\");\n\t}\n\tif(byteOffset < 0 || byteOffset > byteArrayValue.length - byteLength){\n\t\tthrow new IllegalArgumentException(\"byteOffset must be less than this.byteLength\");\n\t}\n\tif(byteLength == 0){\n\t\treturn this;\n\t}\n\tif(byteLength > this.byteLength){\n\t\tthis.byteLength = byteLength;\n\t\tthis.byteArrayValue = byteArrayValue.clone();\n\t}else{\n\t\tthis.byteArrayValue = byteArrayValue.clone();\n\t\tthis.byteLength = byteLength;\n\t}\n\treturn this;\n}"], "code_level": "class_runnable", "_id": "636766a91a6d9265ec0175ae", "project_name": "fastjson2-main"}
{"generate_results": [{"generate_code": "/** \n * Pops the given number of abstract types from the output frame stack.\n * @param elements the number of abstract types that must be popped.\n */\n\nprivate void pop(final int elements){\n    final int size = frame.size();\n    for(int i = 0; i < elements; i++){\n        frame.pop();\n    }\n    frame.setSize(size);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Pops the given number of abstract types from the output frame stack.\n * @param elements the number of abstract types that must be popped.\n */\n", "method_name": "pop", "codes": ["/** \n * Pops the given number of abstract types from the output frame stack.\n * @param elements the number of abstract types that must be popped.\n */\n\nprivate void pop(final int elements){\n    final int size = frame.size();\n    for(int i = 0; i < elements; i++){\n        frame.pop();\n    }\n    frame.setSize(size);\n}"], "code_level": "self_contained", "_id": "636766a81a6d9265ec017586", "project_name": "fastjson2-main"}
{"generate_results": [{"generate_code": "public ByteVector putInt(final int intValue){\n\tif(intValue < 0){\n\t\tthrow new IllegalArgumentException(\"The value of the int cannot be negative.\");\n\t}\n\t\n\tif(intValue == 0){\n\t\treturn this;\n\t}\n\t\n\tif(intValue > 127){\n\t\tthrow new IllegalArgumentException(\"The value of the int cannot be greater than 127.\");\n\t}\n\t\n\tif(intValue > 255){\n\t\tbyte[] newBytes = new byte[intValue.length() + 1];\n\t\tSystem.arraycopy(bytes, 0, newBytes, 0, bytes.length);\n\t\tnewBytes[bytes.length] = (byte)intValue;\n\t\tbytes = newBytes;\n\t}\n\t\n\tbytes[intValue] = (byte)intValue;\n\treturn this;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Puts an int into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param intValue an int.\n * @return this byte vector.\n */\n", "method_name": "putInt", "codes": ["public ByteVector putInt(final int intValue){\n\tif(intValue < 0){\n\t\tthrow new IllegalArgumentException(\"The value of the int cannot be negative.\");\n\t}\n\t\n\tif(intValue == 0){\n\t\treturn this;\n\t}\n\t\n\tif(intValue > 127){\n\t\tthrow new IllegalArgumentException(\"The value of the int cannot be greater than 127.\");\n\t}\n\t\n\tif(intValue > 255){\n\t\tbyte[] newBytes = new byte[intValue.length() + 1];\n\t\tSystem.arraycopy(bytes, 0, newBytes, 0, bytes.length);\n\t\tnewBytes[bytes.length] = (byte)intValue;\n\t\tbytes = newBytes;\n\t}\n\t\n\tbytes[intValue] = (byte)intValue;\n\treturn this;\n}"], "code_level": "class_runnable", "_id": "636766a81a6d9265ec017596", "project_name": "fastjson2-main"}
{"generate_results": [{"generate_code": "/** \n * Pops as many abstract types from the output frame stack as described by the given descriptor.\n * @param descriptor a type or method descriptor (in which case its argument types are popped).\n */\n\nprivate void pop(final String descriptor){\n    if(descriptor.equals(\"<init>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<init>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<init>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<init>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Pops as many abstract types from the output frame stack as described by the given descriptor.\n * @param descriptor a type or method descriptor (in which case its argument types are popped).\n */\n", "method_name": "pop", "codes": ["/** \n * Pops as many abstract types from the output frame stack as described by the given descriptor.\n * @param descriptor a type or method descriptor (in which case its argument types are popped).\n */\n\nprivate void pop(final String descriptor){\n    if(descriptor.equals(\"<init>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<init>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<init>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<init>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit>\")){\n        return;\n    }\n    if(descriptor.equals(\"<clinit"], "code_level": "class_runnable", "_id": "636766a91a6d9265ec0175c4", "project_name": "fastjson2-main"}
{"generate_results": [{"generate_code": "/** \n * Puts two bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param byteValue1 a byte.\n * @param byteValue2 another byte.\n * @return this byte vector.\n */\n\nfinal ByteVector put11(final int byteValue1,final int byteValue2){\n\tif(byteValue1>=0xFF){\n\t\tbyteValue1=byteValue1&0xFF;\n\t\tbyteValue2=byteValue2&0xFF;\n\t\tenlargeIfNeeded();\n\t}\n\tbyteValue1|=(byteValue2&0xFF);\n\tbyteValue2=0;\n\treturn this;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Puts two bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param byteValue1 a byte.\n * @param byteValue2 another byte.\n * @return this byte vector.\n */\n", "method_name": "put11", "codes": ["/** \n * Puts two bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param byteValue1 a byte.\n * @param byteValue2 another byte.\n * @return this byte vector.\n */\n\nfinal ByteVector put11(final int byteValue1,final int byteValue2){\n\tif(byteValue1>=0xFF){\n\t\tbyteValue1=byteValue1&0xFF;\n\t\tbyteValue2=byteValue2&0xFF;\n\t\tenlargeIfNeeded();\n\t}\n\tbyteValue1|=(byteValue2&0xFF);\n\tbyteValue2=0;\n\treturn this;\n}"], "code_level": "class_runnable", "_id": "636766a81a6d9265ec017595", "project_name": "fastjson2-main"}
{"generate_results": [{"generate_code": "public String toString(JSONWriter.Feature... features){\n    StringBuilder sb = new StringBuilder();\n    for (JSONWriter.Feature feature : features) {\n        sb.append(feature.toString());\n    }\n    return sb.toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Serialize to JSON  {@link String}\n * @param features features to be enabled in serialization\n * @return JSON {@link String}\n */\n", "method_name": "toString", "codes": ["public String toString(JSONWriter.Feature... features){\n    StringBuilder sb = new StringBuilder();\n    for (JSONWriter.Feature feature : features) {\n        sb.append(feature.toString());\n    }\n    return sb.toString();\n}"], "code_level": "self_contained", "_id": "636766a81a6d9265ec01757b", "project_name": "fastjson2-main"}
{"generate_results": [{"generate_code": "public static int nextPrime(int desiredCapacity){\n\t\n\tint prime = 1;\n\t\n\twhile(prime < desiredCapacity){\n\t\t\n\t\tif(prime % 2 == 0){\n\t\t\t\n\t\t\tprime = prime + 1;\n\t\t\t\n\t\t}else{\n\t\t\t\n\t\t\tprime = prime * 2;\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\treturn prime;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Returns a prime number which is <code>&gt;= desiredCapacity</code> and very close to <code>desiredCapacity</code> (within 11% if <code>desiredCapacity &gt;= 1000</code>).\n * @param desiredCapacity the capacity desired by the user.\n * @return the capacity which should be used for a hashtable.\n */\n", "method_name": "nextPrime", "codes": ["public static int nextPrime(int desiredCapacity){\n\t\n\tint prime = 1;\n\t\n\twhile(prime < desiredCapacity){\n\t\t\n\t\tif(prime % 2 == 0){\n\t\t\t\n\t\t\tprime = prime + 1;\n\t\t\t\n\t\t}else{\n\t\t\t\n\t\t\tprime = prime * 2;\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\treturn prime;\n}"], "code_level": "slib_runnable", "_id": "636766a81a6d9265ec01758e", "project_name": "fastjson2-main"}
{"generate_results": [{"generate_code": "/** \n * Interpret a character as a digit (in any base up to 36) and return the numeric value. This is like {@code Character.digit()}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Interpret a character as a digit (in any base up to 36) and return the numeric value. This is like {@code Character.digit()} but we don't accept non-ASCII digits.\n */\n", "method_name": "digitValue", "codes": ["/** \n * Interpret a character as a digit (in any base up to 36) and return the numeric value. This is like {@code Character.digit()}"], "code_level": "self_contained", "_id": "636767a61a6d9265ec0185b7", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "/** \n * Is this a hex digit?\n */\n\nprivate static boolean isHex(final char c){\n\treturn (c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f');\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Is this a hex digit?\n */\n", "method_name": "isHex", "codes": ["/** \n * Is this a hex digit?\n */\n\nprivate static boolean isHex(final char c){\n\treturn (c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f');\n}"], "code_level": "self_contained", "_id": "636767ab1a6d9265ec018676", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n\tint size = schema.getSize(message);\n\tint pos = buffer.getPos();\n\tint sizePos = buffer.getPos();\n\tbuffer.write(size);\n\tbuffer.write(pos);\n\tschema.write(message, out);\n\tbuffer.write(sizePos);\n\treturn size;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Serializes the  {@code message}, prefixed with its length, into an  {@link OutputStream}.\n * @return the size of the message\n */\n", "method_name": "writeDelimitedTo", "codes": ["public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n\tint size = schema.getSize(message);\n\tint pos = buffer.getPos();\n\tint sizePos = buffer.getPos();\n\tbuffer.write(size);\n\tbuffer.write(pos);\n\tschema.write(message, out);\n\tbuffer.write(sizePos);\n\treturn size;\n}"], "code_level": "project_runnable", "_id": "636767a41a6d9265ec018582", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "public boolean equals(final byte[] data,int offset,final int len){\n\tif(data==null){\n\t\treturn false;\n\t}\n\tif(len<0){\n\t\treturn false;\n\t}\n\tif(offset<0){\n\t\treturn false;\n\t}\n\tif(len>data.length-offset){\n\t\treturn false;\n\t}\n\tfor(int i=offset;i<offset+len;i++){\n\t\tif(data[i]!=data[i+offset]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Returns true if the contents of the internal array and the provided array match.\n */\n", "method_name": "equals", "codes": ["public boolean equals(final byte[] data,int offset,final int len){\n\tif(data==null){\n\t\treturn false;\n\t}\n\tif(len<0){\n\t\treturn false;\n\t}\n\tif(offset<0){\n\t\treturn false;\n\t}\n\tif(len>data.length-offset){\n\t\treturn false;\n\t}\n\tfor(int i=offset;i<offset+len;i++){\n\t\tif(data[i]!=data[i+offset]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}"], "code_level": "class_runnable", "_id": "636767a51a6d9265ec01859d", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "public static int computeUTF8Size(final CharSequence str,final int index,final int len){\n\t\n\tint size = 0;\n\t\n\tif(index < 0 || index >= str.length()){\n\t\treturn size;\n\t}\n\t\n\tint i = index;\n\t\n\twhile(i < str.length()){\n\t\t\n\t\tchar c = str.charAt(i);\n\t\t\n\t\tif(c >= 0x80){\n\t\t\tsize++;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn size;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Computes the size of the utf8 string beginning at the specified  {@code index} with the specified {@code length}.\n */\n", "method_name": "computeUTF8Size", "codes": ["public static int computeUTF8Size(final CharSequence str,final int index,final int len){\n\t\n\tint size = 0;\n\t\n\tif(index < 0 || index >= str.length()){\n\t\treturn size;\n\t}\n\t\n\tint i = index;\n\t\n\twhile(i < str.length()){\n\t\t\n\t\tchar c = str.charAt(i);\n\t\t\n\t\tif(c >= 0x80){\n\t\t\tsize++;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn size;\n}"], "code_level": "self_contained", "_id": "636767a41a6d9265ec01856c", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "public static LinkedBuffer writeUTF8(final CharSequence str,final WriteSession session,final LinkedBuffer lb){\n\tif(str == null){\n\t\treturn lb;\n\t}\n\t\n\tfinal int len = str.length();\n\t\n\tif(len == 0){\n\t\treturn lb;\n\t}\n\t\n\tfinal byte[] bytes = new byte[len];\n\t\n\tint i = 0;\n\t\n\tfor(;i < len;i++){\n\t\tfinal char c = str.charAt(i);\n\t\t\n\t\tif(c >= 0x0001 && c <= 0x007F){\n\t\t\tbytes[i] = (byte)c;\n\t\t}else if(c >= 0x0800 && c <= 0xD7FF){\n\t\t\tbytes[i] = (byte)(0xE0 | ((c >> 12) & 0x0F));\n\t\t\tbytes[i+1] = (byte)(0x80 | ((c >>  6) & 0x", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Writes the utf8-encoded bytes from the string into the  {@link LinkedBuffer}.\n */\n", "method_name": "writeUTF8", "codes": ["public static LinkedBuffer writeUTF8(final CharSequence str,final WriteSession session,final LinkedBuffer lb){\n\tif(str == null){\n\t\treturn lb;\n\t}\n\t\n\tfinal int len = str.length();\n\t\n\tif(len == 0){\n\t\treturn lb;\n\t}\n\t\n\tfinal byte[] bytes = new byte[len];\n\t\n\tint i = 0;\n\t\n\tfor(;i < len;i++){\n\t\tfinal char c = str.charAt(i);\n\t\t\n\t\tif(c >= 0x0001 && c <= 0x007F){\n\t\t\tbytes[i] = (byte)c;\n\t\t}else if(c >= 0x0800 && c <= 0xD7FF){\n\t\t\tbytes[i] = (byte)(0xE0 | ((c >> 12) & 0x0F));\n\t\t\tbytes[i+1] = (byte)(0x80 | ((c >>  6) & 0x"], "code_level": "project_runnable", "_id": "636767ab1a6d9265ec01867b", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "public long readRawVarint64() throws IOException {\n    long result = 0;\n    int shift = 0;\n    while (true) {\n      if (pos >= limit) {\n        return result;\n      }\n      int b = in.read();\n      if (b < 0) {\n        return result;\n      }\n      result = (result << 7) | (b & 0x7F);\n      if ((b & 0x80) == 0) {\n        break;\n      }\n      result |= (b & 0x7F) << shift;\n      shift += 7;\n    }\n", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Read a raw Varint from the stream.\n */\n", "method_name": "readRawVarint64", "codes": ["public long readRawVarint64() throws IOException {\n    long result = 0;\n    int shift = 0;\n    while (true) {\n      if (pos >= limit) {\n        return result;\n      }\n      int b = in.read();\n      if (b < 0) {\n        return result;\n      }\n      result = (result << 7) | (b & 0x7F);\n      if ((b & 0x80) == 0) {\n        break;\n      }\n      result |= (b & 0x7F) << shift;\n      shift += 7;\n    }\n"], "code_level": "class_runnable", "_id": "636767a41a6d9265ec018572", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "public static int writeTo(final DataOutput out,LinkedBuffer node) throws IOException {\n\tint size=0;\n\tif(node.getSize()>0) {\n\t\tsize=node.getSize();\n\t\tout.writeInt(size);\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Writes the contents of the  {@link LinkedBuffer} into the {@link DataOutput}.\n * @return the total content size of the buffer.\n */\n", "method_name": "writeTo", "codes": ["public static int writeTo(final DataOutput out,LinkedBuffer node) throws IOException {\n\tint size=0;\n\tif(node.getSize()>0) {\n\t\tsize=node.getSize();\n\t\tout.writeInt(size);\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());\n\t\tout.writeInt(node.getSize());"], "code_level": "class_runnable", "_id": "636767aa1a6d9265ec01865a", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "public String readString(int length) throws IOException {\n    if (length < 0) {\n        throw new IllegalArgumentException(\"length must be >= 0\");\n    }\n    \n    int read = read();\n    if (read == -1) {\n        return null;\n    }\n    \n    if (read == '\"') {\n        return readString();\n    } else {\n        return readString(length - 1);\n    }\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Read a  {@code string} field value from the stream.\n */\n", "method_name": "readString", "codes": ["public String readString(int length) throws IOException {\n    if (length < 0) {\n        throw new IllegalArgumentException(\"length must be >= 0\");\n    }\n    \n    int read = read();\n    if (read == -1) {\n        return null;\n    }\n    \n    if (read == '\"') {\n        return readString();\n    } else {\n        return readString(length - 1);\n    }\n}"], "code_level": "project_runnable", "_id": "636767a31a6d9265ec018552", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "public final byte[] toByteArray(){\n\treturn this.buffer;\n}", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Returns a single byte array containg all the contents written to the buffer(s).\n */\n", "method_name": "toByteArray", "codes": ["public final byte[] toByteArray(){\n\treturn this.buffer;\n}"], "code_level": "project_runnable", "_id": "636767a21a6d9265ec018517", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "/** \n * Compares the two specified  {@code long}", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Compares the two specified  {@code long} values. The sign of the value returned is the same as that of{@code ((Long) a).compareTo(b)}. <p> <b>Note for Java 7 and later:</b> this method should be treated as deprecated; use the equivalent {@link Long#compare} method instead.\n * @param a the first  {@code long} to compare\n * @param b the second  {@code long} to compare\n * @return a negative value if {@code a} is less than {@code b}; a positive value if  {@code a} is greater than{@code b}; or zero if they are equal\n */\n", "method_name": "compareSigned", "codes": ["/** \n * Compares the two specified  {@code long}"], "code_level": "self_contained", "_id": "636767a41a6d9265ec01857e", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "public byte[] toByteArray(){\n    return this.bytes;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Copies bytes to a  {@code byte[]}.\n */\n", "method_name": "toByteArray", "codes": ["public byte[] toByteArray(){\n    return this.bytes;\n}"], "code_level": "self_contained", "_id": "636767aa1a6d9265ec01864a", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "/** \n * Check if this field have been packed into a length-delimited field. If so, update internal state to reflect that packed fields are being read.\n * @throws IOException\n */\n\nprivate void checkIfPackedField() throws IOException {\n\tif (fieldLength == -1) {\n\t\treturn;\n\t}\n\tif (fieldLength == 0) {\n\t\treturn;\n\t}\n\tif (fieldLength == 1) {\n\t\tif (field[0] == 0) {\n\t\t\tfieldLength = 0;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (fieldLength == 2) {\n\t\tif (field[0] == 0 && field[1] == 0) {\n\t\t\tfieldLength = 0;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (fieldLength == 3) {\n\t\tif (field[0] == 0 && field[1] == 0 && field[2] == 0) {\n\t\t\tfieldLength = 0;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (fieldLength == 4) {\n\t\tif (field[0] == 0 && field[1] == 0 && field[2] == 0 && field[3] == 0) {\n\t\t\tfieldLength = 0;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (fieldLength == 5) {\n\t\tif (field[0] == 0 && field[1] == 0 && field[2] == 0 && field[3] == 0 && field[4] == 0) {\n\t\t\tfieldLength = 0;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (fieldLength == 6) {\n\t\tif (field[0] == 0 && field[1] == 0 && field[2] == 0 && field[3] == 0 && field[4] == 0 && field[5] == 0) {\n\t\t\tfieldLength = 0;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (fieldLength == 7) {\n\t\tif (field[0] == 0 && field[1] == 0 && field[2] == 0 && field[3] == 0 && field[4] == 0 && field[5] == 0 && field[6] == 0) {\n\t\t\tfieldLength = 0;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (fieldLength == 8) {\n\t\tif (field[0] == 0 && field[1] == 0 && field[2] == 0 && field[3] == 0 && field[4] == 0 && field[5] == 0 && field[6] == 0 && field[7] == 0) {\n\t\t\tfieldLength = 0;\n\t\t\treturn;\n\t\t}\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Check if this field have been packed into a length-delimited field. If so, update internal state to reflect that packed fields are being read.\n * @throws IOException\n */\n", "method_name": "checkIfPackedField", "codes": ["/** \n * Check if this field have been packed into a length-delimited field. If so, update internal state to reflect that packed fields are being read.\n * @throws IOException\n */\n\nprivate void checkIfPackedField() throws IOException {\n\tif (fieldLength == -1) {\n\t\treturn;\n\t}\n\tif (fieldLength == 0) {\n\t\treturn;\n\t}\n\tif (fieldLength == 1) {\n\t\tif (field[0] == 0) {\n\t\t\tfieldLength = 0;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (fieldLength == 2) {\n\t\tif (field[0] == 0 && field[1] == 0) {\n\t\t\tfieldLength = 0;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (fieldLength == 3) {\n\t\tif (field[0] == 0 && field[1] == 0 && field[2] == 0) {\n\t\t\tfieldLength = 0;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (fieldLength == 4) {\n\t\tif (field[0] == 0 && field[1] == 0 && field[2] == 0 && field[3] == 0) {\n\t\t\tfieldLength = 0;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (fieldLength == 5) {\n\t\tif (field[0] == 0 && field[1] == 0 && field[2] == 0 && field[3] == 0 && field[4] == 0) {\n\t\t\tfieldLength = 0;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (fieldLength == 6) {\n\t\tif (field[0] == 0 && field[1] == 0 && field[2] == 0 && field[3] == 0 && field[4] == 0 && field[5] == 0) {\n\t\t\tfieldLength = 0;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (fieldLength == 7) {\n\t\tif (field[0] == 0 && field[1] == 0 && field[2] == 0 && field[3] == 0 && field[4] == 0 && field[5] == 0 && field[6] == 0) {\n\t\t\tfieldLength = 0;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (fieldLength == 8) {\n\t\tif (field[0] == 0 && field[1] == 0 && field[2] == 0 && field[3] == 0 && field[4] == 0 && field[5] == 0 && field[6] == 0 && field[7] == 0) {\n\t\t\tfieldLength = 0;\n\t\t\treturn;\n\t\t}\n\t}\n}"], "code_level": "class_runnable", "_id": "636767a31a6d9265ec01854f", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "public int readTag() throws IOException {\n\tif (pos >= limit) {\n\t\treturn 0;\n\t}\n\tint tag = read();\n\tif (tag == 0) {\n\t\treturn 0;\n\t}\n\tif (tag < 0) {\n\t\tthrow new EOFException();\n\t}\n\tif (tag == '\\r') {\n\t\tif (pos >= limit) {\n\t\t\treturn 0;\n\t\t}\n\t\tint ch = read();\n\t\tif (ch == '\\n') {\n\t\t\tpos++;\n\t\t\treturn 0;\n\t\t}\n\t\tif (ch == '\\n') {\n\t\t\tpos++;\n\t\t\treturn 0;\n\t\t}\n\t\tthrow new IOException(\"unexpected newline\");\n\t}\n\tif (tag == '\\n') {\n\t\tpos++;\n\t\treturn 0;\n\t}\n\tthrow new IOException(\"unexpected character\");\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Attempt to read a field tag, returning zero if we have reached EOF. Protocol message parsers use this to read tags, since a protocol message may legally end wherever a tag occurs, and zero is not a valid tag number.\n */\n", "method_name": "readTag", "codes": ["public int readTag() throws IOException {\n\tif (pos >= limit) {\n\t\treturn 0;\n\t}\n\tint tag = read();\n\tif (tag == 0) {\n\t\treturn 0;\n\t}\n\tif (tag < 0) {\n\t\tthrow new EOFException();\n\t}\n\tif (tag == '\\r') {\n\t\tif (pos >= limit) {\n\t\t\treturn 0;\n\t\t}\n\t\tint ch = read();\n\t\tif (ch == '\\n') {\n\t\t\tpos++;\n\t\t\treturn 0;\n\t\t}\n\t\tif (ch == '\\n') {\n\t\t\tpos++;\n\t\t\treturn 0;\n\t\t}\n\t\tthrow new IOException(\"unexpected newline\");\n\t}\n\tif (tag == '\\n') {\n\t\tpos++;\n\t\treturn 0;\n\t}\n\tthrow new IOException(\"unexpected character\");\n}"], "code_level": "class_runnable", "_id": "636767a81a6d9265ec0185fc", "project_name": "protostuff-master"}
