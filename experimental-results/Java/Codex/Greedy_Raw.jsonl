{"generate_results": [{"generate_code": "public boolean shouldPrintMessage(int timestamp,String message){\n\n    if(!map.containsKey(message)){\n        map.put(message,timestamp);\n        return true;\n    }\n    else{\n        if(timestamp-map.get(message)>=10){\n            map.put(message,timestamp);\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns true if the message should be printed in the given timestamp, otherwise returns false. If this method returns false, the message will not be printed. The timestamp is in seconds granularity. \n */\n", "method_name": "shouldPrintMessage", "codes": ["public boolean shouldPrintMessage(int timestamp,String message){\n\n    if(!map.containsKey(message)){\n        map.put(message,timestamp);\n        return true;\n    }\n    else{\n        if(timestamp-map.get(message)>=10){\n            map.put(message,timestamp);\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}"], "code_level": "class_runnable", "_id": "6367672d1a6d9265ec017c73", "project_name": "interviews-master"}
{"generate_results": [{"generate_code": "public boolean remove(int val){\n\n\tif(!map.containsKey(val)) return false;\n\tint loc = map.get(val);\n\tif(loc < nums.size() - 1){\n\t\tint lastone = nums.get(nums.size() - 1);\n\t\tnums.set(loc, lastone);\n\t\tmap.put(lastone, loc);\n\t}\n\tmap.remove(val);\n\tnums.remove(nums.size() - 1);\n\treturn true;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Removes a value from the set. Returns true if the set contained the specified element. \n */\n", "method_name": "remove", "codes": ["public boolean remove(int val){\n\n\tif(!map.containsKey(val)) return false;\n\tint loc = map.get(val);\n\tif(loc < nums.size() - 1){\n\t\tint lastone = nums.get(nums.size() - 1);\n\t\tnums.set(loc, lastone);\n\t\tmap.put(lastone, loc);\n\t}\n\tmap.remove(val);\n\tnums.remove(nums.size() - 1);\n\treturn true;\n}"], "code_level": "class_runnable", "_id": "6367672d1a6d9265ec017c74", "project_name": "interviews-master"}
{"generate_results": [{"generate_code": "public boolean insert(int val){\n\n\tif(map.containsKey(val)){\n\t\treturn false;\n\t}\n\tmap.put(val, new Node(val));\n\tif(head == null){\n\t\thead = map.get(val);\n\t\ttail = map.get(val);\n\t}else{\n\t\ttail.next = map.get(val);\n\t\tmap.get(val).prev = tail;\n\t\ttail = map.get(val);\n\t}\n\treturn true;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Inserts a value to the set. Returns true if the set did not already contain the specified element. \n */\n", "method_name": "insert", "codes": ["public boolean insert(int val){\n\n\tif(map.containsKey(val)){\n\t\treturn false;\n\t}\n\tmap.put(val, new Node(val));\n\tif(head == null){\n\t\thead = map.get(val);\n\t\ttail = map.get(val);\n\t}else{\n\t\ttail.next = map.get(val);\n\t\tmap.get(val).prev = tail;\n\t\ttail = map.get(val);\n\t}\n\treturn true;\n}"], "code_level": "class_runnable", "_id": "6367672d1a6d9265ec017c78", "project_name": "interviews-master"}
{"generate_results": [{"generate_code": "public static boolean isSameLength(final byte[] array1,final byte[] array2){\n\n\tif((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)){\n\t\treturn false;\n\t}\n\treturn true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>.</p>\n * @param array1 the first array, may be <code>null</code>\n * @param array2 the second array, may be <code>null</code>\n * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array\n */\n", "method_name": "isSameLength", "codes": ["public static boolean isSameLength(final byte[] array1,final byte[] array2){\n\n\tif((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)){\n\t\treturn false;\n\t}\n\treturn true;\n}"], "code_level": "self_contained", "_id": "6367670b1a6d9265ec017a00", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean[] toPrimitive(final Boolean[] array){\n\n\tif (array == null) {\n\t\treturn null;\n\t} else if (array.length == 0) {\n\t\treturn EMPTY_BOOLEAN_ARRAY;\n\t}\n\tfinal boolean[] result = new boolean[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = array[i].booleanValue();\n\t}\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of object Booleans to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Boolean</code> array, may be <code>null</code>\n * @return a <code>boolean</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static boolean[] toPrimitive(final Boolean[] array){\n\n\tif (array == null) {\n\t\treturn null;\n\t} else if (array.length == 0) {\n\t\treturn EMPTY_BOOLEAN_ARRAY;\n\t}\n\tfinal boolean[] result = new boolean[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = array[i].booleanValue();\n\t}\n\treturn result;\n}"], "code_level": "self_contained", "_id": "636767081a6d9265ec017989", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static String toString(Object obj){\n\n  return obj == null ? \"\" : obj.toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Gets the <code>toString</code> of an <code>Object</code> returning an empty string (\"\") if <code>null</code> input.</p> <pre> ObjectUtils.toString(null)         = \"\" ObjectUtils.toString(\"\")           = \"\" ObjectUtils.toString(\"bat\")        = \"bat\" ObjectUtils.toString(Boolean.TRUE) = \"true\" </pre>\n * @see StringUtils#defaultString(String)\n * @see String#valueOf(Object)\n * @param obj  the Object to <code>toString</code>, may be null\n * @return the passed in Object's toString, or nullStr if <code>null</code> input\n * @since 2.0\n */\n", "method_name": "toString", "codes": ["public static String toString(Object obj){\n\n  return obj == null ? \"\" : obj.toString();\n}"], "code_level": "self_contained", "_id": "636766f81a6d9265ec01775c", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean toBoolean(Boolean bool){\n\n  return toBooleanDefaultIfNull(bool, false);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts a Boolean to a boolean handling <code>null</code> by returning <code>false</code>.</p> <pre> BooleanUtils.toBoolean(Boolean.TRUE)  = true BooleanUtils.toBoolean(Boolean.FALSE) = false BooleanUtils.toBoolean(null)          = false </pre>\n * @param bool  the boolean to convert\n * @return <code>true</code> or <code>false</code>, <code>null</code> returns <code>false</code>\n */\n", "method_name": "toBoolean", "codes": ["public static boolean toBoolean(Boolean bool){\n\n  return toBooleanDefaultIfNull(bool, false);\n}"], "code_level": "self_contained", "_id": "636766f91a6d9265ec01777f", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static Byte[] nullToEmpty(final Byte[] array){\n\n  if (isEmpty(array)){\n    return EMPTY_BYTE_OBJECT_ARRAY;\n  }\n  return array;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n * @param array  the array to check for <code>null</code> or empty\n * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n * @since 2.5\n */\n", "method_name": "nullToEmpty", "codes": ["public static Byte[] nullToEmpty(final Byte[] array){\n\n  if (isEmpty(array)){\n    return EMPTY_BYTE_OBJECT_ARRAY;\n  }\n  return array;\n}"], "code_level": "self_contained", "_id": "6367670b1a6d9265ec0179ff", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static Boolean[] nullToEmpty(final Boolean[] array){\n\n\tif (isEmpty(array)){\n\t\treturn EMPTY_BOOLEAN_OBJECT_ARRAY;\n\t}\n\treturn array;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n * @param array  the array to check for <code>null</code> or empty\n * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n * @since 2.5\n */\n", "method_name": "nullToEmpty", "codes": ["public static Boolean[] nullToEmpty(final Boolean[] array){\n\n\tif (isEmpty(array)){\n\t\treturn EMPTY_BOOLEAN_OBJECT_ARRAY;\n\t}\n\treturn array;\n}"], "code_level": "self_contained", "_id": "6367670a1a6d9265ec0179e8", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static byte[] toPrimitive(final Byte[] array){\n\n\tif(array == null){\n\t\treturn null;\n\t}else if(array.length == 0){\n\t\treturn EMPTY_BYTE_ARRAY;\n\t}\n\tfinal byte[] result = new byte[array.length];\n\tfor(int i = 0; i < array.length; i++){\n\t\tresult[i] = array[i].byteValue();\n\t}\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of object Bytes to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Byte</code> array, may be <code>null</code>\n * @return a <code>byte</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static byte[] toPrimitive(final Byte[] array){\n\n\tif(array == null){\n\t\treturn null;\n\t}else if(array.length == 0){\n\t\treturn EMPTY_BYTE_ARRAY;\n\t}\n\tfinal byte[] result = new byte[array.length];\n\tfor(int i = 0; i < array.length; i++){\n\t\tresult[i] = array[i].byteValue();\n\t}\n\treturn result;\n}"], "code_level": "self_contained", "_id": "636767031a6d9265ec0178e6", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static String reverse(final String str){\n\n\tif (str == null) {\n\t\treturn null;\n\t}\n\treturn new StringBuilder(str).reverse().toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Reverses a String as per  {@link StringBuilder#reverse()}.</p> <p>A <code>null</code> String returns <code>null</code>.</p> <pre> StringUtils.reverse(null)  = null StringUtils.reverse(\"\")    = \"\" StringUtils.reverse(\"bat\") = \"tab\" </pre>\n * @param str  the String to reverse, may be null\n * @return the reversed String, <code>null</code> if null String input\n */\n", "method_name": "reverse", "codes": ["public static String reverse(final String str){\n\n\tif (str == null) {\n\t\treturn null;\n\t}\n\treturn new StringBuilder(str).reverse().toString();\n}"], "code_level": "slib_runnable", "_id": "636767001a6d9265ec017873", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean isDigits(String str){\n\n  if(StringUtils.isEmpty(str)){\n    return false;\n  }\n  for(int i=0;i<str.length();i++){\n    if(!Character.isDigit(str.charAt(i))){\n      return false;\n    }\n  }\n  return true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks whether the <code>String</code> contains only digit characters.</p> <p><code>Null</code> and empty String will return <code>false</code>.</p>\n * @param str  the <code>String</code> to check\n * @return <code>true</code> if str contains only unicode numeric\n */\n", "method_name": "isDigits", "codes": ["public static boolean isDigits(String str){\n\n  if(StringUtils.isEmpty(str)){\n    return false;\n  }\n  for(int i=0;i<str.length();i++){\n    if(!Character.isDigit(str.charAt(i))){\n      return false;\n    }\n  }\n  return true;\n}"], "code_level": "slib_runnable", "_id": "636766ff1a6d9265ec01784b", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "private static boolean endsWith(final String str,final String suffix,final boolean ignoreCase){\n\n\tif(str==null||suffix==null){\n\t\treturn (str==null&&suffix==null);\n\t}\n\tif(suffix.length()>str.length()){\n\t\treturn false;\n\t}\n\tfinal int strOffset=str.length()-suffix.length();\n\treturn str.regionMatches(ignoreCase,strOffset,suffix,0,suffix.length());\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Check if a String ends with a specified suffix (optionally case insensitive).</p>\n * @see String#endsWith(String)\n * @param str  the String to check, may be null\n * @param suffix the suffix to find, may be null\n * @param ignoreCase inidicates whether the compare should ignore case(case insensitive) or not.\n * @return <code>true</code> if the String starts with the prefix orboth <code>null</code>\n */\n", "method_name": "endsWith", "codes": ["private static boolean endsWith(final String str,final String suffix,final boolean ignoreCase){\n\n\tif(str==null||suffix==null){\n\t\treturn (str==null&&suffix==null);\n\t}\n\tif(suffix.length()>str.length()){\n\t\treturn false;\n\t}\n\tfinal int strOffset=str.length()-suffix.length();\n\treturn str.regionMatches(ignoreCase,strOffset,suffix,0,suffix.length());\n}"], "code_level": "self_contained", "_id": "6367670c1a6d9265ec017a35", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static Character[] nullToEmpty(final Character[] array){\n\n  if ((array == null) || (array.length == 0)){\n    return EMPTY_CHARACTER_OBJECT_ARRAY;\n  }\n  return array;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n * @param array  the array to check for <code>null</code> or empty\n * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n * @since 2.5\n */\n", "method_name": "nullToEmpty", "codes": ["public static Character[] nullToEmpty(final Character[] array){\n\n  if ((array == null) || (array.length == 0)){\n    return EMPTY_CHARACTER_OBJECT_ARRAY;\n  }\n  return array;\n}"], "code_level": "self_contained", "_id": "636766f11a6d9265ec017651", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static Double[] nullToEmpty(final Double[] array){\n\n  if (isEmpty(array)){\n    return EMPTY_DOUBLE_OBJECT_ARRAY;\n  }\n  return array;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n * @param array  the array to check for <code>null</code> or empty\n * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n * @since 2.5\n */\n", "method_name": "nullToEmpty", "codes": ["public static Double[] nullToEmpty(final Double[] array){\n\n  if (isEmpty(array)){\n    return EMPTY_DOUBLE_OBJECT_ARRAY;\n  }\n  return array;\n}"], "code_level": "self_contained", "_id": "636767021a6d9265ec0178bb", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean isEmpty(final double[] array){\n\n\treturn array == null || array.length == 0;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks if an array of primitive doubles is empty or <code>null</code>.</p>\n * @param array  the array to test\n * @return <code>true</code> if the array is empty or <code>null</code>\n * @since 2.1\n */\n", "method_name": "isEmpty", "codes": ["public static boolean isEmpty(final double[] array){\n\n\treturn array == null || array.length == 0;\n}"], "code_level": "self_contained", "_id": "636766f01a6d9265ec01762e", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean isNotTrue(Boolean bool){\n\n  return !isTrue(bool);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks if a <code>Boolean</code> value is <i>not</i> <code>true</code>, handling <code>null</code> by returning <code>true</code>.</p> <pre> BooleanUtils.isNotTrue(Boolean.TRUE)  = false BooleanUtils.isNotTrue(Boolean.FALSE) = true BooleanUtils.isNotTrue(null)          = true </pre>\n * @param bool  the boolean to check, null returns <code>true</code>\n * @return <code>true</code> if the input is null or false\n * @since 2.3\n */\n", "method_name": "isNotTrue", "codes": ["public static boolean isNotTrue(Boolean bool){\n\n  return !isTrue(bool);\n}"], "code_level": "self_contained", "_id": "636766f21a6d9265ec017677", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static double[] toPrimitive(final Double[] array){\n\n\tif (array == null) {\n\t\treturn null;\n\t} else if (array.length == 0) {\n\t\treturn EMPTY_DOUBLE_ARRAY;\n\t}\n\tfinal double[] result = new double[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = array[i].doubleValue();\n\t}\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of object Doubles to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Double</code> array, may be <code>null</code>\n * @return a <code>double</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static double[] toPrimitive(final Double[] array){\n\n\tif (array == null) {\n\t\treturn null;\n\t} else if (array.length == 0) {\n\t\treturn EMPTY_DOUBLE_ARRAY;\n\t}\n\tfinal double[] result = new double[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = array[i].doubleValue();\n\t}\n\treturn result;\n}"], "code_level": "self_contained", "_id": "636766ff1a6d9265ec017842", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static char toChar(final Character ch,final char defaultValue){\n\n\tif (ch == null){\n\t\treturn defaultValue;\n\t}\n\treturn ch.charValue();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts the Character to a char handling <code>null</code>.</p> <pre> CharUtils.toChar(null, 'X') = 'X' CharUtils.toChar(' ', 'X')  = ' ' CharUtils.toChar('A', 'X')  = 'A' </pre>\n * @param ch  the character to convert\n * @param defaultValue  the value to use if the  Character is null\n * @return the char value of the Character or the default if null\n */\n", "method_name": "toChar", "codes": ["public static char toChar(final Character ch,final char defaultValue){\n\n\tif (ch == null){\n\t\treturn defaultValue;\n\t}\n\treturn ch.charValue();\n}"], "code_level": "self_contained", "_id": "6367670a1a6d9265ec0179cf", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "private static boolean isAllZeros(String s){\n\n\tif(s == null){\n\t\treturn true;\n\t}\n\tfor(int i = s.length() - 1; i >= 0; i--){\n\t\tif(s.charAt(i) != '0'){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn s.length() > 0;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Utility method for  {@link #createNumber(String)}.</p> <p>Returns <code>true</code> if s is <code>null</code>.</p>\n * @param s the String to check\n * @return if it is all zeros or <code>null</code>\n */\n", "method_name": "isAllZeros", "codes": ["private static boolean isAllZeros(String s){\n\n\tif(s == null){\n\t\treturn true;\n\t}\n\tfor(int i = s.length() - 1; i >= 0; i--){\n\t\tif(s.charAt(i) != '0'){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn s.length() > 0;\n}"], "code_level": "self_contained", "_id": "636767081a6d9265ec0179a2", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static String toString(Object object){\n\n\tif(object == null){\n\t\treturn null;\n\t}\n\treturn object.toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Object to String ,when null object then null else return toString(); \n */\n", "method_name": "toString", "codes": ["public static String toString(Object object){\n\n\tif(object == null){\n\t\treturn null;\n\t}\n\treturn object.toString();\n}"], "code_level": "self_contained", "_id": "636766f21a6d9265ec01767d", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static int[] toPrimitive(final Integer[] array){\n\n\tif (array == null) {\n\t\treturn null;\n\t} else if (array.length == 0) {\n\t\treturn EMPTY_INT_ARRAY;\n\t}\n\tfinal int[] result = new int[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = array[i].intValue();\n\t}\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of object Integers to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Integer</code> array, may be <code>null</code>\n * @return an <code>int</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static int[] toPrimitive(final Integer[] array){\n\n\tif (array == null) {\n\t\treturn null;\n\t} else if (array.length == 0) {\n\t\treturn EMPTY_INT_ARRAY;\n\t}\n\tfinal int[] result = new int[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = array[i].intValue();\n\t}\n\treturn result;\n}"], "code_level": "self_contained", "_id": "6367670c1a6d9265ec017a2a", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean isAsciiControl(final char ch){\n\n  return ch < 32 || ch == 127;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks whether the character is ASCII 7 bit control.</p> <pre> CharUtils.isAsciiControl('a')  = false CharUtils.isAsciiControl('A')  = false CharUtils.isAsciiControl('3')  = false CharUtils.isAsciiControl('-')  = false CharUtils.isAsciiControl('\\n') = true CharUtils.isAsciiControl('&copy;') = false </pre>\n * @param ch  the character to check\n * @return true if less than 32 or equals 127\n */\n", "method_name": "isAsciiControl", "codes": ["public static boolean isAsciiControl(final char ch){\n\n  return ch < 32 || ch == 127;\n}"], "code_level": "self_contained", "_id": "636766fa1a6d9265ec01779d", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static Boolean[] toObject(final boolean[] array){\n\n\tif(array == null){\n\t\treturn null;\n\t}else if(array.length == 0){\n\t\treturn EMPTY_BOOLEAN_OBJECT_ARRAY;\n\t}\n\tfinal Boolean[] result = new Boolean[array.length];\n\tfor(int i = 0; i < array.length; i++){\n\t\tresult[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE);\n\t}\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of primitive booleans to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>boolean</code> array\n * @return a <code>Boolean</code> array, <code>null</code> if null array input\n */\n", "method_name": "toObject", "codes": ["public static Boolean[] toObject(final boolean[] array){\n\n\tif(array == null){\n\t\treturn null;\n\t}else if(array.length == 0){\n\t\treturn EMPTY_BOOLEAN_OBJECT_ARRAY;\n\t}\n\tfinal Boolean[] result = new Boolean[array.length];\n\tfor(int i = 0; i < array.length; i++){\n\t\tresult[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE);\n\t}\n\treturn result;\n}"], "code_level": "class_runnable", "_id": "636766fa1a6d9265ec017796", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static Short[] toObject(final short[] array){\n\n\tif (array == null) {\n\t\treturn null;\n\t} else if (array.length == 0) {\n\t\treturn EMPTY_SHORT_OBJECT_ARRAY;\n\t}\n\tfinal Short[] result = new Short[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = new Short(array[i]);\n\t}\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of primitive shorts to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>short</code> array\n * @return a <code>Short</code> array, <code>null</code> if null array input\n */\n", "method_name": "toObject", "codes": ["public static Short[] toObject(final short[] array){\n\n\tif (array == null) {\n\t\treturn null;\n\t} else if (array.length == 0) {\n\t\treturn EMPTY_SHORT_OBJECT_ARRAY;\n\t}\n\tfinal Short[] result = new Short[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = new Short(array[i]);\n\t}\n\treturn result;\n}"], "code_level": "class_runnable", "_id": "6367670a1a6d9265ec0179f1", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static char[] toPrimitive(final Character[] array){\n\n    if (array == null) {\n        return null;\n    } else if (array.length == 0) {\n        return EMPTY_CHAR_ARRAY;\n    }\n    final char[] result = new char[array.length];\n    for (int i = 0; i < array.length; i++) {\n        result[i] = array[i].charValue();\n    }\n    return result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of object Characters to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Character</code> array, may be <code>null</code>\n * @return a <code>char</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static char[] toPrimitive(final Character[] array){\n\n    if (array == null) {\n        return null;\n    } else if (array.length == 0) {\n        return EMPTY_CHAR_ARRAY;\n    }\n    final char[] result = new char[array.length];\n    for (int i = 0; i < array.length; i++) {\n        result[i] = array[i].charValue();\n    }\n    return result;\n}"], "code_level": "self_contained", "_id": "636766fe1a6d9265ec017838", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static Integer[] toObject(final int[] array){\n\n\tif (array == null) {\n\t\treturn null;\n\t} else if (array.length == 0) {\n\t\treturn EMPTY_INTEGER_OBJECT_ARRAY;\n\t}\n\tfinal Integer[] result = new Integer[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = new Integer(array[i]);\n\t}\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of primitive ints to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  an <code>int</code> array\n * @return an <code>Integer</code> array, <code>null</code> if null array input\n */\n", "method_name": "toObject", "codes": ["public static Integer[] toObject(final int[] array){\n\n\tif (array == null) {\n\t\treturn null;\n\t} else if (array.length == 0) {\n\t\treturn EMPTY_INTEGER_OBJECT_ARRAY;\n\t}\n\tfinal Integer[] result = new Integer[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = new Integer(array[i]);\n\t}\n\treturn result;\n}"], "code_level": "class_runnable", "_id": "636767041a6d9265ec01790f", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static Double[] toObject(final double[] array){\n\n\tif (array == null) {\n\t\treturn null;\n\t} else if (array.length == 0) {\n\t\treturn EMPTY_DOUBLE_OBJECT_ARRAY;\n\t}\n\tfinal Double[] result = new Double[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = new Double(array[i]);\n\t}\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of primitive doubles to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>double</code> array\n * @return a <code>Double</code> array, <code>null</code> if null array input\n */\n", "method_name": "toObject", "codes": ["public static Double[] toObject(final double[] array){\n\n\tif (array == null) {\n\t\treturn null;\n\t} else if (array.length == 0) {\n\t\treturn EMPTY_DOUBLE_OBJECT_ARRAY;\n\t}\n\tfinal Double[] result = new Double[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = new Double(array[i]);\n\t}\n\treturn result;\n}"], "code_level": "class_runnable", "_id": "636766fa1a6d9265ec0177a4", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "private static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){\n\n\tif(str==null||prefix==null){\n\t\treturn str==null&&prefix==null;\n\t}\n\tif(prefix.length()>str.length()){\n\t\treturn false;\n\t}\n\treturn str.regionMatches(ignoreCase,0,prefix,0,prefix.length());\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Check if a String starts with a specified prefix (optionally case insensitive).</p>\n * @see String#startsWith(String)\n * @param str  the String to check, may be null\n * @param prefix the prefix to find, may be null\n * @param ignoreCase inidicates whether the compare should ignore case(case insensitive) or not.\n * @return <code>true</code> if the String starts with the prefix orboth <code>null</code>\n */\n", "method_name": "startsWith", "codes": ["private static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){\n\n\tif(str==null||prefix==null){\n\t\treturn str==null&&prefix==null;\n\t}\n\tif(prefix.length()>str.length()){\n\t\treturn false;\n\t}\n\treturn str.regionMatches(ignoreCase,0,prefix,0,prefix.length());\n}"], "code_level": "self_contained", "_id": "636767151a6d9265ec017b6b", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static Character toCharacterObject(final char ch){\n\n\treturn Character.valueOf(ch);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts the character to a Character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same Character object each time.</p> <pre> CharUtils.toCharacterObject(' ')  = ' ' CharUtils.toCharacterObject('A')  = 'A' </pre>\n * @param ch  the character to convert\n * @return a Character of the specified character\n */\n", "method_name": "toCharacterObject", "codes": ["public static Character toCharacterObject(final char ch){\n\n\treturn Character.valueOf(ch);\n}"], "code_level": "class_runnable", "_id": "636766fe1a6d9265ec01781c", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean isAsciiAlphaUpper(final char ch){\n\n  return (ch >= 'A') && (ch <= 'Z');\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks whether the character is ASCII 7 bit alphabetic upper case.</p> <pre> CharUtils.isAsciiAlphaUpper('a')  = false CharUtils.isAsciiAlphaUpper('A')  = true CharUtils.isAsciiAlphaUpper('3')  = false CharUtils.isAsciiAlphaUpper('-')  = false CharUtils.isAsciiAlphaUpper('\\n') = false CharUtils.isAsciiAlphaUpper('&copy;') = false </pre>\n * @param ch  the character to check\n * @return true if between 65 and 90 inclusive\n */\n", "method_name": "isAsciiAlphaUpper", "codes": ["public static boolean isAsciiAlphaUpper(final char ch){\n\n  return (ch >= 'A') && (ch <= 'Z');\n}"], "code_level": "self_contained", "_id": "636766fb1a6d9265ec0177c1", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static int length(final String str){\n\n\treturn str == null ? 0 : str.length();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Gets a String's length or <code>0</code> if the String is <code>null</code>.\n * @param str a String or <code>null</code>\n * @return String length or <code>0</code> if the String is <code>null</code>.\n * @since 2.4\n */\n", "method_name": "length", "codes": ["public static int length(final String str){\n\n\treturn str == null ? 0 : str.length();\n}"], "code_level": "self_contained", "_id": "6367670a1a6d9265ec0179d9", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static String base64Decode(final String s){\n\n\tif (s == null) return null;\n\treturn new String(Base64.decode(s, Base64.DEFAULT));\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Decoding a string to a string follow the Base64 regular. \n */\n", "method_name": "base64Decode", "codes": ["public static String base64Decode(final String s){\n\n\tif (s == null) return null;\n\treturn new String(Base64.decode(s, Base64.DEFAULT));\n}"], "code_level": "class_runnable", "_id": "636766f81a6d9265ec017748", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean isSameLength(final double[] array1,final double[] array2){\n\n\tif ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {\n\t\treturn false;\n\t}\n\treturn true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>.</p>\n * @param array1 the first array, may be <code>null</code>\n * @param array2 the second array, may be <code>null</code>\n * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array\n */\n", "method_name": "isSameLength", "codes": ["public static boolean isSameLength(final double[] array1,final double[] array2){\n\n\tif ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {\n\t\treturn false;\n\t}\n\treturn true;\n}"], "code_level": "self_contained", "_id": "636766f11a6d9265ec017663", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static char[] clone(final char[] array){\n\n\tif (array == null) {\n\t\treturn null;\n\t}\n\treturn array.clone();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Clones an array returning a typecast result and handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  the array to clone, may be <code>null</code>\n * @return the cloned array, <code>null</code> if <code>null</code> input\n */\n", "method_name": "clone", "codes": ["public static char[] clone(final char[] array){\n\n\tif (array == null) {\n\t\treturn null;\n\t}\n\treturn array.clone();\n}"], "code_level": "self_contained", "_id": "636766f31a6d9265ec01768f", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean isAscii(final char ch){\n\n  return ch < 128;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks whether the character is ASCII 7 bit.</p> <pre> CharUtils.isAscii('a')  = true CharUtils.isAscii('A')  = true CharUtils.isAscii('3')  = true CharUtils.isAscii('-')  = true CharUtils.isAscii('\\n') = true CharUtils.isAscii('&copy;') = false </pre>\n * @param ch  the character to check\n * @return true if less than 128\n */\n", "method_name": "isAscii", "codes": ["public static boolean isAscii(final char ch){\n\n  return ch < 128;\n}"], "code_level": "self_contained", "_id": "636766fb1a6d9265ec0177c3", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static String toString(final char ch){\n\n\tif (ch < 128){\n\t\treturn CHAR_STRING_ARRAY[ch];\n\t}\n\treturn new String(new char[]{ ch });\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts the character to a String that contains the one character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same String object each time.</p> <pre> CharUtils.toString(' ')  = \" \" CharUtils.toString('A')  = \"A\" </pre>\n * @param ch  the character to convert\n * @return a String containing the one specified character\n */\n", "method_name": "toString", "codes": ["public static String toString(final char ch){\n\n\tif (ch < 128){\n\t\treturn CHAR_STRING_ARRAY[ch];\n\t}\n\treturn new String(new char[]{ ch });\n}"], "code_level": "class_runnable", "_id": "6367670b1a6d9265ec017a05", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "private void enlarge(final int size){\n\n  byte[] newData = new byte[Math.max(this.data.length << 1, this.length + size)];\n  System.arraycopy(this.data, 0, newData, 0, this.length);\n  this.data = newData;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Enlarges this byte vector so that it can receive 'size' more bytes.\n * @param size number of additional bytes that this byte vector should be able to receive.\n */\n", "method_name": "enlarge", "codes": ["private void enlarge(final int size){\n\n  byte[] newData = new byte[Math.max(this.data.length << 1, this.length + size)];\n  System.arraycopy(this.data, 0, newData, 0, this.length);\n  this.data = newData;\n}"], "code_level": "class_runnable", "_id": "636767191a6d9265ec017c0f", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "int addType(final String value){\n\n\tSymbol symbol = typeTable.get(value);\n\tif (symbol == null){\n\t\tsymbol = new Symbol(value);\n\t\ttypeTable.put(value, symbol);\n\t}\n\treturn symbol.index;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Adds a type in the type table of this symbol table. Does nothing if the type table already contains a similar type.\n * @param value an internal class name.\n * @return the index of a new or already existing type Symbol with the given value.\n */\n", "method_name": "addType", "codes": ["int addType(final String value){\n\n\tSymbol symbol = typeTable.get(value);\n\tif (symbol == null){\n\t\tsymbol = new Symbol(value);\n\t\ttypeTable.put(value, symbol);\n\t}\n\treturn symbol.index;\n}"], "code_level": "project_runnable", "_id": "636766ef1a6d9265ec01761a", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public long readLong(final int offset){\n\n\tlong l1=readUnsignedInt(offset);\n\tlong l2=readUnsignedInt(offset+4);\n\treturn (l1<<32)|l2;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Reads a signed long value in this  {@link ClassReader}. <i>This method is intended for  {@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>\n * @param offset the start offset of the value to be read in this {@link ClassReader}.\n * @return the read value.\n */\n", "method_name": "readLong", "codes": ["public long readLong(final int offset){\n\n\tlong l1=readUnsignedInt(offset);\n\tlong l2=readUnsignedInt(offset+4);\n\treturn (l1<<32)|l2;\n}"], "code_level": "class_runnable", "_id": "636766f81a6d9265ec01775b", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n\n  int length;\n  if(byteLength+this.length>this.data.length){\n    length=2*(this.length+byteLength);\n    if(length<0){\n      length=Integer.MAX_VALUE;\n    }\n    final byte[] newData=new byte[length];\n    System.arraycopy(this.data,0,newData,0,this.length);\n    this.data=newData;\n  }\n  if(byteArrayValue!=null){\n    System.arraycopy(byteArrayValue,byteOffset,this.data,this.length,byteLength);\n  }\n  this.length+=byteLength;\n  return this;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Puts an array of bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param byteArrayValue an array of bytes. May be {@literal null} to put {@code byteLength} nullbytes into this byte vector.\n * @param byteOffset index of the first byte of byteArrayValue that must be copied.\n * @param byteLength number of bytes of byteArrayValue that must be copied.\n * @return this byte vector.\n */\n", "method_name": "putByteArray", "codes": ["public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n\n  int length;\n  if(byteLength+this.length>this.data.length){\n    length=2*(this.length+byteLength);\n    if(length<0){\n      length=Integer.MAX_VALUE;\n    }\n    final byte[] newData=new byte[length];\n    System.arraycopy(this.data,0,newData,0,this.length);\n    this.data=newData;\n  }\n  if(byteArrayValue!=null){\n    System.arraycopy(byteArrayValue,byteOffset,this.data,this.length,byteLength);\n  }\n  this.length+=byteLength;\n  return this;\n}"], "code_level": "class_runnable", "_id": "6367671a1a6d9265ec017c15", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "private void pop(final String descriptor){\n\n\tchar c;\n\tint index = 1;\n\twhile ((c = descriptor.charAt(index++)) != ')'){\n\t\tif (c == 'L'){\n\t\t\twhile ((c = descriptor.charAt(index++)) != ';'){}\n\t\t\tpop();\n\t\t} else if (c == '['){\n\t\t\twhile (((c = descriptor.charAt(index)) == '[') || (c == ']')){\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\tif (c == 'L'){\n\t\t\t\twhile ((c = descriptor.charAt(index++)) != ';'){}\n\t\t\t}\n\t\t\tpop();\n\t\t} else {\n\t\t\tpop();\n\t\t}\n\t}\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Pops as many abstract types from the output frame stack as described by the given descriptor.\n * @param descriptor a type or method descriptor (in which case its argument types are popped).\n */\n", "method_name": "pop", "codes": ["private void pop(final String descriptor){\n\n\tchar c;\n\tint index = 1;\n\twhile ((c = descriptor.charAt(index++)) != ')'){\n\t\tif (c == 'L'){\n\t\t\twhile ((c = descriptor.charAt(index++)) != ';'){}\n\t\t\tpop();\n\t\t} else if (c == '['){\n\t\t\twhile (((c = descriptor.charAt(index)) == '[') || (c == ']')){\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\tif (c == 'L'){\n\t\t\t\twhile ((c = descriptor.charAt(index++)) != ';'){}\n\t\t\t}\n\t\t\tpop();\n\t\t} else {\n\t\t\tpop();\n\t\t}\n\t}\n}"], "code_level": "class_runnable", "_id": "636767021a6d9265ec0178b2", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "private void addInitializedType(final int abstractType){\n\n\tif (this.initializedTypes == null) {\n\t\tthis.initializedTypes = new int[]{abstractType};\n\t} else {\n\t\tint length = this.initializedTypes.length;\n\t\tSystem.arraycopy(this.initializedTypes, 0, this.initializedTypes = new int[length + 1], 0, length);\n\t\tthis.initializedTypes[length] = abstractType;\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Adds an abstract type to the list of types on which a constructor is invoked in the basic block.\n * @param abstractType an abstract type on a which a constructor is invoked.\n */\n", "method_name": "addInitializedType", "codes": ["private void addInitializedType(final int abstractType){\n\n\tif (this.initializedTypes == null) {\n\t\tthis.initializedTypes = new int[]{abstractType};\n\t} else {\n\t\tint length = this.initializedTypes.length;\n\t\tSystem.arraycopy(this.initializedTypes, 0, this.initializedTypes = new int[length + 1], 0, length);\n\t\tthis.initializedTypes[length] = abstractType;\n\t}\n}"], "code_level": "class_runnable", "_id": "636766fa1a6d9265ec0177a9", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "private void putAbstractTypes(final int start,final int end){\n\n\tfor(int i=start;i<end;i++){\n\t\tint tag=this.currentFrame[i].getTag();\n\t\tthis.stackMapTableEntries.putByte(tag);\n\t\tswitch(tag){\n\t\t\tcase Frame.ITEM_Object:\n\t\t\t\tthis.stackMapTableEntries.putShort(this.cw.newClass(this.currentFrame[i].strVal1));\n\t\t\t\tbreak;\n\t\t\tcase Frame.ITEM_Uninitialized:\n\t\t\t\tthis.stackMapTableEntries.putShort(this.currentFrame[i].intVal);\n\t\t\t\tbreak;\n\t\t}\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Puts some abstract types of  {@link #currentFrame} in {@link #stackMapTableEntries} , using theJVMS verification_type_info format used in StackMapTable attributes.\n * @param start index of the first type in {@link #currentFrame} to write.\n * @param end index of last type in {@link #currentFrame} to write (exclusive).\n */\n", "method_name": "putAbstractTypes", "codes": ["private void putAbstractTypes(final int start,final int end){\n\n\tfor(int i=start;i<end;i++){\n\t\tint tag=this.currentFrame[i].getTag();\n\t\tthis.stackMapTableEntries.putByte(tag);\n\t\tswitch(tag){\n\t\t\tcase Frame.ITEM_Object:\n\t\t\t\tthis.stackMapTableEntries.putShort(this.cw.newClass(this.currentFrame[i].strVal1));\n\t\t\t\tbreak;\n\t\t\tcase Frame.ITEM_Uninitialized:\n\t\t\t\tthis.stackMapTableEntries.putShort(this.currentFrame[i].intVal);\n\t\t\t\tbreak;\n\t\t}\n\t}\n}"], "code_level": "project_runnable", "_id": "6367670a1a6d9265ec0179dc", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public short readShort(final int offset){\n\n\tbyte[] b=this.b;\n\treturn (short)((b[offset]&0xFF)<<8|(b[offset+1]&0xFF));\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Reads a signed short value in this  {@link ClassReader}. <i>This method is intended for  {@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>\n * @param offset the start offset of the value to be read in this {@link ClassReader}.\n * @return the read value.\n */\n", "method_name": "readShort", "codes": ["public short readShort(final int offset){\n\n\tbyte[] b=this.b;\n\treturn (short)((b[offset]&0xFF)<<8|(b[offset+1]&0xFF));\n}"], "code_level": "class_runnable", "_id": "636766f21a6d9265ec017667", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "protected Label readLabel(final int bytecodeOffset,final Label[] labels){\n\n\tif(labels[bytecodeOffset]==null){\n\t\tlabels[bytecodeOffset]=new Label();\n\t}\n\treturn labels[bytecodeOffset];\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns the label corresponding to the given bytecode offset. The default implementation of this method creates a label for the given offset if it has not been already created.\n * @param bytecodeOffset a bytecode offset in a method.\n * @param labels the already created labels, indexed by their offset. If a label already existsfor bytecodeOffset this method must not create a new one. Otherwise it must store the new label in this array.\n * @return a non null Label, which must be equal to labels[bytecodeOffset].\n */\n", "method_name": "readLabel", "codes": ["protected Label readLabel(final int bytecodeOffset,final Label[] labels){\n\n\tif(labels[bytecodeOffset]==null){\n\t\tlabels[bytecodeOffset]=new Label();\n\t}\n\treturn labels[bytecodeOffset];\n}"], "code_level": "self_contained", "_id": "636766ff1a6d9265ec017853", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "final String readUtf(final int constantPoolEntryIndex,final char[] charBuffer){\n\n\tint constantPoolOffset=this.constantPoolOffsets[constantPoolEntryIndex];\n\tint length=u2At(constantPoolOffset+1);\n\tif(length==0)\n\t\treturn \"\"; //$NON-NLS-1$\n\tint utfOffset=constantPoolOffset+3;\n\tint utfEnd=utfOffset+length;\n\tint charIndex=0;\n\tint c,c2,c3;\n\tint charOffset=0;\n\twhile(utfOffset<utfEnd){\n\t\tc=0xFF&this.classFileBuffer[utfOffset++];\n\t\tswitch(c>>4){\n\t\t\tcase 0:\n\t\t\tcase 1:\n\t\t\tcase 2:\n\t\t\tcase 3:\n\t\t\tcase 4:\n\t\t\tcase 5:\n\t\t\tcase 6:\n\t\t\tcase 7:\n\t\t\t\t// 0xxxxxxx\n\t\t\t\tcharBuffer[charOffset++]=(char)c;\n\t\t\t\tbreak;\n\t\t\tcase 12:\n\t\t\tcase 13:\n", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Reads a CONSTANT_Utf8 constant pool entry in  {@link #classFileBuffer}.\n * @param constantPoolEntryIndex the index of a CONSTANT_Utf8 entry in the class's constant pooltable.\n * @param charBuffer the buffer to be used to read the string. This buffer must be sufficientlylarge. It is not automatically resized.\n * @return the String corresponding to the specified CONSTANT_Utf8 entry.\n */\n", "method_name": "readUtf", "codes": ["final String readUtf(final int constantPoolEntryIndex,final char[] charBuffer){\n\n\tint constantPoolOffset=this.constantPoolOffsets[constantPoolEntryIndex];\n\tint length=u2At(constantPoolOffset+1);\n\tif(length==0)\n\t\treturn \"\"; //$NON-NLS-1$\n\tint utfOffset=constantPoolOffset+3;\n\tint utfEnd=utfOffset+length;\n\tint charIndex=0;\n\tint c,c2,c3;\n\tint charOffset=0;\n\twhile(utfOffset<utfEnd){\n\t\tc=0xFF&this.classFileBuffer[utfOffset++];\n\t\tswitch(c>>4){\n\t\t\tcase 0:\n\t\t\tcase 1:\n\t\t\tcase 2:\n\t\t\tcase 3:\n\t\t\tcase 4:\n\t\t\tcase 5:\n\t\t\tcase 6:\n\t\t\tcase 7:\n\t\t\t\t// 0xxxxxxx\n\t\t\t\tcharBuffer[charOffset++]=(char)c;\n\t\t\t\tbreak;\n\t\t\tcase 12:\n\t\t\tcase 13:\n"], "code_level": "class_runnable", "_id": "636766fe1a6d9265ec01782a", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "@Override public int hashCode(){\n\n    return type.hashCode();\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns a hash code value for this type.\n * @return a hash code value for this type.\n */\n", "method_name": "hashCode", "codes": ["@Override public int hashCode(){\n\n    return type.hashCode();\n}"], "code_level": "class_runnable", "_id": "636766f81a6d9265ec017758", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "int addConstantNameAndType(final String name,final String descriptor){\n\n\treturn addConstantNameAndType(name,descriptor,hash(name,descriptor));\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table. Does nothing if the constant pool already contains a similar item.\n * @param name a field or method name.\n * @param descriptor a field or method descriptor.\n * @return a new or already existing Symbol with the given value.\n */\n", "method_name": "addConstantNameAndType", "codes": ["int addConstantNameAndType(final String name,final String descriptor){\n\n\treturn addConstantNameAndType(name,descriptor,hash(name,descriptor));\n}"], "code_level": "project_runnable", "_id": "636766fe1a6d9265ec017823", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "final void addLineNumber(final int lineNumber){\n\n\tif(lineNumber>0){\n\t\tif(lineNumberTable==null){\n\t\t\tlineNumberTable=new int[6];\n\t\t}\n\t\tif(lineNumberTableIndex>=lineNumberTable.length){\n\t\t\tint[] a=new int[lineNumberTableIndex+6];\n\t\t\tSystem.arraycopy(lineNumberTable,0,a,0,lineNumberTableIndex);\n\t\t\tlineNumberTable=a;\n\t\t}\n\t\tlineNumberTable[lineNumberTableIndex++]=lineNumber;\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Adds a source line number corresponding to this label.\n * @param lineNumber a source line number (which should be strictly positive).\n */\n", "method_name": "addLineNumber", "codes": ["final void addLineNumber(final int lineNumber){\n\n\tif(lineNumber>0){\n\t\tif(lineNumberTable==null){\n\t\t\tlineNumberTable=new int[6];\n\t\t}\n\t\tif(lineNumberTableIndex>=lineNumberTable.length){\n\t\t\tint[] a=new int[lineNumberTableIndex+6];\n\t\t\tSystem.arraycopy(lineNumberTable,0,a,0,lineNumberTableIndex);\n\t\t\tlineNumberTable=a;\n\t\t}\n\t\tlineNumberTable[lineNumberTableIndex++]=lineNumber;\n\t}\n}"], "code_level": "class_runnable", "_id": "636767131a6d9265ec017b23", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static int indexOfLastSeparator(String filename){\n\n\tif (filename == null) {\n\t\treturn -1;\n\t}\n\tint lastUnixPos = filename.lastIndexOf(UNIX_SEPARATOR);\n\tint lastWindowsPos = filename.lastIndexOf(WINDOWS_SEPARATOR);\n\treturn Math.max(lastUnixPos, lastWindowsPos);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns the index of the last directory separator character. <p> This method will handle a file in either Unix or Windows format. The position of the last forward or backslash is returned. <p> The output will be the same irrespective of the machine that the code is running on.\n * @param filename  the filename to find the last path separator in, null returns -1\n * @return the index of the last separator character, or -1 if thereis no such character\n */\n", "method_name": "indexOfLastSeparator", "codes": ["public static int indexOfLastSeparator(String filename){\n\n\tif (filename == null) {\n\t\treturn -1;\n\t}\n\tint lastUnixPos = filename.lastIndexOf(UNIX_SEPARATOR);\n\tint lastWindowsPos = filename.lastIndexOf(WINDOWS_SEPARATOR);\n\treturn Math.max(lastUnixPos, lastWindowsPos);\n}"], "code_level": "class_runnable", "_id": "636766f11a6d9265ec017658", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static void forceDeleteOnExit(File file) throws IOException {\n\n    if (file.isDirectory()) {\n        deleteDirectoryOnExit(file);\n    } else {\n        file.deleteOnExit();\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Schedules a file to be deleted when JVM exits. If file is directory delete it and all sub-directories.\n * @param file  file or directory to delete, must not be {@code null}\n * @throws NullPointerException if the file is {@code null}\n * @throws IOException in case deletion is unsuccessful\n */\n", "method_name": "forceDeleteOnExit", "codes": ["public static void forceDeleteOnExit(File file) throws IOException {\n\n    if (file.isDirectory()) {\n        deleteDirectoryOnExit(file);\n    } else {\n        file.deleteOnExit();\n    }\n}"], "code_level": "class_runnable", "_id": "636766fe1a6d9265ec017833", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static int indexOfExtension(String filename){\n\n\tif(filename==null)\n\t\treturn -1;\n\tint extensionPos=filename.lastIndexOf(EXTENSION_SEPARATOR);\n\tint lastSeparator=indexOfLastSeparator(filename);\n\treturn (lastSeparator>extensionPos?-1:extensionPos);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns the index of the last extension separator character, which is a dot. <p> This method also checks that there is no directory separator after the last dot. To do this it uses  {@link #indexOfLastSeparator(String)} which willhandle a file in either Unix or Windows format. <p> The output will be the same irrespective of the machine that the code is running on.\n * @param filename  the filename to find the last path separator in, null returns -1\n * @return the index of the last separator character, or -1 if thereis no such character\n */\n", "method_name": "indexOfExtension", "codes": ["public static int indexOfExtension(String filename){\n\n\tif(filename==null)\n\t\treturn -1;\n\tint extensionPos=filename.lastIndexOf(EXTENSION_SEPARATOR);\n\tint lastSeparator=indexOfLastSeparator(filename);\n\treturn (lastSeparator>extensionPos?-1:extensionPos);\n}"], "code_level": "class_runnable", "_id": "636767061a6d9265ec01794a", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "@Override public void write(byte b[]) throws IOException {\n\n\twrite(b, 0, b.length);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Writes <code>b.length</code> bytes from the specified byte array to this output stream.\n * @param b The array of bytes to be written.\n * @exception IOException if an error occurs.\n */\n", "method_name": "write", "codes": ["@Override public void write(byte b[]) throws IOException {\n\n\twrite(b, 0, b.length);\n}"], "code_level": "class_runnable", "_id": "6367670b1a6d9265ec0179fe", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "@Override public void write(final byte b[],final int off,final int len) throws IOException {\n\n\tif ((off < 0) || (off > b.length) || (len < 0) || ((off + len) - b.length > 0)) {\n\t\tthrow new IndexOutOfBoundsException();\n\t}\n\telse if (len == 0) {\n\t\treturn;\n\t}\n\tfinal int newcount = count + len;\n\tif (newcount > buf.length) {\n\t\tbuf = Arrays.copyOf(buf, Math.max(buf.length << 1, newcount));\n\t}\n\tSystem.arraycopy(b, off, buf, count, len);\n\tcount = newcount;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Writes <code>len</code> bytes from the specified byte array starting at offset <code>off</code> to this byte array output stream.\n * @param b   the data.\n * @param off the start offset in the data.\n * @param len the number of bytes to write.\n */\n", "method_name": "write", "codes": ["@Override public void write(final byte b[],final int off,final int len) throws IOException {\n\n\tif ((off < 0) || (off > b.length) || (len < 0) || ((off + len) - b.length > 0)) {\n\t\tthrow new IndexOutOfBoundsException();\n\t}\n\telse if (len == 0) {\n\t\treturn;\n\t}\n\tfinal int newcount = count + len;\n\tif (newcount > buf.length) {\n\t\tbuf = Arrays.copyOf(buf, Math.max(buf.length << 1, newcount));\n\t}\n\tSystem.arraycopy(b, off, buf, count, len);\n\tcount = newcount;\n}"], "code_level": "class_runnable", "_id": "636766f91a6d9265ec01776e", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "@Override public void write(final byte[] b) throws IOException {\n\n  write(b, 0, b.length);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * @see OutputStream#write(byte[]) \n */\n", "method_name": "write", "codes": ["@Override public void write(final byte[] b) throws IOException {\n\n  write(b, 0, b.length);\n}"], "code_level": "class_runnable", "_id": "6367670a1a6d9265ec0179d8", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public String toString(){\n\n\treturn sb.toString();\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * <p> Gets the String built by this builder. </p>\n * @return the built string\n */\n", "method_name": "toString", "codes": ["public String toString(){\n\n\treturn sb.toString();\n}"], "code_level": "project_runnable", "_id": "636767001a6d9265ec01787e", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "protected void appendDetail(StringBuffer buffer,String fieldName,int[] array){\n\n\tbuffer.append(array.length).append(ARRAY_START);\n\tfor(int i=0;i<array.length;i++){\n\t\tif(i>0){\n\t\t\tbuffer.append(ARRAY_ELEMENT_SEPARATOR);\n\t\t}\n\t\tbuffer.append(array[i]);\n\t}\n\tbuffer.append(ARRAY_END);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * <p>Append to the <code>toString</code> the detail of an <code>int</code> array.</p>\n * @param buffer  the <code>StringBuffer</code> to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the <code>toString</code>,not <code>null</code>\n */\n", "method_name": "appendDetail", "codes": ["protected void appendDetail(StringBuffer buffer,String fieldName,int[] array){\n\n\tbuffer.append(array.length).append(ARRAY_START);\n\tfor(int i=0;i<array.length;i++){\n\t\tif(i>0){\n\t\t\tbuffer.append(ARRAY_ELEMENT_SEPARATOR);\n\t\t}\n\t\tbuffer.append(array[i]);\n\t}\n\tbuffer.append(ARRAY_END);\n}"], "code_level": "class_runnable", "_id": "636767001a6d9265ec01787f", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "static String[] toNoNullStringArray(Collection<?> collection){\n\n\tif (collection == null)\n\t\treturn new String[0];\n\treturn toNoNullStringArray(collection.toArray());\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Converts the given Collection into an array of Strings. The returned array does not contain <code>null</code> entries. Note that  {@link Arrays#sort(Object[])} will throw an {@link NullPointerException} if an array element is <code>null</code>.\n * @param collection The collection to convert\n * @return A new array of Strings.\n */\n", "method_name": "toNoNullStringArray", "codes": ["static String[] toNoNullStringArray(Collection<?> collection){\n\n\tif (collection == null)\n\t\treturn new String[0];\n\treturn toNoNullStringArray(collection.toArray());\n}"], "code_level": "project_runnable", "_id": "636766f71a6d9265ec017730", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "static void register(Object value){\n\n\tif(value == null) return;\n\tif(value instanceof Object[]){\n\t\tObject[] array = (Object[])value;\n\t\tfor(int i = 0; i < array.length; i++)\n\t\t\tregister(array[i]);\n\t\treturn;\n\t}\n\tif(value instanceof Collection)\n\t\tfor(Object o : (Collection)value)\n\t\t\tregister(o);\n\tif(value instanceof Map)\n\t\tfor(Object o : ((Map)value).values())\n\t\t\tregister(o);\n\tif(value instanceof Map.Entry)\n\t\tregister(((Map.Entry)value).getValue());\n\tif(value instanceof Iterator)\n\t\twhile(((Iterator)value).hasNext())\n\t\t\tregister(((Iterator)value).next());\n\tif(value instanceof Enumeration)\n\t\twhile(((Enumeration)value).hasMoreElements())\n\t\t\tregister(((Enumeration)value).nextElement());\n\tif(value instanceof Iterable)\n\t\tfor(Object o :", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * <p> Registers the given object. Used by the reflection methods to avoid infinite loops. </p>\n * @param value The object to register.\n */\n", "method_name": "register", "codes": ["static void register(Object value){\n\n\tif(value == null) return;\n\tif(value instanceof Object[]){\n\t\tObject[] array = (Object[])value;\n\t\tfor(int i = 0; i < array.length; i++)\n\t\t\tregister(array[i]);\n\t\treturn;\n\t}\n\tif(value instanceof Collection)\n\t\tfor(Object o : (Collection)value)\n\t\t\tregister(o);\n\tif(value instanceof Map)\n\t\tfor(Object o : ((Map)value).values())\n\t\t\tregister(o);\n\tif(value instanceof Map.Entry)\n\t\tregister(((Map.Entry)value).getValue());\n\tif(value instanceof Iterator)\n\t\twhile(((Iterator)value).hasNext())\n\t\t\tregister(((Iterator)value).next());\n\tif(value instanceof Enumeration)\n\t\twhile(((Enumeration)value).hasMoreElements())\n\t\t\tregister(((Enumeration)value).nextElement());\n\tif(value instanceof Iterable)\n\t\tfor(Object o :"], "code_level": "class_runnable", "_id": "636767041a6d9265ec017911", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "protected void appendDetail(StringBuffer buffer,String fieldName,byte[] array){\n\n\tbuffer.append(array.length).append(ARRAY_START);\n\tfor(int i=0;i<array.length;i++){\n\t\tif(i>0){\n\t\t\tbuffer.append(ARRAY_ELEMENT_SEPARATOR);\n\t\t}\n\t\tappendDetail(buffer,fieldName,array[i]);\n\t}\n\tbuffer.append(ARRAY_END);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * <p>Append to the <code>toString</code> the detail of a <code>byte</code> array.</p>\n * @param buffer  the <code>StringBuffer</code> to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the <code>toString</code>,not <code>null</code>\n */\n", "method_name": "appendDetail", "codes": ["protected void appendDetail(StringBuffer buffer,String fieldName,byte[] array){\n\n\tbuffer.append(array.length).append(ARRAY_START);\n\tfor(int i=0;i<array.length;i++){\n\t\tif(i>0){\n\t\t\tbuffer.append(ARRAY_ELEMENT_SEPARATOR);\n\t\t}\n\t\tappendDetail(buffer,fieldName,array[i]);\n\t}\n\tbuffer.append(ARRAY_END);\n}"], "code_level": "class_runnable", "_id": "636766fe1a6d9265ec017821", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "static String[] toNoNullStringArray(Object[] array){\n\n\tif (array == null) return null;\n\tList list = new ArrayList(array.length);\n\tfor (int i = 0; i < array.length; i++) {\n\t\tif (array[i] != null) list.add(array[i]);\n\t}\n\treturn (String[]) list.toArray(new String[list.size()]);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns a new array of Strings without null elements. Internal method used to normalize exclude lists (arrays and collections). Note that  {@link Arrays#sort(Object[])} will throw an {@link NullPointerException}if an array element is <code>null</code>.\n * @param array The array to check\n * @return The given array or a new array without null.\n */\n", "method_name": "toNoNullStringArray", "codes": ["static String[] toNoNullStringArray(Object[] array){\n\n\tif (array == null) return null;\n\tList list = new ArrayList(array.length);\n\tfor (int i = 0; i < array.length; i++) {\n\t\tif (array[i] != null) list.add(array[i]);\n\t}\n\treturn (String[]) list.toArray(new String[list.size()]);\n}"], "code_level": "project_runnable", "_id": "636766fc1a6d9265ec0177ef", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "@Override public int available() throws IOException {\n\n\treturn in.available();\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * @see InputStream#available() \n */\n", "method_name": "available", "codes": ["@Override public int available() throws IOException {\n\n\treturn in.available();\n}"], "code_level": "class_runnable", "_id": "636766f11a6d9265ec017641", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static <T>List<T> asList(T[] a){\n\n\tif(a==null)return Collections.emptyList();\n\treturn Arrays.asList(a);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Array to List. <p> Works like  {@link Arrays#asList(Object)}, but handles null arrays.\n * @return a list backed by the array.\n */\n", "method_name": "asList", "codes": ["public static <T>List<T> asList(T[] a){\n\n\tif(a==null)return Collections.emptyList();\n\treturn Arrays.asList(a);\n}"], "code_level": "slib_runnable", "_id": "636766f01a6d9265ec017639", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static byte convertHexDigit(byte b){\n\n\tif ((b >= '0') && (b <= '9')) return (byte)(b - '0');\n\tif ((b >= 'a') && (b <= 'f')) return (byte)(b - 'a' + 10);\n\tif ((b >= 'A') && (b <= 'F')) return (byte)(b - 'A' + 10);\n\treturn 0;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * @param b An ASCII encoded character 0-9 a-f A-F\n * @return The byte value of the character 0-16.\n */\n", "method_name": "convertHexDigit", "codes": ["public static byte convertHexDigit(byte b){\n\n\tif ((b >= '0') && (b <= '9')) return (byte)(b - '0');\n\tif ((b >= 'a') && (b <= 'f')) return (byte)(b - 'a' + 10);\n\tif ((b >= 'A') && (b <= 'F')) return (byte)(b - 'A' + 10);\n\treturn 0;\n}"], "code_level": "slib_runnable", "_id": "636766f91a6d9265ec01777d", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public Converter lookup(final Class<?> clazz){\n\n\treturn this.converters.get(clazz);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Look up and return any registered  {@link Converter} for the specifieddestination class; if there is no registered Converter, return <code>null</code>.\n * @param clazz Class for which to return a registered Converter\n * @return The registered {@link Converter} or <code>null</code> if not found\n */\n", "method_name": "lookup", "codes": ["public Converter lookup(final Class<?> clazz){\n\n\treturn this.converters.get(clazz);\n}"], "code_level": "class_runnable", "_id": "6367670a1a6d9265ec0179e7", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "@Override public boolean containsKey(final Object key){\n\n\tif (key instanceof Character) {\n\t\treturn containsKey(((Character)key).charValue());\n\t}\n\treturn false;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Return <code>true</code> if this map contains a mapping for the specified key.\n * @param key  the key to be searched for\n * @return true if the map contains the key\n */\n", "method_name": "containsKey", "codes": ["@Override public boolean containsKey(final Object key){\n\n\tif (key instanceof Character) {\n\t\treturn containsKey(((Character)key).charValue());\n\t}\n\treturn false;\n}"], "code_level": "class_runnable", "_id": "6367670b1a6d9265ec0179f2", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "private static String[] copyStrings(final String[] src){\n\n\tString[] dst = new String[src.length];\n\tfor(int i = 0; i < src.length; i++){\n\t\tdst[i] = src[i].toLowerCase();\n\t}\n\treturn dst;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * This method creates a copy of the provided array, and ensures that all the strings in the newly created array contain only lower-case letters. <p> Using this method to copy string arrays means that changes to the src array do not modify the dst array.\n */\n", "method_name": "copyStrings", "codes": ["private static String[] copyStrings(final String[] src){\n\n\tString[] dst = new String[src.length];\n\tfor(int i = 0; i < src.length; i++){\n\t\tdst[i] = src[i].toLowerCase();\n\t}\n\treturn dst;\n}"], "code_level": "self_contained", "_id": "636767041a6d9265ec0178f8", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "@Override protected Object convertToType(final Class<?> type,final Object value) throws Exception {\n\n    return Character.valueOf(value.toString().charAt(0));\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * <p>Convert the input object into a java.lang.Character.</p>\n * @param type Data type to which this value should be converted.\n * @param value The input value to be converted.\n * @return The converted value.\n * @throws Exception if conversion cannot be performed successfully\n * @since 1.8.0\n */\n", "method_name": "convertToType", "codes": ["@Override protected Object convertToType(final Class<?> type,final Object value) throws Exception {\n\n    return Character.valueOf(value.toString().charAt(0));\n}"], "code_level": "project_runnable", "_id": "636767021a6d9265ec0178bf", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public Collection<Object> values(){\n\n\treturn new BeanMapValues(this);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns the values for the BeanMap.\n * @return values for the BeanMap. The returned collection is not modifiable.\n */\n", "method_name": "values", "codes": ["public Collection<Object> values(){\n\n\treturn new BeanMapValues(this);\n}"], "code_level": "class_runnable", "_id": "636766f11a6d9265ec01764f", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public void putAllWriteable(BeanMap map){\n\n\tputAllWriteable(map, false);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Puts all of the writable properties from the given BeanMap into this BeanMap. Read-only and Write-only properties will be ignored.\n * @param map  the BeanMap whose properties to put\n */\n", "method_name": "putAllWriteable", "codes": ["public void putAllWriteable(BeanMap map){\n\n\tputAllWriteable(map, false);\n}"], "code_level": "class_runnable", "_id": "636767071a6d9265ec017962", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public long contentLength(){\n\n    return contentLength;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Retrieve the content length of the request.\n * @return The content length of the request.\n * @since 1.3\n */\n", "method_name": "contentLength", "codes": ["public long contentLength(){\n\n    return contentLength;\n}"], "code_level": "project_runnable", "_id": "636767031a6d9265ec0178dd", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "private int parseEndOfLine(String headerPart,int end){\n\n\tint index=end;\n\twhile(index<headerPart.length()){\n\t\tchar c=headerPart.charAt(index);\n\t\tif(c=='\\r'){\n\t\t\tindex++;\n\t\t\tif(index<headerPart.length()){\n\t\t\t\tc=headerPart.charAt(index);\n\t\t\t\tif(c=='\\n'){\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tindex++;\n\t}\n\treturn -1;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Skips bytes until the end of the current line.\n * @param headerPart The headers, which are being parsed.\n * @param end Index of the last byte, which has yet been processed.\n * @return Index of the \\r\\n sequence, which indicates end of line.\n */\n", "method_name": "parseEndOfLine", "codes": ["private int parseEndOfLine(String headerPart,int end){\n\n\tint index=end;\n\twhile(index<headerPart.length()){\n\t\tchar c=headerPart.charAt(index);\n\t\tif(c=='\\r'){\n\t\t\tindex++;\n\t\t\tif(index<headerPart.length()){\n\t\t\t\tc=headerPart.charAt(index);\n\t\t\t\tif(c=='\\n'){\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tindex++;\n\t}\n\treturn -1;\n}"], "code_level": "self_contained", "_id": "636767121a6d9265ec017b0a", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "protected int findByte(byte value,int pos){\n\n\tint limit=bufferLimit;\n\tbyte[] buf=buffer;\n\tfor (int i=pos;i<limit;i++){\n\t\tif (buf[i]==value) return i;\n\t}\n\treturn -1;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Searches for a byte of specified value in the <code>buffer</code>, starting at the specified <code>position</code>.\n * @param value The value to find.\n * @param pos   The starting position for searching.\n * @return The position of byte found, counting from beginning of the<code>buffer</code>, or <code>-1</code> if not found.\n */\n", "method_name": "findByte", "codes": ["protected int findByte(byte value,int pos){\n\n\tint limit=bufferLimit;\n\tbyte[] buf=buffer;\n\tfor (int i=pos;i<limit;i++){\n\t\tif (buf[i]==value) return i;\n\t}\n\treturn -1;\n}"], "code_level": "class_runnable", "_id": "636766ff1a6d9265ec017851", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public byte readByte() throws IOException {\n\n\tif (bufferPosition >= bufferLength) {\n\t\trefill();\n\t}\n\treturn buffer[bufferPosition++];\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Reads a byte from the <code>buffer</code>, and refills it as necessary.\n * @return The next byte from the input stream.\n * @throws IOException if there is no more data available.\n */\n", "method_name": "readByte", "codes": ["public byte readByte() throws IOException {\n\n\tif (bufferPosition >= bufferLength) {\n\t\trefill();\n\t}\n\treturn buffer[bufferPosition++];\n}"], "code_level": "class_runnable", "_id": "636766f81a6d9265ec01774b", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "private String parseToken(final char[] terminators){\n\n\tfinal StringBuilder token = new StringBuilder();\n\tchar c;\n\twhile(true){\n\t\tc = readChar();\n\t\tif(c == 0 || isOneOf(c, terminators)){\n\t\t\tbreak;\n\t\t}\n\t\ttoken.append(c);\n\t}\n\tif(c != 0){\n\t\tunreadChar(c);\n\t}\n\treturn token.toString();\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Parses out a token until any of the given terminators is encountered.\n * @param terminators the array of terminating characters. Any of these characters when encountered signify the end of the token\n * @return the token\n */\n", "method_name": "parseToken", "codes": ["private String parseToken(final char[] terminators){\n\n\tfinal StringBuilder token = new StringBuilder();\n\tchar c;\n\twhile(true){\n\t\tc = readChar();\n\t\tif(c == 0 || isOneOf(c, terminators)){\n\t\t\tbreak;\n\t\t}\n\t\ttoken.append(c);\n\t}\n\tif(c != 0){\n\t\tunreadChar(c);\n\t}\n\treturn token.toString();\n}"], "code_level": "class_runnable", "_id": "636766fa1a6d9265ec01779c", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean arrayequals(byte[] a,byte[] b,int count){\n\n\tif(a==null && b==null) return true;\n\tif(a==null || b==null) return false;\n\tif(a.length<count || b.length<count) return false;\n\tfor(int i=0;i<count;i++){\n\t\tif(a[i]!=b[i]) return false;\n\t}\n\treturn true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Compares <code>count</code> first bytes in the arrays <code>a</code> and <code>b</code>.\n * @param a     The first array to compare.\n * @param b     The second array to compare.\n * @param count How many bytes should be compared.\n * @return <code>true</code> if <code>count</code> first bytes in arrays<code>a</code> and <code>b</code> are equal.\n */\n", "method_name": "arrayequals", "codes": ["public static boolean arrayequals(byte[] a,byte[] b,int count){\n\n\tif(a==null && b==null) return true;\n\tif(a==null || b==null) return false;\n\tif(a.length<count || b.length<count) return false;\n\tfor(int i=0;i<count;i++){\n\t\tif(a[i]!=b[i]) return false;\n\t}\n\treturn true;\n}"], "code_level": "self_contained", "_id": "636766fd1a6d9265ec017814", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static int lastIndexOf(String str,String searchStr){\n\n\tif(str==null||searchStr==null){\n\t\treturn -1;\n\t}\n\treturn str.lastIndexOf(searchStr);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Finds the last index within a String, handling <code>null</code>. This method uses  {@link String#lastIndexOf(String)}. \n */\n", "method_name": "lastIndexOf", "codes": ["public static int lastIndexOf(String str,String searchStr){\n\n\tif(str==null||searchStr==null){\n\t\treturn -1;\n\t}\n\treturn str.lastIndexOf(searchStr);\n}"], "code_level": "project_runnable", "_id": "636766f61a6d9265ec017701", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static String sub(String str,int start,int end){\n\n\tif(str==null) return null;\n\tif(end<0) end=str.length()+end;\n\tif(start<0) start=str.length()+start;\n\tif(end>str.length()) end=str.length();\n\tif(start>str.length()) start=str.length();\n\tif(end<0) end=0;\n\tif(start<0) start=0;\n\tif(start>end) return \"\";\n\treturn str.substring(start,end);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Gets a substring from the specified String avoiding exceptions. \n */\n", "method_name": "sub", "codes": ["public static String sub(String str,int start,int end){\n\n\tif(str==null) return null;\n\tif(end<0) end=str.length()+end;\n\tif(start<0) start=str.length()+start;\n\tif(end>str.length()) end=str.length();\n\tif(start>str.length()) start=str.length();\n\tif(end<0) end=0;\n\tif(start<0) start=0;\n\tif(start>end) return \"\";\n\treturn str.substring(start,end);\n}"], "code_level": "project_runnable", "_id": "636766ff1a6d9265ec01783b", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static boolean containsAnyIgnoreCase(String str,List<String> searchStrArray){\n\n\tif(str==null || searchStrArray==null)\n\t\treturn false;\n\tfor(String searchStr:searchStrArray){\n\t\tif(containsIgnoreCase(str,searchStr))\n\t\t\treturn true;\n\t}\n\treturn false;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Case in-sensitive Checks if the String contains any character in the given set of string. \n */\n", "method_name": "containsAnyIgnoreCase", "codes": ["public static boolean containsAnyIgnoreCase(String str,List<String> searchStrArray){\n\n\tif(str==null || searchStrArray==null)\n\t\treturn false;\n\tfor(String searchStr:searchStrArray){\n\t\tif(containsIgnoreCase(str,searchStr))\n\t\t\treturn true;\n\t}\n\treturn false;\n}"], "code_level": "project_runnable", "_id": "6367670b1a6d9265ec017a0f", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static int indexOf(String str,String searchStr){\n\n\tif(str==null||searchStr==null){\n\t\treturn -1;\n\t}\n\treturn str.indexOf(searchStr);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Finds the first index within a String, handling <code>null</code>. This method uses  {@link String#indexOf(String)}. \n */\n", "method_name": "indexOf", "codes": ["public static int indexOf(String str,String searchStr){\n\n\tif(str==null||searchStr==null){\n\t\treturn -1;\n\t}\n\treturn str.indexOf(searchStr);\n}"], "code_level": "project_runnable", "_id": "636767021a6d9265ec0178bc", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "private static boolean isParameterSeparator(final char c){\n\n\tswitch (c){\n\t\tcase ',' :\n\t\tcase ';' :\n\t\t\treturn true;\n\t\tdefault :\n\t\t\treturn false;\n\t}\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Determine whether a parameter name ends at the current position, that is, whether the given character qualifies as a separator. \n */\n", "method_name": "isParameterSeparator", "codes": ["private static boolean isParameterSeparator(final char c){\n\n\tswitch (c){\n\t\tcase ',' :\n\t\tcase ';' :\n\t\t\treturn true;\n\t\tdefault :\n\t\t\treturn false;\n\t}\n}"], "code_level": "class_runnable", "_id": "636766fc1a6d9265ec0177da", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n\n\tif(array!=null)\n\t\treturn copyArrayGrow(array,1,newArrayComponentType);\n\tObject newArray=Array.newInstance(newArrayComponentType,1);\n\tArray.set(newArray,0,null);\n\treturn newArray;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns a copy of the given array of size 1 greater than the argument. The last value of the array is left to the default value.\n * @param array The array to copy, must not be <code>null</code>.\n * @param newArrayComponentType If <code>array</code> is <code>null</code>, create asize 1 array of this type.\n * @return A new copy of the array of size 1 greater than the input.\n */\n", "method_name": "copyArrayGrow1", "codes": ["private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n\n\tif(array!=null)\n\t\treturn copyArrayGrow(array,1,newArrayComponentType);\n\tObject newArray=Array.newInstance(newArrayComponentType,1);\n\tArray.set(newArray,0,null);\n\treturn newArray;\n}"], "code_level": "slib_runnable", "_id": "636767031a6d9265ec0178ef", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public static String sessionId(){\n\n\treturn sessionId;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Session ID. \n */\n", "method_name": "sessionId", "codes": ["public static String sessionId(){\n\n\treturn sessionId;\n}"], "code_level": "plib_runnable", "_id": "636766fe1a6d9265ec017834", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "public Boolean isPartialContentResponse(){\n\n\treturn this.getResponseCode().equals(HttpStatus.PARTIAL_CONTENT.value());\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Check if the actual response is a Partial Content (HTTP 206 code)\n * @return is partial content or not\n */\n", "method_name": "isPartialContentResponse", "codes": ["public Boolean isPartialContentResponse(){\n\n\treturn this.getResponseCode().equals(HttpStatus.PARTIAL_CONTENT.value());\n}"], "code_level": "plib_runnable", "_id": "636766ae1a6d9265ec0175dc", "project_name": "framework-master"}
{"generate_results": [{"generate_code": "private String buildContentRange(){\n\n\tStringBuffer sb = new StringBuffer();\n\tsb.append(\"bytes \");\n\tsb.append(this.rangeStart);\n\tsb.append(\"-\");\n\tsb.append(this.rangeEnd);\n\tsb.append(\"/\");\n\tsb.append(this.fileSize);\n\treturn sb.toString();\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Build the 'Content-Range' HTTP Header value.\n * @return 'Content-Range' value\n */\n", "method_name": "buildContentRange", "codes": ["private String buildContentRange(){\n\n\tStringBuffer sb = new StringBuffer();\n\tsb.append(\"bytes \");\n\tsb.append(this.rangeStart);\n\tsb.append(\"-\");\n\tsb.append(this.rangeEnd);\n\tsb.append(\"/\");\n\tsb.append(this.fileSize);\n\treturn sb.toString();\n}"], "code_level": "class_runnable", "_id": "636766ae1a6d9265ec0175d8", "project_name": "framework-master"}
{"generate_results": [{"generate_code": "private static String javaCharset(String charset){\n\n\tif (charset.equals(\"us-ascii\")) return \"ASCII\";\n\tif (charset.equals(\"iso-8859-1\")) return \"ISO8859_1\";\n\tif (charset.equals(\"iso-8859-2\")) return \"ISO8859_2\";\n\tif (charset.equals(\"iso-8859-3\")) return \"ISO8859_3\";\n\tif (charset.equals(\"iso-8859-4\")) return \"ISO8859_4\";\n\tif (charset.equals(\"iso-8859-5\")) return \"ISO8859_5\";\n\tif (charset.equals(\"iso-8859-6\")) return \"ISO8859_6\";\n\tif (charset.equals(\"iso-8859-7\")) return \"ISO8859_7\";\n\tif (charset.equals(\"iso-8859-8\")) return \"ISO8859_8\";\n\tif (charset.equals(\"iso-8859-9\")) return \"ISO8859_9\";", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Translate a MIME standard character set name into the Java equivalent.\n * @param charset The MIME standard name.\n * @return The Java equivalent for this name.\n */\n", "method_name": "javaCharset", "codes": ["private static String javaCharset(String charset){\n\n\tif (charset.equals(\"us-ascii\")) return \"ASCII\";\n\tif (charset.equals(\"iso-8859-1\")) return \"ISO8859_1\";\n\tif (charset.equals(\"iso-8859-2\")) return \"ISO8859_2\";\n\tif (charset.equals(\"iso-8859-3\")) return \"ISO8859_3\";\n\tif (charset.equals(\"iso-8859-4\")) return \"ISO8859_4\";\n\tif (charset.equals(\"iso-8859-5\")) return \"ISO8859_5\";\n\tif (charset.equals(\"iso-8859-6\")) return \"ISO8859_6\";\n\tif (charset.equals(\"iso-8859-7\")) return \"ISO8859_7\";\n\tif (charset.equals(\"iso-8859-8\")) return \"ISO8859_8\";\n\tif (charset.equals(\"iso-8859-9\")) return \"ISO8859_9\";"], "code_level": "class_runnable", "_id": "636766f01a6d9265ec01763e", "project_name": "hasor-master"}
{"generate_results": [{"generate_code": "private TreeNode<T> rotateRight(TreeNode<T> node){\n\n\tTreeNode<T> temp = node.left;\n\tnode.left = temp.right;\n\ttemp.right = node;\n\treturn temp;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Performs a right node rotation.\n * @param node a node to rotate\n * @return a new parent of the {@code node}\n */\n", "method_name": "rotateRight", "codes": ["private TreeNode<T> rotateRight(TreeNode<T> node){\n\n\tTreeNode<T> temp = node.left;\n\tnode.left = temp.right;\n\ttemp.right = node;\n\treturn temp;\n}"], "code_level": "file_runnable", "_id": "636767441a6d9265ec017cc1", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public static final <V>void swap(V[] arr,int i,int j){\n\n\tV temp=arr[i];\n\tarr[i]=arr[j];\n\tarr[j]=temp;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Swaps the two elements at the specified indices in the given array.\n * @param < V > the type of elements in the array\n * @param arr the array\n * @param i the index of the first element\n * @param j the index of the second element\n */\n", "method_name": "swap", "codes": ["public static final <V>void swap(V[] arr,int i,int j){\n\n\tV temp=arr[i];\n\tarr[i]=arr[j];\n\tarr[j]=temp;\n}"], "code_level": "self_contained", "_id": "636767551a6d9265ec017f3f", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "@SuppressWarnings(\"unchecked\") public static Supplier<String> createStringSupplier(int start){\n\n\treturn (Supplier<String>) createSupplier(start);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Create a string supplier which returns unique strings. The returns strings are simply integers starting from start.\n * @param start where to start the sequence\n * @return a string supplier\n */\n", "method_name": "createStringSupplier", "codes": ["@SuppressWarnings(\"unchecked\") public static Supplier<String> createStringSupplier(int start){\n\n\treturn (Supplier<String>) createSupplier(start);\n}"], "code_level": "slib_runnable", "_id": "6367675c1a6d9265ec018058", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "@Override public ListNode<E> previousNode(){\n\n\treturn previous;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * {@inheritDoc}\n */\n", "method_name": "previousNode", "codes": ["@Override public ListNode<E> previousNode(){\n\n\treturn previous;\n}"], "code_level": "class_runnable", "_id": "636767501a6d9265ec017e86", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public static long factorial(int n){\n\n\tif(n == 0) return 1;\n\telse return n * factorial(n-1);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Calculate the factorial of $n$.\n * @param n the input number\n * @return the factorial\n */\n", "method_name": "factorial", "codes": ["public static long factorial(int n){\n\n\tif(n == 0) return 1;\n\telse return n * factorial(n-1);\n}"], "code_level": "self_contained", "_id": "636767581a6d9265ec017fc4", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "private boolean unlink(ListNodeImpl<E> node){\n\n\tif(node == null)\n\t\treturn false;\n\t\n\tListNodeImpl<E> prev = node.prev;\n\tListNodeImpl<E> next = node.next;\n\t\n\tif(prev == null){\n\t\thead = next;\n\t}else{\n\t\tprev.next = next;\n\t\tnode.prev = null;\n\t}\n\t\n\tif(next == null){\n\t\ttail = prev;\n\t}else{\n\t\tnext.prev = prev;\n\t\tnode.next = null;\n\t}\n\t\n\tnode.item = null;\n\tsize--;\n\treturn true;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Remove the non null  {@code node} from the list. \n */\n", "method_name": "unlink", "codes": ["private boolean unlink(ListNodeImpl<E> node){\n\n\tif(node == null)\n\t\treturn false;\n\t\n\tListNodeImpl<E> prev = node.prev;\n\tListNodeImpl<E> next = node.next;\n\t\n\tif(prev == null){\n\t\thead = next;\n\t}else{\n\t\tprev.next = next;\n\t\tnode.prev = null;\n\t}\n\t\n\tif(next == null){\n\t\ttail = prev;\n\t}else{\n\t\tnext.prev = prev;\n\t\tnode.next = null;\n\t}\n\t\n\tnode.item = null;\n\tsize--;\n\treturn true;\n}"], "code_level": "class_runnable", "_id": "636767631a6d9265ec018171", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public static final <V>void reverse(V[] arr,int from,int to){\n\n\tfor(int i=from,j=to;i<j;i++,j--){\n\t\tV tmp=arr[i];\n\t\tarr[i]=arr[j];\n\t\tarr[j]=tmp;\n\t}\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Reverses the order of the elements in the specified range within the given array.\n * @param < V > the type of elements in the array\n * @param arr the array\n * @param from the index of the first element (inclusive) inside the range to reverse\n * @param to the index of the last element (inclusive) inside the range to reverse\n */\n", "method_name": "reverse", "codes": ["public static final <V>void reverse(V[] arr,int from,int to){\n\n\tfor(int i=from,j=to;i<j;i++,j--){\n\t\tV tmp=arr[i];\n\t\tarr[i]=arr[j];\n\t\tarr[j]=tmp;\n\t}\n}"], "code_level": "class_runnable", "_id": "636767491a6d9265ec017d90", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "private void moveAllListNodes(DoublyLinkedList<E> list){\n\n\tListNodeImpl<E> head=list.head;\n\tListNodeImpl<E> tail=list.tail;\n\tif(head==null){\n\t\treturn;\n\t}\n\tlist.head=null;\n\tlist.tail=null;\n\tif(head==tail){\n\t\taddListNode(head);\n\t\treturn;\n\t}\n\tListNodeImpl<E> after=head.next;\n\taddListNode(head);\n\tfor(;;){\n\t\tListNodeImpl<E> next=after.next;\n\t\taddListNode(after);\n\t\tif(after==tail){\n\t\t\treturn;\n\t\t}\n\t\tafter=next;\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Atomically moves all  {@link ListNode ListNodes} from {@code list} to this list as if eachnode was removed with  {@link #removeListNode(ListNodeImpl)} from {@code list} andsubsequently added to this list by  {@link #addListNode(ListNodeImpl)}.\n */\n", "method_name": "moveAllListNodes", "codes": ["private void moveAllListNodes(DoublyLinkedList<E> list){\n\n\tListNodeImpl<E> head=list.head;\n\tListNodeImpl<E> tail=list.tail;\n\tif(head==null){\n\t\treturn;\n\t}\n\tlist.head=null;\n\tlist.tail=null;\n\tif(head==tail){\n\t\taddListNode(head);\n\t\treturn;\n\t}\n\tListNodeImpl<E> after=head.next;\n\taddListNode(head);\n\tfor(;;){\n\t\tListNodeImpl<E> next=after.next;\n\t\taddListNode(after);\n\t\tif(after==tail){\n\t\t\treturn;\n\t\t}\n\t\tafter=next;\n\t}\n}"], "code_level": "class_runnable", "_id": "6367674a1a6d9265ec017da9", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public static <V,E>IsomorphicGraphMapping<V,E> identity(Graph<V,E> graph){\n\n\treturn new IsomorphicGraphMapping<V,E>(graph,graph);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Computes an identity automorphism (i.e. a self-mapping of a graph in which each vertex also maps to itself).\n * @param graph the input graph\n * @param < V > the graph vertex type\n * @param < E > the graph edge type\n * @return a mapping from graph to graph\n */\n", "method_name": "identity", "codes": ["public static <V,E>IsomorphicGraphMapping<V,E> identity(Graph<V,E> graph){\n\n\treturn new IsomorphicGraphMapping<V,E>(graph,graph);\n}"], "code_level": "project_runnable", "_id": "6367675f1a6d9265ec0180d3", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "@Override public void generateGraph(Graph<V,E> target,Map<String,V> resultMap){\n\n\t\n\tint n = this.getNumberOfVertices();\n\tint m = this.getNumberOfVertices2();\n\t\n\tfor(int i=0;i<n;i++){\n\t\tV v = this.getVertexFactory().createVertex();\n\t\ttarget.addVertex(v);\n\t\tresultMap.put(\"\"+i, v);\n\t}\n\t\n\tfor(int i=0;i<m;i++){\n\t\tV v = this.getVertexFactory().createVertex();\n\t\ttarget.addVertex(v);\n\t\tresultMap.put(\"\"+i+n, v);\n\t}\n\t\n\tfor(int i=0;i<n;i++){\n\t\tfor(int j=0;j<m;j++){\n\t\t\tE e = this.getEdgeFactory().createEdge(resultMap.get(\"\"+i), resultMap.get(\"\"+j+n));\n\t\t\ttarget.addEdge(e, resultMap.get(\"\"+i), resultMap.get(\"\"+j", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Construct a complete bipartite graph\n */\n", "method_name": "generateGraph", "codes": ["@Override public void generateGraph(Graph<V,E> target,Map<String,V> resultMap){\n\n\t\n\tint n = this.getNumberOfVertices();\n\tint m = this.getNumberOfVertices2();\n\t\n\tfor(int i=0;i<n;i++){\n\t\tV v = this.getVertexFactory().createVertex();\n\t\ttarget.addVertex(v);\n\t\tresultMap.put(\"\"+i, v);\n\t}\n\t\n\tfor(int i=0;i<m;i++){\n\t\tV v = this.getVertexFactory().createVertex();\n\t\ttarget.addVertex(v);\n\t\tresultMap.put(\"\"+i+n, v);\n\t}\n\t\n\tfor(int i=0;i<n;i++){\n\t\tfor(int j=0;j<m;j++){\n\t\t\tE e = this.getEdgeFactory().createEdge(resultMap.get(\"\"+i), resultMap.get(\"\"+j+n));\n\t\t\ttarget.addEdge(e, resultMap.get(\"\"+i), resultMap.get(\"\"+j"], "code_level": "class_runnable", "_id": "636767641a6d9265ec01817d", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "void insertBefore(Bucket bucket){\n\n\tif (bucket == null)\n\t\tthrow new IllegalArgumentException(\"The bucket cannot be null\");\n\tif (bucket.prev != null)\n\t\tthrow new IllegalArgumentException(\"The bucket is already in the list\");\n\tbucket.prev = this.prev;\n\tbucket.next = this;\n\tif (this.prev != null)\n\t\tthis.prev.next = bucket;\n\tthis.prev = bucket;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Inserts this bucket in the data structure before the  {@code bucket}.\n * @param bucket the bucket, that will be the next to this bucket.\n */\n", "method_name": "insertBefore", "codes": ["void insertBefore(Bucket bucket){\n\n\tif (bucket == null)\n\t\tthrow new IllegalArgumentException(\"The bucket cannot be null\");\n\tif (bucket.prev != null)\n\t\tthrow new IllegalArgumentException(\"The bucket is already in the list\");\n\tbucket.prev = this.prev;\n\tbucket.next = this;\n\tif (this.prev != null)\n\t\tthis.prev.next = bucket;\n\tthis.prev = bucket;\n}"], "code_level": "class_runnable", "_id": "636767531a6d9265ec017efb", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "@Override public boolean hasNext(){\n\n\treturn !visited.isEmpty();\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Checks whether there exist unvisited vertices.\n * @return true if there exist unvisited vertices.\n */\n", "method_name": "hasNext", "codes": ["@Override public boolean hasNext(){\n\n\treturn !visited.isEmpty();\n}"], "code_level": "class_runnable", "_id": "636767561a6d9265ec017f63", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "void removeSelf(){\n\n\tif(prev != NULL)\n\t\tprev->next = next;\n\tif(next != NULL)\n\t\tnext->prev = prev;\n\tprev = NULL;\n\tnext = NULL;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Removes this bucket from the data structure.\n */\n", "method_name": "removeSelf", "codes": ["void removeSelf(){\n\n\tif(prev != NULL)\n\t\tprev->next = next;\n\tif(next != NULL)\n\t\tnext->prev = prev;\n\tprev = NULL;\n\tnext = NULL;\n}"], "code_level": "class_runnable", "_id": "6367675a1a6d9265ec018010", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "private Set<V> initVisibleVertices(){\n\n\tSet<V> visibleVertices = new HashSet<V>();\n\tfor(E e : this.getEdges()){\n\t\tvisibleVertices.add(this.getSource(e));\n\t\tvisibleVertices.add(this.getTarget(e));\n\t}\n\treturn visibleVertices;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Compute all vertices that have positive degree by iterating over the edges on purpose. This keeps the complexity to $O(m)$ where $m$ is the number of edges.\n * @return set of vertices with positive degree\n */\n", "method_name": "initVisibleVertices", "codes": ["private Set<V> initVisibleVertices(){\n\n\tSet<V> visibleVertices = new HashSet<V>();\n\tfor(E e : this.getEdges()){\n\t\tvisibleVertices.add(this.getSource(e));\n\t\tvisibleVertices.add(this.getTarget(e));\n\t}\n\treturn visibleVertices;\n}"], "code_level": "class_runnable", "_id": "6367674b1a6d9265ec017dc0", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public void removeFromTreeEdgeList(){\n\n\tif(treeEdgeListNext != null)\n\t    treeEdgeListNext.treeEdgeListPrev = treeEdgeListPrev;\n\tif(treeEdgeListPrev != null)\n\t    treeEdgeListPrev.treeEdgeListNext = treeEdgeListNext;\n\ttreeEdgeListNext = null;\n\ttreeEdgeListPrev = null;\n    }", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Removes this edge from both doubly linked lists of tree edges.\n */\n", "method_name": "removeFromTreeEdgeList", "codes": ["public void removeFromTreeEdgeList(){\n\n\tif(treeEdgeListNext != null)\n\t    treeEdgeListNext.treeEdgeListPrev = treeEdgeListPrev;\n\tif(treeEdgeListPrev != null)\n\t    treeEdgeListPrev.treeEdgeListNext = treeEdgeListNext;\n\ttreeEdgeListNext = null;\n\ttreeEdgeListPrev = null;\n    }"], "code_level": "class_runnable", "_id": "6367675c1a6d9265ec01805b", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "protected void addToIndex(V sourceVertex,V targetVertex,E e){\n\n\tif(index==null){\n\t\tindex=new HashMap<V,Set<E>>();\n\t}\n\tSet<E> edges=index.get(sourceVertex);\n\tif(edges==null){\n\t\tedges=new HashSet<E>();\n\t\tindex.put(sourceVertex,edges);\n\t}\n\tedges.add(e);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Add an edge to the index.\n * @param sourceVertex the source vertex\n * @param targetVertex the target vertex\n * @param e the edge\n */\n", "method_name": "addToIndex", "codes": ["protected void addToIndex(V sourceVertex,V targetVertex,E e){\n\n\tif(index==null){\n\t\tindex=new HashMap<V,Set<E>>();\n\t}\n\tSet<E> edges=index.get(sourceVertex);\n\tif(edges==null){\n\t\tedges=new HashSet<E>();\n\t\tindex.put(sourceVertex,edges);\n\t}\n\tedges.add(e);\n}"], "code_level": "class_runnable", "_id": "636767601a6d9265ec0180fd", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public static Pair<Box2D,Box2D> splitAlongXAxis(Box2D box){\n\n\tBox2D box1 = new Box2D(box.getX(),box.getY(),box.getWidth()/2,box.getHeight());\n\tBox2D box2 = new Box2D(box.getX()+box.getWidth()/2,box.getY(),box.getWidth()/2,box.getHeight());\n\treturn new Pair<Box2D,Box2D>(box1,box2);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Split a box along the x axis into two equal boxes.\n * @param box the box to split\n * @return a pair with the two resulting boxes\n */\n", "method_name": "splitAlongXAxis", "codes": ["public static Pair<Box2D,Box2D> splitAlongXAxis(Box2D box){\n\n\tBox2D box1 = new Box2D(box.getX(),box.getY(),box.getWidth()/2,box.getHeight());\n\tBox2D box2 = new Box2D(box.getX()+box.getWidth()/2,box.getY(),box.getWidth()/2,box.getHeight());\n\treturn new Pair<Box2D,Box2D>(box1,box2);\n}"], "code_level": "project_runnable", "_id": "636767521a6d9265ec017ecc", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public static boolean equals(Point2D p1,Point2D p2){\n\n\treturn equals(p1,p2,1e-9);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Compare two points for equality using tolerance 1e-9.\n * @param p1 the first point\n * @param p2 the second point\n * @return whether the two points are equal or not\n */\n", "method_name": "equals", "codes": ["public static boolean equals(Point2D p1,Point2D p2){\n\n\treturn equals(p1,p2,1e-9);\n}"], "code_level": "project_runnable", "_id": "636767531a6d9265ec017ef1", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "@Override public int compare(Double o1,Double o2){\n\n\t\tif (o1 == o2)\n\t\t\treturn 0;\n\t\telse if (o1 < o2)\n\t\t\treturn -1;\n\t\telse\n\t\t\treturn 1;\n\t}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Compares two floating point values. Returns 0 if they are equal, -1 if  {@literal o1 < o2}, 1 otherwise\n * @param o1 the first value\n * @param o2 the second value\n * @return 0 if they are equal, -1 if {@literal o1 < o2}, 1 otherwise\n */\n", "method_name": "compare", "codes": ["@Override public int compare(Double o1,Double o2){\n\n\t\tif (o1 == o2)\n\t\t\treturn 0;\n\t\telse if (o1 < o2)\n\t\t\treturn -1;\n\t\telse\n\t\t\treturn 1;\n\t}"], "code_level": "slib_runnable", "_id": "6367674a1a6d9265ec017dab", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public String toString(){\n\n\tString s = \"\";\n\tfor (int i = 0; i < size; i++) {\n\t\ts += array[i] + \" \";\n\t}\n\treturn s;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns a textual representation of the queue.\n * @return a textual representation of the queue.\n */\n", "method_name": "toString", "codes": ["public String toString(){\n\n\tString s = \"\";\n\tfor (int i = 0; i < size; i++) {\n\t\ts += array[i] + \" \";\n\t}\n\treturn s;\n}"], "code_level": "class_runnable", "_id": "6367674f1a6d9265ec017e74", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "private int computeBinaryLog(int n){\n\n\tint log = 0;\n\twhile (n > 0){\n\t\tn = n >> 1;\n\t\tlog++;\n\t}\n\treturn log;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Computes floor($\\log_2 (n)$) $+ 1$\n */\n", "method_name": "computeBinaryLog", "codes": ["private int computeBinaryLog(int n){\n\n\tint log = 0;\n\twhile (n > 0){\n\t\tn = n >> 1;\n\t\tlog++;\n\t}\n\treturn log;\n}"], "code_level": "self_contained", "_id": "636767431a6d9265ec017c8d", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public double vertexWeight(Set<V> v){\n\n\tdouble sum = 0;\n\tfor (V vertex : v){\n\t\tsum += vertexWeight(vertex);\n\t}\n\treturn sum;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Compute the sum of the weights entering a vertex\n * @param v the vertex\n * @return the sum of the weights entering a vertex\n */\n", "method_name": "vertexWeight", "codes": ["public double vertexWeight(Set<V> v){\n\n\tdouble sum = 0;\n\tfor (V vertex : v){\n\t\tsum += vertexWeight(vertex);\n\t}\n\treturn sum;\n}"], "code_level": "class_runnable", "_id": "636767611a6d9265ec018106", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "private Set<V> intersection(Set<V> set1,Set<V> set2){\n\n\tSet<V> intersection = new HashSet<V>();\n\tfor(V v:set1){\n\t\tif(set2.contains(v)){\n\t\t\tintersection.add(v);\n\t\t}\n\t}\n\treturn intersection;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Efficient way to compute the intersection between two sets\n * @param set1 set $1$\n * @param set2 set $2$\n * @return intersection of set $1$ and $2$\n */\n", "method_name": "intersection", "codes": ["private Set<V> intersection(Set<V> set1,Set<V> set2){\n\n\tSet<V> intersection = new HashSet<V>();\n\tfor(V v:set1){\n\t\tif(set2.contains(v)){\n\t\t\tintersection.add(v);\n\t\t}\n\t}\n\treturn intersection;\n}"], "code_level": "slib_runnable", "_id": "636767611a6d9265ec018116", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "private OuterFaceCirculator selectOnOuterFace(Predicate<Node> predicate,Node start,Node stop,int dir){\n\n\tOuterFaceCirculator circ=new OuterFaceCirculator(start,dir);\n\twhile(circ.getNode()!=stop){\n\t\tif(predicate.test(circ.getNode())){\n\t\t\treturn circ;\n\t\t}\n\t\tcirc.next();\n\t}\n\treturn circ;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Either finds and returns a circulator to the node on the boundary of the component, which satisfies the  {@code predicate} or returns a circulator to the {@code stop} node.\n * @param predicate the condition the desired node should satisfy\n * @param start the node to start the search from\n * @param stop the node to end the search with\n * @param dir the direction to start the traversal in\n * @return a circulator to the node satisfying the {@code predicate} or to the {@code stop} node\n */\n", "method_name": "selectOnOuterFace", "codes": ["private OuterFaceCirculator selectOnOuterFace(Predicate<Node> predicate,Node start,Node stop,int dir){\n\n\tOuterFaceCirculator circ=new OuterFaceCirculator(start,dir);\n\twhile(circ.getNode()!=stop){\n\t\tif(predicate.test(circ.getNode())){\n\t\t\treturn circ;\n\t\t}\n\t\tcirc.next();\n\t}\n\treturn circ;\n}"], "code_level": "class_runnable", "_id": "636767511a6d9265ec017eb6", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "Edge edgeToNext(){\n\n\treturn edgeToNext(currentNode);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns an edge connecting previously returned node with node, which will be returned next. If either of the mentioned nodes is virtual, the edge will be incident to its real counterpart.\n * @return an edge from the current node to the next node\n */\n", "method_name": "edgeToNext", "codes": ["Edge edgeToNext(){\n\n\treturn edgeToNext(currentNode);\n}"], "code_level": "class_runnable", "_id": "6367675d1a6d9265ec018082", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "protected GraphPath<V,E> edgeSetToTour(Set<E> tour,Graph<V,E> graph){\n\n\tGraphPath<V,E> path=null;\n\tif(tour!=null && tour.size()>0){\n\t\tV start=graph.getEdgeSource(tour.iterator().next());\n\t\tV end=graph.getEdgeTarget(tour.iterator().next());\n\t\tList<E> edges=new ArrayList<E>(tour);\n\t\tpath=new GraphWalk<V,E>(graph,start,end,edges,tour.size());\n\t}\n\treturn path;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Transform from a Set representation to a graph path.\n * @param tour a set containing the edges of the tour\n * @param graph the graph\n * @return a graph path\n */\n", "method_name": "edgeSetToTour", "codes": ["protected GraphPath<V,E> edgeSetToTour(Set<E> tour,Graph<V,E> graph){\n\n\tGraphPath<V,E> path=null;\n\tif(tour!=null && tour.size()>0){\n\t\tV start=graph.getEdgeSource(tour.iterator().next());\n\t\tV end=graph.getEdgeTarget(tour.iterator().next());\n\t\tList<E> edges=new ArrayList<E>(tour);\n\t\tpath=new GraphWalk<V,E>(graph,start,end,edges,tour.size());\n\t}\n\treturn path;\n}"], "code_level": "class_runnable", "_id": "636767561a6d9265ec017f7c", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "private void reload(List<Set<Integer>> bucketsByLabel,List<Integer> labels,int minLabel){\n\n\tSet<Integer> bucket = bucketsByLabel.get(minLabel);\n\tbucketsByLabel.set(0, bucket);\n\tbucketsByLabel.set(minLabel, new HashSet<Integer>());\n\tfor(Integer vertex:bucket){\n\t\tlabels.set(vertex, 0);\n\t}\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Moves all vertices from the bucket with label  {@code minLabel} to the bucket with label 0.Clears the bucket with label  {@code minLabel}. Updates the labeling accordingly.\n * @param bucketsByLabel the buckets vertices are stored in\n * @param labels the labels of the vertices\n * @param minLabel the minimum value of the non-empty bucket\n */\n", "method_name": "reload", "codes": ["private void reload(List<Set<Integer>> bucketsByLabel,List<Integer> labels,int minLabel){\n\n\tSet<Integer> bucket = bucketsByLabel.get(minLabel);\n\tbucketsByLabel.set(0, bucket);\n\tbucketsByLabel.set(minLabel, new HashSet<Integer>());\n\tfor(Integer vertex:bucket){\n\t\tlabels.set(vertex, 0);\n\t}\n}"], "code_level": "self_contained", "_id": "636767641a6d9265ec018190", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "@Override protected V provideNextVertex(){\n\n\treturn null;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * {@inheritDoc}\n */\n", "method_name": "provideNextVertex", "codes": ["@Override protected V provideNextVertex(){\n\n\treturn null;\n}"], "code_level": "class_runnable", "_id": "636767611a6d9265ec018112", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "private List<Pair<List<Pair<Integer,Integer>>,E>> computeGlobalSeparatorList(){\n\n\tList<Pair<List<Pair<Integer,Integer>>,E>> result = new ArrayList<>();\n\tfor(E e : graph.edgeSet()){\n\t\tList<Pair<List<Pair<Integer,Integer>>,E>> localSeparatorList = computeLocalSeparatorList(e);\n\t\tresult.addAll(localSeparatorList);\n\t}\n\treturn result;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Computes the global separator list of the  {@code graph}. More precisely, for every edge $e$ in the $G = (V, E)$ computes list of minimal separators $S_e$ in the neighborhood of $e$ and then concatenates these lists. Note: the result may contain duplicates\n * @return the list of minimal separators of every edge $e$ in the inspected graph\n */\n", "method_name": "computeGlobalSeparatorList", "codes": ["private List<Pair<List<Pair<Integer,Integer>>,E>> computeGlobalSeparatorList(){\n\n\tList<Pair<List<Pair<Integer,Integer>>,E>> result = new ArrayList<>();\n\tfor(E e : graph.edgeSet()){\n\t\tList<Pair<List<Pair<Integer,Integer>>,E>> localSeparatorList = computeLocalSeparatorList(e);\n\t\tresult.addAll(localSeparatorList);\n\t}\n\treturn result;\n}"], "code_level": "class_runnable", "_id": "636767601a6d9265ec0180e2", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "private Pair<List<Integer>,Long> computeSuffixSum(List<Integer> bounds){\n\n\tList<Integer> suffixSum = new ArrayList<Integer>();\n\tlong sum = 0;\n\tfor(int i = bounds.size()-1; i >= 0; i--){\n\t\tsuffixSum.add(0, (int) sum);\n\t\tsum += bounds.get(i);\n\t}\n\treturn new Pair<List<Integer>,Long>(suffixSum,sum);\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Computes a suffix sum of the  {@code bounds}. Returns computed suffix sum and the sum of all elements in the  {@code bounds list}.\n * @param bounds list of integers.\n * @return computed pair of suffix sum list and a sum of all elements.\n */\n", "method_name": "computeSuffixSum", "codes": ["private Pair<List<Integer>,Long> computeSuffixSum(List<Integer> bounds){\n\n\tList<Integer> suffixSum = new ArrayList<Integer>();\n\tlong sum = 0;\n\tfor(int i = bounds.size()-1; i >= 0; i--){\n\t\tsuffixSum.add(0, (int) sum);\n\t\tsum += bounds.get(i);\n\t}\n\treturn new Pair<List<Integer>,Long>(suffixSum,sum);\n}"], "code_level": "project_runnable", "_id": "636767461a6d9265ec017d0e", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "private List<Integer> computeLowerBounds(List<K> keys){\n\n\tList<Integer> lowerBounds = new ArrayList<Integer>();\n\tfor(int i = 0; i < keys.size(); i++){\n\t\tlowerBounds.add(i, 0);\n\t}\n\tfor(int i = 1; i < keys.size(); i++){\n\t\tint j = lowerBounds.get(i);\n\t\twhile(j > 0 && keys.get(i).compareTo(keys.get(j - 1)) < 0){\n\t\t\tj = lowerBounds.get(j - 1);\n\t\t}\n\t\tlowerBounds.set(i, j);\n\t}\n\treturn lowerBounds;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Finds a maximum lower bound for every key.\n * @param keys list of keys.\n * @return the computed key lower bounds.\n */\n", "method_name": "computeLowerBounds", "codes": ["private List<Integer> computeLowerBounds(List<K> keys){\n\n\tList<Integer> lowerBounds = new ArrayList<Integer>();\n\tfor(int i = 0; i < keys.size(); i++){\n\t\tlowerBounds.add(i, 0);\n\t}\n\tfor(int i = 1; i < keys.size(); i++){\n\t\tint j = lowerBounds.get(i);\n\t\twhile(j > 0 && keys.get(i).compareTo(keys.get(j - 1)) < 0){\n\t\t\tj = lowerBounds.get(j - 1);\n\t\t}\n\t\tlowerBounds.set(i, j);\n\t}\n\treturn lowerBounds;\n}"], "code_level": "class_runnable", "_id": "636767431a6d9265ec017c88", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "private List<Integer> computeUpperBounds(List<K> keys){\n\n\tList<Integer> upperBounds = new ArrayList<Integer>();\n\tfor(K key : keys){\n\t\tint upperBound = 0;\n\t\tfor(K key2 : keys){\n\t\t\tif(key.compareTo(key2) > 0){\n\t\t\t\tupperBound++;\n\t\t\t}\n\t\t}\n\t\tupperBounds.add(upperBound);\n\t}\n\treturn upperBounds;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Finds a minimum lower bound for every key.\n * @param keys a list of keys.\n * @return the computed key upper bound.\n */\n", "method_name": "computeUpperBounds", "codes": ["private List<Integer> computeUpperBounds(List<K> keys){\n\n\tList<Integer> upperBounds = new ArrayList<Integer>();\n\tfor(K key : keys){\n\t\tint upperBound = 0;\n\t\tfor(K key2 : keys){\n\t\t\tif(key.compareTo(key2) > 0){\n\t\t\t\tupperBound++;\n\t\t\t}\n\t\t}\n\t\tupperBounds.add(upperBound);\n\t}\n\treturn upperBounds;\n}"], "code_level": "class_runnable", "_id": "636767581a6d9265ec017fb4", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "private static <V,E>boolean isClique(Graph<V,E> graph,Set<V> vertices){\n\n\tfor(V v:vertices){\n\t\tfor(V u:vertices){\n\t\t\tif(v!=u){\n\t\t\t\tif(!graph.containsEdge(v, u)){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Check whether the subgraph of <code>graph</code> induced by the given <code>vertices</code> is complete, i.e. a clique.\n * @param graph the graph.\n * @param vertices the vertices to induce the subgraph from.\n * @return true if the induced subgraph is a clique.\n */\n", "method_name": "isClique", "codes": ["private static <V,E>boolean isClique(Graph<V,E> graph,Set<V> vertices){\n\n\tfor(V v:vertices){\n\t\tfor(V u:vertices){\n\t\t\tif(v!=u){\n\t\t\t\tif(!graph.containsEdge(v, u)){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}"], "code_level": "class_runnable", "_id": "6367675f1a6d9265ec0180cf", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "public int nonZeros(int row){\n\n\treturn row_ptr[row+1]-row_ptr[row];\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Get the number of non-zero entries of a row.\n * @param row the row\n * @return the number of non-zero entries of a row\n */\n", "method_name": "nonZeros", "codes": ["public int nonZeros(int row){\n\n\treturn row_ptr[row+1]-row_ptr[row];\n}"], "code_level": "class_runnable", "_id": "636767511a6d9265ec017eb0", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "private String unescapeId(String input){\n\n\tStringBuilder sb = new StringBuilder();\n\tfor (int i = 0; i < input.length(); i++){\n\t\tchar c = input.charAt(i);\n\t\tif (c == '\\\\'){\n\t\t\tif (i < input.length() - 1){\n\t\t\t\tchar c2 = input.charAt(i + 1);\n\t\t\t\tif (c2 == '\\\\' || c2 == '.' || c2 == '\"'){\n\t\t\t\t\tsb.append(c2);\n\t\t\t\t\ti++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsb.append(c);\n\t}\n\treturn sb.toString();\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Unescape a string DOT identifier.\n * @param input the input\n * @return the unescaped output\n */\n", "method_name": "unescapeId", "codes": ["private String unescapeId(String input){\n\n\tStringBuilder sb = new StringBuilder();\n\tfor (int i = 0; i < input.length(); i++){\n\t\tchar c = input.charAt(i);\n\t\tif (c == '\\\\'){\n\t\t\tif (i < input.length() - 1){\n\t\t\t\tchar c2 = input.charAt(i + 1);\n\t\t\t\tif (c2 == '\\\\' || c2 == '.' || c2 == '\"'){\n\t\t\t\t\tsb.append(c2);\n\t\t\t\t\ti++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsb.append(c);\n\t}\n\treturn sb.toString();\n}"], "code_level": "class_runnable", "_id": "636767461a6d9265ec017d17", "project_name": "jgrapht-master"}
{"generate_results": [{"generate_code": "private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){\n\n\tint b1=bb.get(i)&0xFF;\n\tif(b1<=0x7F){\n\t\tsb.append((char)b1);\n\t\treturn i+1;\n\t}\n\tif(b1>=0xC0){\n\t\tint b2=bb.get(i+1)&0xFF;\n\t\tif(b1<=0xDF){\n\t\t\tsb.append((char)(((b1&0x1F)<<6)|(b2&0x3F)));\n\t\t\treturn i+2;\n\t\t}\n\t\tint b3=bb.get(i+2)&0xFF;\n\t\tif(b1<=0xEF){\n\t\t\tsb.append((char)(((b1&0x0F)<<12)|((b2&0x3F)<<6)|(b3&0x3F)));\n\t\t\treturn i+3;\n\t\t}\n\t\tint b4=bb.get(i+3)&0xFF;\n\t", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Decodes octets to characters using the UTF-8 decoding and appends the characters to a StringBuffer.\n * @return the index to the next unchecked character in the string to decode\n */\n", "method_name": "decodeOctets", "codes": ["private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){\n\n\tint b1=bb.get(i)&0xFF;\n\tif(b1<=0x7F){\n\t\tsb.append((char)b1);\n\t\treturn i+1;\n\t}\n\tif(b1>=0xC0){\n\t\tint b2=bb.get(i+1)&0xFF;\n\t\tif(b1<=0xDF){\n\t\t\tsb.append((char)(((b1&0x1F)<<6)|(b2&0x3F)));\n\t\t\treturn i+2;\n\t\t}\n\t\tint b3=bb.get(i+2)&0xFF;\n\t\tif(b1<=0xEF){\n\t\t\tsb.append((char)(((b1&0x0F)<<12)|((b2&0x3F)<<6)|(b3&0x3F)));\n\t\t\treturn i+3;\n\t\t}\n\t\tint b4=bb.get(i+3)&0xFF;\n\t"], "code_level": "class_runnable", "_id": "6367667f1a6d9265ec017457", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public static List<PathSegmentImpl> decodePath(URI u,boolean decode){\n\nString path=u.getRawPath();\nif(path==null){\nreturn Collections.emptyList();\n}\nif(path.length()==0){\nreturn Collections.singletonList(new PathSegmentImpl(\"\",decode));\n}\nList<PathSegmentImpl> l=new LinkedList<PathSegmentImpl>();\nint start=0;\nint i=path.indexOf('/');\nif(i==0){\nstart=1;\ni=path.indexOf('/',1);\n}\nwhile(i!=-1){\nl.add(new PathSegmentImpl(path.substring(start,i),decode));\nstart=i+1;\ni=path.indexOf('/',start);\n}\nl.add(new PathSegmentImpl(path.substring(start),decode));\nreturn l;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Decode the path component of a URI as path segments.\n * @param u the URI. If the path component is an absolute path componentthen the leading '/' is ignored and is not considered a delimiator of a path segment.\n * @param decode true if the path segments of the path componentshould be in decoded form.\n * @return the list of path segments.\n */\n", "method_name": "decodePath", "codes": ["public static List<PathSegmentImpl> decodePath(URI u,boolean decode){\n\nString path=u.getRawPath();\nif(path==null){\nreturn Collections.emptyList();\n}\nif(path.length()==0){\nreturn Collections.singletonList(new PathSegmentImpl(\"\",decode));\n}\nList<PathSegmentImpl> l=new LinkedList<PathSegmentImpl>();\nint start=0;\nint i=path.indexOf('/');\nif(i==0){\nstart=1;\ni=path.indexOf('/',1);\n}\nwhile(i!=-1){\nl.add(new PathSegmentImpl(path.substring(start,i),decode));\nstart=i+1;\ni=path.indexOf('/',start);\n}\nl.add(new PathSegmentImpl(path.substring(start),decode));\nreturn l;\n}"], "code_level": "slib_runnable", "_id": "6367667f1a6d9265ec01745d", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public final MatchResult match(CharSequence uri){\n\n\treturn match(uri,0,uri.length());\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Match a URI against the pattern.\n * @param uri the uri to match against the template.\n * @return the match result, otherwise null if no match occurs.\n */\n", "method_name": "match", "codes": ["public final MatchResult match(CharSequence uri){\n\n\treturn match(uri,0,uri.length());\n}"], "code_level": "project_runnable", "_id": "636766861a6d9265ec01755a", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public final boolean isTemplateVariablePresent(String name){\n\n   return (getTemplateVariable(name) != null);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Ascertain if a template variable is a member of this template.\n * @param name name The template variable.\n * @return true if the template variable is a member of the template, otherwisefalse.\n */\n", "method_name": "isTemplateVariablePresent", "codes": ["public final boolean isTemplateVariablePresent(String name){\n\n   return (getTemplateVariable(name) != null);\n}"], "code_level": "class_runnable", "_id": "636766861a6d9265ec017553", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public static String encodeTemplateNames(String s){\n\n\tStringBuffer sb = new StringBuffer();\n\tfor(int i = 0; i < s.length(); i++){\n\t\tchar c = s.charAt(i);\n\t\tif(c == '{' || c == '}'){\n\t\t\tsb.append('%');\n\t\t\tsb.append(Integer.toHexString(c));\n\t\t}\n\t\telse{\n\t\t\tsb.append(c);\n\t\t}\n\t}\n\treturn sb.toString();\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Encodes a string with template parameters names present, specifically the characters '{' and '}' will be percent-encoded.\n * @param s the string with zero or more template parameters names\n * @return the string with encoded template parameters names.\n */\n", "method_name": "encodeTemplateNames", "codes": ["public static String encodeTemplateNames(String s){\n\n\tStringBuffer sb = new StringBuffer();\n\tfor(int i = 0; i < s.length(); i++){\n\t\tchar c = s.charAt(i);\n\t\tif(c == '{' || c == '}'){\n\t\t\tsb.append('%');\n\t\t\tsb.append(Integer.toHexString(c));\n\t\t}\n\t\telse{\n\t\t\tsb.append(c);\n\t\t}\n\t}\n\treturn sb.toString();\n}"], "code_level": "self_contained", "_id": "636766801a6d9265ec017487", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "@SuppressWarnings(\"unchecked\") public static void addToClassPath(Vector<URL> cpV,String dir){\n\n\tFile dirF = new File(dir);\n\tif(!dirF.exists()){\n\t\tSystem.err.println(\"Error: Directory \"+dir+\" does not exist.\");\n\t\tSystem.exit(1);\n\t}\n\tif(!dirF.isDirectory()){\n\t\tSystem.err.println(\"Error: \"+dir+\" is not a directory.\");\n\t\tSystem.exit(1);\n\t}\n\tString[] files = dirF.list();\n\tfor(int i=0;i<files.length;i++){\n\t\tif(files[i].endsWith(\".jar\")){\n\t\t\ttry{\n\t\t\t\tcpV.add(new URL(\"file://\"+dir+\"/\"+files[i]));\n\t\t\t}catch(MalformedURLException e){\n\t\t\t\tSystem.err.println(\"Error: \"+e);\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t}\n\t}\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Add all the jar files in a dir to the classpath, represented as a Vector of URLs.\n */\n", "method_name": "addToClassPath", "codes": ["@SuppressWarnings(\"unchecked\") public static void addToClassPath(Vector<URL> cpV,String dir){\n\n\tFile dirF = new File(dir);\n\tif(!dirF.exists()){\n\t\tSystem.err.println(\"Error: Directory \"+dir+\" does not exist.\");\n\t\tSystem.exit(1);\n\t}\n\tif(!dirF.isDirectory()){\n\t\tSystem.err.println(\"Error: \"+dir+\" is not a directory.\");\n\t\tSystem.exit(1);\n\t}\n\tString[] files = dirF.list();\n\tfor(int i=0;i<files.length;i++){\n\t\tif(files[i].endsWith(\".jar\")){\n\t\t\ttry{\n\t\t\t\tcpV.add(new URL(\"file://\"+dir+\"/\"+files[i]));\n\t\t\t}catch(MalformedURLException e){\n\t\t\t\tSystem.err.println(\"Error: \"+e);\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t}\n\t}\n}"], "code_level": "class_runnable", "_id": "6367667f1a6d9265ec01745c", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public static String capitalize(String name){\n\n\tif(name==null || name.length()==0)\n\t\treturn name;\n\tchar chars[] = name.toCharArray();\n\tchars[0] = Character.toUpperCase(chars[0]);\n\treturn new String(chars);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Reverse of Introspector.decapitalize\n */\n", "method_name": "capitalize", "codes": ["public static String capitalize(String name){\n\n\tif(name==null || name.length()==0)\n\t\treturn name;\n\tchar chars[] = name.toCharArray();\n\tchars[0] = Character.toUpperCase(chars[0]);\n\treturn new String(chars);\n}"], "code_level": "slib_runnable", "_id": "636766821a6d9265ec0174bf", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public static String unescapeJava(String str) throws Exception {\n\n\tif (str == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tStringWriter writer = new StringWriter(str.length());\n\t\tunescapeJava(writer, str);\n\t\treturn writer.toString();\n\t} catch (Exception e) {\n\t\tthrow e;\n\t}\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Unescapes any Java literals found in the <code>String</code>. For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code> into a newline character, unless the <code>'\\'</code> is preceded by another <code>'\\'</code>.</p>\n * @param str the <code>String</code> to unescape, may be null\n * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n */\n", "method_name": "unescapeJava", "codes": ["public static String unescapeJava(String str) throws Exception {\n\n\tif (str == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tStringWriter writer = new StringWriter(str.length());\n\t\tunescapeJava(writer, str);\n\t\treturn writer.toString();\n\t} catch (Exception e) {\n\t\tthrow e;\n\t}\n}"], "code_level": "slib_runnable", "_id": "6367667d1a6d9265ec017401", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "private static char decodeHexNibble(final char c){\n\n\tif('0'<=c&&c<='9'){\n\t\treturn (char)(c-'0');\n\t}else if('a'<=c&&c<='f'){\n\t\treturn (char)(c-'a'+10);\n\t}else if('A'<=c&&c<='F'){\n\t\treturn (char)(c-'A'+10);\n\t}else{\n\t\treturn Character.MAX_VALUE;\n\t}\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Helper to decode half of a hexadecimal number from a string.\n * @param c The ASCII character of the hexadecimal number to decode.Must be in the range  {@code [0-9a-fA-F]}.\n * @return The hexadecimal value represented in the ASCII charactergiven, or  {@link Character#MAX_VALUE} if the character is invalid.\n */\n", "method_name": "decodeHexNibble", "codes": ["private static char decodeHexNibble(final char c){\n\n\tif('0'<=c&&c<='9'){\n\t\treturn (char)(c-'0');\n\t}else if('a'<=c&&c<='f'){\n\t\treturn (char)(c-'a'+10);\n\t}else if('A'<=c&&c<='F'){\n\t\treturn (char)(c-'A'+10);\n\t}else{\n\t\treturn Character.MAX_VALUE;\n\t}\n}"], "code_level": "slib_runnable", "_id": "636766851a6d9265ec01751b", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public static Class<?>[] resolveArguments(Type genericType,Class<?> targetType){\n\n\tif(genericType instanceof ParameterizedType){\n\t\tParameterizedType parameterizedType=(ParameterizedType)genericType;\n\t\tType[] typeArguments=parameterizedType.getActualTypeArguments();\n\t\tClass<?>[] arguments=new Class<?>[typeArguments.length];\n\t\tfor(int i=0;i<typeArguments.length;i++){\n\t\t\tType typeArgument=typeArguments[i];\n\t\t\targuments[i]=resolveArgument(typeArgument,targetType);\n\t\t\tif(arguments[i]==null){\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn arguments;\n\t}else{\n\t\treturn null;\n\t}\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Resolves the arguments for the  {@code genericType} using the type variable information for the{@code targetType}. Returns  {@code null} if {@code genericType} is not parameterized or ifarguments cannot be resolved.\n */\n", "method_name": "resolveArguments", "codes": ["public static Class<?>[] resolveArguments(Type genericType,Class<?> targetType){\n\n\tif(genericType instanceof ParameterizedType){\n\t\tParameterizedType parameterizedType=(ParameterizedType)genericType;\n\t\tType[] typeArguments=parameterizedType.getActualTypeArguments();\n\t\tClass<?>[] arguments=new Class<?>[typeArguments.length];\n\t\tfor(int i=0;i<typeArguments.length;i++){\n\t\t\tType typeArgument=typeArguments[i];\n\t\t\targuments[i]=resolveArgument(typeArgument,targetType);\n\t\t\tif(arguments[i]==null){\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn arguments;\n\t}else{\n\t\treturn null;\n\t}\n}"], "code_level": "class_runnable", "_id": "636766821a6d9265ec0174b6", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public static Type resolveBound(TypeVariable<?> typeVariable){\n\n\tType[] bounds=typeVariable.getBounds();\n\tif(bounds.length==0){\n\t\treturn Unknown.class;\n\t}\n\tType bound=bounds[0];\n\tif(bound instanceof TypeVariable){\n\t\tbound=resolveBound((TypeVariable<?>)bound);\n\t}\n\treturn bound;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Resolves the first bound for the  {@code typeVariable}, returning  {@code Unknown.class} if nonecan be resolved.\n */\n", "method_name": "resolveBound", "codes": ["public static Type resolveBound(TypeVariable<?> typeVariable){\n\n\tType[] bounds=typeVariable.getBounds();\n\tif(bounds.length==0){\n\t\treturn Unknown.class;\n\t}\n\tType bound=bounds[0];\n\tif(bound instanceof TypeVariable){\n\t\tbound=resolveBound((TypeVariable<?>)bound);\n\t}\n\treturn bound;\n}"], "code_level": "slib_runnable", "_id": "6367667d1a6d9265ec01741d", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public static AtmosphereRequest wrap(HttpServletRequest request){\n\n    return new AtmosphereRequestImpl(request);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Wrap an  {@link HttpServletRequest}.\n * @param request {@link HttpServletRequest}\n * @return an {@link AtmosphereRequest}\n */\n", "method_name": "wrap", "codes": ["public static AtmosphereRequest wrap(HttpServletRequest request){\n\n    return new AtmosphereRequestImpl(request);\n}"], "code_level": "class_runnable", "_id": "636766821a6d9265ec0174d2", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public AtmosphereFramework removeAtmosphereHandler(String mapping){\n\n    return removeAtmosphereHandler(mapping, false);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Remove an  {@link AtmosphereHandler}.\n * @param mapping the mapping used when invoking {@link #addAtmosphereHandler(String,AtmosphereHandler)};\n * @return true if removed\n */\n", "method_name": "removeAtmosphereHandler", "codes": ["public AtmosphereFramework removeAtmosphereHandler(String mapping){\n\n    return removeAtmosphereHandler(mapping, false);\n}"], "code_level": "class_runnable", "_id": "6367667f1a6d9265ec017458", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "protected Object filter(Object msg){\n\n\treturn broadcastFilter.filter(msg);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Invoke the  {@link BroadcastFilter}\n * @param msg\n * @return\n */\n", "method_name": "filter", "codes": ["protected Object filter(Object msg){\n\n\treturn broadcastFilter.filter(msg);\n}"], "code_level": "project_runnable", "_id": "636766821a6d9265ec0174b3", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "private boolean checkDuplicate(final List<AtmosphereInterceptor> interceptorList,Class<? extends AtmosphereInterceptor> c){\n\n\tfor(AtmosphereInterceptor ai:interceptorList){\n\t\tif(ai.getClass().equals(c)){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p> Checks in the specified list if there is at least one instance of the given {@link AtmosphereInterceptor interceptor} implementation class.</p>\n * @param interceptorList the interceptors\n * @param c               the interceptor class\n * @return {@code false} if an instance of the class already exists in the list, {@code true} otherwise\n */\n", "method_name": "checkDuplicate", "codes": ["private boolean checkDuplicate(final List<AtmosphereInterceptor> interceptorList,Class<? extends AtmosphereInterceptor> c){\n\n\tfor(AtmosphereInterceptor ai:interceptorList){\n\t\tif(ai.getClass().equals(c)){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}"], "code_level": "project_runnable", "_id": "636766811a6d9265ec017499", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public boolean hasBytes(){\n\n\treturn (body instanceof byte[]);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * True is the body is a byte array\n * @return True is the body is a byte array\n */\n", "method_name": "hasBytes", "codes": ["public boolean hasBytes(){\n\n\treturn (body instanceof byte[]);\n}"], "code_level": "class_runnable", "_id": "6367667c1a6d9265ec0173f7", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public static Meteor lookup(HttpServletRequest r){\n\n\treturn (Meteor)r.getAttribute(Meteor.class.getName());\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Retrieve an instance of  {@link Meteor} based on the {@link HttpServletRequest}.\n * @param r {@link HttpServletRequest}\n * @return a {@link Meteor} or null if not found\n */\n", "method_name": "lookup", "codes": ["public static Meteor lookup(HttpServletRequest r){\n\n\treturn (Meteor)r.getAttribute(Meteor.class.getName());\n}"], "code_level": "class_runnable", "_id": "6367667d1a6d9265ec0173ff", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "@Override public AtmosphereResource addEventListener(AtmosphereResourceEventListener e){\n\n\tif(e == null){\n\t\tthrow new IllegalArgumentException(\"AtmosphereResourceEventListener cannot be null\");\n\t}\n\tif(eventListeners == null){\n\t\teventListeners = new ArrayList<AtmosphereResourceEventListener>();\n\t}\n\teventListeners.add(e);\n\treturn this;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Add a  {@link AtmosphereResourceEventListener}.\n * @param e an instance of AtmosphereResourceEventListener\n */\n", "method_name": "addEventListener", "codes": ["@Override public AtmosphereResource addEventListener(AtmosphereResourceEventListener e){\n\n\tif(e == null){\n\t\tthrow new IllegalArgumentException(\"AtmosphereResourceEventListener cannot be null\");\n\t}\n\tif(eventListeners == null){\n\t\teventListeners = new ArrayList<AtmosphereResourceEventListener>();\n\t}\n\teventListeners.add(e);\n\treturn this;\n}"], "code_level": "project_runnable", "_id": "6367667c1a6d9265ec0173fb", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public InputStream next() throws IOException {\n\n\tif (hasNext()) {\n\t\treturn new FileInputStream(files[index++]);\n\t}\n\treturn null;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Return the next  {@link java.io.File} object or {@code null} if no more files areavailable.\n */\n", "method_name": "next", "codes": ["public InputStream next() throws IOException {\n\n\tif (hasNext()) {\n\t\treturn new FileInputStream(files[index++]);\n\t}\n\treturn null;\n}"], "code_level": "class_runnable", "_id": "636766811a6d9265ec017496", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "private static File[] classPath(){\n\n\tString classpath = System.getProperty(\"java.class.path\");\n\tString separator = System.getProperty(\"path.separator\");\n\tStringTokenizer tokenizer = new StringTokenizer(classpath, separator);\n\tArrayList<File> list = new ArrayList<File>();\n\twhile (tokenizer.hasMoreTokens()) {\n\t\tlist.add(new File(tokenizer.nextToken()));\n\t}\n\treturn list.toArray(new File[list.size()]);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns the class path of the current JVM instance as an array of  {@link File} objects.\n */\n", "method_name": "classPath", "codes": ["private static File[] classPath(){\n\n\tString classpath = System.getProperty(\"java.class.path\");\n\tString separator = System.getProperty(\"path.separator\");\n\tStringTokenizer tokenizer = new StringTokenizer(classpath, separator);\n\tArrayList<File> list = new ArrayList<File>();\n\twhile (tokenizer.hasMoreTokens()) {\n\t\tlist.add(new File(tokenizer.nextToken()));\n\t}\n\treturn list.toArray(new File[list.size()]);\n}"], "code_level": "slib_runnable", "_id": "636766821a6d9265ec0174c9", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public void readFrom(final InputStream in) throws IOException {\n\n\t// Clear the buffer\n\tthis.buffer = null;\n\tthis.buffer = new byte[this.bufferSize];\n\tthis.readPointer = 0;\n\tthis.writePointer = 0;\n\t// Fill the buffer\n\tint count = 0;\n\tint read = 0;\n\twhile (count < this.bufferSize && (read = in.read(this.buffer, count, this.bufferSize - count)) != -1) {\n\t\tcount += read;\n\t}\n\tthis.writePointer = count;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Clear and fill the buffer of this  {@code ClassFileBuffer} with thesupplied byte stream. The read pointer is reset to the start of the byte array.\n */\n", "method_name": "readFrom", "codes": ["public void readFrom(final InputStream in) throws IOException {\n\n\t// Clear the buffer\n\tthis.buffer = null;\n\tthis.buffer = new byte[this.bufferSize];\n\tthis.readPointer = 0;\n\tthis.writePointer = 0;\n\t// Fill the buffer\n\tint count = 0;\n\tint read = 0;\n\twhile (count < this.bufferSize && (read = in.read(this.buffer, count, this.bufferSize - count)) != -1) {\n\t\tcount += read;\n\t}\n\tthis.writePointer = count;\n}"], "code_level": "class_runnable", "_id": "636766801a6d9265ec017482", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "private void addReverse(final InputStream[] files){\n\n\tfor(int i = files.length - 1; i >= 0; i--){\n\t\tadd(files[i]);\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Add the specified files in reverse order.\n */\n", "method_name": "addReverse", "codes": ["private void addReverse(final InputStream[] files){\n\n\tfor(int i = files.length - 1; i >= 0; i--){\n\t\tadd(files[i]);\n\t}\n}"], "code_level": "class_runnable", "_id": "636766801a6d9265ec017477", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "private void addReverse(final File[] files){\n\n\tfor(int i = files.length - 1; i >= 0; i--){\n\t\tadd(files[i]);\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Add the specified files in reverse order.\n */\n", "method_name": "addReverse", "codes": ["private void addReverse(final File[] files){\n\n\tfor(int i = files.length - 1; i >= 0; i--){\n\t\tadd(files[i]);\n\t}\n}"], "code_level": "class_runnable", "_id": "636766831a6d9265ec0174eb", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public long lastWriteTimeStampInMilliseconds(){\n\n\treturn this.lastWriteTimeStampInMilliseconds;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * The last time, in milliseconds, a write operation occurred.\n * @return this\n */\n", "method_name": "lastWriteTimeStampInMilliseconds", "codes": ["public long lastWriteTimeStampInMilliseconds(){\n\n\treturn this.lastWriteTimeStampInMilliseconds;\n}"], "code_level": "class_runnable", "_id": "6367667e1a6d9265ec01743a", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "@Override public Action inspect(AtmosphereResource r){\n\n    if (r.transport() == AtmosphereResource.TRANSPORT.WEBSOCKET) {\n        r.suspend();\n    }\n    return Action.CONTINUE;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Automatically suspend the  {@link AtmosphereResource} based on {@link AtmosphereResource.TRANSPORT} value.\n * @param r a {@link AtmosphereResource}\n * @return {@link Action#CONTINUE}\n */\n", "method_name": "inspect", "codes": ["@Override public Action inspect(AtmosphereResource r){\n\n    if (r.transport() == AtmosphereResource.TRANSPORT.WEBSOCKET) {\n        r.suspend();\n    }\n    return Action.CONTINUE;\n}"], "code_level": "project_runnable", "_id": "636766851a6d9265ec017515", "project_name": "atmosphere-atmosphere-2.7.x"}
{"generate_results": [{"generate_code": "public static String[] trimArrayElements(String[] array){\n\n\tif(ObjectUtils.isEmpty(array)){\n\t\treturn new String[0];\n\t}\n\tString[] result = new String[array.length];\n\tfor(int i=0;i<array.length;i++){\n\t\tString element = array[i];\n\t\tresult[i] = (element != null?element.trim():null);\n\t}\n\treturn result;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Trim the elements of the given String array, calling <code>String.trim()</code> on each of them.\n * @param array the original String array\n * @return the resulting array (of the same size) with trimmed elements\n */\n", "method_name": "trimArrayElements", "codes": ["public static String[] trimArrayElements(String[] array){\n\n\tif(ObjectUtils.isEmpty(array)){\n\t\treturn new String[0];\n\t}\n\tString[] result = new String[array.length];\n\tfor(int i=0;i<array.length;i++){\n\t\tString element = array[i];\n\t\tresult[i] = (element != null?element.trim():null);\n\t}\n\treturn result;\n}"], "code_level": "self_contained", "_id": "6367676d1a6d9265ec018229", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static int nullSafeHashCode(long[] array){\n\n\tif (array == null) {\n\t\treturn 0;\n\t}\n\tint hash = INITIAL_HASH;\n\tint arraySize = array.length;\n\tfor (int i = 0; i < arraySize; i++) {\n\t\thash = MULTIPLIER * hash + hashCode(array[i]);\n\t}\n\treturn hash;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Return a hash code based on the contents of the specified array. If <code>array</code> is <code>null</code>, this method returns 0.\n * @param array the long array to obtain a hashcode\n * @return the long array's hashcode, which could be 0 if the array is null.\n */\n", "method_name": "nullSafeHashCode", "codes": ["public static int nullSafeHashCode(long[] array){\n\n\tif (array == null) {\n\t\treturn 0;\n\t}\n\tint hash = INITIAL_HASH;\n\tint arraySize = array.length;\n\tfor (int i = 0; i < arraySize; i++) {\n\t\thash = MULTIPLIER * hash + hashCode(array[i]);\n\t}\n\treturn hash;\n}"], "code_level": "class_runnable", "_id": "636767691a6d9265ec0181aa", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static boolean startsWithIgnoreCase(String str,String prefix){\n\n\treturn startsWith(str,prefix,true);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns  {@code true} if the given string starts with the specified case-insensitive prefix, {@code false} otherwise.\n * @param str the String to check\n * @param prefix the prefix to look for\n * @return {@code true} if the given string starts with the specified case-insensitive prefix, {@code false} otherwise.\n * @see java.lang.String#startsWith\n */\n", "method_name": "startsWithIgnoreCase", "codes": ["public static boolean startsWithIgnoreCase(String str,String prefix){\n\n\treturn startsWith(str,prefix,true);\n}"], "code_level": "self_contained", "_id": "6367676b1a6d9265ec0181df", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static Object findFirstMatch(Collection source,Collection candidates){\n\n\tif(isEmpty(source)||isEmpty(candidates)){\n\t\treturn null;\n\t}\n\tfor(Iterator it=candidates.iterator();it.hasNext();){\n\t\tObject candidate=it.next();\n\t\tif(source.contains(candidate)){\n\t\t\treturn candidate;\n\t\t}\n\t}\n\treturn null;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Return the first element in '<code>candidates</code>' that is contained in '<code>source</code>'. If no element in '<code>candidates</code>' is present in '<code>source</code>' returns <code>null</code>. Iteration order is {@link Collection} implementation specific.\n * @param source the source Collection\n * @param candidates the candidates to search for\n * @return the first present object, or <code>null</code> if not found\n */\n", "method_name": "findFirstMatch", "codes": ["public static Object findFirstMatch(Collection source,Collection candidates){\n\n\tif(isEmpty(source)||isEmpty(candidates)){\n\t\treturn null;\n\t}\n\tfor(Iterator it=candidates.iterator();it.hasNext();){\n\t\tObject candidate=it.next();\n\t\tif(source.contains(candidate)){\n\t\t\treturn candidate;\n\t\t}\n\t}\n\treturn null;\n}"], "code_level": "class_runnable", "_id": "6367676b1a6d9265ec0181e2", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static String trimTrailingWhitespace(String str){\n\n\tif(!hasLength(str)){\n\t\treturn str;\n\t}\n\tStringBuffer buf = new StringBuffer(str);\n\twhile(buf.length() > 0 && Character.isWhitespace(buf.charAt(buf.length() - 1))){\n\t\tbuf.deleteCharAt(buf.length() - 1);\n\t}\n\treturn buf.toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Trim trailing whitespace from the given String.\n * @param str the String to check\n * @return the trimmed String\n * @see java.lang.Character#isWhitespace\n */\n", "method_name": "trimTrailingWhitespace", "codes": ["public static String trimTrailingWhitespace(String str){\n\n\tif(!hasLength(str)){\n\t\treturn str;\n\t}\n\tStringBuffer buf = new StringBuffer(str);\n\twhile(buf.length() > 0 && Character.isWhitespace(buf.charAt(buf.length() - 1))){\n\t\tbuf.deleteCharAt(buf.length() - 1);\n\t}\n\treturn buf.toString();\n}"], "code_level": "class_runnable", "_id": "6367676b1a6d9265ec0181ee", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static Object quoteIfString(Object obj){\n\n\tif(obj instanceof String)\n\t\treturn quote((String)obj);\n\telse\n\t\treturn obj;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Turn the given Object into a String with single quotes if it is a String; keeping the Object as-is else.\n * @param obj the input Object (e.g. \"myString\")\n * @return the quoted String (e.g. \"'myString'\"),or the input object as-is if not a String\n */\n", "method_name": "quoteIfString", "codes": ["public static Object quoteIfString(Object obj){\n\n\tif(obj instanceof String)\n\t\treturn quote((String)obj);\n\telse\n\t\treturn obj;\n}"], "code_level": "class_runnable", "_id": "6367676a1a6d9265ec0181bf", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static String trimLeadingWhitespace(String str){\n\n\tif(!hasLength(str)){\n\t\treturn str;\n\t}\n\tStringBuffer buf = new StringBuffer(str);\n\twhile(buf.length()>0 && Character.isWhitespace(buf.charAt(0))){\n\t\tbuf.deleteCharAt(0);\n\t}\n\treturn buf.toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Trim leading whitespace from the given String.\n * @param str the String to check\n * @return the trimmed String\n * @see java.lang.Character#isWhitespace\n */\n", "method_name": "trimLeadingWhitespace", "codes": ["public static String trimLeadingWhitespace(String str){\n\n\tif(!hasLength(str)){\n\t\treturn str;\n\t}\n\tStringBuffer buf = new StringBuffer(str);\n\twhile(buf.length()>0 && Character.isWhitespace(buf.charAt(0))){\n\t\tbuf.deleteCharAt(0);\n\t}\n\treturn buf.toString();\n}"], "code_level": "class_runnable", "_id": "6367676a1a6d9265ec0181cd", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static String[] toStringArray(Enumeration<String> enumeration){\n\n\tif(enumeration == null){\n\t\treturn null;\n\t}\n\tList<String> list = Collections.list(enumeration);\n\treturn list.toArray(new String[list.size()]);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Copy the given Enumeration into a String array. The Enumeration must contain String elements only.\n * @param enumeration the Enumeration to copy\n * @return the String array (<code>null</code> if the passed-inEnumeration was <code>null</code>)\n */\n", "method_name": "toStringArray", "codes": ["public static String[] toStringArray(Enumeration<String> enumeration){\n\n\tif(enumeration == null){\n\t\treturn null;\n\t}\n\tList<String> list = Collections.list(enumeration);\n\treturn list.toArray(new String[list.size()]);\n}"], "code_level": "slib_runnable", "_id": "636767691a6d9265ec0181ae", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static String deleteAny(String inString,String charsToDelete){\n\n\tif(!hasLength(inString)||!hasLength(charsToDelete)){\n\t\treturn inString;\n\t}\n\tStringBuffer out=new StringBuffer();\n\tfor(int i=0;i<inString.length();i++){\n\t\tchar c=inString.charAt(i);\n\t\tif(charsToDelete.indexOf(c)==-1){\n\t\t\tout.append(c);\n\t\t}\n\t}\n\treturn out.toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Delete any character in a given String.\n * @param inString the original String\n * @param charsToDelete a set of characters to delete.E.g. \"az\\n\" will delete 'a's, 'z's and new lines.\n * @return the resulting String\n */\n", "method_name": "deleteAny", "codes": ["public static String deleteAny(String inString,String charsToDelete){\n\n\tif(!hasLength(inString)||!hasLength(charsToDelete)){\n\t\treturn inString;\n\t}\n\tStringBuffer out=new StringBuffer();\n\tfor(int i=0;i<inString.length();i++){\n\t\tchar c=inString.charAt(i);\n\t\tif(charsToDelete.indexOf(c)==-1){\n\t\t\tout.append(c);\n\t\t}\n\t}\n\treturn out.toString();\n}"], "code_level": "class_runnable", "_id": "6367676c1a6d9265ec01820b", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static boolean containsInstance(Collection collection,Object element){\n\n\tif(collection!=null){\n\t\tfor(Iterator it=collection.iterator();it.hasNext();){\n\t\t\tObject candidate=it.next();\n\t\t\tif(candidate==element){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Check whether the given Collection contains the given element instance. <p>Enforces the given instance to be present, rather than returning <code>true</code> for an equal element as well.\n * @param collection the Collection to check\n * @param element the element to look for\n * @return <code>true</code> if found, <code>false</code> else\n */\n", "method_name": "containsInstance", "codes": ["public static boolean containsInstance(Collection collection,Object element){\n\n\tif(collection!=null){\n\t\tfor(Iterator it=collection.iterator();it.hasNext();){\n\t\t\tObject candidate=it.next();\n\t\t\tif(candidate==element){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}"], "code_level": "slib_runnable", "_id": "6367676c1a6d9265ec018223", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static String[] concatenateStringArrays(String[] array1,String[] array2){\n\n\tif(ObjectUtils.isEmpty(array1)){\n\t\treturn array2;\n\t}\n\tif(ObjectUtils.isEmpty(array2)){\n\t\treturn array1;\n\t}\n\tString[] newArr=new String[array1.length+array2.length];\n\tSystem.arraycopy(array1,0,newArr,0,array1.length);\n\tSystem.arraycopy(array2,0,newArr,array1.length,array2.length);\n\treturn newArr;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Concatenate the given String arrays into one, with overlapping array elements included twice. <p>The order of elements in the original arrays is preserved.\n * @param array1 the first array (can be <code>null</code>)\n * @param array2 the second array (can be <code>null</code>)\n * @return the new array (<code>null</code> if both given arrays were <code>null</code>)\n */\n", "method_name": "concatenateStringArrays", "codes": ["public static String[] concatenateStringArrays(String[] array1,String[] array2){\n\n\tif(ObjectUtils.isEmpty(array1)){\n\t\treturn array2;\n\t}\n\tif(ObjectUtils.isEmpty(array2)){\n\t\treturn array1;\n\t}\n\tString[] newArr=new String[array1.length+array2.length];\n\tSystem.arraycopy(array1,0,newArr,0,array1.length);\n\tSystem.arraycopy(array2,0,newArr,array1.length,array2.length);\n\treturn newArr;\n}"], "code_level": "slib_runnable", "_id": "6367676c1a6d9265ec018204", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static String[] addStringToArray(String[] array,String str){\n\n\tif(ObjectUtils.isEmpty(array)){\n\t\treturn new String[]{str};\n\t}\n\tString[] newArr=new String[array.length+1];\n\tSystem.arraycopy(array, 0, newArr, 0, array.length);\n\tnewArr[array.length]=str;\n\treturn newArr;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Append the given String to the given String array, returning a new array consisting of the input array contents plus the given String.\n * @param array the array to append to (can be <code>null</code>)\n * @param str the String to append\n * @return the new array (never <code>null</code>)\n */\n", "method_name": "addStringToArray", "codes": ["public static String[] addStringToArray(String[] array,String str){\n\n\tif(ObjectUtils.isEmpty(array)){\n\t\treturn new String[]{str};\n\t}\n\tString[] newArr=new String[array.length+1];\n\tSystem.arraycopy(array, 0, newArr, 0, array.length);\n\tnewArr[array.length]=str;\n\treturn newArr;\n}"], "code_level": "slib_runnable", "_id": "6367676a1a6d9265ec0181d4", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static int countOccurrencesOf(String str,String sub){\n\n\tif(str==null||sub==null||str.length()==0||sub.length()==0){\n\t\treturn 0;\n\t}\n\tint count=0;\n\tint pos=0;\n\tint idx;\n\twhile((idx=str.indexOf(sub,pos))!=-1){\n\t\t++count;\n\t\tpos=idx+sub.length();\n\t}\n\treturn count;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns the number of occurrences the substring  {@code sub} appears in string {@code str}.\n * @param str string to search in. Return 0 if this is null.\n * @param sub string to search for. Return 0 if this is null.\n * @return the number of occurrences the substring {@code sub} appears in string {@code str}.\n */\n", "method_name": "countOccurrencesOf", "codes": ["public static int countOccurrencesOf(String str,String sub){\n\n\tif(str==null||sub==null||str.length()==0||sub.length()==0){\n\t\treturn 0;\n\t}\n\tint count=0;\n\tint pos=0;\n\tint idx;\n\twhile((idx=str.indexOf(sub,pos))!=-1){\n\t\t++count;\n\t\tpos=idx+sub.length();\n\t}\n\treturn count;\n}"], "code_level": "self_contained", "_id": "6367676b1a6d9265ec0181dd", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static String stripFilenameExtension(String path){\n\n\tif(path == null){\n\t\treturn null;\n\t}\n\tint extIndex = path.lastIndexOf(EXTENSION_SEPARATOR);\n\tif(extIndex == -1){\n\t\treturn path;\n\t}\n\tint folderIndex = path.lastIndexOf(FOLDER_SEPARATOR);\n\tif(folderIndex > extIndex){\n\t\treturn path;\n\t}\n\treturn path.substring(0,extIndex);\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Strip the filename extension from the given path, e.g. \"mypath/myfile.txt\" -&gt; \"mypath/myfile\".\n * @param path the file path (may be <code>null</code>)\n * @return the path with stripped filename extension,or <code>null</code> if none\n */\n", "method_name": "stripFilenameExtension", "codes": ["public static String stripFilenameExtension(String path){\n\n\tif(path == null){\n\t\treturn null;\n\t}\n\tint extIndex = path.lastIndexOf(EXTENSION_SEPARATOR);\n\tif(extIndex == -1){\n\t\treturn path;\n\t}\n\tint folderIndex = path.lastIndexOf(FOLDER_SEPARATOR);\n\tif(folderIndex > extIndex){\n\t\treturn path;\n\t}\n\treturn path.substring(0,extIndex);\n}"], "code_level": "class_runnable", "_id": "6367676c1a6d9265ec018220", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static String trimLeadingCharacter(String str,char leadingCharacter){\n\n\tif(!hasLength(str)){\n\t\treturn str;\n\t}\n\tStringBuffer buf=new StringBuffer(str);\n\twhile(buf.length()>0&&buf.charAt(0)==leadingCharacter){\n\t\tbuf.deleteCharAt(0);\n\t}\n\treturn buf.toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Trim all occurrences of the supplied leading character from the given String.\n * @param str the String to check\n * @param leadingCharacter the leading character to be trimmed\n * @return the trimmed String\n */\n", "method_name": "trimLeadingCharacter", "codes": ["public static String trimLeadingCharacter(String str,char leadingCharacter){\n\n\tif(!hasLength(str)){\n\t\treturn str;\n\t}\n\tStringBuffer buf=new StringBuffer(str);\n\twhile(buf.length()>0&&buf.charAt(0)==leadingCharacter){\n\t\tbuf.deleteCharAt(0);\n\t}\n\treturn buf.toString();\n}"], "code_level": "class_runnable", "_id": "636767691a6d9265ec0181a7", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static String[] split(String toSplit,String delimiter){\n\n\tif(!hasLength(toSplit)||!hasLength(delimiter)){\n\t\treturn null;\n\t}\n\tint offset=toSplit.indexOf(delimiter);\n\tif(offset<0){\n\t\treturn null;\n\t}\n\tString beforeDelimiter=toSplit.substring(0,offset);\n\tString afterDelimiter=toSplit.substring(offset+delimiter.length());\n\treturn new String[]{beforeDelimiter,afterDelimiter};\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Split a String at the first occurrence of the delimiter. Does not include the delimiter in the result.\n * @param toSplit the string to split\n * @param delimiter to split the string up with\n * @return a two element array with index 0 being before the delimiter, andindex 1 being after the delimiter (neither element includes the delimiter); or <code>null</code> if the delimiter wasn't found in the given input String\n */\n", "method_name": "split", "codes": ["public static String[] split(String toSplit,String delimiter){\n\n\tif(!hasLength(toSplit)||!hasLength(delimiter)){\n\t\treturn null;\n\t}\n\tint offset=toSplit.indexOf(delimiter);\n\tif(offset<0){\n\t\treturn null;\n\t}\n\tString beforeDelimiter=toSplit.substring(0,offset);\n\tString afterDelimiter=toSplit.substring(offset+delimiter.length());\n\treturn new String[]{beforeDelimiter,afterDelimiter};\n}"], "code_level": "class_runnable", "_id": "636767691a6d9265ec0181a6", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static String applyRelativePath(String path,String relativePath){\n\n\tint separatorIndex=path.lastIndexOf(FOLDER_SEPARATOR);\n\tif(separatorIndex!=-1){\n\t\tString newPath=path.substring(0,separatorIndex);\n\t\tif(!relativePath.startsWith(FOLDER_SEPARATOR)){\n\t\t\tnewPath+=FOLDER_SEPARATOR;\n\t\t}\n\t\treturn newPath+relativePath;\n\t}else{\n\t\treturn relativePath;\n\t}\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Apply the given relative path to the given path, assuming standard Java folder separation (i.e. \"/\" separators).\n * @param path the path to start from (usually a full file path)\n * @param relativePath the relative path to apply(relative to the full file path above)\n * @return the full file path that results from applying the relative path\n */\n", "method_name": "applyRelativePath", "codes": ["public static String applyRelativePath(String path,String relativePath){\n\n\tint separatorIndex=path.lastIndexOf(FOLDER_SEPARATOR);\n\tif(separatorIndex!=-1){\n\t\tString newPath=path.substring(0,separatorIndex);\n\t\tif(!relativePath.startsWith(FOLDER_SEPARATOR)){\n\t\t\tnewPath+=FOLDER_SEPARATOR;\n\t\t}\n\t\treturn newPath+relativePath;\n\t}else{\n\t\treturn relativePath;\n\t}\n}"], "code_level": "class_runnable", "_id": "636767691a6d9265ec0181ac", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "public static boolean substringMatch(CharSequence str,int index,CharSequence substring){\n\n\tfor(int j=0;j<substring.length();j++){\n\t\tint i=index+j;\n\t\tif(i>=str.length()||str.charAt(i)!=substring.charAt(j)){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns  {@code true} if the given string matches the given substring at the given index, {@code false} otherwise.\n * @param str the original string (or StringBuilder)\n * @param index the index in the original string to start matching against\n * @param substring the substring to match at the given index\n * @return {@code true} if the given string matches the given substring at the given index, {@code false} otherwise.\n */\n", "method_name": "substringMatch", "codes": ["public static boolean substringMatch(CharSequence str,int index,CharSequence substring){\n\n\tfor(int j=0;j<substring.length();j++){\n\t\tint i=index+j;\n\t\tif(i>=str.length()||str.charAt(i)!=substring.charAt(j)){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}"], "code_level": "slib_runnable", "_id": "6367676b1a6d9265ec0181e9", "project_name": "jjwt-master"}
{"generate_results": [{"generate_code": "protected static void deleteFile(String fileName){\n\n\tFile file = new File(fileName);\n\tif(file.exists())\n\t\tfile.delete();\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Delete's the specified file if it exists \n */\n", "method_name": "deleteFile", "codes": ["protected static void deleteFile(String fileName){\n\n\tFile file = new File(fileName);\n\tif(file.exists())\n\t\tfile.delete();\n}"], "code_level": "slib_runnable", "_id": "636767821a6d9265ec0183a0", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public String format(LoggingEvent event){\n\n  StringBuffer sbuf = new StringBuffer();\n  sbuf.append(event.timeStamp - LoggingEvent.getStartTime());\n  sbuf.append(\" \");\n  sbuf.append(event.getLevel().toString());\n  sbuf.append(\" \");\n  sbuf.append(event.getLoggerName());\n  sbuf.append(\" - \");\n  sbuf.append(event.getRenderedMessage());\n  sbuf.append(LINE_SEP);\n  return sbuf.toString();\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Produces a formatted string as specified by the conversion pattern.\n */\n", "method_name": "format", "codes": ["public String format(LoggingEvent event){\n\n  StringBuffer sbuf = new StringBuffer();\n  sbuf.append(event.timeStamp - LoggingEvent.getStartTime());\n  sbuf.append(\" \");\n  sbuf.append(event.getLevel().toString());\n  sbuf.append(\" \");\n  sbuf.append(event.getLoggerName());\n  sbuf.append(\" - \");\n  sbuf.append(event.getRenderedMessage());\n  sbuf.append(LINE_SEP);\n  return sbuf.toString();\n}"], "code_level": "project_runnable", "_id": "6367677e1a6d9265ec01830f", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "protected void subAppend(LoggingEvent event){\n\n\nStringBuffer sbuf = new StringBuffer();\n\n// Append date-time if so configured\nif(dateTimeFormat != null){\n    date.setTime(event.timeStamp);\n    StringBuffer sbuf = new StringBuffer(layout.format(event));\n    if(sbuf.length() &gt; MAX_CAPACITY){\n        sbuf.setLength(MAX_CAPACITY);\n        sbuf.setLength(MAX_CAPACITY - 1);\n        sbuf.append(\"...\");\n    }\n    return sbuf.toString();\n}\n\n// Append priority if so configured\nif(this.layout.ignoresThrowable()){\n    String[] s = event.getThrowableStrRep();\n    if(s != null){\n        int len = s.length;\n        for(int i = 0; i &lt; len; i++){\n            sbuf.append(s[i]);\n            sbuf.append(Layout.LINE_SEP);\n        }\n    }\n}\n\n// Append throwable if any\nif(sbuf.length() &gt;", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * This method does actual writing\n */\n", "method_name": "subAppend", "codes": ["protected void subAppend(LoggingEvent event){\n\n\nStringBuffer sbuf = new StringBuffer();\n\n// Append date-time if so configured\nif(dateTimeFormat != null){\n    date.setTime(event.timeStamp);\n    StringBuffer sbuf = new StringBuffer(layout.format(event));\n    if(sbuf.length() &gt; MAX_CAPACITY){\n        sbuf.setLength(MAX_CAPACITY);\n        sbuf.setLength(MAX_CAPACITY - 1);\n        sbuf.append(\"...\");\n    }\n    return sbuf.toString();\n}\n\n// Append priority if so configured\nif(this.layout.ignoresThrowable()){\n    String[] s = event.getThrowableStrRep();\n    if(s != null){\n        int len = s.length;\n        for(int i = 0; i &lt; len; i++){\n            sbuf.append(s[i]);\n            sbuf.append(Layout.LINE_SEP);\n        }\n    }\n}\n\n// Append throwable if any\nif(sbuf.length() &gt;"], "code_level": "project_runnable", "_id": "636767781a6d9265ec01823d", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public static String peek(){\n\n\treturn NDC.get().peek();\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Looks at the last diagnostic context at the top of this NDC without removing it. <p>The returned value is the value that was pushed last. If no context is available, then the empty string \"\" is returned.\n * @return String The innermost diagnostic context.\n */\n", "method_name": "peek", "codes": ["public static String peek(){\n\n\treturn NDC.get().peek();\n}"], "code_level": "class_runnable", "_id": "636767831a6d9265ec0183c9", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public Logger exists(String name){\n\n\treturn (Logger)ht.get(new LoggerKey(name));\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Check if the named logger exists in the hierarchy. If so return its reference, otherwise returns <code>null</code>.\n * @param name The name of the logger to search for.\n */\n", "method_name": "exists", "codes": ["public Logger exists(String name){\n\n\treturn (Logger)ht.get(new LoggerKey(name));\n}"], "code_level": "project_runnable", "_id": "6367677e1a6d9265ec01832e", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public String format(final LoggingEvent event){\n\n\tStringBuffer sbuf = new StringBuffer(BUF_SIZE);\n\tsbuf.append(event.timeStamp - LoggingEvent.getStartTime());\n\tsbuf.append(\" \");\n\tsbuf.append(event.getLevel().toString());\n\tsbuf.append(\" \");\n\tsbuf.append(event.getLoggerName());\n\tsbuf.append(\" - \");\n\tsbuf.append(event.getRenderedMessage());\n\tsbuf.append(Layout.LINE_SEP);\n\treturn sbuf.toString();\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Formats a logging event to a writer.\n * @param event logging event to be formatted.\n */\n", "method_name": "format", "codes": ["public String format(final LoggingEvent event){\n\n\tStringBuffer sbuf = new StringBuffer(BUF_SIZE);\n\tsbuf.append(event.timeStamp - LoggingEvent.getStartTime());\n\tsbuf.append(\" \");\n\tsbuf.append(event.getLevel().toString());\n\tsbuf.append(\" \");\n\tsbuf.append(event.getLoggerName());\n\tsbuf.append(\" - \");\n\tsbuf.append(event.getRenderedMessage());\n\tsbuf.append(Layout.LINE_SEP);\n\treturn sbuf.toString();\n}"], "code_level": "project_runnable", "_id": "6367677b1a6d9265ec0182bd", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "private Class findClass(final String className) throws ClassNotFoundException {\n\n\tif (className.startsWith(\"java.\")) {\n\t\treturn Class.forName(className);\n\t}\n\t\n\tClass clazz = (Class) classCache.get(className);\n\tif (clazz != null) {\n\t\treturn clazz;\n\t}\n\t\n\tclazz = Class.forName(className, true, this);\n\tclassCache.put(className, clazz);\n\treturn clazz;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Find class given class name.\n * @param className class name, may not be null.\n * @return class, will not be null.\n * @throws ClassNotFoundException thrown if class can not be found.\n */\n", "method_name": "findClass", "codes": ["private Class findClass(final String className) throws ClassNotFoundException {\n\n\tif (className.startsWith(\"java.\")) {\n\t\treturn Class.forName(className);\n\t}\n\t\n\tClass clazz = (Class) classCache.get(className);\n\tif (clazz != null) {\n\t\treturn clazz;\n\t}\n\t\n\tclazz = Class.forName(className, true, this);\n\tclassCache.put(className, clazz);\n\treturn clazz;\n}"], "code_level": "slib_runnable", "_id": "636767791a6d9265ec018263", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public void addMessage(final LogRecord lr){\n\n\tSwingUtilities.invokeLater(new Runnable(){\n\t\tpublic void run(){\n\t\t\tlogTableModel.addMessage(lr);\n\t\t}\n\t});\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Add a log record message to be displayed in the LogTable. This method is thread-safe as it posts requests to the SwingThread rather than processing directly.\n */\n", "method_name": "addMessage", "codes": ["public void addMessage(final LogRecord lr){\n\n\tSwingUtilities.invokeLater(new Runnable(){\n\t\tpublic void run(){\n\t\t\tlogTableModel.addMessage(lr);\n\t\t}\n\t});\n}"], "code_level": "project_runnable", "_id": "636767791a6d9265ec018257", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public static void selectRow(int row,JTable table,JScrollPane pane){\n\n\ttable.setRowSelectionInterval(row,row);\n\ttable.scrollRectToVisible(table.getCellRect(row,0,true));\n\tpane.repaint();\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Selects a the specified row in the specified JTable and scrolls the specified JScrollpane to the newly selected row. More importantly, the call to repaint() delayed long enough to have the table properly paint the newly selected row which may be offscre\n * @param table should belong to the specified JScrollPane\n */\n", "method_name": "selectRow", "codes": ["public static void selectRow(int row,JTable table,JScrollPane pane){\n\n\ttable.setRowSelectionInterval(row,row);\n\ttable.scrollRectToVisible(table.getCellRect(row,0,true));\n\tpane.repaint();\n}"], "code_level": "project_runnable", "_id": "636767841a6d9265ec0183ff", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public static void createConfigurationDirectory(){\n\n\ttry{\n\t\tString dir = System.getProperty(\"user.home\") + File.separator + \"lf5\";\n\t\tFile f = new File(dir);\n\t\tif(!f.exists()){\n\t\t\tf.mkdir();\n\t\t}\n\t}catch(Exception e){\n\t\te.printStackTrace();\n\t}\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Creates the directory where the MRU file list will be written. The \"lf5\" directory is created in the Documents and Settings directory on Windows 2000 machines and where ever the user.home variable points on all other platforms.\n */\n", "method_name": "createConfigurationDirectory", "codes": ["public static void createConfigurationDirectory(){\n\n\ttry{\n\t\tString dir = System.getProperty(\"user.home\") + File.separator + \"lf5\";\n\t\tFile f = new File(dir);\n\t\tif(!f.exists()){\n\t\t\tf.mkdir();\n\t\t}\n\t}catch(Exception e){\n\t\te.printStackTrace();\n\t}\n}"], "code_level": "slib_runnable", "_id": "636767871a6d9265ec01846d", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public synchronized void send(final String message){\n\n\tfor(int i = 0; i < clients.size(); i++){\n\t\tfinal ClientThread ct = clients.get(i);\n\t\tct.send(message);\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * sends a message to each of the clients in telnet-friendly output. \n */\n", "method_name": "send", "codes": ["public synchronized void send(final String message){\n\n\tfor(int i = 0; i < clients.size(); i++){\n\t\tfinal ClientThread ct = clients.get(i);\n\t\tct.send(message);\n\t}\n}"], "code_level": "class_runnable", "_id": "6367677f1a6d9265ec018347", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "protected void append(LoggingEvent event){\n\n\tString message = this.layout.format(event);\n\t\n\tfor(int i = 0; i < clients.size(); i++){\n\t\ttry{\n\t\t\tPrintWriter writer = (PrintWriter)clients.get(i);\n\t\t\twriter.println(message);\n\t\t\twriter.flush();\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Handles a log event.  For this appender, that means writing the message to each connected client.  \n */\n", "method_name": "append", "codes": ["protected void append(LoggingEvent event){\n\n\tString message = this.layout.format(event);\n\t\n\tfor(int i = 0; i < clients.size(); i++){\n\t\ttry{\n\t\t\tPrintWriter writer = (PrintWriter)clients.get(i);\n\t\t\twriter.println(message);\n\t\t\twriter.flush();\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec01823e", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public void put(LoggingEvent o){\n\n  buffer[(int) (next++ % buffer.length)]=o;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Place a  {@link LoggingEvent} in the buffer. If the buffer is fullthen the event is <b>silently dropped</b>. It is the caller's responsability to make sure that the buffer has free space.  \n */\n", "method_name": "put", "codes": ["public void put(LoggingEvent o){\n\n  buffer[(int) (next++ % buffer.length)]=o;\n}"], "code_level": "class_runnable", "_id": "6367677f1a6d9265ec01834b", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public static String findAndSubst(String key,Properties props){\n\n\tString value=props.getProperty(key);\n\tif(value==null)\n\t\treturn null;\n\ttry{\n\t\treturn substVars(value,key,null,props);\n\t}catch(IllegalArgumentException e){\n\t\te.printStackTrace();\n\t\treturn value;\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Find the value corresponding to <code>key</code> in <code>props</code>. Then perform variable substitution on the found value.\n */\n", "method_name": "findAndSubst", "codes": ["public static String findAndSubst(String key,Properties props){\n\n\tString value=props.getProperty(key);\n\tif(value==null)\n\t\treturn null;\n\ttry{\n\t\treturn substVars(value,key,null,props);\n\t}catch(IllegalArgumentException e){\n\t\te.printStackTrace();\n\t\treturn value;\n\t}\n}"], "code_level": "project_runnable", "_id": "636767791a6d9265ec01826d", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public boolean isAttached(Appender appender){\n\n\tif(appender == null || aai == null) return false;\n\treturn aai.isAttached(appender);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns <code>true</code> if the specified appender is in the list of attached appenders, <code>false</code> otherwise.\n * @since 1.2 \n */\n", "method_name": "isAttached", "codes": ["public boolean isAttached(Appender appender){\n\n\tif(appender == null || aai == null) return false;\n\treturn aai.isAttached(appender);\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec018238", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public static boolean toBoolean(String value,boolean dEfault){\n\n\tif(value==null)\n\t\treturn dEfault;\n\tvalue=value.trim();\n\tif(value.equalsIgnoreCase(\"true\"))\n\t\treturn true;\n\tif(value.equalsIgnoreCase(\"false\"))\n\t\treturn false;\n\treturn dEfault;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * If <code>value</code> is \"true\", then <code>true</code> is returned. If <code>value</code> is \"false\", then <code>true</code> is returned. Otherwise, <code>default</code> is returned. <p>Case of value is unimportant.  \n */\n", "method_name": "toBoolean", "codes": ["public static boolean toBoolean(String value,boolean dEfault){\n\n\tif(value==null)\n\t\treturn dEfault;\n\tvalue=value.trim();\n\tif(value.equalsIgnoreCase(\"true\"))\n\t\treturn true;\n\tif(value.equalsIgnoreCase(\"false\"))\n\t\treturn false;\n\treturn dEfault;\n}"], "code_level": "self_contained", "_id": "6367677d1a6d9265ec0182fd", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public void add(LoggingEvent event){\n\n  if(size() == bufferSize){\n    removeFirst();\n  }\n  super.add(event);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Add an <code>event</code> as the last event in the buffer.\n */\n", "method_name": "add", "codes": ["public void add(LoggingEvent event){\n\n  if(size() == bufferSize){\n    removeFirst();\n  }\n  super.add(event);\n}"], "code_level": "class_runnable", "_id": "636767841a6d9265ec0183e8", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public void removeAppender(String name){\n\n\tif(name == null || name.equals(\"\"))\n\t\treturn;\n\tsynchronized(appenderList){\n\t\tfor(int i = 0; i < appenderList.size(); i++){\n\t\t\tAppender app = (Appender)appenderList.get(i);\n\t\t\tif(app.getName().equals(name)){\n\t\t\t\tappenderList.remove(i);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Remove the appender with the name passed as parameter form the list of appenders.  \n */\n", "method_name": "removeAppender", "codes": ["public void removeAppender(String name){\n\n\tif(name == null || name.equals(\"\"))\n\t\treturn;\n\tsynchronized(appenderList){\n\t\tfor(int i = 0; i < appenderList.size(); i++){\n\t\t\tAppender app = (Appender)appenderList.get(i);\n\t\t\tif(app.getName().equals(name)){\n\t\t\t\tappenderList.remove(i);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}"], "code_level": "project_runnable", "_id": "636767861a6d9265ec01844c", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public int appendLoopOnAppenders(LoggingEvent event){\n\n  int size, i;\n\n  synchronized(appenderList) {\n    size = appenderList.size();\n    for(i = 0; i < size; i++) {\n      Appender appender = (Appender) appenderList.elementAt(i);\n      appender.doAppend(event);\n    }\n  }\n  return size;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Call the <code>doAppend</code> method on all attached appenders.  \n */\n", "method_name": "appendLoopOnAppenders", "codes": ["public int appendLoopOnAppenders(LoggingEvent event){\n\n  int size, i;\n\n  synchronized(appenderList) {\n    size = appenderList.size();\n    for(i = 0; i < size; i++) {\n      Appender appender = (Appender) appenderList.elementAt(i);\n      appender.doAppend(event);\n    }\n  }\n  return size;\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec018242", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public boolean hasThrown(){\n\n\treturn (getThrown() != null && getThrown().toString().length() > 0);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * @return true if getThrown().toString() is a non-empty string.\n */\n", "method_name": "hasThrown", "codes": ["public boolean hasThrown(){\n\n\treturn (getThrown() != null && getThrown().toString().length() > 0);\n}"], "code_level": "class_runnable", "_id": "636767821a6d9265ec0183ab", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "protected int removeUnusedNodes(){\n\n\tint count = 0;\n\tfor (int i = 0; i < getChildCount(); i++){\n\t\tCategoryNode child = (CategoryNode)getChildAt(i);\n\t\tif (child.getChildCount() == 0){\n\t\t\tremove(child);\n\t\t\tcount++;\n\t\t}\n\t\telse{\n\t\t\tcount += child.removeUnusedNodes();\n\t\t}\n\t}\n\treturn count;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Removes any inactive nodes from the Category tree.\n */\n", "method_name": "removeUnusedNodes", "codes": ["protected int removeUnusedNodes(){\n\n\tint count = 0;\n\tfor (int i = 0; i < getChildCount(); i++){\n\t\tCategoryNode child = (CategoryNode)getChildAt(i);\n\t\tif (child.getChildCount() == 0){\n\t\t\tremove(child);\n\t\t\tcount++;\n\t\t}\n\t\telse{\n\t\t\tcount += child.removeUnusedNodes();\n\t\t}\n\t}\n\treturn count;\n}"], "code_level": "project_runnable", "_id": "6367677e1a6d9265ec018314", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public int compare(Object aObj1,Object aObj2){\n\n\t\t\n\t\tif(aObj1 instanceof String && aObj2 instanceof String){\n\t\t\tString s1 = (String)aObj1;\n\t\t\tString s2 = (String)aObj2;\n\t\t\treturn s1.compareTo(s2);\n\t\t}\n\t\telse if(aObj1 instanceof Integer && aObj2 instanceof Integer){\n\t\t\tInteger i1 = (Integer)aObj1;\n\t\t\tInteger i2 = (Integer)aObj2;\n\t\t\treturn i1.compareTo(i2);\n\t\t}\n\t\telse if(aObj1 instanceof Double && aObj2 instanceof Double){\n\t\t\tDouble d1 = (Double)aObj1;\n\t\t\tDouble d2 = (Double)aObj2;\n\t\t\treturn d1.compareTo(d2);\n\t\t}\n\t\telse if(aObj1 instanceof Float && aObj2 instanceof Float){\n\t\t\tFloat f1 = (Float)aObj1;\n\t\t\tFloat f2 = (Float)a", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * @see Comparator \n */\n", "method_name": "compare", "codes": ["public int compare(Object aObj1,Object aObj2){\n\n\t\t\n\t\tif(aObj1 instanceof String && aObj2 instanceof String){\n\t\t\tString s1 = (String)aObj1;\n\t\t\tString s2 = (String)aObj2;\n\t\t\treturn s1.compareTo(s2);\n\t\t}\n\t\telse if(aObj1 instanceof Integer && aObj2 instanceof Integer){\n\t\t\tInteger i1 = (Integer)aObj1;\n\t\t\tInteger i2 = (Integer)aObj2;\n\t\t\treturn i1.compareTo(i2);\n\t\t}\n\t\telse if(aObj1 instanceof Double && aObj2 instanceof Double){\n\t\t\tDouble d1 = (Double)aObj1;\n\t\t\tDouble d2 = (Double)aObj2;\n\t\t\treturn d1.compareTo(d2);\n\t\t}\n\t\telse if(aObj1 instanceof Float && aObj2 instanceof Float){\n\t\t\tFloat f1 = (Float)aObj1;\n\t\t\tFloat f2 = (Float)a"], "code_level": "project_runnable", "_id": "636767841a6d9265ec0183f2", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public int decide(LoggingEvent event){\n\n\tString msg = event.getRenderedMessage();\n\tif(msg == null || stringToMatch == null)\n\t    return Filter.NEUTRAL;\n\tif(msg.indexOf(stringToMatch) == -1)\n\t    return Filter.NEUTRAL;\n\telse\n\t    return onMatch;\n    }", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns  {@link Filter#NEUTRAL} is there is no string match.\n */\n", "method_name": "decide", "codes": ["public int decide(LoggingEvent event){\n\n\tString msg = event.getRenderedMessage();\n\tif(msg == null || stringToMatch == null)\n\t    return Filter.NEUTRAL;\n\tif(msg.indexOf(stringToMatch) == -1)\n\t    return Filter.NEUTRAL;\n\telse\n\t    return onMatch;\n    }"], "code_level": "project_runnable", "_id": "636767781a6d9265ec018250", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public void abbreviate(final int nameStart,final StringBuffer buf){\n\n\tif(nameStart>=buf.length())\n\t\treturn;\n\tint i=buf.length()-1;\n\twhile(i>=nameStart){\n\t\tif(buf.charAt(i)=='.')\n\t\t\tbreak;\n\t\ti--;\n\t}\n\tif(i>=nameStart){\n\t\tbuf.setLength(i);\n\t\tbuf.append('*');\n\t}\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Abbreviate name.\n * @param buf buffer to append abbreviation.\n * @param nameStart start of name to abbreviate.\n */\n", "method_name": "abbreviate", "codes": ["public void abbreviate(final int nameStart,final StringBuffer buf){\n\n\tif(nameStart>=buf.length())\n\t\treturn;\n\tint i=buf.length()-1;\n\twhile(i>=nameStart){\n\t\tif(buf.charAt(i)=='.')\n\t\t\tbreak;\n\t\ti--;\n\t}\n\tif(i>=nameStart){\n\t\tbuf.setLength(i);\n\t\tbuf.append('*');\n\t}\n}"], "code_level": "class_runnable", "_id": "636767861a6d9265ec018440", "project_name": "logging-log4j1-main"}
{"generate_results": [{"generate_code": "public String id(String entityId){\n\n\tString id = null;\n\tif(entityId.contains(\"-\")){\n\t\tid = entityId.substring(0, entityId.indexOf(\"-\"));\n\t}else{\n\t\tid = entityId;\n\t}\n\treturn id;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * @return the row id\n */\n", "method_name": "id", "codes": ["public String id(String entityId){\n\n\tString id = null;\n\tif(entityId.contains(\"-\")){\n\t\tid = entityId.substring(0, entityId.indexOf(\"-\"));\n\t}else{\n\t\tid = entityId;\n\t}\n\treturn id;\n}"], "code_level": "project_runnable", "_id": "636767df1a6d9265ec01873c", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "@Override public void accept(final METRICS data){\n\n\t\tif(data == null) return;\n\t\tif(data.getMetrics() == null) return;\n\t\tif(data.getMetrics().isEmpty()) return;\n\t\tif(data.getMetrics().get(0) == null) return;\n\t\tif(data.getMetrics().get(0).getMetric() == null) return;\n\t\tif(data.getMetrics().get(0).getMetric().isEmpty()) return;\n\t\tif(data.getMetrics().get(0).getMetric().get(0) == null) return;\n\t\tif(data.getMetrics().get(0).getMetric().get(0).getMetricName() == null) return;\n\t\tif(data.getMetrics().get(0).getMetric().get(0).getMetricName().isEmpty()) return;\n\t\tif(data.getMetrics().get(0).getMetric().get(0).getMetricName().equals(\"\")) return;\n\t\tif(data.getMetrics().get(0).getMet", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Accept the data into the cache and merge with the existing value. This method is not thread safe, should avoid concurrency calling.\n * @param data to be added potentially.\n */\n", "method_name": "accept", "codes": ["@Override public void accept(final METRICS data){\n\n\t\tif(data == null) return;\n\t\tif(data.getMetrics() == null) return;\n\t\tif(data.getMetrics().isEmpty()) return;\n\t\tif(data.getMetrics().get(0) == null) return;\n\t\tif(data.getMetrics().get(0).getMetric() == null) return;\n\t\tif(data.getMetrics().get(0).getMetric().isEmpty()) return;\n\t\tif(data.getMetrics().get(0).getMetric().get(0) == null) return;\n\t\tif(data.getMetrics().get(0).getMetric().get(0).getMetricName() == null) return;\n\t\tif(data.getMetrics().get(0).getMetric().get(0).getMetricName().isEmpty()) return;\n\t\tif(data.getMetrics().get(0).getMetric().get(0).getMetricName().equals(\"\")) return;\n\t\tif(data.getMetrics().get(0).getMet"], "code_level": "self_contained", "_id": "636767e11a6d9265ec018781", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "protected List<TimeRange> buildTimeRanges(long start,long end){\n\n\tList<TimeRange> timeRanges = new ArrayList<TimeRange>();\n\tlong startTime = start;\n\tlong endTime = end;\n\twhile(startTime < endTime){\n\t\tif(endTime - startTime > FETCH_DATA_DURATION){\n\t\t\ttimeRanges.add(new TimeRange(startTime, startTime + FETCH_DATA_DURATION));\n\t\t\tstartTime += FETCH_DATA_DURATION;\n\t\t}else{\n\t\t\ttimeRanges.add(new TimeRange(startTime, endTime));\n\t\t\tstartTime = endTime;\n\t\t}\n\t}\n\treturn timeRanges;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Split time ranges to insure the start time and end time is small then  {@link #FETCH_DATA_DURATION}\n */\n", "method_name": "buildTimeRanges", "codes": ["protected List<TimeRange> buildTimeRanges(long start,long end){\n\n\tList<TimeRange> timeRanges = new ArrayList<TimeRange>();\n\tlong startTime = start;\n\tlong endTime = end;\n\twhile(startTime < endTime){\n\t\tif(endTime - startTime > FETCH_DATA_DURATION){\n\t\t\ttimeRanges.add(new TimeRange(startTime, startTime + FETCH_DATA_DURATION));\n\t\t\tstartTime += FETCH_DATA_DURATION;\n\t\t}else{\n\t\t\ttimeRanges.add(new TimeRange(startTime, endTime));\n\t\t\tstartTime = endTime;\n\t\t}\n\t}\n\treturn timeRanges;\n}"], "code_level": "self_contained", "_id": "636767df1a6d9265ec018744", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "public void valueAccumulation(String key,Long value){\n\n\tif(this.containsKey(key)){\n\t\tLong oldValue = this.get(key);\n\t\tthis.put(key, oldValue+value);\n\t}else{\n\t\tthis.put(key, value);\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Accumulate the value with existing value in the same given key.\n */\n", "method_name": "valueAccumulation", "codes": ["public void valueAccumulation(String key,Long value){\n\n\tif(this.containsKey(key)){\n\t\tLong oldValue = this.get(key);\n\t\tthis.put(key, oldValue+value);\n\t}else{\n\t\tthis.put(key, value);\n\t}\n}"], "code_level": "class_runnable", "_id": "636767de1a6d9265ec01871c", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "public boolean isExpired(long timestamp,long expiredThreshold){\n\n\treturn (timestamp-lastUpdateTime)>=expiredThreshold;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * @param timestamp        of current time\n * @param expiredThreshold represents the duration between last update time and the time point removing from cache.\n * @return true means this metrics should be removed from cache.\n */\n", "method_name": "isExpired", "codes": ["public boolean isExpired(long timestamp,long expiredThreshold){\n\n\treturn (timestamp-lastUpdateTime)>=expiredThreshold;\n}"], "code_level": "class_runnable", "_id": "636767dd1a6d9265ec0186de", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "private Map<String,Object> buildContent(JsonObject jsonObject){\n\n\tMap<String,Object> content = new HashMap<String,Object>();\n\tString ats = jsonObject.get(\"ats\").getAsString();\n\tif(ats!=null&&!ats.equals(\"\")){\n\t\tString[] atsArray = ats.split(\",\");\n\t\tcontent.put(\"ats\", atsArray);\n\t}\n\tcontent.put(\"content\", jsonObject.get(\"content\").getAsString());\n\treturn content;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * build content,if it has ats someone set the ats\n */\n", "method_name": "buildContent", "codes": ["private Map<String,Object> buildContent(JsonObject jsonObject){\n\n\tMap<String,Object> content = new HashMap<String,Object>();\n\tString ats = jsonObject.get(\"ats\").getAsString();\n\tif(ats!=null&&!ats.equals(\"\")){\n\t\tString[] atsArray = ats.split(\",\");\n\t\tcontent.put(\"ats\", atsArray);\n\t}\n\tcontent.put(\"content\", jsonObject.get(\"content\").getAsString());\n\treturn content;\n}"], "code_level": "project_runnable", "_id": "636767e01a6d9265ec018755", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "private void check(String modelName) throws IllegalStateException {\n\n\tint[] shardingKeyIndices = getShardingKeyIndices(modelName);\n\tif (shardingKeyIndices == null) {\n\t\treturn;\n\t}\n\tfor (int i = 0; i < shardingKeyIndices.length; i++) {\n\t\tif (shardingKeyIndices[i] != i) {\n\t\t\tthrow new IllegalStateException(\"sharding key indices are not continuous\");\n\t\t}\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * @param modelName model name of the entity\n * @throws IllegalStateException if sharding key indices are not continuous\n */\n", "method_name": "check", "codes": ["private void check(String modelName) throws IllegalStateException {\n\n\tint[] shardingKeyIndices = getShardingKeyIndices(modelName);\n\tif (shardingKeyIndices == null) {\n\t\treturn;\n\t}\n\tfor (int i = 0; i < shardingKeyIndices.length; i++) {\n\t\tif (shardingKeyIndices[i] != i) {\n\t\t\tthrow new IllegalStateException(\"sharding key indices are not continuous\");\n\t\t}\n\t}\n}"], "code_level": "self_contained", "_id": "636767de1a6d9265ec01871e", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "public void overrideName(String oldName,String newName){\n\n\tthis.name=newName;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Keep the same name replacement as  {@link ColumnName#overrideName(String,String)}\n * @param oldName to be replaced.\n * @param newName to use in the storage level.\n */\n", "method_name": "overrideName", "codes": ["public void overrideName(String oldName,String newName){\n\n\tthis.name=newName;\n}"], "code_level": "self_contained", "_id": "636767dd1a6d9265ec0186f3", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "public boolean isCompatible(DataTable dataset){\n\n\t\n\tif(dataset.getNumBuckets() != this.getNumBuckets()){\n\t\treturn false;\n\t}\n\t\n\tfor(int i = 0; i < this.getNumBuckets(); i++){\n\t\tif(!this.getBucket(i).isCompatible(dataset.getBucket(i))){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * @return true if the bucket is same.\n */\n", "method_name": "isCompatible", "codes": ["public boolean isCompatible(DataTable dataset){\n\n\t\n\tif(dataset.getNumBuckets() != this.getNumBuckets()){\n\t\treturn false;\n\t}\n\t\n\tfor(int i = 0; i < this.getNumBuckets(); i++){\n\t\tif(!this.getBucket(i).isCompatible(dataset.getBucket(i))){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}"], "code_level": "plib_runnable", "_id": "636767e11a6d9265ec018795", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "public Mappings diffStructure(String tableName,Mappings mappings){\n\n\tMappings diff = new Mappings();\n\tMap<String,Object> tableMappings = mappings.get(tableName);\n\tMap<String,Object> tableMappingsDiff = new HashMap<String,Object>();\n\tMap<String,Object> properties = (Map<String,Object>)tableMappings.get(\"properties\");\n\tMap<String,Object> propertiesDiff = new HashMap<String,Object>();\n\tfor(String fieldName:properties.keySet()){\n\t\tif(!this.properties.containsKey(fieldName)){\n\t\t\tpropertiesDiff.put(fieldName, properties.get(fieldName));\n\t\t}\n\t}\n\ttableMappingsDiff.put(\"properties\", propertiesDiff);\n\tdiff.put(tableName, tableMappingsDiff);\n\treturn diff;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns mappings with fields that not exist in the input mappings. The input mappings should be history mapping from current index. Do not return _source config to avoid current index update conflict.\n */\n", "method_name": "diffStructure", "codes": ["public Mappings diffStructure(String tableName,Mappings mappings){\n\n\tMappings diff = new Mappings();\n\tMap<String,Object> tableMappings = mappings.get(tableName);\n\tMap<String,Object> tableMappingsDiff = new HashMap<String,Object>();\n\tMap<String,Object> properties = (Map<String,Object>)tableMappings.get(\"properties\");\n\tMap<String,Object> propertiesDiff = new HashMap<String,Object>();\n\tfor(String fieldName:properties.keySet()){\n\t\tif(!this.properties.containsKey(fieldName)){\n\t\t\tpropertiesDiff.put(fieldName, properties.get(fieldName));\n\t\t}\n\t}\n\ttableMappingsDiff.put(\"properties\", propertiesDiff);\n\tdiff.put(tableName, tableMappingsDiff);\n\treturn diff;\n}"], "code_level": "plib_runnable", "_id": "636767de1a6d9265ec018706", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "static long compressTimeBucket(long timeBucket,int dayStep){\n\n\tint day = (int)(timeBucket % 100);\n\tint month = (int)((timeBucket % 10000) / 100);\n\tint year = (int)(timeBucket / 10000);\n\t\n\tif(dayStep == 1){\n\t\treturn timeBucket;\n\t}\n\t\n\tif(dayStep == 11){\n\t\tif(day % 11 == 0){\n\t\t\treturn timeBucket;\n\t\t}else{\n\t\t\tday = day - day % 11;\n\t\t\treturn year * 10000 + month * 100 + day;\n\t\t}\n\t}\n\t\n\tif(dayStep == 21){\n\t\tif(day % 21 == 0){\n\t\t\treturn timeBucket;\n\t\t}else{\n\t\t\tday = day - day % 21;\n\t\t\treturn year * 10000 + month * 100 + day;\n\t\t}\n\t}\n\t\n\tif(dayStep == 31){\n\t\tif(day % 31 == 0){\n\t\t\treturn timeBucket;\n\t\t}else{\n\t\t\tday = day - day", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Follow the dayStep to re-format the time bucket literal long value. Such as, in dayStep == 11, 20000105 re-formatted time bucket is 20000101, 20000115 re-formatted time bucket is 20000112, 20000123 re-formatted time bucket is 20000123\n */\n", "method_name": "compressTimeBucket", "codes": ["static long compressTimeBucket(long timeBucket,int dayStep){\n\n\tint day = (int)(timeBucket % 100);\n\tint month = (int)((timeBucket % 10000) / 100);\n\tint year = (int)(timeBucket / 10000);\n\t\n\tif(dayStep == 1){\n\t\treturn timeBucket;\n\t}\n\t\n\tif(dayStep == 11){\n\t\tif(day % 11 == 0){\n\t\t\treturn timeBucket;\n\t\t}else{\n\t\t\tday = day - day % 11;\n\t\t\treturn year * 10000 + month * 100 + day;\n\t\t}\n\t}\n\t\n\tif(dayStep == 21){\n\t\tif(day % 21 == 0){\n\t\t\treturn timeBucket;\n\t\t}else{\n\t\t\tday = day - day % 21;\n\t\t\treturn year * 10000 + month * 100 + day;\n\t\t}\n\t}\n\t\n\tif(dayStep == 31){\n\t\tif(day % 31 == 0){\n\t\t\treturn timeBucket;\n\t\t}else{\n\t\t\tday = day - day"], "code_level": "project_runnable", "_id": "636767dc1a6d9265ec0186be", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "private boolean containsAllFields(Fields fields){\n\n\tif(fields == null)\n\t\treturn false;\n\t\n\tfor(int i=0; i<fields.size(); i++){\n\t\tif(!containsField(fields.getField(i)))\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns ture when the input fields have already been stored in the properties.\n */\n", "method_name": "containsAllFields", "codes": ["private boolean containsAllFields(Fields fields){\n\n\tif(fields == null)\n\t\treturn false;\n\t\n\tfor(int i=0; i<fields.size(); i++){\n\t\tif(!containsField(fields.getField(i)))\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}"], "code_level": "slib_runnable", "_id": "636767dc1a6d9265ec0186c6", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "public void addNewTarget(Channels channels,IConsumer consumer){\n\n\tif(channels==null)\n\t\treturn;\n\tif(consumer==null)\n\t\treturn;\n\t\n\tif(!targetChannels.containsKey(channels)){\n\t\ttargetChannels.put(channels, new ArrayList<IConsumer>());\n\t}\n\t\n\tList<IConsumer> consumers=targetChannels.get(channels);\n\tif(!consumers.contains(consumer)){\n\t\tconsumers.add(consumer);\n\t}\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Add a new target channels.\n */\n", "method_name": "addNewTarget", "codes": ["public void addNewTarget(Channels channels,IConsumer consumer){\n\n\tif(channels==null)\n\t\treturn;\n\tif(consumer==null)\n\t\treturn;\n\t\n\tif(!targetChannels.containsKey(channels)){\n\t\ttargetChannels.put(channels, new ArrayList<IConsumer>());\n\t}\n\t\n\tList<IConsumer> consumers=targetChannels.get(channels);\n\tif(!consumers.contains(consumer)){\n\t\tconsumers.add(consumer);\n\t}\n}"], "code_level": "plib_runnable", "_id": "636767dd1a6d9265ec0186e5", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "public void init(){\n\n\t\n\t//check dist path\n\tFile dist = new File(distPath);\n\tif(!dist.exists()){\n\t\tdist.mkdirs();\n\t}\n\t\n\t//check dist path\n\tFile dist_js = new File(distPath+\"/js\");\n\tif(!dist_js.exists()){\n\t\tdist_js.mkdirs();\n\t}\n\t\n\t//check dist path\n\tFile dist_css = new File(distPath+\"/css\");\n\tif(!dist_css.exists()){\n\t\tdist_css.mkdirs();\n\t}\n\t\n\t//check dist path\n\tFile dist_img = new File(distPath+\"/img\");\n\tif(!dist_img.exists()){\n\t\tdist_img.mkdirs();\n\t}\n\t\n\t//check dist path\n\tFile dist_font = new File(distPath+\"/font\");\n\tif(!dist_font.exists()){\n\t\tdist_font.mkdirs();\n\t}\n\t\n\t//check", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * initialize config, such as check dist path\n */\n", "method_name": "init", "codes": ["public void init(){\n\n\t\n\t//check dist path\n\tFile dist = new File(distPath);\n\tif(!dist.exists()){\n\t\tdist.mkdirs();\n\t}\n\t\n\t//check dist path\n\tFile dist_js = new File(distPath+\"/js\");\n\tif(!dist_js.exists()){\n\t\tdist_js.mkdirs();\n\t}\n\t\n\t//check dist path\n\tFile dist_css = new File(distPath+\"/css\");\n\tif(!dist_css.exists()){\n\t\tdist_css.mkdirs();\n\t}\n\t\n\t//check dist path\n\tFile dist_img = new File(distPath+\"/img\");\n\tif(!dist_img.exists()){\n\t\tdist_img.mkdirs();\n\t}\n\t\n\t//check dist path\n\tFile dist_font = new File(distPath+\"/font\");\n\tif(!dist_font.exists()){\n\t\tdist_font.mkdirs();\n\t}\n\t\n\t//check"], "code_level": "slib_runnable", "_id": "636767dc1a6d9265ec0186cb", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "public List<SequenceRange> buildSequenceRanges(){\n\n\t\n\tList<SequenceRange> ranges = new ArrayList<SequenceRange>();\n\t\n\tfor(int i=0; i<this.getSegments().size(); i++){\n\t\t\n\t\tSegment segment = this.getSegments().get(i);\n\t\t\n\t\tSequenceRange range = new SequenceRange();\n\t\t\n\t\trange.setStart(segment.getStart());\n\t\trange.setEnd(segment.getEnd());\n\t\t\n\t\tranges.add(range);\n\t}\n\t\n\treturn ranges;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * build current profiles segment snapshot search sequence ranges\n */\n", "method_name": "buildSequenceRanges", "codes": ["public List<SequenceRange> buildSequenceRanges(){\n\n\t\n\tList<SequenceRange> ranges = new ArrayList<SequenceRange>();\n\t\n\tfor(int i=0; i<this.getSegments().size(); i++){\n\t\t\n\t\tSegment segment = this.getSegments().get(i);\n\t\t\n\t\tSequenceRange range = new SequenceRange();\n\t\t\n\t\trange.setStart(segment.getStart());\n\t\trange.setEnd(segment.getEnd());\n\t\t\n\t\tranges.add(range);\n\t}\n\t\n\treturn ranges;\n}"], "code_level": "class_runnable", "_id": "636767de1a6d9265ec018726", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "public static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {\n\n\t\tList<ThreadSnapshot> threadSnapshots = new ArrayList<ThreadSnapshot>();\n\t\tif(file.exists()){\n\t\t\tBufferedReader reader = new BufferedReader(new FileReader(file));\n\t\t\tString line = null;\n\t\t\twhile((line = reader.readLine())!=null){\n\t\t\t\tString[] strs = line.split(\"\\\\s+\");\n\t\t\t\tif(strs.length>=3){\n\t\t\t\t\tlong time = Long.parseLong(strs[0]);\n\t\t\t\t\tString threadName = strs[1];\n\t\t\t\t\tString threadState = strs[2];\n\t\t\t\t\tThreadSnapshot threadSnapshot = new ThreadSnapshot(time, threadName, threadState);\n\t\t\t\t\tif(isInTimeRange(time,timeRanges)){\n\t\t\t\t\t\tthreadSnapshots.add(threadSnapshot);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treader.close();\n\t\t}\n", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * load thread snapshots in appointing time range\n */\n", "method_name": "parseFromFileWithTimeRange", "codes": ["public static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {\n\n\t\tList<ThreadSnapshot> threadSnapshots = new ArrayList<ThreadSnapshot>();\n\t\tif(file.exists()){\n\t\t\tBufferedReader reader = new BufferedReader(new FileReader(file));\n\t\t\tString line = null;\n\t\t\twhile((line = reader.readLine())!=null){\n\t\t\t\tString[] strs = line.split(\"\\\\s+\");\n\t\t\t\tif(strs.length>=3){\n\t\t\t\t\tlong time = Long.parseLong(strs[0]);\n\t\t\t\t\tString threadName = strs[1];\n\t\t\t\t\tString threadState = strs[2];\n\t\t\t\t\tThreadSnapshot threadSnapshot = new ThreadSnapshot(time, threadName, threadState);\n\t\t\t\t\tif(isInTimeRange(time,timeRanges)){\n\t\t\t\t\t\tthreadSnapshots.add(threadSnapshot);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treader.close();\n\t\t}\n"], "code_level": "project_runnable", "_id": "636767e11a6d9265ec018790", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "private JsonObject convertProperties(List<KeyStringValuePair> properties){\n\n\tJsonObject json = new JsonObject();\n\tfor(KeyStringValuePair property : properties){\n\t\tjson.addProperty(property.getKey(), property.getValue());\n\t}\n\treturn json;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Convert process properties to source data\n */\n", "method_name": "convertProperties", "codes": ["private JsonObject convertProperties(List<KeyStringValuePair> properties){\n\n\tJsonObject json = new JsonObject();\n\tfor(KeyStringValuePair property : properties){\n\t\tjson.addProperty(property.getKey(), property.getValue());\n\t}\n\treturn json;\n}"], "code_level": "project_runnable", "_id": "636767e01a6d9265ec018764", "project_name": "skywalking-master"}
{"generate_results": [{"generate_code": "private int pop(){\n\n\treturn outputStack[--outputSP];\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Pops an abstract type from the output frame stack and returns its value.\n * @return the abstract type that has been popped from the output frame stack.\n */\n", "method_name": "pop", "codes": ["private int pop(){\n\n\treturn outputStack[--outputSP];\n}"], "code_level": "self_contained", "_id": "636766a91a6d9265ec0175c2", "project_name": "fastjson2-main"}
{"generate_results": [{"generate_code": "int visitFrameStart(final int offset,final int numLocal,final int numStack){\n\n\tif(currentFrame==null){\n\t\tcurrentFrame=new Frame();\n\t\tcurrentFrame.owner=this;\n\t\tcurrentFrame.offset=offset;\n\t\tcurrentFrame.inputLocals=new int[numLocal];\n\t\tcurrentFrame.inputStack=new int[numStack];\n\t\tif(previousFrame!=null){\n\t\t\tif(stackMap==null){\n\t\t\t\tstackMap=new ByteVector();\n\t\t\t}\n\t\t\tcurrentFrame.write(stackMap,previousFrame,offset);\n\t\t}\n\t}\n\treturn 0;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Starts the visit of a new stack map frame, stored in  {@link #currentFrame}.\n * @param offset   the bytecode offset of the instruction to which the frame corresponds.\n * @param numLocal the number of local variables in the frame.\n * @param numStack the number of stack elements in the frame.\n * @return the index of the next element to be written in this frame.\n */\n", "method_name": "visitFrameStart", "codes": ["int visitFrameStart(final int offset,final int numLocal,final int numStack){\n\n\tif(currentFrame==null){\n\t\tcurrentFrame=new Frame();\n\t\tcurrentFrame.owner=this;\n\t\tcurrentFrame.offset=offset;\n\t\tcurrentFrame.inputLocals=new int[numLocal];\n\t\tcurrentFrame.inputStack=new int[numStack];\n\t\tif(previousFrame!=null){\n\t\t\tif(stackMap==null){\n\t\t\t\tstackMap=new ByteVector();\n\t\t\t}\n\t\t\tcurrentFrame.write(stackMap,previousFrame,offset);\n\t\t}\n\t}\n\treturn 0;\n}"], "code_level": "self_contained", "_id": "636766aa1a6d9265ec0175ce", "project_name": "fastjson2-main"}
{"generate_results": [{"generate_code": "private void enlarge(final int size){\n\n  byte[] newData = new byte[Math.max(this.data.length << 1, this.length + size)];\n  System.arraycopy(this.data, 0, newData, 0, this.length);\n  this.data = newData;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Enlarges this byte vector so that it can receive 'size' more bytes.\n * @param size number of additional bytes that this byte vector should be able to receive.\n */\n", "method_name": "enlarge", "codes": ["private void enlarge(final int size){\n\n  byte[] newData = new byte[Math.max(this.data.length << 1, this.length + size)];\n  System.arraycopy(this.data, 0, newData, 0, this.length);\n  this.data = newData;\n}"], "code_level": "self_contained", "_id": "636766a91a6d9265ec0175c1", "project_name": "fastjson2-main"}
{"generate_results": [{"generate_code": "public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n\n  int length;\n  if(byteArrayValue==null){\n    length=byteLength;\n    if(length>0){\n      final int newCount=count+length;\n      if(newCount>data.length){\n        enlarge(newCount);\n      }\n      while(count<newCount){\n        data[count++]=(byte)0;\n      }\n    }\n  }else{\n    length=byteLength+byteOffset;\n    if(length>byteArrayValue.length){\n      throw new IndexOutOfBoundsException(\"length > byteArrayValue.length\");\n    }\n    if(byteLength>0){\n      final int newCount=count+byteLength;\n      if(newCount>data.length){\n        enlarge(newCount);\n      }\n      System.arraycopy(byteArrayValue,byteOffset,data,count,byteLength);\n      count=newCount;\n    }\n  }\n  return this;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Puts an array of bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param byteArrayValue an array of bytes. May be {@literal null} to put {@code byteLength} nullbytes into this byte vector.\n * @param byteOffset     index of the first byte of byteArrayValue that must be copied.\n * @param byteLength     number of bytes of byteArrayValue that must be copied.\n * @return this byte vector.\n */\n", "method_name": "putByteArray", "codes": ["public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n\n  int length;\n  if(byteArrayValue==null){\n    length=byteLength;\n    if(length>0){\n      final int newCount=count+length;\n      if(newCount>data.length){\n        enlarge(newCount);\n      }\n      while(count<newCount){\n        data[count++]=(byte)0;\n      }\n    }\n  }else{\n    length=byteLength+byteOffset;\n    if(length>byteArrayValue.length){\n      throw new IndexOutOfBoundsException(\"length > byteArrayValue.length\");\n    }\n    if(byteLength>0){\n      final int newCount=count+byteLength;\n      if(newCount>data.length){\n        enlarge(newCount);\n      }\n      System.arraycopy(byteArrayValue,byteOffset,data,count,byteLength);\n      count=newCount;\n    }\n  }\n  return this;\n}"], "code_level": "class_runnable", "_id": "636766a91a6d9265ec0175ae", "project_name": "fastjson2-main"}
{"generate_results": [{"generate_code": "private void pop(final int elements){\n\n\tthis.outputStackTop -= elements;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Pops the given number of abstract types from the output frame stack.\n * @param elements the number of abstract types that must be popped.\n */\n", "method_name": "pop", "codes": ["private void pop(final int elements){\n\n\tthis.outputStackTop -= elements;\n}"], "code_level": "self_contained", "_id": "636766a81a6d9265ec017586", "project_name": "fastjson2-main"}
{"generate_results": [{"generate_code": "public ByteVector putInt(final int intValue){\n\n  int n=4;\n  if(length-index<n){\n    enlarge(n);\n  }\n  byte[] b=this.data;\n  b[index++]=(byte)(intValue>>>24);\n  b[index++]=(byte)(intValue>>>16);\n  b[index++]=(byte)(intValue>>>8);\n  b[index++]=(byte)intValue;\n  return this;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Puts an int into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param intValue an int.\n * @return this byte vector.\n */\n", "method_name": "putInt", "codes": ["public ByteVector putInt(final int intValue){\n\n  int n=4;\n  if(length-index<n){\n    enlarge(n);\n  }\n  byte[] b=this.data;\n  b[index++]=(byte)(intValue>>>24);\n  b[index++]=(byte)(intValue>>>16);\n  b[index++]=(byte)(intValue>>>8);\n  b[index++]=(byte)intValue;\n  return this;\n}"], "code_level": "class_runnable", "_id": "636766a81a6d9265ec017596", "project_name": "fastjson2-main"}
{"generate_results": [{"generate_code": "private void pop(final String descriptor){\n\n\tchar c;\n\tint index = 1;\n\tint arrayDim = 0;\n\twhile ((c = descriptor.charAt(index++)) == '['){\n\t\tarrayDim++;\n\t}\n\tif (c == 'L'){\n\t\twhile ((c = descriptor.charAt(index++)) != ';'){\n\t\t\tif (c == '['){\n\t\t\t\tarrayDim++;\n\t\t\t}\n\t\t}\n\t}\n\tpop(c, arrayDim);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Pops as many abstract types from the output frame stack as described by the given descriptor.\n * @param descriptor a type or method descriptor (in which case its argument types are popped).\n */\n", "method_name": "pop", "codes": ["private void pop(final String descriptor){\n\n\tchar c;\n\tint index = 1;\n\tint arrayDim = 0;\n\twhile ((c = descriptor.charAt(index++)) == '['){\n\t\tarrayDim++;\n\t}\n\tif (c == 'L'){\n\t\twhile ((c = descriptor.charAt(index++)) != ';'){\n\t\t\tif (c == '['){\n\t\t\t\tarrayDim++;\n\t\t\t}\n\t\t}\n\t}\n\tpop(c, arrayDim);\n}"], "code_level": "class_runnable", "_id": "636766a91a6d9265ec0175c4", "project_name": "fastjson2-main"}
{"generate_results": [{"generate_code": "final ByteVector put11(final int byteValue1,final int byteValue2){\n\n\tint newCount = count+2;\n\tif(newCount>data.length){\n\t\tenlarge(2);\n\t}\n\tdata[count++] = (byte)byteValue1;\n\tdata[count++] = (byte)byteValue2;\n\treturn this;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Puts two bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param byteValue1 a byte.\n * @param byteValue2 another byte.\n * @return this byte vector.\n */\n", "method_name": "put11", "codes": ["final ByteVector put11(final int byteValue1,final int byteValue2){\n\n\tint newCount = count+2;\n\tif(newCount>data.length){\n\t\tenlarge(2);\n\t}\n\tdata[count++] = (byte)byteValue1;\n\tdata[count++] = (byte)byteValue2;\n\treturn this;\n}"], "code_level": "class_runnable", "_id": "636766a81a6d9265ec017595", "project_name": "fastjson2-main"}
{"generate_results": [{"generate_code": "@SuppressWarnings(\"unchecked\") public String toString(JSONWriter.Feature... features){\n\n\treturn toString(new JSONWriter(features));\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Serialize to JSON  {@link String}\n * @param features features to be enabled in serialization\n * @return JSON {@link String}\n */\n", "method_name": "toString", "codes": ["@SuppressWarnings(\"unchecked\") public String toString(JSONWriter.Feature... features){\n\n\treturn toString(new JSONWriter(features));\n}"], "code_level": "self_contained", "_id": "636766a81a6d9265ec01757b", "project_name": "fastjson2-main"}
{"generate_results": [{"generate_code": "public static int nextPrime(int desiredCapacity){\n\n\tint i;\n\tif (desiredCapacity < 0) i = -desiredCapacity; // corner case\n\telse i = desiredCapacity;\n\t\n\tif (i < PRIMES.length) return PRIMES[i];\n\t\n\t// Let's calculate primes until desiredCapacity\n\tint[] primes = PRIMES;\n\tint max = primes[primes.length-1];\n\tfor (;max < desiredCapacity; max = primes[primes.length-1]){\n\t\t//System.out.println(\"Generating primes until \" + desiredCapacity);\n\t\t// The new prime will be the next odd number after the last prime.\n\t\tint candidate = max + 2;\n\t\twhile (!isPrime(candidate)) candidate += 2;\n\t\t//System.out.println(\"Found prime: \" + candidate);\n\t\tint[] newPrimes = new int[primes.length+1];\n\t\tSystem.arraycopy(primes, 0, newPrimes, 0, primes.length);\n\t\tnewPrimes[primes.length", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Returns a prime number which is <code>&gt;= desiredCapacity</code> and very close to <code>desiredCapacity</code> (within 11% if <code>desiredCapacity &gt;= 1000</code>).\n * @param desiredCapacity the capacity desired by the user.\n * @return the capacity which should be used for a hashtable.\n */\n", "method_name": "nextPrime", "codes": ["public static int nextPrime(int desiredCapacity){\n\n\tint i;\n\tif (desiredCapacity < 0) i = -desiredCapacity; // corner case\n\telse i = desiredCapacity;\n\t\n\tif (i < PRIMES.length) return PRIMES[i];\n\t\n\t// Let's calculate primes until desiredCapacity\n\tint[] primes = PRIMES;\n\tint max = primes[primes.length-1];\n\tfor (;max < desiredCapacity; max = primes[primes.length-1]){\n\t\t//System.out.println(\"Generating primes until \" + desiredCapacity);\n\t\t// The new prime will be the next odd number after the last prime.\n\t\tint candidate = max + 2;\n\t\twhile (!isPrime(candidate)) candidate += 2;\n\t\t//System.out.println(\"Found prime: \" + candidate);\n\t\tint[] newPrimes = new int[primes.length+1];\n\t\tSystem.arraycopy(primes, 0, newPrimes, 0, primes.length);\n\t\tnewPrimes[primes.length"], "code_level": "slib_runnable", "_id": "636766a81a6d9265ec01758e", "project_name": "fastjson2-main"}
{"generate_results": [{"generate_code": "private static int digitValue(final char c){\n\n\tif (c>='0' && c<='9') return c-'0';\n\tif (c>='A' && c<='Z') return c-'A'+10;\n\tif (c>='a' && c<='z') return c-'a'+10;\n\treturn -1;\n}", "errormessage": "exec error!", "error_detail_message": "exec error!", "is_pass": false}], "docstring": "/** \n * Interpret a character as a digit (in any base up to 36) and return the numeric value. This is like {@code Character.digit()} but we don't accept non-ASCII digits.\n */\n", "method_name": "digitValue", "codes": ["private static int digitValue(final char c){\n\n\tif (c>='0' && c<='9') return c-'0';\n\tif (c>='A' && c<='Z') return c-'A'+10;\n\tif (c>='a' && c<='z') return c-'a'+10;\n\treturn -1;\n}"], "code_level": "self_contained", "_id": "636767a61a6d9265ec0185b7", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "private static boolean isHex(final char c){\n\n\treturn (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Is this a hex digit?\n */\n", "method_name": "isHex", "codes": ["private static boolean isHex(final char c){\n\n\treturn (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');\n}"], "code_level": "self_contained", "_id": "636767ab1a6d9265ec018676", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n\n    int size = writeTo(buffer,message,schema);\n    int offset = buffer.offset;\n    if (offset > 0) {\n        out.write(buffer.buffer,0,offset);\n    }\n    return size;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Serializes the  {@code message}, prefixed with its length, into an  {@link OutputStream}.\n * @return the size of the message\n */\n", "method_name": "writeDelimitedTo", "codes": ["public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n\n    int size = writeTo(buffer,message,schema);\n    int offset = buffer.offset;\n    if (offset > 0) {\n        out.write(buffer.buffer,0,offset);\n    }\n    return size;\n}"], "code_level": "project_runnable", "_id": "636767a41a6d9265ec018582", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "public boolean equals(final byte[] data,int offset,final int len){\n\n\tif(len!=this.len)return false;\n\tfor(int i=0;i<len;i++){\n\t\tif(array[i]!=data[i+offset]){return false;}\n\t}\n\treturn true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Returns true if the contents of the internal array and the provided array match.\n */\n", "method_name": "equals", "codes": ["public boolean equals(final byte[] data,int offset,final int len){\n\n\tif(len!=this.len)return false;\n\tfor(int i=0;i<len;i++){\n\t\tif(array[i]!=data[i+offset]){return false;}\n\t}\n\treturn true;\n}"], "code_level": "class_runnable", "_id": "636767a51a6d9265ec01859d", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "public static int computeUTF8Size(final CharSequence str,final int index,final int len){\n\n\tint size=0;\n\tfor(int i=0;i<len;i++){\n\t\tfinal char c=str.charAt(index+i);\n\t\tif(c<0x80){\n\t\t\tsize++;\n\t\t}else if(c<0x800){\n\t\t\tsize+=2;\n\t\t}else if(c<0xD800){\n\t\t\tsize+=3;\n\t\t}else if(c<0xE000){\n\t\t\tif(i+1<len){\n\t\t\t\tfinal char c2=str.charAt(index+i+1);\n\t\t\t\tif(c2>=0xDC00&&c2<0xE000){\n\t\t\t\t\tsize+=4;\n\t\t\t\t\ti++;\n\t\t\t\t}else{\n\t\t\t\t\tsize+=3;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tsize+=3;\n\t\t\t}\n\t\t}else{\n\t\t\tsize+=3;\n\t\t}\n\t}\n\t", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Computes the size of the utf8 string beginning at the specified  {@code index} with the specified {@code length}.\n */\n", "method_name": "computeUTF8Size", "codes": ["public static int computeUTF8Size(final CharSequence str,final int index,final int len){\n\n\tint size=0;\n\tfor(int i=0;i<len;i++){\n\t\tfinal char c=str.charAt(index+i);\n\t\tif(c<0x80){\n\t\t\tsize++;\n\t\t}else if(c<0x800){\n\t\t\tsize+=2;\n\t\t}else if(c<0xD800){\n\t\t\tsize+=3;\n\t\t}else if(c<0xE000){\n\t\t\tif(i+1<len){\n\t\t\t\tfinal char c2=str.charAt(index+i+1);\n\t\t\t\tif(c2>=0xDC00&&c2<0xE000){\n\t\t\t\t\tsize+=4;\n\t\t\t\t\ti++;\n\t\t\t\t}else{\n\t\t\t\t\tsize+=3;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tsize+=3;\n\t\t\t}\n\t\t}else{\n\t\t\tsize+=3;\n\t\t}\n\t}\n\t"], "code_level": "self_contained", "_id": "636767a41a6d9265ec01856c", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "public static LinkedBuffer writeUTF8(final CharSequence str,final WriteSession session,final LinkedBuffer lb){\n\n\tfinal int len=str.length();\n\tfinal byte[] buf=session.buf;\n\tint pos=lb.offset;\n\tfinal int end=pos+len;\n\tif(end>buf.length){\n\t\tlb.offset=pos;\n\t\treturn writeUTF8(str,session,lb.nextBuffer(session));\n\t}\n\tfor(int i=0;i<len;i++){\n\t\tfinal char c=str.charAt(i);\n\t\tif(c<0x80){\n\t\t\tbuf[pos++]=(byte)c;\n\t\t}else if(c<0x800){\n\t\t\tbuf[pos++]=(byte)(0xc0|(c>>6));\n\t\t\tbuf[pos++]=(byte)(0x80|(c&0x3f));\n\t\t}else if(c<0xd800||c>0xdfff){\n\t\t\tbuf[pos++]=(byte)(0xe0|(c>>12));\n\t\t\tbuf[pos++]=(byte)(0x80|((c>>6)&", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Writes the utf8-encoded bytes from the string into the  {@link LinkedBuffer}.\n */\n", "method_name": "writeUTF8", "codes": ["public static LinkedBuffer writeUTF8(final CharSequence str,final WriteSession session,final LinkedBuffer lb){\n\n\tfinal int len=str.length();\n\tfinal byte[] buf=session.buf;\n\tint pos=lb.offset;\n\tfinal int end=pos+len;\n\tif(end>buf.length){\n\t\tlb.offset=pos;\n\t\treturn writeUTF8(str,session,lb.nextBuffer(session));\n\t}\n\tfor(int i=0;i<len;i++){\n\t\tfinal char c=str.charAt(i);\n\t\tif(c<0x80){\n\t\t\tbuf[pos++]=(byte)c;\n\t\t}else if(c<0x800){\n\t\t\tbuf[pos++]=(byte)(0xc0|(c>>6));\n\t\t\tbuf[pos++]=(byte)(0x80|(c&0x3f));\n\t\t}else if(c<0xd800||c>0xdfff){\n\t\t\tbuf[pos++]=(byte)(0xe0|(c>>12));\n\t\t\tbuf[pos++]=(byte)(0x80|((c>>6)&"], "code_level": "project_runnable", "_id": "636767ab1a6d9265ec01867b", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "public long readRawVarint64() throws IOException {\n\n    int shift = 0;\n    long result = 0;\n    while (shift < 64) {\n        byte b = readRawByte();\n        result |= (long)(b & 0x7F) << shift;\n        if ((b & 0x80) == 0) {\n            return result;\n        }\n        shift += 7;\n    }\n    throw InvalidProtocolBufferException.malformedVarint();\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Read a raw Varint from the stream.\n */\n", "method_name": "readRawVarint64", "codes": ["public long readRawVarint64() throws IOException {\n\n    int shift = 0;\n    long result = 0;\n    while (shift < 64) {\n        byte b = readRawByte();\n        result |= (long)(b & 0x7F) << shift;\n        if ((b & 0x80) == 0) {\n            return result;\n        }\n        shift += 7;\n    }\n    throw InvalidProtocolBufferException.malformedVarint();\n}"], "code_level": "class_runnable", "_id": "636767a41a6d9265ec018572", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "public static int writeTo(final DataOutput out,LinkedBuffer node) throws IOException {\n\n\tint size = 0;\n\twhile (node != null) {\n\t\tout.write(node.buffer, 0, node.offset);\n\t\tsize += node.offset;\n\t\tnode = node.next;\n\t}\n\treturn size;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Writes the contents of the  {@link LinkedBuffer} into the {@link DataOutput}.\n * @return the total content size of the buffer.\n */\n", "method_name": "writeTo", "codes": ["public static int writeTo(final DataOutput out,LinkedBuffer node) throws IOException {\n\n\tint size = 0;\n\twhile (node != null) {\n\t\tout.write(node.buffer, 0, node.offset);\n\t\tsize += node.offset;\n\t\tnode = node.next;\n\t}\n\treturn size;\n}"], "code_level": "class_runnable", "_id": "636767aa1a6d9265ec01865a", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "@Override public String readString() throws IOException {\n\n  return readString(null);\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Read a  {@code string} field value from the stream.\n */\n", "method_name": "readString", "codes": ["@Override public String readString() throws IOException {\n\n  return readString(null);\n}"], "code_level": "project_runnable", "_id": "636767a31a6d9265ec018552", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "public final byte[] toByteArray(){\n\n\tint size = 0;\n\tfor(int i=0; i<buffers.size(); i++){\n\t\tsize += ((byte[])buffers.get(i)).length;\n\t}\n\tbyte[] bytes = new byte[size];\n\tint pos = 0;\n\tfor(int i=0; i<buffers.size(); i++){\n\t\tbyte[] b = (byte[])buffers.get(i);\n\t\tSystem.arraycopy(b, 0, bytes, pos, b.length);\n\t\tpos += b.length;\n\t}\n\treturn bytes;\n}", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Returns a single byte array containg all the contents written to the buffer(s).\n */\n", "method_name": "toByteArray", "codes": ["public final byte[] toByteArray(){\n\n\tint size = 0;\n\tfor(int i=0; i<buffers.size(); i++){\n\t\tsize += ((byte[])buffers.get(i)).length;\n\t}\n\tbyte[] bytes = new byte[size];\n\tint pos = 0;\n\tfor(int i=0; i<buffers.size(); i++){\n\t\tbyte[] b = (byte[])buffers.get(i);\n\t\tSystem.arraycopy(b, 0, bytes, pos, b.length);\n\t\tpos += b.length;\n\t}\n\treturn bytes;\n}"], "code_level": "project_runnable", "_id": "636767a21a6d9265ec018517", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "private static int compareSigned(long a,long b){\n\n\treturn (a<b)?-1:(a>b)?1:0;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Compares the two specified  {@code long} values. The sign of the value returned is the same as that of{@code ((Long) a).compareTo(b)}. <p> <b>Note for Java 7 and later:</b> this method should be treated as deprecated; use the equivalent {@link Long#compare} method instead.\n * @param a the first  {@code long} to compare\n * @param b the second  {@code long} to compare\n * @return a negative value if {@code a} is less than {@code b}; a positive value if  {@code a} is greater than{@code b}; or zero if they are equal\n */\n", "method_name": "compareSigned", "codes": ["private static int compareSigned(long a,long b){\n\n\treturn (a<b)?-1:(a>b)?1:0;\n}"], "code_level": "self_contained", "_id": "636767a41a6d9265ec01857e", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "public byte[] toByteArray(){\n\n\tbyte[] result = new byte[size];\n\tSystem.arraycopy(buffer,0,result,0,size);\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Copies bytes to a  {@code byte[]}.\n */\n", "method_name": "toByteArray", "codes": ["public byte[] toByteArray(){\n\n\tbyte[] result = new byte[size];\n\tSystem.arraycopy(buffer,0,result,0,size);\n\treturn result;\n}"], "code_level": "self_contained", "_id": "636767aa1a6d9265ec01864a", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "private void checkIfPackedField() throws IOException {\n\n    if (isPackedField()) {\n        // packed fields are length-delimited, so we need to read the length\n        int length = readRawVarint32();\n        if (length < 0) {\n            throw InvalidProtocolBufferException.negativeSize();\n        }\n        if (length > (bufferSize - bufferPos)) {\n            // The length of the packed-encoded field is larger than the buffer.\n            // Instead of copying the packed field multiple times into a single\n            // buffer (costly), we simply adjust the limits.\n            recomputeBufferSizeAfterLimit();\n            if (length > (bufferSize - bufferPos)) {\n                throw InvalidProtocolBufferException.truncatedMessage();\n            }\n        }\n        // We can set the limit of the CodedInputStream to any value without\n        // affecting the bufferPos.\n        pushLimit(bufferPos + length);\n        // Packed fields are not nested.\n        lastTag = 0;\n    }\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Check if this field have been packed into a length-delimited field. If so, update internal state to reflect that packed fields are being read.\n * @throws IOException\n */\n", "method_name": "checkIfPackedField", "codes": ["private void checkIfPackedField() throws IOException {\n\n    if (isPackedField()) {\n        // packed fields are length-delimited, so we need to read the length\n        int length = readRawVarint32();\n        if (length < 0) {\n            throw InvalidProtocolBufferException.negativeSize();\n        }\n        if (length > (bufferSize - bufferPos)) {\n            // The length of the packed-encoded field is larger than the buffer.\n            // Instead of copying the packed field multiple times into a single\n            // buffer (costly), we simply adjust the limits.\n            recomputeBufferSizeAfterLimit();\n            if (length > (bufferSize - bufferPos)) {\n                throw InvalidProtocolBufferException.truncatedMessage();\n            }\n        }\n        // We can set the limit of the CodedInputStream to any value without\n        // affecting the bufferPos.\n        pushLimit(bufferPos + length);\n        // Packed fields are not nested.\n        lastTag = 0;\n    }\n}"], "code_level": "class_runnable", "_id": "636767a31a6d9265ec01854f", "project_name": "protostuff-master"}
{"generate_results": [{"generate_code": "public int readTag() throws IOException {\n\n    if (isAtEnd()) {\n        lastTag = 0;\n        return 0;\n    }\n    lastTag = readRawVarint32();\n    if (WireFormat.getTagFieldNumber(lastTag) == 0) {\n        // If we actually read zero (or any tag number corresponding to field\n        // number zero), that's not a valid tag.\n        throw InvalidProtocolBufferException.invalidTag();\n    }\n    return lastTag;\n}", "errormessage": "compile error", "error_detail_message": "null", "is_pass": false}], "docstring": "/** \n * Attempt to read a field tag, returning zero if we have reached EOF. Protocol message parsers use this to read tags, since a protocol message may legally end wherever a tag occurs, and zero is not a valid tag number.\n */\n", "method_name": "readTag", "codes": ["public int readTag() throws IOException {\n\n    if (isAtEnd()) {\n        lastTag = 0;\n        return 0;\n    }\n    lastTag = readRawVarint32();\n    if (WireFormat.getTagFieldNumber(lastTag) == 0) {\n        // If we actually read zero (or any tag number corresponding to field\n        // number zero), that's not a valid tag.\n        throw InvalidProtocolBufferException.invalidTag();\n    }\n    return lastTag;\n}"], "code_level": "class_runnable", "_id": "636767a81a6d9265ec0185fc", "project_name": "protostuff-master"}
